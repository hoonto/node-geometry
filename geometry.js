// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
  Module.test;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (typeof module === "object") {
  module.exports = Module;
}
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 18144;
var _stdout;
var _stderr;
var _stdout = _stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,0,0,0,0,0,248,191,0,0,0,0,0,0,224,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,191,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,38,196,125,96,158,160,230,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,38,196,125,96,158,160,230,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,38,196,125,96,158,160,230,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,38,196,125,96,158,160,230,63,0,0,0,0,0,0,224,191,0,0,0,0,0,0,248,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,191,0,0,0,0,0,0,224,191,181,252,192,85,158,160,246,191,0,0,0,0,0,0,224,191,0,0,0,0,0,0,224,191,181,252,192,85,158,160,246,63,0,0,0,0,0,0,224,191,0,0,0,0,0,0,224,63,181,252,192,85,158,160,246,191,0,0,0,0,0,0,224,191,0,0,0,0,0,0,224,63,181,252,192,85,158,160,246,63,0,0,0,0,0,0,224,191,0,0,0,0,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,248,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,191,181,252,192,85,158,160,246,191,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,191,181,252,192,85,158,160,246,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,181,252,192,85,158,160,246,191,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,181,252,192,85,158,160,246,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,38,196,125,96,158,160,230,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,38,196,125,96,158,160,230,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,38,196,125,96,158,160,230,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,38,196,125,96,158,160,230,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,224,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,0,0,17,0,0,0,11,0,0,0,9,0,0,0,15,0,0,0,255,255,255,255,255,255,255,255,14,0,0,0,8,0,0,0,10,0,0,0,16,0,0,0,255,255,255,255,255,255,255,255,22,0,0,0,24,0,0,0,21,0,0,0,18,0,0,0,255,255,255,255,255,255,255,255,12,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,255,255,255,255,255,255,255,255,13,0,0,0,19,0,0,0,23,0,0,0,20,0,0,0,255,255,255,255,255,255,255,255,4,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,255,255,255,255,255,255,255,255,19,0,0,0,13,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,14,0,0,0,15,0,0,0,9,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,20,0,0,0,16,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,18,0,0,0,21,0,0,0,22,0,0,0,18,0,0,0,12,0,0,0,6,0,0,0,11,0,0,0,17,0,0,0,20,0,0,0,23,0,0,0,24,0,0,0,22,0,0,0,17,0,0,0,15,0,0,0,14,0,0,0,16,0,0,0,21,0,0,0,24,0,0,0,23,0,0,0,19,0,0,0,9,0,0,0,11,0,0,0,6,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,10,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,251,171,199,125,43,238,63,0,0,0,0,0,0,0,0,70,93,107,239,83,85,213,191,179,239,138,224,127,43,222,191,16,7,9,81,190,32,234,63,70,93,107,239,83,85,213,191,179,239,138,224,127,43,222,191,16,7,9,81,190,32,234,191,70,93,107,239,83,85,213,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,37,64,251,56,30,92,207,118,23,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,37,64,0,0,0,0,0,0,46,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,52,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,37,64,251,56,30,92,207,118,23,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,37,64,0,0,0,0,0,0,46,64,0,0,0,0,0,0,36,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,52,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,20,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,20,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,8,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,245,112,184,69,79,80,3,64,245,112,184,69,79,80,11,64,0,0,0,0,0,0,8,64,168,119,76,56,79,80,251,63,212,59,38,156,39,168,5,64,0,0,0,0,0,0,16,64,246,86,110,179,194,190,210,63,246,86,110,179,194,190,210,63,0,0,0,0,0,0,16,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,28,64,0,0,0,0,0,0,24,64,0,0,0,0,0,0,34,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,34,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,20,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,17,45,68,84,251,33,9,64,100,115,45,56,82,193,16,64,223,69,190,201,60,189,19,64,113,57,15,181,30,14,21,64,83,190,37,230,188,171,20,64,235,78,239,12,41,230,18,64,198,90,27,8,31,60,16,64,239,158,182,162,88,99,10,64,236,170,117,103,188,102,4,64,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,28,45,68,84,251,33,25,64,40,45,68,84,251,33,41,64,218,69,190,201,60,189,51,64,205,7,83,98,166,81,58,64,118,157,56,89,155,1,63,64,14,101,81,235,99,137,64,64,189,90,27,8,31,60,64,64,208,114,13,183,195,175,61,64,139,21,83,129,107,128,57,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,229,39,213,62,29,240,191,83,33,30,137,151,167,195,63,77,245,100,254,209,55,177,63,243,231,219,130,165,186,238,191,53,190,138,231,199,186,181,63,160,50,254,125,198,133,213,191,49,95,94,128,125,116,238,191,83,33,30,137,151,167,195,191,160,50,254,125,198,133,213,63,99,241,155,194,74,133,235,191,22,133,93,20,61,240,224,63,51,223,193,79,28,64,195,63,219,249,126,106,188,116,235,191,55,169,104,172,253,157,210,191,71,173,48,125,175,33,222,191,25,113,1,104,148,46,235,191,22,133,93,20,61,240,224,191,244,111,151,253,186,211,201,63,110,190,17,221,179,174,233,191,46,113,228,129,200,34,227,191,244,111,151,253,186,211,201,191,14,190,48,153,42,24,233,191,192,149,236,216,8,196,218,63,128,215,103,206,250,20,224,191,160,110,160,192,59,249,231,191,53,190,138,231,199,186,181,191,26,109,85,18,217,7,230,63,126,229,65,122,138,28,231,191,86,239,112,59,52,44,230,63,244,111,151,253,186,211,201,191,210,0,222,2,9,10,229,191,46,113,228,129,200,34,227,63,128,215,103,206,250,20,224,63,101,197,112,117,0,68,227,191,55,169,104,172,253,157,210,63,38,82,154,205,227,176,232,63,5,197,143,49,119,173,226,191,86,239,112,59,52,44,230,191,71,173,48,125,175,33,222,63,223,225,118,104,88,140,226,191,70,93,107,239,83,85,213,191,38,82,154,205,227,176,232,191,139,224,127,43,217,177,224,191,192,149,236,216,8,196,218,191,38,82,154,205,227,176,232,63,17,166,40,151,198,47,224,191,131,249,43,100,174,12,216,63,2,211,105,221,6,181,233,191,93,191,96,55,108,91,223,191,157,187,93,47,77,145,234,191,160,50,254,125,198,133,213,191,244,111,151,253,186,211,217,191,0,0,0,0,0,0,0,0,86,16,3,93,251,2,238,191,15,210,83,228,16,113,216,191,220,45,201,1,187,154,237,63,244,111,151,253,186,211,201,191,147,167,172,166,235,137,214,191,93,81,74,8,86,85,229,191,26,109,85,18,217,7,230,191,183,8,140,245,13,76,212,191,157,187,93,47,77,145,234,63,128,215,103,206,250,20,224,63,138,204,92,224,242,88,209,191,220,45,201,1,187,154,237,191,160,50,254,125,198,133,213,63,84,56,130,84,138,29,205,191,70,93,107,239,83,85,213,63,86,16,3,93,251,2,238,63,13,254,126,49,91,178,204,191,244,25,80,111,70,205,239,191,77,245,100,254,209,55,177,191,218,225,175,201,26,245,198,191,244,25,80,111,70,205,239,63,51,223,193,79,28,64,195,63,110,166,66,60,18,47,197,191,48,71,143,223,219,116,227,63,2,211,105,221,6,181,233,191,236,164,190,44,237,212,194,191,131,249,43,100,174,12,216,191,86,16,3,93,251,2,238,63,89,136,14,129,35,129,186,191,189,223,104,199,13,63,236,63,128,215,103,206,250,20,224,191,16,55,76,217,142,78,170,191,93,81,74,8,86,85,229,63,38,82,154,205,227,176,232,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,116,147,24,4,86,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,116,147,24,4,86,240,191,16,55,76,217,142,78,170,63,93,81,74,8,86,85,229,191,38,82,154,205,227,176,232,191,89,136,14,129,35,129,186,63,189,223,104,199,13,63,236,191,128,215,103,206,250,20,224,63,236,164,190,44,237,212,194,63,131,249,43,100,174,12,216,63,86,16,3,93,251,2,238,191,110,166,66,60,18,47,197,63,48,71,143,223,219,116,227,191,2,211,105,221,6,181,233,63,218,225,175,201,26,245,198,63,244,25,80,111,70,205,239,191,51,223,193,79,28,64,195,191,13,254,126,49,91,178,204,63,244,25,80,111,70,205,239,63,77,245,100,254,209,55,177,63,84,56,130,84,138,29,205,63,70,93,107,239,83,85,213,191,86,16,3,93,251,2,238,191,138,204,92,224,242,88,209,63,220,45,201,1,187,154,237,63,160,50,254,125,198,133,213,191,183,8,140,245,13,76,212,63,157,187,93,47,77,145,234,191,128,215,103,206,250,20,224,191,147,167,172,166,235,137,214,63,93,81,74,8,86,85,229,63,26,109,85,18,217,7,230,63,15,210,83,228,16,113,216,63,220,45,201,1,187,154,237,191,244,111,151,253,186,211,201,63,244,111,151,253,186,211,217,63,0,0,0,0,0,0,0,0,86,16,3,93,251,2,238,63,93,191,96,55,108,91,223,63,157,187,93,47,77,145,234,63,160,50,254,125,198,133,213,63,17,166,40,151,198,47,224,63,131,249,43,100,174,12,216,191,2,211,105,221,6,181,233,63,139,224,127,43,217,177,224,63,192,149,236,216,8,196,218,63,38,82,154,205,227,176,232,191,223,225,118,104,88,140,226,63,70,93,107,239,83,85,213,63,38,82,154,205,227,176,232,63,5,197,143,49,119,173,226,63,86,239,112,59,52,44,230,63,71,173,48,125,175,33,222,191,101,197,112,117,0,68,227,63,55,169,104,172,253,157,210,191,38,82,154,205,227,176,232,191,210,0,222,2,9,10,229,63,46,113,228,129,200,34,227,191,128,215,103,206,250,20,224,191,126,229,65,122,138,28,231,63,86,239,112,59,52,44,230,191,244,111,151,253,186,211,201,63,160,110,160,192,59,249,231,63,53,190,138,231,199,186,181,63,26,109,85,18,217,7,230,191,14,190,48,153,42,24,233,63,192,149,236,216,8,196,218,191,128,215,103,206,250,20,224,63,110,190,17,221,179,174,233,63,46,113,228,129,200,34,227,63,244,111,151,253,186,211,201,63,25,113,1,104,148,46,235,63,22,133,93,20,61,240,224,63,244,111,151,253,186,211,201,191,219,249,126,106,188,116,235,63,55,169,104,172,253,157,210,63,71,173,48,125,175,33,222,63,99,241,155,194,74,133,235,63,22,133,93,20,61,240,224,191,51,223,193,79,28,64,195,191,49,95,94,128,125,116,238,63,83,33,30,137,151,167,195,63,160,50,254,125,198,133,213,191,243,231,219,130,165,186,238,63,53,190,138,231,199,186,181,191,160,50,254,125,198,133,213,63,33,229,39,213,62,29,240,63,83,33,30,137,151,167,195,191,77,245,100,254,209,55,177,191,30,0,0,0,43,0,0,0,47,0,0,0,41,0,0,0,29,0,0,0,23,0,0,0,30,0,0,0,23,0,0,0,12,0,0,0,9,0,0,0,15,0,0,0,27,0,0,0,30,0,0,0,27,0,0,0,35,0,0,0,45,0,0,0,43,0,0,0,255,255,255,255,43,0,0,0,45,0,0,0,53,0,0,0,59,0,0,0,56,0,0,0,47,0,0,0,23,0,0,0,29,0,0,0,21,0,0,0,11,0,0,0,12,0,0,0,255,255,255,255,27,0,0,0,15,0,0,0,13,0,0,0,22,0,0,0,33,0,0,0,35,0,0,0,47,0,0,0,56,0,0,0,54,0,0,0,44,0,0,0,41,0,0,0,255,255,255,255,45,0,0,0,35,0,0,0,33,0,0,0,42,0,0,0,51,0,0,0,53,0,0,0,12,0,0,0,11,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,9,0,0,0,29,0,0,0,41,0,0,0,44,0,0,0,37,0,0,0,25,0,0,0,21,0,0,0,15,0,0,0,9,0,0,0,3,0,0,0,6,0,0,0,13,0,0,0,255,255,255,255,56,0,0,0,59,0,0,0,60,0,0,0,58,0,0,0,55,0,0,0,54,0,0,0,53,0,0,0,51,0,0,0,57,0,0,0,60,0,0,0,59,0,0,0,255,255,255,255,11,0,0,0,21,0,0,0,25,0,0,0,19,0,0,0,10,0,0,0,4,0,0,0,33,0,0,0,22,0,0,0,24,0,0,0,36,0,0,0,42,0,0,0,255,255,255,255,13,0,0,0,6,0,0,0,7,0,0,0,17,0,0,0,24,0,0,0,22,0,0,0,54,0,0,0,55,0,0,0,48,0,0,0,39,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,42,0,0,0,36,0,0,0,40,0,0,0,50,0,0,0,57,0,0,0,4,0,0,0,10,0,0,0,8,0,0,0,2,0,0,0,1,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,25,0,0,0,37,0,0,0,39,0,0,0,28,0,0,0,19,0,0,0,255,255,255,255,55,0,0,0,58,0,0,0,52,0,0,0,46,0,0,0,48,0,0,0,255,255,255,255,60,0,0,0,57,0,0,0,50,0,0,0,49,0,0,0,52,0,0,0,58,0,0,0,10,0,0,0,19,0,0,0,28,0,0,0,26,0,0,0,16,0,0,0,8,0,0,0,36,0,0,0,24,0,0,0,17,0,0,0,20,0,0,0,32,0,0,0,40,0,0,0,7,0,0,0,5,0,0,0,14,0,0,0,20,0,0,0,17,0,0,0,255,255,255,255,48,0,0,0,46,0,0,0,34,0,0,0,26,0,0,0,28,0,0,0,39,0,0,0,50,0,0,0,40,0,0,0,32,0,0,0,38,0,0,0,49,0,0,0,255,255,255,255,8,0,0,0,16,0,0,0,18,0,0,0,14,0,0,0,5,0,0,0,2,0,0,0,46,0,0,0,52,0,0,0,49,0,0,0,38,0,0,0,31,0,0,0,34,0,0,0,16,0,0,0,26,0,0,0,34,0,0,0,31,0,0,0,18,0,0,0,255,255,255,255,32,0,0,0,20,0,0,0,14,0,0,0,18,0,0,0,31,0,0,0,38,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,6,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,7,0,0,0,8,0,0,0,2,0,0,0,8,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,9,0,0,0,3,0,0,0,9,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,10,0,0,0,4,0,0,0,10,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,11,0,0,0,5,0,0,0,11,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,7,0,0,0,9,0,0,0,12,0,0,0,7,0,0,0,12,0,0,0,8,0,0,0,8,0,0,0,12,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,12,0,0,0,10,0,0,0,12,0,0,0,11,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,9,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,10,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,9,0,0,0,5,0,0,0,11,0,0,0,6,0,0,0,10,0,0,0,6,0,0,0,11,0,0,0,7,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,7,0,0,0,12,0,0,0,8,0,0,0,10,0,0,0,8,0,0,0,12,0,0,0,9,0,0,0,11,0,0,0,9,0,0,0,12,0,0,0,10,0,0,0,11,0,0,0,10,0,0,0,12,0,0,0,11,0,0,0,12,0,0,0,2,0,0,0,9,0,0,0,1,0,0,0,13,0,0,0,14,0,0,0,5,0,0,0,10,0,0,0,6,0,0,0,16,0,0,0,15,0,0,0,3,0,0,0,11,0,0,0,4,0,0,0,14,0,0,0,13,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,15,0,0,0,16,0,0,0,3,0,0,0,13,0,0,0,1,0,0,0,17,0,0,0,18,0,0,0,2,0,0,0,14,0,0,0,4,0,0,0,20,0,0,0,19,0,0,0,5,0,0,0,15,0,0,0,7,0,0,0,18,0,0,0,17,0,0,0,8,0,0,0,16,0,0,0,6,0,0,0,19,0,0,0,20,0,0,0,5,0,0,0,17,0,0,0,1,0,0,0,9,0,0,0,10,0,0,0,3,0,0,0,18,0,0,0,7,0,0,0,12,0,0,0,11,0,0,0,2,0,0,0,19,0,0,0,6,0,0,0,10,0,0,0,9,0,0,0,8,0,0,0,20,0,0,0,4,0,0,0,11,0,0,0,12,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,1,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,5,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,8,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,80,76,65,78,69,95,73,77,80,95,80,79,73,78,84,95,78,69,65,82,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,95,50,68,95,50,59,10,0,0,32,32,84,104,101,32,108,105,110,101,32,100,105,114,101,99,116,105,111,110,32,118,101,99,116,111,114,32,105,115,32,110,117,108,108,46,10,0,0,0,32,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,95,50,68,59,10,0,0,0,0,32,32,84,104,101,32,112,108,97,110,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,105,115,32,110,117,108,108,46,10,0,0,0,0,0,32,32,70,111,114,32,97,32,116,114,105,97,110,103,108,101,32,105,110,32,50,68,44,32,116,104,101,32,99,105,114,99,117,109,101,110,116,101,114,32,99,97,110,32,98,101,32,99,111,109,112,117,116,101,100,32,98,121,58,10,0,0,0,0,80,76,65,78,69,95,73,77,80,95,76,73,78,69,95,80,65,82,95,73,78,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,84,69,83,84,50,49,48,49,10,0,0,0,0,0,0,0,32,32,84,119,111,32,112,111,105,110,116,115,32,99,111,105,110,99,105,100,101,44,32,111,114,32,110,101,97,114,108,121,32,115,111,46,10,0,0,0,32,32,84,114,117,101,32,99,101,110,116,101,114,0,0,0,32,32,84,104,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,105,115,32,110,117,108,108,46,10,0,0,0,32,32,73,109,112,117,116,101,100,32,99,101,110,116,101,114,0,0,0,0,0,0,0,0,80,76,65,78,69,95,69,88,80,50,78,79,82,77,65,76,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,84,114,117,101,32,114,97,100,105,117,115,32,61,32,32,32,32,37,102,10,0,0,32,32,84,104,101,32,112,108,97,110,101,32,105,115,32,112,111,111,114,108,121,32,100,101,102,105,110,101,100,46,10,0,32,32,73,110,105,116,105,97,108,32,102,111,114,109,32,111,102,32,101,120,112,108,105,99,105,116,32,115,112,104,101,114,101,58,0,0,0,0,0,0,80,76,65,78,69,95,69,88,80,95,78,79,82,77,65,76,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,67,101,110,116,101,114,32,61,32,40,32,37,102,44,32,37,102,44,32,37,102,32,41,10,0,0,0,0,0,0,32,32,83,80,72,69,82,69,95,69,88,80,50,73,77,80,95,78,68,58,32,101,120,112,108,105,99,105,116,32,115,112,104,101,114,101,32,61,62,32,105,109,112,108,105,99,105,116,32,102,111,114,109,59,10,0,32,32,97,32,112,114,111,112,101,114,32,112,101,114,109,117,116,97,116,105,111,110,46,10,0,0,0,0,0,0,0,0,84,69,83,84,49,56,51,54,10,0,0,0,0,0,0,0,32,32,108,105,110,101,32,116,104,114,111,117,103,104,32,80,50,32,97,110,100,32,80,51,44,10,0,0,0,0,0,0,32,32,84,104,101,32,105,110,112,117,116,32,97,114,114,97,121,32,100,111,101,115,32,110,111,116,32,114,101,112,114,101,115,101,110,116,10,0,0,0,32,32,67,111,109,112,117,116,101,100,32,102,111,114,109,32,111,102,32,101,120,112,108,105,99,105,116,32,115,112,104,101,114,101,58,10,0,0,0,0,32,32,73,110,112,117,116,32,118,97,108,117,101,32,111,102,32,78,32,61,32,37,100,10,0,0,0,0,0,0,0,0,32,32,73,109,112,117,116,101,100,32,99,101,110,116,101,114,58,0,0,0,0,0,0,0,80,69,82,77,95,73,78,86,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,0,32,32,73,109,112,117,116,101,100,32,114,97,100,105,117,115,32,61,32,37,102,10,0,0,32,32,84,104,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,105,115,32,122,101,114,111,46,10,0,0,0,32,32,67,111,109,112,117,116,101,100,32,102,111,114,109,32,111,102,32,105,109,112,108,105,99,105,116,32,115,112,104,101,114,101,58,10,0,0,0,0,80,65,82,65,76,76,69,76,79,71,82,65,77,95,80,79,73,78,84,95,68,73,83,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,80,52,58,0,0,0,32,32,84,104,101,32,105,110,112,117,116,32,100,97,116,97,32,100,111,101,115,32,110,111,116,32,102,111,114,109,32,97,32,112,114,111,112,101,114,32,116,114,105,97,110,103,108,101,46,10,0,0,0,0,0,0,32,32,80,51,58,0,0,0,32,32,84,104,101,32,108,105,110,101,97,114,32,115,121,115,116,101,109,32,105,115,32,115,105,110,103,117,108,97,114,46,10,0,0,0,0,0,0,0,32,32,80,50,58,0,0,0,80,65,82,65,76,76,69,76,79,71,82,65,77,95,67,79,78,84,65,73,78,83,95,80,79,73,78,84,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,37,49,50,102,0,0,32,32,88,32,118,97,108,117,101,115,32,97,114,101,32,101,113,117,97,108,46,10,0,0,32,32,67,101,110,116,101,114,32,61,32,40,32,37,102,44,32,37,102,32,41,10,0,0,32,32,80,49,58,0,0,0,77,73,78,65,66,83,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,73,110,105,116,105,97,108,32,102,111,114,109,32,111,102,32,101,120,112,108,105,99,105,116,32,115,112,104,101,114,101,58,10,0,0,0,0,0,32,32,108,105,110,101,32,116,104,114,111,117,103,104,32,80,49,32,97,110,100,32,80,50,44,32,97,110,100,10,0,0,37,54,100,58,32,37,49,100,10,0,0,0,0,0,0,0,32,32,83,80,72,69,82,69,95,73,77,80,50,69,88,80,95,51,68,58,32,105,109,112,108,105,99,105,116,32,115,112,104,101,114,101,32,61,62,32,101,120,112,108,105,99,105,116,32,102,111,114,109,46,10,0,32,32,76,105,110,101,32,50,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,0,0,32,32,83,80,72,69,82,69,95,69,88,80,50,73,77,80,95,51,68,58,32,101,120,112,108,105,99,105,116,32,115,112,104,101,114,101,32,61,62,32,105,109,112,108,105,99,105,116,32,102,111,114,109,59,10,0,32,32,76,105,110,101,32,49,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,0,0,84,69,83,84,49,56,51,53,10,0,0,0,0,0,0,0,76,73,78,69,83,95,73,77,80,95,68,73,83,84,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,32,32,83,117,109,32,111,102,32,84,82,73,65,78,71,76,69,95,65,82,69,65,95,51,68,58,32,37,102,10,0,0,76,73,78,69,83,95,69,88,80,95,65,78,71,76,69,95,78,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,32,32,81,85,65,68,95,65,82,69,65,95,51,68,32,97,114,101,97,32,105,115,32,32,32,32,32,37,102,10,0,0,32,32,79,110,101,32,111,102,32,116,104,101,32,108,105,110,101,115,32,105,115,32,100,101,103,101,110,101,114,97,116,101,33,10,0,0,0,0,0,0,32,32,81,85,65,68,95,65,82,69,65,95,51,68,32,102,105,110,100,115,32,116,104,101,32,97,114,101,97,46,10,0,76,73,78,69,83,95,69,88,80,95,65,78,71,76,69,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,32,32,70,111,114,32,97,32,113,117,97,100,114,105,108,97,116,101,114,97,108,32,105,110,32,51,68,58,10,0,0,0,76,73,78,69,95,73,77,80,50,80,65,82,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,84,69,83,84,49,55,49,50,10,0,0,0,0,0,0,0,32,32,84,104,101,32,108,105,110,101,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,32,32,82,97,100,105,117,115,32,61,32,37,102,10,0,0,32,32,81,85,65,68,95,65,82,69,65,50,95,50,68,32,97,114,101,97,32,105,115,32,37,102,10,0,0,0,0,0,76,73,78,69,95,73,77,80,50,69,88,80,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,81,85,65,68,95,65,82,69,65,95,50,68,32,97,114,101,97,32,105,115,32,32,37,102,10,0,0,0,0,0,32,32,67,111,109,112,117,116,101,32,80,52,32,97,110,100,32,80,53,44,32,110,111,114,109,97,108,32,116,111,10,0,76,73,78,69,95,73,77,80,95,80,79,73,78,84,95,68,73,83,84,95,83,73,71,78,69,68,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,84,104,101,32,118,101,114,116,105,99,101,115,58,0,32,32,65,32,42,32,65,32,43,32,66,32,42,32,66,32,61,32,48,46,10,0,0,0,32,32,81,85,65,68,95,65,82,69,65,50,95,50,68,32,102,105,110,100,115,32,116,104,101,32,97,114,101,97,59,10,0,0,0,0,0,0,0,0,76,73,78,69,95,73,77,80,95,80,79,73,78,84,95,68,73,83,84,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,81,85,65,68,95,65,82,69,65,95,50,68,32,102,105,110,100,115,32,116,104,101,32,97,114,101,97,59,10,0,32,32,80,50,32,61,32,37,102,44,32,37,102,10,0,0,32,32,70,111,114,32,97,32,113,117,97,100,114,105,108,97,116,101,114,97,108,32,105,110,32,50,68,58,10,0,0,0,32,32,80,49,32,61,32,37,102,44,32,37,102,10,0,0,84,69,83,84,49,55,49,10,0,0,0,0,0,0,0,0,32,32,80,49,32,61,32,80,50,10,0,0,0,0,0,0,32,32,37,52,100,0,0,0,76,73,78,69,95,69,88,80,50,73,77,80,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,78,117,109,98,101,114,32,111,102,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,32,61,32,37,100,10,0,0,0,76,73,78,69,95,69,88,80,95,80,79,73,78,84,95,78,69,65,82,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,80,111,105,110,116,32,111,110,32,112,108,97,110,101,58,10,0,0,0,0,0,0,32,32,84,104,101,32,112,111,105,110,116,115,32,80,49,32,97,110,100,32,80,50,32,97,114,101,32,105,100,101,110,116,105,99,97,108,46,10,0,0,37,115,10,0,0,0,0,0,32,32,37,102,0,0,0,0,76,73,78,69,95,69,88,80,95,80,79,73,78,84,95,78,69,65,82,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,80,108,97,110,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,110,117,109,98,101,114,32,37,100,10,0,0,0,0,0,0,0,0,32,32,65,78,71,76,69,95,66,79,88,95,50,68,10,0,73,52,86,69,67,95,85,78,73,70,79,82,77,95,78,69,87,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,32,32,116,104,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,111,102,32,97,32,112,108,97,110,101,32,97,110,100,32,116,101,116,114,97,104,101,100,114,111,110,46,10,0,32,32,37,54,100,58,32,37,56,100,10,0,0,0,0,0,32,32,80,76,65,78,69,95,78,79,82,77,65,76,95,84,69,84,82,65,72,69,68,82,79,78,95,73,78,84,69,82,83,69,67,84,32,100,101,116,101,114,109,105,110,101,115,10,0,0,0,0,0,0,0,0,32,32,73,82,79,87,50,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,10,0,0,0,0,0,0,0,84,69,83,84,48,54,49,55,10,0,0,0,0,0,0,0,32,32,73,82,79,87,49,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,10,0,0,0,0,0,0,0,32,32,77,97,120,105,109,117,109,32,100,105,102,102,101,114,101,110,99,101,32,119,97,115,32,37,102,10,0,0,0,0,73,52,82,79,87,95,83,87,65,80,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,32,32,80,76,65,78,69,95,78,79,82,77,65,76,95,88,89,90,95,84,79,95,81,82,32,99,111,110,118,101,114,116,115,32,88,89,90,32,116,111,32,81,82,32,99,111,111,114,100,105,110,97,116,101,115,46,10,0,0,0,0,0,0,0,32,32,82,111,119,32,105,110,100,101,120,32,74,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,10,0,0,0,0,0,0,0,0,32,32,80,76,65,78,69,95,78,79,82,77,65,76,95,81,82,95,84,79,95,88,89,90,32,99,111,110,118,101,114,116,115,32,81,82,32,116,111,32,88,89,90,32,99,111,111,114,100,105,110,97,116,101,115,59,10,0,0,0,0,0,0,0,32,32,74,32,61,32,37,100,10,0,0,0,0,0,0,0,32,32,97,110,100,32,105,110,45,112,108,97,110,101,32,98,97,115,105,115,32,118,101,99,116,111,114,115,32,80,81,32,97,110,100,32,80,82,44,10,0,0,0,0,0,0,0,0,32,32,82,111,119,32,105,110,100,101,120,32,74,32,105,115,32,108,101,115,115,32,116,104,97,110,32,49,46,10,0,0,32,32,70,111,114,32,97,32,110,111,114,109,97,108,32,112,108,97,110,101,44,32,119,105,116,104,32,112,111,105,110,116,32,80,80,32,97,110,100,32,78,79,82,77,65,76,32,118,101,99,116,111,114,44,10,0,32,32,77,97,120,105,109,117,109,32,108,101,103,97,108,32,118,97,108,117,101,32,105,115,32,77,32,61,32,37,100,10,0,0,0,0,0,0,0,0,32,32,78,111,32,105,110,116,101,114,115,101,99,116,105,111,110,32,99,111,117,108,100,32,98,101,32,102,111,117,110,100,46,10,0,0,0,0,0,0,84,69,83,84,48,54,49,54,10,0,0,0,0,0,0,0,32,32,82,111,119,32,105,110,100,101,120,32,73,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,10,0,0,0,0,0,0,0,0,32,32,112,97,114,97,108,108,101,108,111,103,114,97,109,32,105,110,32,51,68,46,10,0,84,69,83,84,48,48,48,53,10,0,0,0,0,0,0,0,32,32,73,32,61,32,37,100,10,0,0,0,0,0,0,0,32,32,80,65,82,65,76,76,69,76,79,71,82,65,77,95,65,82,69,65,95,51,68,32,102,105,110,100,115,32,116,104,101,32,97,114,101,97,32,111,102,32,97,10,0,0,0,0,32,32,82,111,119,32,105,110,100,101,120,32,73,32,105,115,32,108,101,115,115,32,116,104,97,110,32,49,46,10,0,0,84,69,83,84,48,52,55,56,10,0,0,0,0,0,0,0,73,52,82,79,87,95,67,79,77,80,65,82,69,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,65,82,69,65,32,61,32,37,102,10,0,0,0,0,37,53,100,58,32,0,0,0,32,32,86,101,114,116,105,99,101,115,58,0,0,0,0,0,32,32,67,111,108,10,0,0,32,32,112,97,114,97,108,108,101,108,111,103,114,97,109,32,105,110,32,50,68,46,10,0,37,54,100,32,32,0,0,0,32,32,80,65,82,65,76,76,69,76,79,71,82,65,77,95,65,82,69,65,95,50,68,32,102,105,110,100,115,32,116,104,101,32,97,114,101,97,32,111,102,32,97,10,0,0,0,0,32,32,82,111,119,58,32,0,84,69,83,84,48,52,55,55,10,0,0,0,0,0,0,0,37,53,100,0,0,0,0,0,32,32,90,40,116,41,32,61,32,37,103,32,43,32,37,103,32,42,32,116,10,0,0,0,32,32,82,111,119,10,0,0,66,79,88,95,82,65,89,95,73,78,84,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,102,114,111,109,32,97,32,112,97,114,97,109,101,116,114,105,99,32,108,105,110,101,32,116,111,32,97,32,112,111,105,110,116,32,105,110,32,51,68,46,10,0,0,0,0,0,32,32,37,54,100,0,0,0,32,32,76,73,78,69,95,80,65,82,95,80,79,73,78,84,95,68,73,83,84,95,51,68,32,102,105,110,100,115,32,116,104,101,32,100,105,115,116,97,110,99,101,10,0,0,0,0,32,32,78,111,114,109,97,108].concat([32,101,110,100,32,111,102,32,101,120,101,99,117,116,105,111,110,46,10,0,0,0,0,0,32,32,67,111,108,58,0,0,84,69,83,84,48,51,53,50,10,0,0,0,0,0,0,0,32,32,73,67,79,76,50,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,10,0,0,0,0,0,0,0,32,32,68,105,115,116,97,110,99,101,32,114,101,99,111,109,112,117,116,101,100,32,61,32,37,103,10,0,0,0,0,0,32,32,73,67,79,76,49,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,10,0,0,0,0,0,0,0,32,32,78,101,97,114,101,115,116,32,112,111,105,110,116,32,80,78,58,0,0,0,0,0,73,52,67,79,76,95,83,87,65,80,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,32,32,68,105,115,116,97,110,99,101,32,61,32,37,103,10,0,0,0,0,0,0,0,0,32,32,78,32,61,32,37,100,32,105,115,32,108,101,115,115,32,116,104,97,110,32,99,111,108,117,109,110,32,105,110,100,101,120,32,74,32,61,32,37,100,46,10,0,0,0,0,0,32,32,84,104,101,32,112,111,105,110,116,32,80,58,0,0,32,32,67,111,108,117,109,110,32,105,110,100,101,120,32,74,32,61,32,37,100,32,105,115,32,108,101,115,115,32,116,104,97,110,32,49,46,10,0,0,32,32,89,40,116,41,32,61,32,37,103,32,43,32,37,103,32,42,32,116,10,0,0,0,32,32,78,32,61,32,37,100,32,105,115,32,108,101,115,115,32,116,104,97,110,32,99,111,108,117,109,110,32,105,110,100,101,120,32,73,32,61,32,37,100,46,10,0,0,0,0,0,32,32,88,40,116,41,32,61,32,37,103,32,43,32,37,103,32,42,32,116,10,0,0,0,32,32,67,111,108,117,109,110,32,105,110,100,101,120,32,73,32,61,32,37,100,32,105,115,32,108,101,115,115,32,116,104,97,110,32,49,46,10,0,0,32,32,80,97,114,97,109,101,116,114,105,99,32,108,105,110,101,58,10,0,0,0,0,0,73,52,67,79,76,95,67,79,77,80,65,82,69,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,80,49,58,0,0,0,32,32,97,32,112,97,114,97,109,101,116,114,105,99,32,108,105,110,101,32,40,88,48,44,89,48,44,70,44,71,41,32,110,101,97,114,101,115,116,32,97,32,112,111,105,110,116,32,80,32,105,110,32,50,68,46,10,0,0,0,0,0,0,0,32,32,73,110,112,117,116,32,118,97,108,117,101,32,111,102,32,83,69,69,68,32,61,32,48,46,10,0,0,0,0,0,32,32,76,73,78,69,95,80,65,82,95,80,79,73,78,84,95,78,69,65,82,95,50,68,32,102,105,110,100,115,32,116,104,101,32,112,111,105,110,116,32,111,110,10,0,0,0,0,32,32,84,101,115,116,32,116,104,101,32,71,69,79,77,69,84,82,89,32,108,105,98,114,97,114,121,46,10,0,0,0,73,52,95,85,78,73,70,79,82,77,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,84,69,83,84,48,51,53,49,10,0,0,0,0,0,0,0,32,32,73,52,95,77,79,68,80,32,40,32,73,44,32,74,32,41,32,99,97,108,108,101,100,32,119,105,116,104,32,74,32,61,32,37,100,10,0,0,32,32,37,56,46,51,102,32,32,37,56,46,51,102,32,32,37,56,46,51,102,32,32,37,56,46,51,102,32,32,37,56,46,51,102,32,32,37,56,46,51,102,10,0,0,0,0,0,73,52,95,77,79,68,80,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,84,104,101,32,73,83,72,79,87,32,100,97,116,97,32,105,115,32,79,75,44,32,104,111,119,101,118,101,114,46,10,0,0,0,0,0,0,0,32,32,68,111,32,110,111,116,32,116,114,121,32,116,111,32,117,115,101,32,116,104,101,32,76,73,83,84,32,97,114,114,97,121,33,10,0,0,0,0,32,32,88,32,32,89,32,32,84,104,101,116,97,32,32,65,84,65,78,50,40,121,44,32,120,41,44,32,65,78,71,76,69,95,82,65,68,95,78,68,44,32,65,78,71,76,69,95,68,69,71,95,50,68,10,0,32,32,76,73,83,84,95,77,65,88,32,119,97,115,32,116,111,111,32,115,109,97,108,108,32,116,111,32,108,105,115,116,32,116,104,101,32,114,101,103,105,111,110,115,46,10,0,0,86,79,88,69,76,83,95,82,69,71,73,79,78,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,32,32,84,104,101,32,97,108,103,111,114,105,116,104,109,32,104,97,115,32,102,97,105,108,101,100,46,10,0,0,0,0,32,32,84,104,101,32,105,110,116,101,114,110,97,108,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,101,100,46,10,0,0,0,0,0,0,0,86,79,88,69,76,83,95,82,69,71,73,79,78,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,73,108,108,101,103,97,108,32,118,97,108,117,101,32,111,102,32,82,65,78,75,32,61,32,37,100,10,0,0,0,84,85,80,76,69,95,78,69,88,84,50,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,80,91,49,44,74,93,32,61,32,37,102,10,0,0,32,32,70,32,61,32,37,102,10,0,0,0,0,0,0,0,32,32,80,91,48,44,74,93,32,61,32,37,102,10,0,0,32,32,80,91,49,58,50,44,74,93,32,61,32,80,91,49,58,50,44,74,43,49,93,32,102,111,114,32,74,32,61,32,37,100,10,0,0,0,0,0,32,32,65,78,71,76,69,95,82,65,68,95,78,68,32,99,111,109,112,117,116,101,115,32,97,110,32,97,110,103,108,101,46,10,0,0,0,0,0,0,32,32,78,32,109,117,115,116,32,98,101,32,97,116,32,108,101,97,115,116,32,51,10,0,84,85,66,69,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,84,82,73,65,78,71,76,69,95,76,73,78,69,95,80,65,82,95,73,78,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,0,32,32,84,104,101,32,116,114,105,97,110,103,108,101,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,32,32,84,104,101,32,101,120,112,108,105,99,105,116,32,108,105,110,101,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,84,82,73,65,78,71,76,69,95,67,79,78,84,65,73,78,83,95,76,73,78,69,95,69,88,80,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,84,82,73,65,78,71,76,69,95,66,65,82,89,67,69,78,84,82,73,67,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,76,101,103,97,108,32,99,104,111,105,99,101,115,32,97,114,101,32,88,89,44,32,88,90,44,32,89,88,44,32,89,90,44,32,90,88,44,32,111,114,32,90,89,46,10,0,32,32,84,32,61,32,37,102,10,0,0,0,0,0,0,0,32,32,73,108,108,101,103,97,108,32,115,104,101,97,114,32,97,120,105,115,58,32,37,115,10,0,0,0,0,0,0,0,84,77,65,84,95,83,72,69,65,82,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,32,32,65,78,71,76,69,95,68,69,71,95,50,68,32,99,111,109,112,117,116,101,115,32,97,110,32,97,110,103,108,101,44,10,0,0,0,0,0,0,122,121,0,0,0,0,0,0,90,89,0,0,0,0,0,0,122,120,0,0,0,0,0,0,90,88,0,0,0,0,0,0,121,122,0,0,0,0,0,0,89,90,0,0,0,0,0,0,121,120,0,0,0,0,0,0,89,88,0,0,0,0,0,0,32,32,82,101,97,99,104,101,100,32,105,116,101,114,97,116,105,111,110,32,108,105,109,105,116,46,10,0,0,0,0,0,120,122,0,0,0,0,0,0,88,90,0,0,0,0,0,0,84,69,83,84,48,48,50,10,0,0,0,0,0,0,0,0,120,121,0,0,0,0,0,0,88,89,0,0,0,0,0,0,32,32,76,101,103,97,108,32,99,104,111,105,99,101,115,32,97,114,101,32,39,88,39,44,32,39,89,39,44,32,111,114,32,39,90,39,46,10,0,0,32,32,73,108,108,101,103,97,108,32,114,111,116,97,116,105,111,110,32,97,120,105,115,58,32,37,99,10,0,0,0,0,84,77,65,84,95,82,79,84,95,65,88,73,83,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,37,100,32,37,66,32,37,89,32,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,32,32,84,104,101,32,105,110,112,117,116,32,100,97,116,97,32,100,111,101,115,32,110,111,116,32,102,111,114,109,32,97,32,112,114,111,112,101,114,32,116,101,116,114,97,104,101,100,114,111,110,46,10,0,0,0,84,69,84,82,65,72,69,68,82,79,78,95,66,65,82,89,67,69,78,84,82,73,67,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,69,76,76,73,80,83,69,95,80,79,73,78,84,95,78,69,65,82,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,32,32,80,111,119,101,114,32,78,32,60,32,48,46,10,0,83,73,78,95,80,79,87,69,82,95,73,78,84,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,37,49,50,103,32,32,37,49,50,103,32,32,37,100,10,0,0,0,0,0,0,0,32,32,67,97,110,110,111,116,32,102,105,110,100,32,105,110,116,101,114,115,101,99,116,105,111,110,32,111,102,32,114,97,121,32,97,110,100,32,115,104,97,112,101,46,10,0,0,0,32,32,84,104,101,32,115,104,97,112,101,32,104,97,115,32,114,97,100,105,117,115,32,122,101,114,111,46,10,0,0,0,83,72,65,80,69,95,82,65,89,95,73,78,84,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,0,32,32,37,56,100,32,32,37,56,100,32,32,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,37,56,100,0,0,0,0,0,32,32,32,32,32,73,110,100,101,120,32,32,32,32,32,79,114,100,101,114,32,32,32,32,32,32,32,32,32,73,110,100,105,99,101,115,32,111,102,32,78,111,100,101,115,32,105,110,32,70,97,99,101,10,0,0,32,32,84,104,101,32,109,97,120,105,109,117,109,32,111,114,100,101,114,32,111,102,32,97,110,121,32,102,97,99,101,32,105,115,32,37,100,10,0,0,32,32,116,111,32,110,111,100,101,32,37,100,10,0,0,0,32,32,84,104,101,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,115,32,105,115,32,37,100,10,0,0,0,0,37,49,54,46,56,102,0,0,32,32,32,32,32,32,32,88,32,32,32,32,32,32,32,32,32,32,32,32,89,32,32,32,32,32,32,32,73,110,115,105,100,101,63,10,0,0,0,0,32,32,37,56,100,32,32,0,32,32,32,32,32,73,110,100,101,120,32,32,32,32,32,32,32,32,32,32,88,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,89,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,90,10,0,0,32,32,86,101,114,116,105,99,101,115,58,10,0,0,0,0,32,32,84,104,101,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,115,32,37,100,10,0,32,32,73,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,97,32,112,111,108,121,116,111,112,101,46,10,0,0,0,0,0,0,0,0,83,72,65,80,69,95,80,82,73,78,84,95,51,68,10,0,32,32,77,73,78,81,85,65,68,32,114,101,116,117,114,110,101,100,32,101,114,114,111,114,32,99,111,110,100,105,116,105,111,110,46,10,0,0,0,0,83,69,71,77,69,78,84,83,95,68,73,83,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,0,32,32,78,111,32,101,100,103,101,32,102,114,111,109,32,110,111,100,101,32,37,100,10,0,32,32,73,110,112,117,116,32,112,111,105,110,116,115,32,80,51,32,61,32,80,50,32,61,32,80,51,46,10,0,0,0,82,79,84,65,84,73,79,78,95,77,65,84,50,81,85,65,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,32,32,111,114,32,116,104,101,114,101,32,97,114,101,32,109,117,108,116,105,112,108,101,32,97,120,101,115,32,111,102,32,114,111,116,97,116,105,111,110,46,10,0,0,0,0,0,0,32,32,86,101,114,116,101,120,32,67,0,0,0,0,0,0,32,32,65,32,105,115,32,110,111,116,32,97,32,114,111,116,97,116,105,111,110,32,109,97,116,114,105,120,44,10,0,0,82,79,84,65,84,73,79,78,95,77,65,84,50,65,88,73,83,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,32,32,84,104,101,32,97,120,105,115,32,118,101,99,116,111,114,32,105,115,32,110,117,108,108,46,10,0,0,0,0,0,82,79,84,65,84,73,79,78,95,65,88,73,83,50,81,85,65,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,73,110,105,116,105,97,108,105,122,101,32,82,65,78,68,79,77,32,119,105,116,104,32,97,114,98,105,116,114,97,114,121,32,83,69,69,68,32,61,32,37,108,117,10,0,0,32,32,73,110,105,116,105,97,108,105,122,101,32,82,65,78,68,79,77,32,119,105,116,104,32,117,115,101,114,32,83,69,69,68,32,61,32,37,108,117,10,0,0,0,0,0,0,0,82,65,78,68,79,77,95,73,78,73,84,73,65,76,73,90,69,10,0,0,0,0,0,0,82,56,86,69,67,95,85,78,73,70,79,82,77,95,78,69,87,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,32,32,67,111,117,108,100,32,110,111,116,32,102,105,110,100,32,97,110,32,101,100,103,101,32,117,115,105,110,103,32,110,111,100,101,32,37,100,10,0,37,115,32,32,40,37,49,48,102,44,32,37,49,48,102,44,32,37,49,48,102,41,10,0,40,37,49,48,102,44,32,37,49,48,102,44,32,37,49,48,102,41,10,0,0,0,0,0,32,32,86,101,114,116,101,120,32,66,0,0,0,0,0,0,32,32,67,32,118,101,114,115,105,111,110,10,0,0,0,0,37,115,32,32,40,37,49,48,102,44,32,37,49,48,102,41,10,0,0,0,0,0,0,0,40,37,49,48,102,44,32,37,49,48,102,41,10,0,0,0,32,32,37,56,100,58,32,37,49,52,102,10,0,0,0,0,32,32,67,97,108,108,101,100,32,119,105,116,104,32,68,73,77,95,78,85,77,32,60,32,50,46,10,0,0,0,0,0,82,56,86,69,67,95,65,78,89,95,78,79,82,77,65,76,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,0,82,56,77,65,84,95,85,78,73,70,79,82,77,95,48,49,95,78,69,87,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,82,56,77,65,84,95,85,78,73,70,79,82,77,95,48,49,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,0,82,56,77,65,84,95,85,78,73,70,79,82,77,95,78,69,87,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,68,85,65,76,95,83,72,65,80,69,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,82,111,119,58,0,0,32,32,37,49,52,102,0,0,32,32,86,101,114,116,101,120,32,65,0,0,0,0,0,0,37,53,100,58,0,0,0,0,32,32,37,55,100,32,32,32,32,32,0,0,0,0,0,0,32,32,67,111,108,58,32,32,0,0,0,0,0,0,0,0,32,32,69,120,99,101,101,100,105,110,103,32,114,101,99,117,114,115,105,111,110,32,109,97,120,105,109,117,109,32,111,102,32,37,100,10,0,0,0,0,82,56,50,86,69,67,95,83,79,82,84,95,81,85,73,67,75,95,65,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,37,52,100,32,32,37,49,52,102,32,32,37,49,52,102,10,0,0,0,0,0,0,37,115,0,0,0,0,0,0,32,32,97,110,32,105,108,108,101,103,97,108,32,118,97,108,117,101,32,73,71,69,84,32,61,32,37,100,46,10,0,0,32,32,90,101,114,111,32,112,105,118,111,116,32,111,110,32,115,116,101,112,32,37,100,10,0,0,0,0,0,0,0,0,32,32,69,110,116,114,121,32,73,80,85,84,32,61,32,37,100,32,111,102,32,116,104,101,32,112,101,114,109,117,116,97,116,105,111,110,32,104,97,115,10,0,0,0,0,0,0,0,32,32,84,104,101,32,102,97,117,108,116,121,32,112,101,114,109,117,116,97,116,105,111,110,58,0,0,0,0,0,0,0,32,32,65,78,71,76,69,95,67,79,78,84,65,73,78,83,95,82,65,89,95,50,68,32,115,101,101,115,32,105,102,32,97,32,114,97,121,32,108,105,101,115,32,119,105,116,104,105,110,32,97,110,32,97,110,103,108,101,46,10,0,0,0,0,82,56,50,86,69,67,95,80,69,82,77,85,84,69,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,78,32,60,32,49,46,10,0,0,0,0,0,0,0,82,56,50,86,69,67,95,80,65,82,84,95,81,85,73,67,75,95,65,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,82,56,95,77,79,68,80,32,40,32,88,44,32,89,32,41,32,99,97,108,108,101,100,32,119,105,116,104,32,89,32,61,32,37,102,10,0,0,82,56,95,77,79,68,80,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,32,32,78,32,61,32,37,100,10,0,0,0,0,0,0,0,32,32,84,104,101,32,105,110,112,117,116,32,113,117,97,110,116,105,116,121,32,78,32,105,115,32,110,111,110,112,111,115,105,116,105,118,101,46,10,0,80,79,76,89,76,73,78,69,95,73,78,68,69,88,95,80,79,73,78,84,95,78,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,68,71,69,95,70,65,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,80,79,76,89,71,79,78,95,89,89,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,80,79,76,89,71,79,78,95,88,89,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,84,69,83,84,48,48,49,10,0,0,0,0,0,0,0,0,80,79,76,89,71,79,78,95,88,88,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,80,79,76,89,71,79,78,95,89,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,0,80,79,76,89,71,79,78,95,88,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,0,80,79,76,89,71,79,78,95,83,73,68,69,95,68,65,84,65,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,80,79,76,89,71,79,78,95,79,85,84,82,65,68,95,68,65,84,65,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,98,117,116,32,121,111,117,114,32,105,110,112,117,116,32,118,97,108,117,101,32,119,97,115,32,78,32,61,32,37,100,10,0,0,0,0,0,0,32,32,73,110,112,117,116,32,118,97,108,117,101,32,111,102,32,78,32,109,117,115,116,32,98,101,32,97,116,32,108,101,97,115,116,32,51,44,10,0,80,79,76,89,71,79,78,95,73,78,82,65,68,95,68,65,84,65,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,32,32,73,108,108,101,103,97,108,32,99,111,111,114,100,105,110,97,116,101,32,105,110,100,101,120,32,61,32,37,99,10,0,0,0,0,0,0,0,0,32,32,84,104,101,32,105,110,112,117,116,32,118,97,108,117,101,32,111,102,32,78,32,61,32,37,100,10,0,0,0,0,32,32,84,104,101,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,109,117,115,116,32,98,101,32,97,116,32,108,101,97,115,116,32,51,46,10,0,0,0,32,32,80,53,58,32,32,37,49,52,102,32,32,37,49,52,102,10,0,0,0,0,0,0,80,79,76,89,71,79,78,95,49,95,50,68,32,45,32,87,97,114,110,105,110,103,33,10,0,0,0,0,0,0,0,0,37,37,69,79,70,10,0,0,37,37,84,114,97,105,108,101,114,10,0,0,0,0,0,0,37,37,32,69,110,100,32,111,102,32,112,97,103,101,10,0,114,101,115,116,111,114,101,32,115,104,111,119,112,97,103,101,10,0,0,0,0,0,0,0,110,101,119,112,97,116,104,32,32,37,100,32,32,37,100,32,32,109,111,118,101,116,111,32,40,32,37,100,32,41,32,115,104,111,119,10,0,0,0,0,48,46,50,48,32,105,110,99,104,32,115,99,97,108,101,102,111,110,116,10,0,0,0,0,48,46,48,48,48,32,32,48,46,50,53,48,32,32,48,46,56,53,48,32,32,115,101,116,114,103,98,99,111,108,111,114,10,0,0,0,0,0,0,0,67,79,78,86,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,37,37,32,32,83,101,116,32,116,104,101,32,99,111,108,111,114,32,116,111,32,100,97,114,107,101,114,32,98,108,117,101,58,10,0,0,0,0,0,0,37,37,32,32,76,97,98,101,108,32,116,104,101,32,110,111,100,101,115,58,10,0,0,0,32,32,80,52,58,32,32,37,49,52,102,32,32,37,49,52,102,10,0,0,0,0,0,0,110,101,119,112,97,116,104,32,32,37,100,32,32,37,100,32,32,37,100,32,32,48,32,51,54,48,32,97,114,99,32,99,108,111,115,101,112,97,116,104,32,102,105,108,108,10,0,0,48,46,48,48,48,32,32,48,46,49,53,48,32,32,48,46,55,53,48,32,32,115,101,116,114,103,98,99,111,108,111,114,10,0,0,0,0,0,0,0,37,37,32,32,83,101,116,32,116,104,101,32,99,111,108,111,114,32,116,111,32,98,108,117,101,58,10,0,0,0,0,0,37,37,32,32,68,114,97,119,32,102,105,108,108,101,100,32,100,111,116,115,32,97,116,32,101,97,99,104,32,110,111,100,101,58,10,0,0,0,0,0,99,108,105,112,32,110,101,119,112,97,116,104,10,0,0,0,37,37,32,68,101,102,105,110,101,32,97,32,99,108,105,112,112,105,110,103,32,112,111,108,121,103,111,110,10,0,0,0,40,80,111,105,110,116,115,101,116,41,32,115,104,111,119,10,0,0,0,0,0,0,0,0,32,32,50,49,48,32,32,55,48,50,32,109,111,118,101,116,111,10,0,0,0,0,0,0,32,32,32,32,84,104,101,116,97,32,32,61,32,37,102,32,32,37,102,10,0,0,0,0,37,37,32,32,80,114,105,110,116,32,97,32,116,105,116,108,101,58,10,0,0,0,0,0,115,101,116,102,111,110,116,10,0,0,0,0,0,0,0,0,32,32,80,51,58,32,32,37,49,52,102,32,32,37,49,52,102,10,0,0,0,0,0,0,48,46,53,48,32,105,110,99,104,32,115,99,97,108,101,102,111,110,116,10,0,0,0,0,47,84,105,109,101,115,45,82,111,109,97,110,32,102,105,110,100,102,111,110,116,10,0,0,37,37,32,32,83,101,116,32,116,104,101,32,102,111,110,116,32,97,110,100,32,105,116,115,32,115,105,122,101,58,10,0,32,48,46,48,48,48,48,32,48,46,48,48,48,48,32,48,46,48,48,48,48,32,115,101,116,114,103,98,99,111,108,111,114,10,0,0,0,0,0,0,37,37,32,83,101,116,32,82,71,66,32,108,105,110,101,32,99,111,108,111,114,32,116,111,32,98,108,97,99,107,46,10,0,0,0,0,0,0,0,0,115,116,114,111,107,101,10,0,32,32,37,100,32,32,37,100,32,32,108,105,110,101,116,111,10,0,0,0,0,0,0,0,32,32,37,100,32,32,37,100,32,32,109,111,118,101,116,111,10,0,0,0,0,0,0,0,32,32,32,32,67,101,110,116,101,114,32,61,32,37,102,32,32,37,102,10,0,0,0,0,110,101,119,112,97,116,104,10,0,0,0,0,0,0,0,0,37,37,32,68,114,97,119,32,97,32,103,114,97,121,32,98,111,114,100,101,114,32,97,114,111,117,110,100,32,116,104,101,32,112,97,103,101,46,10,0,32,32,80,50,58,32,32,37,49,52,102,32,32,37,49,52,102,10,0,0,0,0,0,0,32,48,46,57,48,48,48,32,48,46,57,48,48,48,32,48,46,57,48,48,48,32,115,101,116,114,103,98,99,111,108,111,114,10,0,0,0,0,0,0,37,37,32,83,101,116,32,116,104,101,32,82,71,66,32,108,105,110,101,32,99,111,108,111,114,32,116,111,32,118,101,114,121,32,108,105,103,104,116,32,103,114,97,121,46,10,0,0,37,37,10,0,0,0,0,0,115,97,118,101,10,0,0,0,37,37,80,97,103,101,58,32,32,32,32,32,32,49,32,32,32,32,32,49,10,0,0,0,37,37,69,110,100,80,114,111,108,111,103,10,0,0,0,0,47,105,110,99,104,32,123,55,50,32,109,117,108,125,32,100,101,102,10,0,0,0,0,0,37,37,66,101,103,105,110,80,114,111,108,111,103,10,0,0,32,32,32,32,82,97,100,105,117,115,32,61,32,37,102,10,0,0,0,0,0,0,0,0,37,37,69,110,100,67,111,109,109,101,110,116,115,10,0,0,37,37,76,97,110,103,117,97,103,101,76,101,118,101,108,58,32,49,10,0,0,0,0,0,32,32,80,49,58,32,32,37,49,52,102,32,32,37,49,52,102,10,0,0,0,0,0,0,37,37,68,111,99,117,109,101,110,116,45,70,111,110,116,115,58,32,84,105,109,101,115,45,82,111,109,97,110,10,0,0,37,37,66,111,117,110,100,105,110,103,66,111,120,58,32,32,37,100,32,32,37,100,32,32,37,100,32,32,37,100,10,0,37,37,80,97,103,101,115,58,32,49,10,0,0,0,0,0,37,37,84,105,116,108,101,58,32,37,115,10,0,0,0,0,37,37,67,114,101,97,116,111,114,58,32,112,111,105,110,116,115,95,112,108,111,116,46,67,10,0,0,0,0,0,0,0,37,37,33,80,83,45,65,100,111,98,101,45,51,46,48,32,69,80,83,70,45,51,46,48,10,0,0,0,0,0,0,0,32,32,67,111,117,108,100,32,110,111,116,32,111,112,101,110,32,116,104,101,32,111,117,116,112,117,116,32,69,80,83,32,102,105,108,101,46,10,0,0,80,79,73,78,84,83,95,80,76,79,84,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,119,0,0,0,0,0,0,0,32,32,67,105,114,99,117,108,97,114,32,115,101,99,116,111,114,32,100,101,102,105,110,105,116,105,111,110,58,10,0,0,65,78,71,76,69,95,66,79,88,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,10,0,0,0,0,0,0,0,32,32,84,104,101,32,97,108,103,111,114,105,116,104,109,32,102,97,105,108,101,100,46,10,0,0,0,0,0,0,0,0,32,32,37,102,10,0,0,0,32,32,68,73,83,84,32,37,49,52,102,10,0,0,0,0,80,79,73,78,84,83,95,72,85,76,76,95,50,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,32,32,68,105,115,116,97,110,99,101,115,32,102,114,111,109,32,99,105,114,99,117,109,99,101,110,116,101,114,32,116,111,32,118,101,114,116,105,99,101,115,58,10,0,0,0,0,0,32,32,84,104,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,111,102,32,116,104,101,32,112,108,97,110,101,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,0,0,32,32,77,50,32,61,32,37,100,10,0,0,0,0,0,0,80,76,65,78,69,95,78,79,82,77,65,76,95,76,73,78,69,95,69,88,80,95,73,78,84,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,32,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,59,10,0,0,0,0,0,0,0,32,32,84,104,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,105,115,32,48,46,10,0,0,0,0,0,0,32,32,70,111,114,32,97,32,116,114,105,97,110,103,108,101,32,105,110,32,77,32,100,105,109,101,110,115,105,111,110,115,44,32,116,104,101,32,99,105,114,99,117,109,101,110,116,101,114,32,99,97,110,32,98,101,32,99,111,109,112,117,116,101,100,32,98,121,58,10,0,0,80,76,65,78,69,95,78,79,82,77,65,76,95,66,65,83,73,83,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,84,69,83,84,50,49,48,49,49,10,0,0,0,0,0,0,32,32,84,104,101,32,40,65,44,66,44,67,41,32,118,101,99,116,111,114,32,105,115,32,110,117,108,108,46,10,0,0,32,32,67,105,114,99,117,109,99,101,110,116,101,114,32,98,121,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,58,0,0,0,0,0,0,0,0,80,76,65,78,69,95,73,77,80,50,78,79,82,77,65,76,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,32,32,67,105,114,99,117,109,99,101,110,116,101,114,32,98,121,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,95,50,68,95,50,58,0,0,0,32,32,80,108,97,110,101,32,110,111,114,109,97,108,32,118,101,99,116,111,114,32,105,115,32,110,117,108,108,46,10,0,32,32,67,105,114,99,117,109,99,101,110,116,101,114,32,98,121,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,95,50,68,58,0,0,0,0,0,80,76,65,78,69,95,73,77,80,95,83,69,71,77,69,78,84,95,78,69,65,82,95,51,68,32,45,32,70,97,116,97,108,32,101,114,114,111,114,33,10,0,0,0,0,0,0,0,32,32,78,111,114,109,97,108,32,61,32,40,32,37,102,44,32,37,102,44,32,37,102,32,41,10,0,0,0,0,0,0,32,32,84,114,105,97,110,103,108,101,32,118,101,114,116,105,99,101,115,58,0,0,0,0,32,32,65,32,61,32,66,32,61,32,67,32,61,32,48,46,10,0,0,0,0,0,0,0,32,32,84,82,73,65,78,71,76,69,95,67,73,82,67,85,77,67,69,78,84,69,82,32,40,97,110,121,32,100,105,109,101,110,115,105,111,110,41,59,10,0,0,0,0,0,0,0,32,32,97,110,100,32,68,73,83,84,32,117,110,105,116,115,32,102,114,111,109,32,80,50,46,10,0,0,0,0,0,0,71,69,79,77,69,84,82,89,95,80,82,66,10,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
if (!awaitingMemoryInitializer) runPostSets();
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:35,EIDRM:36,ECHRNG:37,EL2NSYNC:38,EL3HLT:39,EL3RST:40,ELNRNG:41,EUNATCH:42,ENOCSI:43,EL2HLT:44,EDEADLK:45,ENOLCK:46,EBADE:50,EBADR:51,EXFULL:52,ENOANO:53,EBADRQC:54,EBADSLT:55,EDEADLOCK:56,EBFONT:57,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:74,ELBIN:75,EDOTDOT:76,EBADMSG:77,EFTYPE:79,ENOTUNIQ:80,EBADFD:81,EREMCHG:82,ELIBACC:83,ELIBBAD:84,ELIBSCN:85,ELIBMAX:86,ELIBEXEC:87,ENOSYS:88,ENMFILE:89,ENOTEMPTY:90,ENAMETOOLONG:91,ELOOP:92,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:106,EPROTOTYPE:107,ENOTSOCK:108,ENOPROTOOPT:109,ESHUTDOWN:110,ECONNREFUSED:111,EADDRINUSE:112,ECONNABORTED:113,ENETUNREACH:114,ENETDOWN:115,ETIMEDOUT:116,EHOSTDOWN:117,EHOSTUNREACH:118,EINPROGRESS:119,EALREADY:120,EDESTADDRREQ:121,EMSGSIZE:122,EPROTONOSUPPORT:123,ESOCKTNOSUPPORT:124,EADDRNOTAVAIL:125,ENETRESET:126,EISCONN:127,ENOTCONN:128,ETOOMANYREFS:129,EPROCLIM:130,EUSERS:131,EDQUOT:132,ESTALE:133,ENOTSUP:134,ENOMEDIUM:135,ENOSHARE:136,ECASECLASH:137,EILSEQ:138,EOVERFLOW:139,ECANCELED:140,ENOTRECOVERABLE:141,EOWNERDEAD:142,ESTRPIPE:143};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,createFileHandle:function (stream, fd) {
        if (typeof stream === 'undefined') {
          stream = null;
        }
        if (!fd) {
          if (stream && stream.socket) {
            for (var i = 1; i < 64; i++) {
              if (!FS.streams[i]) {
                fd = i;
                break;
              }
            }
            assert(fd, 'ran out of low fds for sockets');
          } else {
            fd = Math.max(FS.streams.length, 64);
            for (var i = FS.streams.length; i < fd; i++) {
              FS.streams[i] = null; // Keep dense
            }
          }
        }
        // Close WebSocket first if we are about to replace the fd (i.e. dup2)
        if (FS.streams[fd] && FS.streams[fd].socket && FS.streams[fd].socket.close) {
          FS.streams[fd].socket.close();
        }
        FS.streams[fd] = stream;
        return fd;
      },removeFileHandle:function (fd) {
        FS.streams[fd] = null;
      },joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        FS.createDevice(devFolder, 'null', function(){}, function(){});
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        // see previous TODO on stdin etc.: assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _send(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      info.sender(HEAPU8.subarray(buf, buf+len));
      return len;
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
          return _send(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  var _cos=Math.cos;
  var _sin=Math.sin;
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  var _atan2=Math.atan2;
  var _llvm_pow_f64=Math.pow;
  var _sqrt=Math.sqrt;
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  var _acos=Math.acos;
  var _exp=Math.exp;
  var _log=Math.log;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var ___tm_current=allocate(4*26, "i8", ALLOC_STATIC);
  var ___tm_timezones={};
  var __tzname=allocate(8, "i32*", ALLOC_STATIC);
  var __daylight=allocate(1, "i32*", ALLOC_STATIC);
  var __timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }
  var _abs=Math.abs;
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
      var mode = HEAP32[((varargs)>>2)];
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id;
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        id = FS.createFileHandle({
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        });
      } else {
        id = FS.createFileHandle({
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        });
      }
      FS.checkStreams();
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  var _tan=Math.tan;
  var _fabs=Math.abs;
  var _asin=Math.asin;
;
  var _atan=Math.atan;
  function _strftime(s, maxsize, format, timeptr) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      // TODO: Implement.
      return 0;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  var _llvm_expect_i32=undefined;
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0, 0];
// EMSCRIPTEN_START_FUNCS
function _runtest() {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  _timestamp();
  var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((17656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((13712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call3=_printf(((10920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _test0005();
  _test001();
  _test002();
  _test0351();
  _test0352();
  _test0477();
  _test0478();
  _test0616();
  _test0617();
  _test171();
  _test1712();
  _test1835();
  _test1836();
  _test2101();
  _test21011();
  var $call4=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call5=_printf(((17656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call6=_printf(((10240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call7=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  _timestamp();
  STACKTOP = __stackBase__;
  return 0;
}
Module["_runtest"] = _runtest;
function _test0005() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $dist;
  var $p1=__stackBase__;
  var $p2=(__stackBase__)+(16);
  var $p3=(__stackBase__)+(32);
  var $p4=(__stackBase__)+(48);
  var $p5=(__stackBase__)+(64);
  var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((9752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((8952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call3=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call4=_printf(((8344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call5=_printf(((7624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call6=_printf(((6984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call7=_printf(((17624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $arrayidx=(($p1)|0);
  HEAPF64[(($arrayidx)>>3)]=0;
  var $arrayidx8=(($p1+8)|0);
  HEAPF64[(($arrayidx8)>>3)]=0;
  var $arrayidx9=(($p2)|0);
  HEAPF64[(($arrayidx9)>>3)]=3;
  var $arrayidx10=(($p2+8)|0);
  HEAPF64[(($arrayidx10)>>3)]=0;
  var $arrayidx11=(($p3)|0);
  HEAPF64[(($arrayidx11)>>3)]=4;
  var $arrayidx12=(($p3+8)|0);
  HEAPF64[(($arrayidx12)>>3)]=2;
  $dist=1;
  var $call13=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $0=$dist;
  var $call14=_printf(((16792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$0,tempInt));
  var $arrayidx15=(($p1)|0);
  var $1=HEAPF64[(($arrayidx15)>>3)];
  var $arrayidx16=(($p1+8)|0);
  var $2=HEAPF64[(($arrayidx16)>>3)];
  var $call17=_printf(((16416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,HEAPF64[(((tempInt)+(8))>>3)]=$2,tempInt));
  var $arrayidx18=(($p2)|0);
  var $3=HEAPF64[(($arrayidx18)>>3)];
  var $arrayidx19=(($p2+8)|0);
  var $4=HEAPF64[(($arrayidx19)>>3)];
  var $call20=_printf(((16144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$3,HEAPF64[(((tempInt)+(8))>>3)]=$4,tempInt));
  var $arrayidx21=(($p3)|0);
  var $5=HEAPF64[(($arrayidx21)>>3)];
  var $arrayidx22=(($p3+8)|0);
  var $6=HEAPF64[(($arrayidx22)>>3)];
  var $call23=_printf(((15824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$5,HEAPF64[(((tempInt)+(8))>>3)]=$6,tempInt));
  var $7=$dist;
  var $arraydecay=(($p1)|0);
  var $arraydecay24=(($p2)|0);
  var $arraydecay25=(($p3)|0);
  var $arraydecay26=(($p4)|0);
  var $arraydecay27=(($p5)|0);
  _angle_box_2d($7, $arraydecay, $arraydecay24, $arraydecay25, $arraydecay26, $arraydecay27);
  var $arrayidx28=(($p4)|0);
  var $8=HEAPF64[(($arrayidx28)>>3)];
  var $arrayidx29=(($p4+8)|0);
  var $9=HEAPF64[(($arrayidx29)>>3)];
  var $call30=_printf(((15480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$8,HEAPF64[(((tempInt)+(8))>>3)]=$9,tempInt));
  var $arrayidx31=(($p5)|0);
  var $10=HEAPF64[(($arrayidx31)>>3)];
  var $arrayidx32=(($p5+8)|0);
  var $11=HEAPF64[(($arrayidx32)>>3)];
  var $call33=_printf(((15168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$10,HEAPF64[(((tempInt)+(8))>>3)]=$11,tempInt));
  var $arrayidx34=(($p1)|0);
  HEAPF64[(($arrayidx34)>>3)]=0;
  var $arrayidx35=(($p1+8)|0);
  HEAPF64[(($arrayidx35)>>3)]=0;
  var $arrayidx36=(($p2)|0);
  HEAPF64[(($arrayidx36)>>3)]=3;
  var $arrayidx37=(($p2+8)|0);
  HEAPF64[(($arrayidx37)>>3)]=0;
  var $arrayidx38=(($p3)|0);
  HEAPF64[(($arrayidx38)>>3)]=2;
  var $arrayidx39=(($p3+8)|0);
  HEAPF64[(($arrayidx39)>>3)]=-2;
  $dist=1;
  var $call40=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $12=$dist;
  var $call41=_printf(((16792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$12,tempInt));
  var $arrayidx42=(($p1)|0);
  var $13=HEAPF64[(($arrayidx42)>>3)];
  var $arrayidx43=(($p1+8)|0);
  var $14=HEAPF64[(($arrayidx43)>>3)];
  var $call44=_printf(((16416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$13,HEAPF64[(((tempInt)+(8))>>3)]=$14,tempInt));
  var $arrayidx45=(($p2)|0);
  var $15=HEAPF64[(($arrayidx45)>>3)];
  var $arrayidx46=(($p2+8)|0);
  var $16=HEAPF64[(($arrayidx46)>>3)];
  var $call47=_printf(((16144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$15,HEAPF64[(((tempInt)+(8))>>3)]=$16,tempInt));
  var $arrayidx48=(($p3)|0);
  var $17=HEAPF64[(($arrayidx48)>>3)];
  var $arrayidx49=(($p3+8)|0);
  var $18=HEAPF64[(($arrayidx49)>>3)];
  var $call50=_printf(((15824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$17,HEAPF64[(((tempInt)+(8))>>3)]=$18,tempInt));
  var $19=$dist;
  var $arraydecay51=(($p1)|0);
  var $arraydecay52=(($p2)|0);
  var $arraydecay53=(($p3)|0);
  var $arraydecay54=(($p4)|0);
  var $arraydecay55=(($p5)|0);
  _angle_box_2d($19, $arraydecay51, $arraydecay52, $arraydecay53, $arraydecay54, $arraydecay55);
  var $arrayidx56=(($p4)|0);
  var $20=HEAPF64[(($arrayidx56)>>3)];
  var $arrayidx57=(($p4+8)|0);
  var $21=HEAPF64[(($arrayidx57)>>3)];
  var $call58=_printf(((15480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$20,HEAPF64[(((tempInt)+(8))>>3)]=$21,tempInt));
  var $arrayidx59=(($p5)|0);
  var $22=HEAPF64[(($arrayidx59)>>3)];
  var $arrayidx60=(($p5+8)|0);
  var $23=HEAPF64[(($arrayidx60)>>3)];
  var $call61=_printf(((15168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$22,HEAPF64[(((tempInt)+(8))>>3)]=$23,tempInt));
  var $arrayidx62=(($p1)|0);
  HEAPF64[(($arrayidx62)>>3)]=3;
  var $arrayidx63=(($p1+8)|0);
  HEAPF64[(($arrayidx63)>>3)]=0;
  var $arrayidx64=(($p2)|0);
  HEAPF64[(($arrayidx64)>>3)]=3;
  var $arrayidx65=(($p2+8)|0);
  HEAPF64[(($arrayidx65)>>3)]=0;
  var $arrayidx66=(($p3)|0);
  HEAPF64[(($arrayidx66)>>3)]=2;
  var $arrayidx67=(($p3+8)|0);
  HEAPF64[(($arrayidx67)>>3)]=-2;
  $dist=1;
  var $call68=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $24=$dist;
  var $call69=_printf(((16792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$24,tempInt));
  var $arrayidx70=(($p1)|0);
  var $25=HEAPF64[(($arrayidx70)>>3)];
  var $arrayidx71=(($p1+8)|0);
  var $26=HEAPF64[(($arrayidx71)>>3)];
  var $call72=_printf(((16416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$25,HEAPF64[(((tempInt)+(8))>>3)]=$26,tempInt));
  var $arrayidx73=(($p2)|0);
  var $27=HEAPF64[(($arrayidx73)>>3)];
  var $arrayidx74=(($p2+8)|0);
  var $28=HEAPF64[(($arrayidx74)>>3)];
  var $call75=_printf(((16144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$27,HEAPF64[(((tempInt)+(8))>>3)]=$28,tempInt));
  var $arrayidx76=(($p3)|0);
  var $29=HEAPF64[(($arrayidx76)>>3)];
  var $arrayidx77=(($p3+8)|0);
  var $30=HEAPF64[(($arrayidx77)>>3)];
  var $call78=_printf(((15824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$29,HEAPF64[(((tempInt)+(8))>>3)]=$30,tempInt));
  var $31=$dist;
  var $arraydecay79=(($p1)|0);
  var $arraydecay80=(($p2)|0);
  var $arraydecay81=(($p3)|0);
  var $arraydecay82=(($p4)|0);
  var $arraydecay83=(($p5)|0);
  _angle_box_2d($31, $arraydecay79, $arraydecay80, $arraydecay81, $arraydecay82, $arraydecay83);
  var $arrayidx84=(($p4)|0);
  var $32=HEAPF64[(($arrayidx84)>>3)];
  var $arrayidx85=(($p4+8)|0);
  var $33=HEAPF64[(($arrayidx85)>>3)];
  var $call86=_printf(((15480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$32,HEAPF64[(((tempInt)+(8))>>3)]=$33,tempInt));
  var $arrayidx87=(($p5)|0);
  var $34=HEAPF64[(($arrayidx87)>>3)];
  var $arrayidx88=(($p5+8)|0);
  var $35=HEAPF64[(($arrayidx88)>>3)];
  var $call89=_printf(((15168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$34,HEAPF64[(((tempInt)+(8))>>3)]=$35,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _test001() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $angle;
      var $angle_num;
      var $angle_rad;
      var $inside;
      var $p=__stackBase__;
      var $p1=(__stackBase__)+(16);
      var $p2=(__stackBase__)+(32);
      var $p3=(__stackBase__)+(48);
      var $pi;
      var $test;
      $angle_num=12;
      $pi=3.141592653589793;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((14736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((14336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $test=0;
      label = 3; break;
    case 3: 
      var $0=$test;
      var $cmp=(($0)|(0)) < 6;
      if ($cmp) { label = 4; break; } else { label = 27; break; }
    case 4: 
      var $1=$test;
      var $cmp3=(($1)|(0))==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arrayidx=(($p1)|0);
      HEAPF64[(($arrayidx)>>3)]=1;
      var $arrayidx4=(($p1+8)|0);
      HEAPF64[(($arrayidx4)>>3)]=0;
      var $arrayidx5=(($p2)|0);
      HEAPF64[(($arrayidx5)>>3)]=0;
      var $arrayidx6=(($p2+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=0;
      var $arrayidx7=(($p3)|0);
      HEAPF64[(($arrayidx7)>>3)]=1;
      var $arrayidx8=(($p3+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=1;
      label = 21; break;
    case 6: 
      var $2=$test;
      var $cmp9=(($2)|(0))==1;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $arrayidx11=(($p1)|0);
      HEAPF64[(($arrayidx11)>>3)]=1;
      var $arrayidx12=(($p1+8)|0);
      HEAPF64[(($arrayidx12)>>3)]=0;
      var $arrayidx13=(($p2)|0);
      HEAPF64[(($arrayidx13)>>3)]=0;
      var $arrayidx14=(($p2+8)|0);
      HEAPF64[(($arrayidx14)>>3)]=0;
      var $arrayidx15=(($p3)|0);
      HEAPF64[(($arrayidx15)>>3)]=0;
      var $arrayidx16=(($p3+8)|0);
      HEAPF64[(($arrayidx16)>>3)]=1;
      label = 20; break;
    case 8: 
      var $3=$test;
      var $cmp18=(($3)|(0))==2;
      if ($cmp18) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $arrayidx20=(($p1)|0);
      HEAPF64[(($arrayidx20)>>3)]=1;
      var $arrayidx21=(($p1+8)|0);
      HEAPF64[(($arrayidx21)>>3)]=-1;
      var $arrayidx22=(($p2)|0);
      HEAPF64[(($arrayidx22)>>3)]=0;
      var $arrayidx23=(($p2+8)|0);
      HEAPF64[(($arrayidx23)>>3)]=0;
      var $arrayidx24=(($p3)|0);
      HEAPF64[(($arrayidx24)>>3)]=0;
      var $arrayidx25=(($p3+8)|0);
      HEAPF64[(($arrayidx25)>>3)]=1;
      label = 19; break;
    case 10: 
      var $4=$test;
      var $cmp27=(($4)|(0))==3;
      if ($cmp27) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $arrayidx29=(($p1)|0);
      HEAPF64[(($arrayidx29)>>3)]=1;
      var $arrayidx30=(($p1+8)|0);
      HEAPF64[(($arrayidx30)>>3)]=0;
      var $arrayidx31=(($p2)|0);
      HEAPF64[(($arrayidx31)>>3)]=0;
      var $arrayidx32=(($p2+8)|0);
      HEAPF64[(($arrayidx32)>>3)]=0;
      var $arrayidx33=(($p3)|0);
      HEAPF64[(($arrayidx33)>>3)]=-1;
      var $arrayidx34=(($p3+8)|0);
      HEAPF64[(($arrayidx34)>>3)]=0;
      label = 18; break;
    case 12: 
      var $5=$test;
      var $cmp36=(($5)|(0))==4;
      if ($cmp36) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $arrayidx38=(($p1)|0);
      HEAPF64[(($arrayidx38)>>3)]=1;
      var $arrayidx39=(($p1+8)|0);
      HEAPF64[(($arrayidx39)>>3)]=0;
      var $arrayidx40=(($p2)|0);
      HEAPF64[(($arrayidx40)>>3)]=0;
      var $arrayidx41=(($p2+8)|0);
      HEAPF64[(($arrayidx41)>>3)]=0;
      var $arrayidx42=(($p3)|0);
      HEAPF64[(($arrayidx42)>>3)]=0;
      var $arrayidx43=(($p3+8)|0);
      HEAPF64[(($arrayidx43)>>3)]=-1;
      label = 17; break;
    case 14: 
      var $6=$test;
      var $cmp45=(($6)|(0))==5;
      if ($cmp45) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $arrayidx47=(($p1)|0);
      HEAPF64[(($arrayidx47)>>3)]=1;
      var $arrayidx48=(($p1+8)|0);
      HEAPF64[(($arrayidx48)>>3)]=0;
      var $arrayidx49=(($p2)|0);
      HEAPF64[(($arrayidx49)>>3)]=0;
      var $arrayidx50=(($p2+8)|0);
      HEAPF64[(($arrayidx50)>>3)]=0;
      var $arrayidx51=(($p3)|0);
      HEAPF64[(($arrayidx51)>>3)]=1;
      var $arrayidx52=(($p3+8)|0);
      HEAPF64[(($arrayidx52)>>3)]=-0.01;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $arraydecay=(($p1)|0);
      _r8vec_print(2, $arraydecay, ((14024)|0));
      var $arraydecay58=(($p2)|0);
      _r8vec_print(2, $arraydecay58, ((13696)|0));
      var $arraydecay59=(($p3)|0);
      _r8vec_print(2, $arraydecay59, ((13288)|0));
      var $call60=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call61=_printf(((12856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call62=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $angle=0;
      label = 22; break;
    case 22: 
      var $7=$angle;
      var $8=$angle_num;
      var $cmp64=(($7)|(0)) <= (($8)|(0));
      if ($cmp64) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $9=$angle;
      var $conv=(($9)|(0));
      var $mul=($conv)*(2);
      var $10=$pi;
      var $mul66=($mul)*($10);
      var $11=$angle_num;
      var $conv67=(($11)|(0));
      var $div=($mul66)/($conv67);
      $angle_rad=$div;
      var $12=$angle_rad;
      var $call68=Math.cos($12);
      var $arrayidx69=(($p)|0);
      HEAPF64[(($arrayidx69)>>3)]=$call68;
      var $13=$angle_rad;
      var $call70=Math.sin($13);
      var $arrayidx71=(($p+8)|0);
      HEAPF64[(($arrayidx71)>>3)]=$call70;
      var $arraydecay72=(($p1)|0);
      var $arraydecay73=(($p2)|0);
      var $arraydecay74=(($p3)|0);
      var $arraydecay75=(($p)|0);
      var $call76=_angle_contains_ray_2d($arraydecay72, $arraydecay73, $arraydecay74, $arraydecay75);
      $inside=$call76;
      var $arrayidx77=(($p)|0);
      var $14=HEAPF64[(($arrayidx77)>>3)];
      var $arrayidx78=(($p+8)|0);
      var $15=HEAPF64[(($arrayidx78)>>3)];
      var $16=$inside;
      var $call79=_printf(((12512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$14,HEAPF64[(((tempInt)+(8))>>3)]=$15,HEAP32[(((tempInt)+(16))>>2)]=$16,tempInt));
      label = 24; break;
    case 24: 
      var $17=$angle;
      var $inc=((($17)+(1))|0);
      $angle=$inc;
      label = 22; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $18=$test;
      var $inc81=((($18)+(1))|0);
      $test=$inc81;
      label = 3; break;
    case 27: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test002() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $angle_num;
      var $i;
      var $temp1;
      var $temp2;
      var $temp3;
      var $thetad;
      var $thetar;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(16);
      var $v3=(__stackBase__)+(32);
      $angle_num=12;
      var $0=$v1;
      assert(16 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[((2128)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((2132)>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((2136)>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[((2140)>>2)];
      var $1=$v3;
      HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((12160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((12008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((11584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call4=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((11192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call6=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$angle_num;
      var $cmp=(($2)|(0)) <= (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$i;
      var $conv=(($4)|(0));
      var $mul=($conv)*(360);
      var $5=$angle_num;
      var $conv7=(($5)|(0));
      var $div=($mul)/($conv7);
      $thetad=$div;
      var $6=$thetad;
      var $call8=_degrees_to_radians($6);
      $thetar=$call8;
      var $7=$thetar;
      var $call9=Math.cos($7);
      var $arrayidx=(($v2)|0);
      HEAPF64[(($arrayidx)>>3)]=$call9;
      var $8=$thetar;
      var $call10=Math.sin($8);
      var $arrayidx11=(($v2+8)|0);
      HEAPF64[(($arrayidx11)>>3)]=$call10;
      var $arrayidx12=(($v2+8)|0);
      var $9=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($v2)|0);
      var $10=HEAPF64[(($arrayidx13)>>3)];
      var $call14=Math.atan2($9, $10);
      var $call15=_radians_to_degrees($call14);
      $temp1=$call15;
      var $arraydecay=(($v1)|0);
      var $arraydecay16=(($v2)|0);
      var $call17=_angle_rad_nd(2, $arraydecay, $arraydecay16);
      $temp2=$call17;
      var $arraydecay18=(($v1)|0);
      var $arraydecay19=(($v3)|0);
      var $arraydecay20=(($v2)|0);
      var $call21=_angle_deg_2d($arraydecay18, $arraydecay19, $arraydecay20);
      $temp3=$call21;
      var $arrayidx22=(($v2)|0);
      var $11=HEAPF64[(($arrayidx22)>>3)];
      var $arrayidx23=(($v2+8)|0);
      var $12=HEAPF64[(($arrayidx23)>>3)];
      var $13=$thetad;
      var $14=$temp1;
      var $15=$temp2;
      var $16=$temp3;
      var $call24=_printf(((11040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 48)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$11,HEAPF64[(((tempInt)+(8))>>3)]=$12,HEAPF64[(((tempInt)+(16))>>3)]=$13,HEAPF64[(((tempInt)+(24))>>3)]=$14,HEAPF64[(((tempInt)+(32))>>3)]=$15,HEAPF64[(((tempInt)+(40))>>3)]=$16,tempInt));
      label = 5; break;
    case 5: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test0351() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dist;
      var $f;
      var $g;
      var $i;
      var $p=__stackBase__;
      var $pn;
      var $p_test=(__stackBase__)+(16);
      var $t;
      var $test;
      var $test_num;
      var $x0;
      var $y0;
      var $0=$p_test;
      HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0; HEAP32[((($0)+(12))>>2)]=0; HEAP32[((($0)+(16))>>2)]=0; HEAP32[((($0)+(20))>>2)]=0; HEAP32[((($0)+(24))>>2)]=0; HEAP32[((($0)+(28))>>2)]=0; HEAP32[((($0)+(32))>>2)]=0; HEAP32[((($0)+(36))>>2)]=0; HEAP32[((($0)+(40))>>2)]=0; HEAP32[((($0)+(44))>>2)]=0;
      var $1=$0;
      var $2=(($1+16)|0);
      (HEAPF64[(tempDoublePtr)>>3]=5,HEAP32[(($2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $3=(($1+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=-1,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $4=(($1+32)|0);
      (HEAPF64[(tempDoublePtr)>>3]=5,HEAP32[(($4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $5=(($1+40)|0);
      (HEAPF64[(tempDoublePtr)>>3]=3,HEAP32[(($5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $test_num=3;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((10984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((10872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((10776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $x0=1;
      $y0=3;
      $f=1;
      $g=-1;
      var $call4=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((10712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=$x0;
      var $7=$f;
      var $call6=_printf(((10648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$6,HEAPF64[(((tempInt)+(8))>>3)]=$7,tempInt));
      var $8=$y0;
      var $9=$g;
      var $call7=_printf(((10576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$8,HEAPF64[(((tempInt)+(8))>>3)]=$9,tempInt));
      $test=0;
      label = 3; break;
    case 3: 
      var $10=$test;
      var $11=$test_num;
      var $cmp=(($10)|(0)) < (($11)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $cmp9=(($12)|(0)) < 2;
      if ($cmp9) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $13=$i;
      var $14=$test;
      var $mul=($14<<1);
      var $add=((($13)+($mul))|0);
      var $arrayidx=(($p_test+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$i;
      var $arrayidx11=(($p+($16<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$15;
      label = 7; break;
    case 7: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $arraydecay=(($p)|0);
      _r8vec_print(2, $arraydecay, ((10520)|0));
      var $18=$f;
      var $19=$g;
      var $20=$x0;
      var $21=$y0;
      var $arraydecay12=(($p)|0);
      var $call13=_line_par_point_dist_2d($18, $19, $20, $21, $arraydecay12);
      $dist=$call13;
      var $22=$dist;
      var $call14=_printf(((10448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$22,tempInt));
      var $23=$f;
      var $24=$g;
      var $25=$x0;
      var $26=$y0;
      var $arraydecay15=(($p)|0);
      var $call16=_line_par_point_near_2d($23, $24, $25, $26, $arraydecay15);
      $pn=$call16;
      var $27=$pn;
      _r8vec_print(2, $27, ((10392)|0));
      var $arraydecay17=(($p)|0);
      var $28=$pn;
      var $call18=_r8vec_norm_affine(2, $arraydecay17, $28);
      $dist=$call18;
      var $29=$dist;
      var $call19=_printf(((10328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$29,tempInt));
      var $30=$pn;
      var $31=$30;
      _free($31);
      label = 9; break;
    case 9: 
      var $32=$test;
      var $inc21=((($32)+(1))|0);
      $test=$inc21;
      label = 3; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test0352() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dist;
      var $f;
      var $g;
      var $h;
      var $i;
      var $p=__stackBase__;
      var $pn;
      var $p_test=(__stackBase__)+(24);
      var $test;
      var $test_num;
      var $x0;
      var $y0;
      var $z0;
      var $0=$p_test;
      assert(72 % 1 === 0);(_memcpy($0, 2056, 72)|0);
      $test_num=3;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((10280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((10192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((10136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $x0=1;
      $y0=3;
      $z0=2;
      $f=3;
      $g=-3;
      $h=-1;
      var $call4=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((10712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=$x0;
      var $2=$f;
      var $call6=_printf(((10648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,HEAPF64[(((tempInt)+(8))>>3)]=$2,tempInt));
      var $3=$y0;
      var $4=$g;
      var $call7=_printf(((10576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$3,HEAPF64[(((tempInt)+(8))>>3)]=$4,tempInt));
      var $5=$z0;
      var $6=$h;
      var $call8=_printf(((10072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$5,HEAPF64[(((tempInt)+(8))>>3)]=$6,tempInt));
      $test=0;
      label = 3; break;
    case 3: 
      var $7=$test;
      var $8=$test_num;
      var $cmp=(($7)|(0)) < (($8)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $cmp10=(($9)|(0)) < 3;
      if ($cmp10) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $10=$i;
      var $11=$test;
      var $mul=((($11)*(3))&-1);
      var $add=((($10)+($mul))|0);
      var $arrayidx=(($p_test+($add<<3))|0);
      var $12=HEAPF64[(($arrayidx)>>3)];
      var $13=$i;
      var $arrayidx12=(($p+($13<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$12;
      label = 7; break;
    case 7: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $arraydecay=(($p)|0);
      _r8vec_print(3, $arraydecay, ((10520)|0));
      var $15=$f;
      var $16=$g;
      var $17=$h;
      var $18=$x0;
      var $19=$y0;
      var $20=$z0;
      var $arraydecay13=(($p)|0);
      var $call14=_line_par_point_dist_3d($15, $16, $17, $18, $19, $20, $arraydecay13);
      $dist=$call14;
      var $21=$dist;
      var $call15=_printf(((10448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$21,tempInt));
      var $22=$f;
      var $23=$g;
      var $24=$h;
      var $25=$x0;
      var $26=$y0;
      var $27=$z0;
      var $arraydecay16=(($p)|0);
      var $call17=_line_par_point_near_3d($22, $23, $24, $25, $26, $27, $arraydecay16);
      $pn=$call17;
      var $28=$pn;
      _r8vec_print(3, $28, ((10392)|0));
      var $arraydecay18=(($p)|0);
      var $29=$pn;
      var $call19=_r8vec_norm_affine(3, $arraydecay18, $29);
      $dist=$call19;
      var $30=$dist;
      var $call20=_printf(((10328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$30,tempInt));
      var $31=$pn;
      var $32=$31;
      _free($32);
      label = 9; break;
    case 9: 
      var $33=$test;
      var $inc22=((($33)+(1))|0);
      $test=$inc22;
      label = 3; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test0477() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $area;
  var $p=__stackBase__;
  var $0=$p;
  assert(64 % 1 === 0);(_memcpy($0, 1992, 64)|0);
  var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((10048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((9992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call3=_printf(((9960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $arraydecay=(($p)|0);
  _r8mat_transpose_print(2, 4, $arraydecay, ((9936)|0));
  var $arraydecay4=(($p)|0);
  var $call5=_parallelogram_area_2d($arraydecay4);
  $area=$call5;
  var $call6=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $1=$area;
  var $call7=_printf(((9912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _test0478() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $area;
  var $p=__stackBase__;
  var $0=$p;
  assert(96 % 1 === 0);(_memcpy($0, 1896, 96)|0);
  var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((9864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((9784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call3=_printf(((9728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $arraydecay=(($p)|0);
  _r8mat_transpose_print(3, 4, $arraydecay, ((9936)|0));
  var $arraydecay4=(($p)|0);
  var $call5=_parallelogram_area_3d($arraydecay4);
  $area=$call5;
  var $call6=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $1=$area;
  var $call7=_printf(((9912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _test0616() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dif;
      var $i;
      var $j;
      var $m;
      var $n;
      var $normal;
      var $pp;
      var $pq=__stackBase__;
      var $pr=(__stackBase__)+(24);
      var $qr1;
      var $qr2;
      var $seed=(__stackBase__)+(48);
      var $t;
      var $xyz;
      $m=3;
      $n=5;
      HEAP32[(($seed)>>2)]=123456789;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((9672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((9536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((9456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call4=_printf(((9376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((9272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $0=$m;
      var $call6=_r8vec_uniform_01_new($0, $seed);
      $pp=$call6;
      var $1=$m;
      var $call7=_r8vec_uniform_01_new($1, $seed);
      $normal=$call7;
      var $2=$pp;
      var $3=$normal;
      var $arraydecay=(($pq)|0);
      var $arraydecay8=(($pr)|0);
      _plane_normal_basis_3d($2, $3, $arraydecay, $arraydecay8);
      var $4=$m;
      var $sub=((($4)-(1))|0);
      var $5=$n;
      var $call9=_r8mat_uniform_01_new($sub, $5, $seed);
      $qr1=$call9;
      var $6=$pp;
      var $7=$normal;
      var $arraydecay10=(($pq)|0);
      var $arraydecay11=(($pr)|0);
      var $8=$n;
      var $9=$qr1;
      var $call12=_plane_normal_qr_to_xyz($6, $7, $arraydecay10, $arraydecay11, $8, $9);
      $xyz=$call12;
      var $10=$pp;
      var $11=$normal;
      var $arraydecay13=(($pq)|0);
      var $arraydecay14=(($pr)|0);
      var $12=$n;
      var $13=$xyz;
      var $call15=_plane_normal_xyz_to_qr($10, $11, $arraydecay13, $arraydecay14, $12, $13);
      $qr2=$call15;
      $dif=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $14=$j;
      var $15=$n;
      var $cmp=(($14)|(0)) < (($15)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $t=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $16=$i;
      var $17=$m;
      var $sub17=((($17)-(1))|0);
      var $cmp18=(($16)|(0)) < (($sub17)|(0));
      if ($cmp18) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $18=$t;
      var $19=$j;
      var $mul=($19<<1);
      var $add=(($mul)|0);
      var $20=$qr1;
      var $arrayidx=(($20+($add<<3))|0);
      var $21=HEAPF64[(($arrayidx)>>3)];
      var $22=$j;
      var $mul20=($22<<1);
      var $add21=(($mul20)|0);
      var $23=$qr2;
      var $arrayidx22=(($23+($add21<<3))|0);
      var $24=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($21)-($24);
      var $25=Math.pow($sub23, 2);
      var $add24=($18)+($25);
      $t=$add24;
      label = 7; break;
    case 7: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $27=$t;
      var $call25=Math.sqrt($27);
      $t=$call25;
      var $28=$dif;
      var $29=$t;
      var $call26=_r8_max($28, $29);
      $dif=$call26;
      label = 9; break;
    case 9: 
      var $30=$j;
      var $inc28=((($30)+(1))|0);
      $j=$inc28;
      label = 3; break;
    case 10: 
      var $call30=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=$dif;
      var $call31=_printf(((9208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$31,tempInt));
      var $32=$normal;
      var $33=$32;
      _free($33);
      var $34=$pp;
      var $35=$34;
      _free($35);
      var $36=$qr1;
      var $37=$36;
      _free($37);
      var $38=$qr2;
      var $39=$38;
      _free($39);
      var $40=$xyz;
      var $41=$40;
      _free($41);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test0617() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      var $j;
      var $k;
      var $l;
      var $int_num=__stackBase__;
      var $normal=(__stackBase__)+(8);
      var $pint=(__stackBase__)+(32);
      var $pp=(__stackBase__)+(128);
      var $t=(__stackBase__)+(152);
      var $0=$t;
      _memset($0, 0, 96);
      var $1=$0;
      var $2=(($1+24)|0);
      (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $3=(($1+56)|0);
      (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $4=(($1+88)|0);
      (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $5=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($5, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=HEAP32[((_stdout)>>2)];
      var $call1=_fprintf($6, ((9160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($7, ((9072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stdout)>>2)];
      var $call3=_fprintf($8, ((9008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $k=1;
      label = 3; break;
    case 3: 
      var $9=$k;
      var $cmp=(($9)|(0)) <= 2;
      if ($cmp) { label = 4; break; } else { label = 33; break; }
    case 4: 
      var $10=$k;
      var $cmp4=(($10)|(0))==1;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arrayidx=(($normal)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      var $arrayidx5=(($normal+8)|0);
      HEAPF64[(($arrayidx5)>>3)]=0;
      var $arrayidx6=(($normal+16)|0);
      HEAPF64[(($arrayidx6)>>3)]=1;
      label = 7; break;
    case 6: 
      var $call7=Math.sqrt(2);
      var $div=(1)/($call7);
      var $arrayidx8=(($normal)|0);
      HEAPF64[(($arrayidx8)>>3)]=$div;
      var $call9=Math.sqrt(2);
      var $div10=(1)/($call9);
      var $arrayidx11=(($normal+8)|0);
      HEAPF64[(($arrayidx11)>>3)]=$div10;
      var $arrayidx12=(($normal+16)|0);
      HEAPF64[(($arrayidx12)>>3)]=0;
      label = 7; break;
    case 7: 
      var $11=HEAP32[((_stdout)>>2)];
      var $call13=_fprintf($11, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $12=HEAP32[((_stdout)>>2)];
      var $13=$k;
      var $call14=_fprintf($12, ((8912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $14=HEAP32[((_stdout)>>2)];
      var $call15=_fprintf($14, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 8; break;
    case 8: 
      var $15=$i;
      var $cmp17=(($15)|(0)) < 3;
      if ($cmp17) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $16=HEAP32[((_stdout)>>2)];
      var $17=$i;
      var $arrayidx19=(($normal+($17<<3))|0);
      var $18=HEAPF64[(($arrayidx19)>>3)];
      var $call20=_fprintf($16, ((8864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$18,tempInt));
      label = 10; break;
    case 10: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      var $20=HEAP32[((_stdout)>>2)];
      var $call21=_fprintf($20, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $l=0;
      label = 12; break;
    case 12: 
      var $21=$l;
      var $cmp23=(($21)|(0)) <= 6;
      if ($cmp23) { label = 13; break; } else { label = 31; break; }
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $22=$i;
      var $cmp26=(($22)|(0)) < 3;
      if ($cmp26) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $23=$i;
      var $arrayidx28=(($normal+($23<<3))|0);
      var $24=HEAPF64[(($arrayidx28)>>3)];
      var $25=$l;
      var $conv=(($25)|(0));
      var $mul=($24)*($conv);
      var $div29=($mul)/(5);
      var $26=$i;
      var $arrayidx30=(($pp+($26<<3))|0);
      HEAPF64[(($arrayidx30)>>3)]=$div29;
      label = 16; break;
    case 16: 
      var $27=$i;
      var $inc32=((($27)+(1))|0);
      $i=$inc32;
      label = 14; break;
    case 17: 
      var $arraydecay=(($pp)|0);
      var $arraydecay34=(($normal)|0);
      var $arraydecay35=(($t)|0);
      var $arraydecay36=(($pint)|0);
      _plane_normal_tetrahedron_intersect($arraydecay, $arraydecay34, $arraydecay35, $int_num, $arraydecay36);
      var $28=HEAP32[((_stdout)>>2)];
      var $call37=_fprintf($28, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $29=HEAP32[((_stdout)>>2)];
      var $call38=_fprintf($29, ((8792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $30=HEAP32[((_stdout)>>2)];
      var $call39=_fprintf($30, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 18; break;
    case 18: 
      var $31=$i;
      var $cmp41=(($31)|(0)) < 3;
      if ($cmp41) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $32=HEAP32[((_stdout)>>2)];
      var $33=$i;
      var $arrayidx44=(($pp+($33<<3))|0);
      var $34=HEAPF64[(($arrayidx44)>>3)];
      var $call45=_fprintf($32, ((8864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$34,tempInt));
      label = 20; break;
    case 20: 
      var $35=$i;
      var $inc47=((($35)+(1))|0);
      $i=$inc47;
      label = 18; break;
    case 21: 
      var $36=HEAP32[((_stdout)>>2)];
      var $call49=_fprintf($36, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=HEAP32[((_stdout)>>2)];
      var $call50=_fprintf($37, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $38=HEAP32[((_stdout)>>2)];
      var $39=HEAP32[(($int_num)>>2)];
      var $call51=_fprintf($38, ((8712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$39,tempInt));
      var $40=HEAP32[((_stdout)>>2)];
      var $call52=_fprintf($40, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $j=0;
      label = 22; break;
    case 22: 
      var $41=$j;
      var $42=HEAP32[(($int_num)>>2)];
      var $cmp54=(($41)|(0)) < (($42)|(0));
      if ($cmp54) { label = 23; break; } else { label = 29; break; }
    case 23: 
      var $43=HEAP32[((_stdout)>>2)];
      var $44=$j;
      var $call57=_fprintf($43, ((8672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$44,tempInt));
      $i=0;
      label = 24; break;
    case 24: 
      var $45=$i;
      var $cmp59=(($45)|(0)) < 3;
      if ($cmp59) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $46=HEAP32[((_stdout)>>2)];
      var $47=$i;
      var $48=$j;
      var $mul62=((($48)*(3))&-1);
      var $add=((($47)+($mul62))|0);
      var $arrayidx63=(($pint+($add<<3))|0);
      var $49=HEAPF64[(($arrayidx63)>>3)];
      var $call64=_fprintf($46, ((8864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$49,tempInt));
      label = 26; break;
    case 26: 
      var $50=$i;
      var $inc66=((($50)+(1))|0);
      $i=$inc66;
      label = 24; break;
    case 27: 
      var $51=HEAP32[((_stdout)>>2)];
      var $call68=_fprintf($51, ((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 28; break;
    case 28: 
      var $52=$j;
      var $inc70=((($52)+(1))|0);
      $j=$inc70;
      label = 22; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $53=$l;
      var $inc73=((($53)+(1))|0);
      $l=$inc73;
      label = 12; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $54=$k;
      var $inc76=((($54)+(1))|0);
      $k=$inc76;
      label = 3; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test171() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $area;
  var $quad_t=__stackBase__;
  var $0=$quad_t;
  _memset($0, 0, 64);
  var $1=$0;
  var $2=(($1+16)|0);
  (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $3=(($1+32)|0);
  (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $4=(($1+40)|0);
  (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($4)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($4)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $5=(($1+56)|0);
  (HEAPF64[(tempDoublePtr)>>3]=1,HEAP32[(($5)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($5)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((8640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((8592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call3=_printf(((8544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call4=_printf(((8464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $arraydecay=(($quad_t)|0);
  _r8mat_transpose_print(2, 4, $arraydecay, ((8424)|0));
  var $arraydecay5=(($quad_t)|0);
  var $call6=_quad_area_2d($arraydecay5);
  $area=$call6;
  var $call7=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $6=$area;
  var $call8=_printf(((8312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$6,tempInt));
  var $arraydecay9=(($quad_t)|0);
  var $call10=_quad_area2_2d($arraydecay9);
  $area=$call10;
  var $7=$area;
  var $call11=_printf(((8248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$7,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _test1712() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $area;
      var $area1;
      var $area2;
      var $i;
      var $j;
      var $q=__stackBase__;
      var $t=(__stackBase__)+(96);
      var $0=$q;
      assert(96 % 1 === 0);(_memcpy($0, 1800, 96)|0);
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((8184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((8120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((8048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $arraydecay=(($q)|0);
      _r8mat_transpose_print(3, 4, $arraydecay, ((8424)|0));
      var $arraydecay4=(($q)|0);
      var $call5=_quad_area_3d($arraydecay4);
      $area=$call5;
      var $call6=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=$area;
      var $call7=_printf(((7976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,tempInt));
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $cmp=(($2)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp9=(($3)|(0)) < 3;
      if ($cmp9) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$i;
      var $5=$j;
      var $mul=((($5)*(3))&-1);
      var $add=((($4)+($mul))|0);
      var $arrayidx=(($q+($add<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$i;
      var $8=$j;
      var $mul11=((($8)*(3))&-1);
      var $add12=((($7)+($mul11))|0);
      var $arrayidx13=(($t+($add12<<3))|0);
      HEAPF64[(($arrayidx13)>>3)]=$6;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $10=$j;
      var $inc15=((($10)+(1))|0);
      $j=$inc15;
      label = 3; break;
    case 10: 
      var $arraydecay17=(($t)|0);
      var $call18=_triangle_area_3d($arraydecay17);
      $area1=$call18;
      $j=0;
      label = 11; break;
    case 11: 
      var $11=$j;
      var $cmp20=(($11)|(0)) < 2;
      if ($cmp20) { label = 12; break; } else { label = 18; break; }
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $12=$i;
      var $cmp23=(($12)|(0)) < 3;
      if ($cmp23) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $13=$i;
      var $14=$j;
      var $add25=((($14)+(2))|0);
      var $mul26=((($add25)*(3))&-1);
      var $add27=((($13)+($mul26))|0);
      var $arrayidx28=(($q+($add27<<3))|0);
      var $15=HEAPF64[(($arrayidx28)>>3)];
      var $16=$i;
      var $17=$j;
      var $mul29=((($17)*(3))&-1);
      var $add30=((($16)+($mul29))|0);
      var $arrayidx31=(($t+($add30<<3))|0);
      HEAPF64[(($arrayidx31)>>3)]=$15;
      label = 15; break;
    case 15: 
      var $18=$i;
      var $inc33=((($18)+(1))|0);
      $i=$inc33;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $19=$j;
      var $inc36=((($19)+(1))|0);
      $j=$inc36;
      label = 11; break;
    case 18: 
      $i=0;
      label = 19; break;
    case 19: 
      var $20=$i;
      var $cmp39=(($20)|(0)) < 3;
      if ($cmp39) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $21=$i;
      var $add41=(($21)|0);
      var $arrayidx42=(($q+($add41<<3))|0);
      var $22=HEAPF64[(($arrayidx42)>>3)];
      var $23=$i;
      var $add43=((($23)+(6))|0);
      var $arrayidx44=(($t+($add43<<3))|0);
      HEAPF64[(($arrayidx44)>>3)]=$22;
      label = 21; break;
    case 21: 
      var $24=$i;
      var $inc46=((($24)+(1))|0);
      $i=$inc46;
      label = 19; break;
    case 22: 
      var $arraydecay48=(($t)|0);
      var $call49=_triangle_area_3d($arraydecay48);
      $area2=$call49;
      var $25=$area1;
      var $26=$area2;
      var $add50=($25)+($26);
      var $call51=_printf(((7904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$add50,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test1835() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      var $pc=__stackBase__;
      var $p1=(__stackBase__)+(24);
      var $p2=(__stackBase__)+(48);
      var $p3=(__stackBase__)+(72);
      var $p4=(__stackBase__)+(96);
      var $r=(__stackBase__)+(120);
      var $0=$pc;
      assert(24 % 1 === 0);HEAP32[(($0)>>2)]=HEAP32[((1680)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[((1684)>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[((1688)>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[((1692)>>2)];HEAP32[((($0)+(16))>>2)]=HEAP32[((1696)>>2)];HEAP32[((($0)+(20))>>2)]=HEAP32[((1700)>>2)];
      var $1=$p1;
      assert(24 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[((1776)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((1780)>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((1784)>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((1788)>>2)];HEAP32[((($1)+(16))>>2)]=HEAP32[((1792)>>2)];HEAP32[((($1)+(20))>>2)]=HEAP32[((1796)>>2)];
      var $2=$p2;
      assert(24 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[((1752)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((1756)>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((1760)>>2)];HEAP32[((($2)+(12))>>2)]=HEAP32[((1764)>>2)];HEAP32[((($2)+(16))>>2)]=HEAP32[((1768)>>2)];HEAP32[((($2)+(20))>>2)]=HEAP32[((1772)>>2)];
      var $3=$p3;
      assert(24 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[((1728)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((1732)>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((1736)>>2)];HEAP32[((($3)+(12))>>2)]=HEAP32[((1740)>>2)];HEAP32[((($3)+(16))>>2)]=HEAP32[((1744)>>2)];HEAP32[((($3)+(20))>>2)]=HEAP32[((1748)>>2)];
      var $4=$p4;
      assert(24 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[((1704)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((1708)>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((1712)>>2)];HEAP32[((($4)+(12))>>2)]=HEAP32[((1716)>>2)];HEAP32[((($4)+(16))>>2)]=HEAP32[((1720)>>2)];HEAP32[((($4)+(20))>>2)]=HEAP32[((1724)>>2)];
      HEAPF64[(($r)>>3)]=3;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((7848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((7760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((7672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call4=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((7584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call6=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call7=_printf(((7552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $cmp=(($5)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$i;
      var $arrayidx=(($p1+($6<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $call8=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$7,tempInt));
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $call9=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call10=_printf(((7440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp12=(($9)|(0)) < 3;
      if ($cmp12) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $arrayidx14=(($p2+($10<<3))|0);
      var $11=HEAPF64[(($arrayidx14)>>3)];
      var $call15=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$11,tempInt));
      label = 9; break;
    case 9: 
      var $12=$i;
      var $inc17=((($12)+(1))|0);
      $i=$inc17;
      label = 7; break;
    case 10: 
      var $call19=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call20=_printf(((7392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 11; break;
    case 11: 
      var $13=$i;
      var $cmp22=(($13)|(0)) < 3;
      if ($cmp22) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $14=$i;
      var $arrayidx24=(($p3+($14<<3))|0);
      var $15=HEAPF64[(($arrayidx24)>>3)];
      var $call25=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$15,tempInt));
      label = 13; break;
    case 13: 
      var $16=$i;
      var $inc27=((($16)+(1))|0);
      $i=$inc27;
      label = 11; break;
    case 14: 
      var $call29=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call30=_printf(((7328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 15; break;
    case 15: 
      var $17=$i;
      var $cmp32=(($17)|(0)) < 3;
      if ($cmp32) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $18=$i;
      var $arrayidx34=(($p4+($18<<3))|0);
      var $19=HEAPF64[(($arrayidx34)>>3)];
      var $call35=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$19,tempInt));
      label = 17; break;
    case 17: 
      var $20=$i;
      var $inc37=((($20)+(1))|0);
      $i=$inc37;
      label = 15; break;
    case 18: 
      var $call39=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $arraydecay=(($p1)|0);
      var $arraydecay40=(($p2)|0);
      var $arraydecay41=(($p3)|0);
      var $arraydecay42=(($p4)|0);
      var $arraydecay43=(($pc)|0);
      _sphere_exp2imp_3d($arraydecay, $arraydecay40, $arraydecay41, $arraydecay42, $r, $arraydecay43);
      var $call44=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call45=_printf(((7240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call46=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAPF64[(($r)>>3)];
      var $call47=_printf(((7184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$21,tempInt));
      var $arraydecay48=(($pc)|0);
      _r8vec_print(3, $arraydecay48, ((7128)|0));
      var $22=HEAPF64[(($r)>>3)];
      var $arraydecay49=(($pc)|0);
      var $arraydecay50=(($p1)|0);
      var $arraydecay51=(($p2)|0);
      var $arraydecay52=(($p3)|0);
      var $arraydecay53=(($p4)|0);
      _sphere_imp2exp_3d($22, $arraydecay49, $arraydecay50, $arraydecay51, $arraydecay52, $arraydecay53);
      var $call54=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call55=_printf(((7056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call56=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call57=_printf(((7552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 19; break;
    case 19: 
      var $23=$i;
      var $cmp59=(($23)|(0)) < 3;
      if ($cmp59) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $24=$i;
      var $arrayidx61=(($p1+($24<<3))|0);
      var $25=HEAPF64[(($arrayidx61)>>3)];
      var $call62=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$25,tempInt));
      label = 21; break;
    case 21: 
      var $26=$i;
      var $inc64=((($26)+(1))|0);
      $i=$inc64;
      label = 19; break;
    case 22: 
      var $call66=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call67=_printf(((7440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 23; break;
    case 23: 
      var $27=$i;
      var $cmp69=(($27)|(0)) < 3;
      if ($cmp69) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $28=$i;
      var $arrayidx71=(($p2+($28<<3))|0);
      var $29=HEAPF64[(($arrayidx71)>>3)];
      var $call72=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$29,tempInt));
      label = 25; break;
    case 25: 
      var $30=$i;
      var $inc74=((($30)+(1))|0);
      $i=$inc74;
      label = 23; break;
    case 26: 
      var $call76=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call77=_printf(((7392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 27; break;
    case 27: 
      var $31=$i;
      var $cmp79=(($31)|(0)) < 3;
      if ($cmp79) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $32=$i;
      var $arrayidx81=(($p3+($32<<3))|0);
      var $33=HEAPF64[(($arrayidx81)>>3)];
      var $call82=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$33,tempInt));
      label = 29; break;
    case 29: 
      var $34=$i;
      var $inc84=((($34)+(1))|0);
      $i=$inc84;
      label = 27; break;
    case 30: 
      var $call86=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call87=_printf(((7328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 31; break;
    case 31: 
      var $35=$i;
      var $cmp89=(($35)|(0)) < 3;
      if ($cmp89) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $36=$i;
      var $arrayidx91=(($p4+($36<<3))|0);
      var $37=HEAPF64[(($arrayidx91)>>3)];
      var $call92=_printf(((7496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$37,tempInt));
      label = 33; break;
    case 33: 
      var $38=$i;
      var $inc94=((($38)+(1))|0);
      $i=$inc94;
      label = 31; break;
    case 34: 
      var $call96=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test1836() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $n;
  var $p=__stackBase__;
  var $pc=(__stackBase__)+(96);
  var $pc_true=(__stackBase__)+(120);
  var $r=(__stackBase__)+(144);
  var $r_true;
  $n=3;
  var $0=$p;
  assert(96 % 1 === 0);(_memcpy($0, 1584, 96)|0);
  var $1=$pc_true;
  assert(24 % 1 === 0);HEAP32[(($1)>>2)]=HEAP32[((1560)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((1564)>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((1568)>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((1572)>>2)];HEAP32[((($1)+(16))>>2)]=HEAP32[((1576)>>2)];HEAP32[((($1)+(20))>>2)]=HEAP32[((1580)>>2)];
  $r_true=3;
  var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((6968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((6880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $2=$n;
  var $3=$n;
  var $add=((($3)+(1))|0);
  var $arraydecay=(($p)|0);
  _r8mat_transpose_print($2, $add, $arraydecay, ((6768)|0));
  var $4=$n;
  var $arraydecay3=(($p)|0);
  var $arraydecay4=(($pc)|0);
  _sphere_exp2imp_nd($4, $arraydecay3, $r, $arraydecay4);
  var $call5=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call6=_printf(((7240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call7=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $5=HEAPF64[(($r)>>3)];
  var $call8=_printf(((7184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$5,tempInt));
  var $6=$r_true;
  var $call9=_printf(((6712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$6,tempInt));
  var $7=$n;
  var $arraydecay10=(($pc)|0);
  _r8vec_print($7, $arraydecay10, ((6648)|0));
  var $8=$n;
  var $arraydecay11=(($pc_true)|0);
  _r8vec_print($8, $arraydecay11, ((6600)|0));
  STACKTOP = __stackBase__;
  return;
}
function _test2101() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i;
      var $j;
      var $m;
      var $pc;
      var $t=__stackBase__;
      var $t_test=(__stackBase__)+(48);
      var $test;
      var $test_num;
      $m=2;
      var $0=$t_test;
      assert(192 % 1 === 0);(_memcpy($0, 1176, 192)|0);
      $test_num=4;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((6544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((6432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((6360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call4=_printf(((6288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((17576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $test=0;
      label = 3; break;
    case 3: 
      var $1=$test;
      var $2=$test_num;
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $3=$j;
      var $cmp7=(($3)|(0)) < 3;
      if ($cmp7) { label = 6; break; } else { label = 12; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $4=$i;
      var $5=$m;
      var $cmp10=(($4)|(0)) < (($5)|(0));
      if ($cmp10) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $6=$i;
      var $7=$j;
      var $8=$m;
      var $mul=(Math.imul($7,$8)|0);
      var $add=((($6)+($mul))|0);
      var $9=$test;
      var $10=$m;
      var $mul12=(Math.imul($9,$10)|0);
      var $mul13=((($mul12)*(3))&-1);
      var $add14=((($add)+($mul13))|0);
      var $arrayidx=(($t_test+($add14<<3))|0);
      var $11=HEAPF64[(($arrayidx)>>3)];
      var $12=$i;
      var $13=$j;
      var $14=$m;
      var $mul15=(Math.imul($13,$14)|0);
      var $add16=((($12)+($mul15))|0);
      var $arrayidx17=(($t+($add16<<3))|0);
      HEAPF64[(($arrayidx17)>>3)]=$11;
      label = 9; break;
    case 9: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $16=$j;
      var $inc19=((($16)+(1))|0);
      $j=$inc19;
      label = 5; break;
    case 12: 
      var $17=$m;
      var $arraydecay=(($t)|0);
      _r8mat_transpose_print($17, 3, $arraydecay, ((17528)|0));
      var $arraydecay21=(($t)|0);
      var $call22=_triangle_circumcenter_2d($arraydecay21);
      $pc=$call22;
      var $18=$m;
      var $19=$pc;
      _r8vec_print($18, $19, ((17400)|0));
      var $20=$pc;
      var $21=$20;
      _free($21);
      var $arraydecay23=(($t)|0);
      var $call24=_triangle_circumcenter_2d_2($arraydecay23);
      $pc=$call24;
      var $22=$m;
      var $23=$pc;
      _r8vec_print($22, $23, ((17320)|0));
      var $24=$pc;
      var $25=$24;
      _free($25);
      var $26=$m;
      var $arraydecay25=(($t)|0);
      var $call26=_triangle_circumcenter($26, $arraydecay25);
      $pc=$call26;
      var $27=$m;
      var $28=$pc;
      _r8vec_print($27, $28, ((17232)|0));
      var $29=$pc;
      var $30=$29;
      _free($30);
      label = 13; break;
    case 13: 
      var $31=$test;
      var $inc28=((($31)+(1))|0);
      $test=$inc28;
      label = 3; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _test21011() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a12;
      var $i;
      var $j;
      var $k;
      var $m2;
      var $o1;
      var $o2;
      var $m1;
      var $pc1=__stackBase__;
      var $pc2;
      var $seed=(__stackBase__)+(16);
      var $t1=(__stackBase__)+(24);
      var $t2;
      var $t_test=(__stackBase__)+(72);
      var $test;
      var $test_num;
      $m1=2;
      var $0=$t_test;
      assert(192 % 1 === 0);(_memcpy($0, 1368, 192)|0);
      $test_num=4;
      var $call=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((17184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((17072)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call3=_printf(((17008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $m2=2;
      label = 3; break;
    case 3: 
      var $1=$m2;
      var $cmp=(($1)|(0)) <= 5;
      if ($cmp) { label = 4; break; } else { label = 46; break; }
    case 4: 
      HEAP32[(($seed)>>2)]=123456789;
      var $call4=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=$m2;
      var $call5=_printf(((16944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=$m2;
      var $mul=((($3)*(3))&-1);
      var $mul6=($mul<<3);
      var $call7=_malloc($mul6);
      var $4=$call7;
      $t2=$4;
      var $5=$m2;
      var $6=$m1;
      var $call8=_r8mat_uniform_01_new($5, $6, $seed);
      $a12=$call8;
      var $7=$m1;
      var $call9=_r8vec_uniform_01_new($7, $seed);
      $o1=$call9;
      var $8=$m2;
      var $call10=_r8vec_uniform_01_new($8, $seed);
      $o2=$call10;
      $test=0;
      label = 5; break;
    case 5: 
      var $9=$test;
      var $10=$test_num;
      var $cmp12=(($9)|(0)) < (($10)|(0));
      if ($cmp12) { label = 6; break; } else { label = 44; break; }
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $11=$j;
      var $cmp15=(($11)|(0)) < 3;
      if ($cmp15) { label = 8; break; } else { label = 14; break; }
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $12=$i;
      var $13=$m1;
      var $cmp18=(($12)|(0)) < (($13)|(0));
      if ($cmp18) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $14=$i;
      var $15=$j;
      var $16=$m1;
      var $mul20=(Math.imul($15,$16)|0);
      var $add=((($14)+($mul20))|0);
      var $17=$test;
      var $18=$m1;
      var $mul21=(Math.imul($17,$18)|0);
      var $mul22=((($mul21)*(3))&-1);
      var $add23=((($add)+($mul22))|0);
      var $arrayidx=(($t_test+($add23<<3))|0);
      var $19=HEAPF64[(($arrayidx)>>3)];
      var $20=$i;
      var $21=$j;
      var $22=$m1;
      var $mul24=(Math.imul($21,$22)|0);
      var $add25=((($20)+($mul24))|0);
      var $arrayidx26=(($t1+($add25<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$19;
      label = 11; break;
    case 11: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $24=$j;
      var $inc28=((($24)+(1))|0);
      $j=$inc28;
      label = 7; break;
    case 14: 
      $j=0;
      label = 15; break;
    case 15: 
      var $25=$j;
      var $cmp31=(($25)|(0)) < 3;
      if ($cmp31) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $26=$i;
      var $27=$j;
      var $28=$m1;
      var $mul33=(Math.imul($27,$28)|0);
      var $add34=((($26)+($mul33))|0);
      var $arrayidx35=(($t1+($add34<<3))|0);
      var $29=HEAPF64[(($arrayidx35)>>3)];
      var $30=$i;
      var $31=$o1;
      var $arrayidx36=(($31+($30<<3))|0);
      var $32=HEAPF64[(($arrayidx36)>>3)];
      var $sub=($29)-($32);
      var $33=$i;
      var $34=$j;
      var $35=$m1;
      var $mul37=(Math.imul($34,$35)|0);
      var $add38=((($33)+($mul37))|0);
      var $arrayidx39=(($t1+($add38<<3))|0);
      HEAPF64[(($arrayidx39)>>3)]=$sub;
      label = 17; break;
    case 17: 
      var $36=$j;
      var $inc41=((($36)+(1))|0);
      $j=$inc41;
      label = 15; break;
    case 18: 
      $j=0;
      label = 19; break;
    case 19: 
      var $37=$j;
      var $cmp44=(($37)|(0)) < 3;
      if ($cmp44) { label = 20; break; } else { label = 30; break; }
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $38=$i;
      var $39=$m2;
      var $cmp47=(($38)|(0)) < (($39)|(0));
      if ($cmp47) { label = 22; break; } else { label = 28; break; }
    case 22: 
      var $40=$i;
      var $41=$j;
      var $42=$m2;
      var $mul49=(Math.imul($41,$42)|0);
      var $add50=((($40)+($mul49))|0);
      var $43=$t2;
      var $arrayidx51=(($43+($add50<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=0;
      $k=0;
      label = 23; break;
    case 23: 
      var $44=$k;
      var $45=$m1;
      var $cmp53=(($44)|(0)) < (($45)|(0));
      if ($cmp53) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $46=$i;
      var $47=$j;
      var $48=$m2;
      var $mul55=(Math.imul($47,$48)|0);
      var $add56=((($46)+($mul55))|0);
      var $49=$t2;
      var $arrayidx57=(($49+($add56<<3))|0);
      var $50=HEAPF64[(($arrayidx57)>>3)];
      var $51=$i;
      var $52=$k;
      var $53=$m2;
      var $mul58=(Math.imul($52,$53)|0);
      var $add59=((($51)+($mul58))|0);
      var $54=$a12;
      var $arrayidx60=(($54+($add59<<3))|0);
      var $55=HEAPF64[(($arrayidx60)>>3)];
      var $56=$k;
      var $57=$j;
      var $58=$m1;
      var $mul61=(Math.imul($57,$58)|0);
      var $add62=((($56)+($mul61))|0);
      var $arrayidx63=(($t1+($add62<<3))|0);
      var $59=HEAPF64[(($arrayidx63)>>3)];
      var $mul64=($55)*($59);
      var $add65=($50)+($mul64);
      var $60=$i;
      var $61=$j;
      var $62=$m2;
      var $mul66=(Math.imul($61,$62)|0);
      var $add67=((($60)+($mul66))|0);
      var $63=$t2;
      var $arrayidx68=(($63+($add67<<3))|0);
      HEAPF64[(($arrayidx68)>>3)]=$add65;
      label = 25; break;
    case 25: 
      var $64=$k;
      var $inc70=((($64)+(1))|0);
      $k=$inc70;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $65=$i;
      var $inc73=((($65)+(1))|0);
      $i=$inc73;
      label = 21; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $66=$j;
      var $inc76=((($66)+(1))|0);
      $j=$inc76;
      label = 19; break;
    case 30: 
      $j=0;
      label = 31; break;
    case 31: 
      var $67=$j;
      var $cmp79=(($67)|(0)) < 3;
      if ($cmp79) { label = 32; break; } else { label = 38; break; }
    case 32: 
      $i=0;
      label = 33; break;
    case 33: 
      var $68=$i;
      var $69=$m2;
      var $cmp82=(($68)|(0)) < (($69)|(0));
      if ($cmp82) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $70=$i;
      var $71=$j;
      var $72=$m2;
      var $mul84=(Math.imul($71,$72)|0);
      var $add85=((($70)+($mul84))|0);
      var $73=$t2;
      var $arrayidx86=(($73+($add85<<3))|0);
      var $74=HEAPF64[(($arrayidx86)>>3)];
      var $75=$i;
      var $76=$o2;
      var $arrayidx87=(($76+($75<<3))|0);
      var $77=HEAPF64[(($arrayidx87)>>3)];
      var $add88=($74)+($77);
      var $78=$i;
      var $79=$j;
      var $80=$m2;
      var $mul89=(Math.imul($79,$80)|0);
      var $add90=((($78)+($mul89))|0);
      var $81=$t2;
      var $arrayidx91=(($81+($add90<<3))|0);
      HEAPF64[(($arrayidx91)>>3)]=$add88;
      label = 35; break;
    case 35: 
      var $82=$i;
      var $inc93=((($82)+(1))|0);
      $i=$inc93;
      label = 33; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $83=$j;
      var $inc96=((($83)+(1))|0);
      $j=$inc96;
      label = 31; break;
    case 38: 
      var $84=$m2;
      var $85=$t2;
      var $call98=_triangle_circumcenter($84, $85);
      $pc2=$call98;
      var $86=$m2;
      var $87=$pc2;
      _r8vec_print($86, $87, ((17232)|0));
      var $call99=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call100=_printf(((16840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call101=_printf(((17672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $j=0;
      label = 39; break;
    case 39: 
      var $88=$j;
      var $cmp103=(($88)|(0)) < 3;
      if ($cmp103) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $89=$m2;
      var $90=$pc2;
      var $91=$t2;
      var $92=$j;
      var $93=$m2;
      var $mul105=(Math.imul($92,$93)|0);
      var $add_ptr=(($91+($mul105<<3))|0);
      var $call106=_r8vec_norm_affine($89, $90, $add_ptr);
      var $call107=_printf(((16784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$call106,tempInt));
      label = 41; break;
    case 41: 
      var $94=$j;
      var $inc109=((($94)+(1))|0);
      $j=$inc109;
      label = 39; break;
    case 42: 
      var $95=$pc2;
      var $96=$95;
      _free($96);
      label = 43; break;
    case 43: 
      var $97=$test;
      var $inc112=((($97)+(1))|0);
      $test=$inc112;
      label = 5; break;
    case 44: 
      var $98=$a12;
      var $99=$98;
      _free($99);
      var $100=$o1;
      var $101=$100;
      _free($101);
      var $102=$o2;
      var $103=$102;
      _free($103);
      var $104=$t2;
      var $105=$104;
      _free($105);
      label = 45; break;
    case 45: 
      var $106=$m2;
      var $inc115=((($106)+(1))|0);
      $m2=$inc115;
      label = 3; break;
    case 46: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _r8vec_copy($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$a1_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$a2_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      HEAPF64[(($arrayidx1)>>3)]=$4;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_copy"] = _r8vec_copy;
function _r8vec_eq($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$i;
      var $3=$a1_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$a2_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $cmp2=$4 != $7;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $9=$retval;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_eq"] = _r8vec_eq;
function _r8vec_print($n, $a, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $title_addr;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp=(($4)|(0)) < (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=HEAP32[((_stdout)>>2)];
      var $7=$i;
      var $8=$i;
      var $9=$a_addr;
      var $arrayidx=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $call3=_fprintf($6, ((13768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,HEAPF64[(((tempInt)+(8))>>3)]=$10,tempInt));
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_print"] = _r8vec_print;
function _r8vec_norm($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      var $v;
      $n_addr=$n;
      $a_addr=$a;
      $v=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$v;
      var $3=$i;
      var $4=$a_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$a_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($5)*($8);
      var $add=($2)+($mul);
      $v=$add;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $10=$v;
      var $call=Math.sqrt($10);
      $v=$call;
      var $11=$v;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_norm"] = _r8vec_norm;
function _angle_contains_ray_2d($p1, $p2, $p3, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p_addr;
      var $a1;
      var $a2;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p_addr=$p;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$p_addr;
      var $call=_angle_deg_2d($0, $1, $2);
      $a1=$call;
      var $3=$p1_addr;
      var $4=$p2_addr;
      var $5=$p3_addr;
      var $call1=_angle_deg_2d($3, $4, $5);
      $a2=$call1;
      var $6=$a1;
      var $7=$a2;
      var $cmp=$6 <= $7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $value=1;
      label = 5; break;
    case 4: 
      $value=0;
      label = 5; break;
    case 5: 
      var $8=$value;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_contains_ray_2d"] = _angle_contains_ray_2d;
function _angle_box_2d($dist, $p1, $p2, $p3, $p4, $p5) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dist_addr;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $p5_addr;
      var $stheta;
      var $temp;
      var $temp1;
      var $temp2;
      var $u=__stackBase__;
      var $u1=(__stackBase__)+(16);
      var $u2=(__stackBase__)+(32);
      $dist_addr=$dist;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $p5_addr=$p5;
      var $0=$dist_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$p2_addr;
      var $2=$p4_addr;
      _r8vec_copy(2, $1, $2);
      var $3=$p2_addr;
      var $4=$p5_addr;
      _r8vec_copy(2, $3, $4);
      label = 25; break;
    case 4: 
      var $5=$p1_addr;
      var $6=$p2_addr;
      var $call=_r8vec_eq(2, $5, $6);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $7=$p2_addr;
      var $8=$p3_addr;
      var $call1=_r8vec_eq(2, $7, $8);
      var $tobool2=(($call1)|(0))!=0;
      if ($tobool2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $call4=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((16712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call6=_printf(((13168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=$p1_addr;
      _r8vec_print(2, $9, ((10768)|0));
      _exit(1);
      throw "Reached an unreachable!";
    case 7: 
      var $10=$p1_addr;
      var $11=$p2_addr;
      var $call8=_r8vec_eq(2, $10, $11);
      var $tobool9=(($call8)|(0))!=0;
      if ($tobool9) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $12=$p3_addr;
      var $arrayidx=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $14=$p2_addr;
      var $arrayidx11=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx11)>>3)];
      var $sub=($13)-($15);
      var $arrayidx12=(($u2)|0);
      HEAPF64[(($arrayidx12)>>3)]=$sub;
      var $16=$p2_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$p3_addr;
      var $arrayidx14=(($18)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $arrayidx16=(($u2+8)|0);
      HEAPF64[(($arrayidx16)>>3)]=$sub15;
      var $arraydecay=(($u2)|0);
      var $call17=_r8vec_norm(2, $arraydecay);
      $temp=$call17;
      var $arrayidx18=(($u2)|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$temp;
      var $div=($20)/($21);
      var $arrayidx19=(($u2)|0);
      HEAPF64[(($arrayidx19)>>3)]=$div;
      var $arrayidx20=(($u2+8)|0);
      var $22=HEAPF64[(($arrayidx20)>>3)];
      var $23=$temp;
      var $div21=($22)/($23);
      var $arrayidx22=(($u2+8)|0);
      HEAPF64[(($arrayidx22)>>3)]=$div21;
      var $24=$p2_addr;
      var $arrayidx23=(($24)|0);
      var $25=HEAPF64[(($arrayidx23)>>3)];
      var $26=$dist_addr;
      var $arrayidx24=(($u2)|0);
      var $27=HEAPF64[(($arrayidx24)>>3)];
      var $mul=($26)*($27);
      var $add=($25)+($mul);
      var $28=$p4_addr;
      var $arrayidx25=(($28)|0);
      HEAPF64[(($arrayidx25)>>3)]=$add;
      var $29=$p2_addr;
      var $arrayidx26=(($29+8)|0);
      var $30=HEAPF64[(($arrayidx26)>>3)];
      var $31=$dist_addr;
      var $arrayidx27=(($u2+8)|0);
      var $32=HEAPF64[(($arrayidx27)>>3)];
      var $mul28=($31)*($32);
      var $add29=($30)+($mul28);
      var $33=$p4_addr;
      var $arrayidx30=(($33+8)|0);
      HEAPF64[(($arrayidx30)>>3)]=$add29;
      var $34=$p2_addr;
      var $arrayidx31=(($34)|0);
      var $35=HEAPF64[(($arrayidx31)>>3)];
      var $36=$dist_addr;
      var $arrayidx32=(($u2)|0);
      var $37=HEAPF64[(($arrayidx32)>>3)];
      var $mul33=($36)*($37);
      var $sub34=($35)-($mul33);
      var $38=$p5_addr;
      var $arrayidx35=(($38)|0);
      HEAPF64[(($arrayidx35)>>3)]=$sub34;
      var $39=$p2_addr;
      var $arrayidx36=(($39+8)|0);
      var $40=HEAPF64[(($arrayidx36)>>3)];
      var $41=$dist_addr;
      var $arrayidx37=(($u2+8)|0);
      var $42=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($41)*($42);
      var $sub39=($40)-($mul38);
      var $43=$p5_addr;
      var $arrayidx40=(($43+8)|0);
      HEAPF64[(($arrayidx40)>>3)]=$sub39;
      label = 25; break;
    case 9: 
      var $44=$p2_addr;
      var $45=$p3_addr;
      var $call42=_r8vec_eq(2, $44, $45);
      var $tobool43=(($call42)|(0))!=0;
      if ($tobool43) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $46=$p1_addr;
      var $arrayidx45=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx45)>>3)];
      var $48=$p2_addr;
      var $arrayidx46=(($48+8)|0);
      var $49=HEAPF64[(($arrayidx46)>>3)];
      var $sub47=($47)-($49);
      var $arrayidx48=(($u1)|0);
      HEAPF64[(($arrayidx48)>>3)]=$sub47;
      var $50=$p2_addr;
      var $arrayidx49=(($50)|0);
      var $51=HEAPF64[(($arrayidx49)>>3)];
      var $52=$p1_addr;
      var $arrayidx50=(($52)|0);
      var $53=HEAPF64[(($arrayidx50)>>3)];
      var $sub51=($51)-($53);
      var $arrayidx52=(($u1+8)|0);
      HEAPF64[(($arrayidx52)>>3)]=$sub51;
      var $arraydecay53=(($u1)|0);
      var $call54=_r8vec_norm(2, $arraydecay53);
      $temp=$call54;
      var $arrayidx55=(($u1)|0);
      var $54=HEAPF64[(($arrayidx55)>>3)];
      var $55=$temp;
      var $div56=($54)/($55);
      var $arrayidx57=(($u1)|0);
      HEAPF64[(($arrayidx57)>>3)]=$div56;
      var $arrayidx58=(($u1+8)|0);
      var $56=HEAPF64[(($arrayidx58)>>3)];
      var $57=$temp;
      var $div59=($56)/($57);
      var $arrayidx60=(($u1+8)|0);
      HEAPF64[(($arrayidx60)>>3)]=$div59;
      var $58=$p2_addr;
      var $arrayidx61=(($58)|0);
      var $59=HEAPF64[(($arrayidx61)>>3)];
      var $60=$dist_addr;
      var $arrayidx62=(($u1)|0);
      var $61=HEAPF64[(($arrayidx62)>>3)];
      var $mul63=($60)*($61);
      var $add64=($59)+($mul63);
      var $62=$p4_addr;
      var $arrayidx65=(($62)|0);
      HEAPF64[(($arrayidx65)>>3)]=$add64;
      var $63=$p2_addr;
      var $arrayidx66=(($63+8)|0);
      var $64=HEAPF64[(($arrayidx66)>>3)];
      var $65=$dist_addr;
      var $arrayidx67=(($u1+8)|0);
      var $66=HEAPF64[(($arrayidx67)>>3)];
      var $mul68=($65)*($66);
      var $add69=($64)+($mul68);
      var $67=$p4_addr;
      var $arrayidx70=(($67+8)|0);
      HEAPF64[(($arrayidx70)>>3)]=$add69;
      var $68=$p2_addr;
      var $arrayidx71=(($68)|0);
      var $69=HEAPF64[(($arrayidx71)>>3)];
      var $70=$dist_addr;
      var $arrayidx72=(($u1)|0);
      var $71=HEAPF64[(($arrayidx72)>>3)];
      var $mul73=($70)*($71);
      var $sub74=($69)-($mul73);
      var $72=$p5_addr;
      var $arrayidx75=(($72)|0);
      HEAPF64[(($arrayidx75)>>3)]=$sub74;
      var $73=$p2_addr;
      var $arrayidx76=(($73+8)|0);
      var $74=HEAPF64[(($arrayidx76)>>3)];
      var $75=$dist_addr;
      var $arrayidx77=(($u1+8)|0);
      var $76=HEAPF64[(($arrayidx77)>>3)];
      var $mul78=($75)*($76);
      var $sub79=($74)-($mul78);
      var $77=$p5_addr;
      var $arrayidx80=(($77+8)|0);
      HEAPF64[(($arrayidx80)>>3)]=$sub79;
      label = 25; break;
    case 11: 
      var $78=$p1_addr;
      var $arrayidx82=(($78+8)|0);
      var $79=HEAPF64[(($arrayidx82)>>3)];
      var $80=$p2_addr;
      var $arrayidx83=(($80+8)|0);
      var $81=HEAPF64[(($arrayidx83)>>3)];
      var $sub84=($79)-($81);
      var $arrayidx85=(($u1)|0);
      HEAPF64[(($arrayidx85)>>3)]=$sub84;
      var $82=$p2_addr;
      var $arrayidx86=(($82)|0);
      var $83=HEAPF64[(($arrayidx86)>>3)];
      var $84=$p1_addr;
      var $arrayidx87=(($84)|0);
      var $85=HEAPF64[(($arrayidx87)>>3)];
      var $sub88=($83)-($85);
      var $arrayidx89=(($u1+8)|0);
      HEAPF64[(($arrayidx89)>>3)]=$sub88;
      var $arraydecay90=(($u1)|0);
      var $call91=_r8vec_norm(2, $arraydecay90);
      $temp=$call91;
      var $arrayidx92=(($u1)|0);
      var $86=HEAPF64[(($arrayidx92)>>3)];
      var $87=$temp;
      var $div93=($86)/($87);
      var $arrayidx94=(($u1)|0);
      HEAPF64[(($arrayidx94)>>3)]=$div93;
      var $arrayidx95=(($u1+8)|0);
      var $88=HEAPF64[(($arrayidx95)>>3)];
      var $89=$temp;
      var $div96=($88)/($89);
      var $arrayidx97=(($u1+8)|0);
      HEAPF64[(($arrayidx97)>>3)]=$div96;
      var $arrayidx98=(($u1)|0);
      var $90=HEAPF64[(($arrayidx98)>>3)];
      var $91=$p3_addr;
      var $arrayidx99=(($91)|0);
      var $92=HEAPF64[(($arrayidx99)>>3)];
      var $93=$p2_addr;
      var $arrayidx100=(($93)|0);
      var $94=HEAPF64[(($arrayidx100)>>3)];
      var $sub101=($92)-($94);
      var $mul102=($90)*($sub101);
      var $arrayidx103=(($u1+8)|0);
      var $95=HEAPF64[(($arrayidx103)>>3)];
      var $96=$p3_addr;
      var $arrayidx104=(($96+8)|0);
      var $97=HEAPF64[(($arrayidx104)>>3)];
      var $98=$p2_addr;
      var $arrayidx105=(($98+8)|0);
      var $99=HEAPF64[(($arrayidx105)>>3)];
      var $sub106=($97)-($99);
      var $mul107=($95)*($sub106);
      var $add108=($mul102)+($mul107);
      $temp1=$add108;
      var $100=$temp1;
      var $cmp109=$100 < 0;
      if ($cmp109) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $arrayidx111=(($u1)|0);
      var $101=HEAPF64[(($arrayidx111)>>3)];
      var $sub112=(-$101);
      var $arrayidx113=(($u1)|0);
      HEAPF64[(($arrayidx113)>>3)]=$sub112;
      var $arrayidx114=(($u1+8)|0);
      var $102=HEAPF64[(($arrayidx114)>>3)];
      var $sub115=(-$102);
      var $arrayidx116=(($u1+8)|0);
      HEAPF64[(($arrayidx116)>>3)]=$sub115;
      label = 13; break;
    case 13: 
      var $103=$p3_addr;
      var $arrayidx118=(($103+8)|0);
      var $104=HEAPF64[(($arrayidx118)>>3)];
      var $105=$p2_addr;
      var $arrayidx119=(($105+8)|0);
      var $106=HEAPF64[(($arrayidx119)>>3)];
      var $sub120=($104)-($106);
      var $arrayidx121=(($u2)|0);
      HEAPF64[(($arrayidx121)>>3)]=$sub120;
      var $107=$p2_addr;
      var $arrayidx122=(($107)|0);
      var $108=HEAPF64[(($arrayidx122)>>3)];
      var $109=$p3_addr;
      var $arrayidx123=(($109)|0);
      var $110=HEAPF64[(($arrayidx123)>>3)];
      var $sub124=($108)-($110);
      var $arrayidx125=(($u2+8)|0);
      HEAPF64[(($arrayidx125)>>3)]=$sub124;
      var $arraydecay126=(($u2)|0);
      var $call127=_r8vec_norm(2, $arraydecay126);
      $temp=$call127;
      var $arrayidx128=(($u2)|0);
      var $111=HEAPF64[(($arrayidx128)>>3)];
      var $112=$temp;
      var $div129=($111)/($112);
      var $arrayidx130=(($u2)|0);
      HEAPF64[(($arrayidx130)>>3)]=$div129;
      var $arrayidx131=(($u2+8)|0);
      var $113=HEAPF64[(($arrayidx131)>>3)];
      var $114=$temp;
      var $div132=($113)/($114);
      var $arrayidx133=(($u2+8)|0);
      HEAPF64[(($arrayidx133)>>3)]=$div132;
      var $arrayidx134=(($u2)|0);
      var $115=HEAPF64[(($arrayidx134)>>3)];
      var $116=$p1_addr;
      var $arrayidx135=(($116)|0);
      var $117=HEAPF64[(($arrayidx135)>>3)];
      var $118=$p2_addr;
      var $arrayidx136=(($118)|0);
      var $119=HEAPF64[(($arrayidx136)>>3)];
      var $sub137=($117)-($119);
      var $mul138=($115)*($sub137);
      var $arrayidx139=(($u2+8)|0);
      var $120=HEAPF64[(($arrayidx139)>>3)];
      var $121=$p1_addr;
      var $arrayidx140=(($121+8)|0);
      var $122=HEAPF64[(($arrayidx140)>>3)];
      var $123=$p2_addr;
      var $arrayidx141=(($123+8)|0);
      var $124=HEAPF64[(($arrayidx141)>>3)];
      var $sub142=($122)-($124);
      var $mul143=($120)*($sub142);
      var $add144=($mul138)+($mul143);
      $temp2=$add144;
      var $125=$temp2;
      var $cmp145=$125 < 0;
      if ($cmp145) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $arrayidx147=(($u2)|0);
      var $126=HEAPF64[(($arrayidx147)>>3)];
      var $sub148=(-$126);
      var $arrayidx149=(($u2)|0);
      HEAPF64[(($arrayidx149)>>3)]=$sub148;
      var $arrayidx150=(($u2+8)|0);
      var $127=HEAPF64[(($arrayidx150)>>3)];
      var $sub151=(-$127);
      var $arrayidx152=(($u2+8)|0);
      HEAPF64[(($arrayidx152)>>3)]=$sub151;
      label = 15; break;
    case 15: 
      var $128=$temp1;
      var $cmp154=$128 == 0;
      if ($cmp154) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $129=$temp2;
      var $cmp155=$129 == 0;
      if ($cmp155) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $arrayidx157=(($u1)|0);
      var $130=HEAPF64[(($arrayidx157)>>3)];
      var $arrayidx158=(($u2)|0);
      var $131=HEAPF64[(($arrayidx158)>>3)];
      var $mul159=($130)*($131);
      var $arrayidx160=(($u1+8)|0);
      var $132=HEAPF64[(($arrayidx160)>>3)];
      var $arrayidx161=(($u2+8)|0);
      var $133=HEAPF64[(($arrayidx161)>>3)];
      var $mul162=($132)*($133);
      var $add163=($mul159)+($mul162);
      var $cmp164=$add163 < 0;
      if ($cmp164) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $arrayidx166=(($u1)|0);
      var $134=HEAPF64[(($arrayidx166)>>3)];
      var $sub167=(-$134);
      var $arrayidx168=(($u1)|0);
      HEAPF64[(($arrayidx168)>>3)]=$sub167;
      var $arrayidx169=(($u2)|0);
      var $135=HEAPF64[(($arrayidx169)>>3)];
      var $sub170=(-$135);
      var $arrayidx171=(($u2)|0);
      HEAPF64[(($arrayidx171)>>3)]=$sub170;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $136=$p3_addr;
      var $arrayidx174=(($136)|0);
      var $137=HEAPF64[(($arrayidx174)>>3)];
      var $138=$p2_addr;
      var $arrayidx175=(($138)|0);
      var $139=HEAPF64[(($arrayidx175)>>3)];
      var $sub176=($137)-($139);
      var $140=$p2_addr;
      var $arrayidx177=(($140)|0);
      var $141=HEAPF64[(($arrayidx177)>>3)];
      var $142=$p1_addr;
      var $arrayidx178=(($142)|0);
      var $143=HEAPF64[(($arrayidx178)>>3)];
      var $sub179=($141)-($143);
      var $mul180=($sub176)*($sub179);
      var $144=$p3_addr;
      var $arrayidx181=(($144+8)|0);
      var $145=HEAPF64[(($arrayidx181)>>3)];
      var $146=$p2_addr;
      var $arrayidx182=(($146+8)|0);
      var $147=HEAPF64[(($arrayidx182)>>3)];
      var $sub183=($145)-($147);
      var $148=$p2_addr;
      var $arrayidx184=(($148+8)|0);
      var $149=HEAPF64[(($arrayidx184)>>3)];
      var $150=$p1_addr;
      var $arrayidx185=(($150+8)|0);
      var $151=HEAPF64[(($arrayidx185)>>3)];
      var $sub186=($149)-($151);
      var $mul187=($sub183)*($sub186);
      var $add188=($mul180)+($mul187);
      $temp=$add188;
      var $152=$p3_addr;
      var $arrayidx189=(($152)|0);
      var $153=HEAPF64[(($arrayidx189)>>3)];
      var $154=$p2_addr;
      var $arrayidx190=(($154)|0);
      var $155=HEAPF64[(($arrayidx190)>>3)];
      var $sub191=($153)-($155);
      var $156=Math.pow($sub191, 2);
      var $157=$p3_addr;
      var $arrayidx192=(($157+8)|0);
      var $158=HEAPF64[(($arrayidx192)>>3)];
      var $159=$p2_addr;
      var $arrayidx193=(($159+8)|0);
      var $160=HEAPF64[(($arrayidx193)>>3)];
      var $sub194=($158)-($160);
      var $161=Math.pow($sub194, 2);
      var $add195=($156)+($161);
      var $call196=Math.sqrt($add195);
      $temp1=$call196;
      var $162=$p2_addr;
      var $arrayidx197=(($162)|0);
      var $163=HEAPF64[(($arrayidx197)>>3)];
      var $164=$p1_addr;
      var $arrayidx198=(($164)|0);
      var $165=HEAPF64[(($arrayidx198)>>3)];
      var $sub199=($163)-($165);
      var $166=Math.pow($sub199, 2);
      var $167=$p2_addr;
      var $arrayidx200=(($167+8)|0);
      var $168=HEAPF64[(($arrayidx200)>>3)];
      var $169=$p1_addr;
      var $arrayidx201=(($169+8)|0);
      var $170=HEAPF64[(($arrayidx201)>>3)];
      var $sub202=($168)-($170);
      var $171=Math.pow($sub202, 2);
      var $add203=($166)+($171);
      var $call204=Math.sqrt($add203);
      $temp2=$call204;
      var $172=$temp;
      var $173=$temp1;
      var $174=$temp2;
      var $mul205=($173)*($174);
      var $div206=($172)/($mul205);
      $temp=$div206;
      var $175=$temp;
      var $cmp207=$175 < -0.99;
      if ($cmp207) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $176=$p2_addr;
      var $arrayidx209=(($176)|0);
      var $177=HEAPF64[(($arrayidx209)>>3)];
      var $178=$p1_addr;
      var $arrayidx210=(($178)|0);
      var $179=HEAPF64[(($arrayidx210)>>3)];
      var $sub211=($177)-($179);
      var $180=Math.pow($sub211, 2);
      var $181=$p2_addr;
      var $arrayidx212=(($181+8)|0);
      var $182=HEAPF64[(($arrayidx212)>>3)];
      var $183=$p1_addr;
      var $arrayidx213=(($183+8)|0);
      var $184=HEAPF64[(($arrayidx213)>>3)];
      var $sub214=($182)-($184);
      var $185=Math.pow($sub214, 2);
      var $add215=($180)+($185);
      var $call216=Math.sqrt($add215);
      $temp=$call216;
      var $186=$p2_addr;
      var $arrayidx217=(($186)|0);
      var $187=HEAPF64[(($arrayidx217)>>3)];
      var $188=$dist_addr;
      var $189=$p2_addr;
      var $arrayidx218=(($189)|0);
      var $190=HEAPF64[(($arrayidx218)>>3)];
      var $191=$p1_addr;
      var $arrayidx219=(($191)|0);
      var $192=HEAPF64[(($arrayidx219)>>3)];
      var $sub220=($190)-($192);
      var $mul221=($188)*($sub220);
      var $193=$temp;
      var $div222=($mul221)/($193);
      var $add223=($187)+($div222);
      var $194=$dist_addr;
      var $arrayidx224=(($u1)|0);
      var $195=HEAPF64[(($arrayidx224)>>3)];
      var $mul225=($194)*($195);
      var $add226=($add223)+($mul225);
      var $196=$p4_addr;
      var $arrayidx227=(($196)|0);
      HEAPF64[(($arrayidx227)>>3)]=$add226;
      var $197=$p2_addr;
      var $arrayidx228=(($197+8)|0);
      var $198=HEAPF64[(($arrayidx228)>>3)];
      var $199=$dist_addr;
      var $200=$p2_addr;
      var $arrayidx229=(($200+8)|0);
      var $201=HEAPF64[(($arrayidx229)>>3)];
      var $202=$p1_addr;
      var $arrayidx230=(($202+8)|0);
      var $203=HEAPF64[(($arrayidx230)>>3)];
      var $sub231=($201)-($203);
      var $mul232=($199)*($sub231);
      var $204=$temp;
      var $div233=($mul232)/($204);
      var $add234=($198)+($div233);
      var $205=$dist_addr;
      var $arrayidx235=(($u1+8)|0);
      var $206=HEAPF64[(($arrayidx235)>>3)];
      var $mul236=($205)*($206);
      var $add237=($add234)+($mul236);
      var $207=$p4_addr;
      var $arrayidx238=(($207+8)|0);
      HEAPF64[(($arrayidx238)>>3)]=$add237;
      var $208=$p2_addr;
      var $arrayidx239=(($208)|0);
      var $209=HEAPF64[(($arrayidx239)>>3)];
      var $210=$dist_addr;
      var $211=$p2_addr;
      var $arrayidx240=(($211)|0);
      var $212=HEAPF64[(($arrayidx240)>>3)];
      var $213=$p1_addr;
      var $arrayidx241=(($213)|0);
      var $214=HEAPF64[(($arrayidx241)>>3)];
      var $sub242=($212)-($214);
      var $mul243=($210)*($sub242);
      var $215=$temp;
      var $div244=($mul243)/($215);
      var $add245=($209)+($div244);
      var $216=$dist_addr;
      var $arrayidx246=(($u1)|0);
      var $217=HEAPF64[(($arrayidx246)>>3)];
      var $mul247=($216)*($217);
      var $sub248=($add245)-($mul247);
      var $218=$p5_addr;
      var $arrayidx249=(($218)|0);
      HEAPF64[(($arrayidx249)>>3)]=$sub248;
      var $219=$p2_addr;
      var $arrayidx250=(($219+8)|0);
      var $220=HEAPF64[(($arrayidx250)>>3)];
      var $221=$dist_addr;
      var $222=$p2_addr;
      var $arrayidx251=(($222+8)|0);
      var $223=HEAPF64[(($arrayidx251)>>3)];
      var $224=$p1_addr;
      var $arrayidx252=(($224+8)|0);
      var $225=HEAPF64[(($arrayidx252)>>3)];
      var $sub253=($223)-($225);
      var $mul254=($221)*($sub253);
      var $226=$temp;
      var $div255=($mul254)/($226);
      var $add256=($220)+($div255);
      var $227=$dist_addr;
      var $arrayidx257=(($u1+8)|0);
      var $228=HEAPF64[(($arrayidx257)>>3)];
      var $mul258=($227)*($228);
      var $sub259=($add256)-($mul258);
      var $229=$p5_addr;
      var $arrayidx260=(($229+8)|0);
      HEAPF64[(($arrayidx260)>>3)]=$sub259;
      label = 25; break;
    case 22: 
      var $arrayidx262=(($u1)|0);
      var $230=HEAPF64[(($arrayidx262)>>3)];
      var $arrayidx263=(($u2)|0);
      var $231=HEAPF64[(($arrayidx263)>>3)];
      var $mul264=($230)*($231);
      var $arrayidx265=(($u1+8)|0);
      var $232=HEAPF64[(($arrayidx265)>>3)];
      var $arrayidx266=(($u2+8)|0);
      var $233=HEAPF64[(($arrayidx266)>>3)];
      var $mul267=($232)*($233);
      var $add268=($mul264)+($mul267);
      var $cmp269=$add268 < 0;
      if ($cmp269) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $arrayidx271=(($u2)|0);
      var $234=HEAPF64[(($arrayidx271)>>3)];
      var $sub272=(-$234);
      var $arrayidx273=(($u2)|0);
      HEAPF64[(($arrayidx273)>>3)]=$sub272;
      var $arrayidx274=(($u2+8)|0);
      var $235=HEAPF64[(($arrayidx274)>>3)];
      var $sub275=(-$235);
      var $arrayidx276=(($u2+8)|0);
      HEAPF64[(($arrayidx276)>>3)]=$sub275;
      label = 24; break;
    case 24: 
      var $arrayidx278=(($u1)|0);
      var $236=HEAPF64[(($arrayidx278)>>3)];
      var $arrayidx279=(($u2)|0);
      var $237=HEAPF64[(($arrayidx279)>>3)];
      var $add280=($236)+($237);
      var $mul281=($add280)*(0.5);
      var $arrayidx282=(($u)|0);
      HEAPF64[(($arrayidx282)>>3)]=$mul281;
      var $arrayidx283=(($u1+8)|0);
      var $238=HEAPF64[(($arrayidx283)>>3)];
      var $arrayidx284=(($u2+8)|0);
      var $239=HEAPF64[(($arrayidx284)>>3)];
      var $add285=($238)+($239);
      var $mul286=($add285)*(0.5);
      var $arrayidx287=(($u+8)|0);
      HEAPF64[(($arrayidx287)>>3)]=$mul286;
      var $arraydecay288=(($u)|0);
      var $call289=_r8vec_norm(2, $arraydecay288);
      $temp=$call289;
      var $arrayidx290=(($u)|0);
      var $240=HEAPF64[(($arrayidx290)>>3)];
      var $241=$temp;
      var $div291=($240)/($241);
      var $arrayidx292=(($u)|0);
      HEAPF64[(($arrayidx292)>>3)]=$div291;
      var $arrayidx293=(($u+8)|0);
      var $242=HEAPF64[(($arrayidx293)>>3)];
      var $243=$temp;
      var $div294=($242)/($243);
      var $arrayidx295=(($u+8)|0);
      HEAPF64[(($arrayidx295)>>3)]=$div294;
      var $arrayidx296=(($u)|0);
      var $244=HEAPF64[(($arrayidx296)>>3)];
      var $arrayidx297=(($u1)|0);
      var $245=HEAPF64[(($arrayidx297)>>3)];
      var $mul298=($244)*($245);
      var $arrayidx299=(($u+8)|0);
      var $246=HEAPF64[(($arrayidx299)>>3)];
      var $arrayidx300=(($u1+8)|0);
      var $247=HEAPF64[(($arrayidx300)>>3)];
      var $mul301=($246)*($247);
      var $add302=($mul298)+($mul301);
      $stheta=$add302;
      var $248=$p2_addr;
      var $arrayidx303=(($248)|0);
      var $249=HEAPF64[(($arrayidx303)>>3)];
      var $250=$dist_addr;
      var $arrayidx304=(($u)|0);
      var $251=HEAPF64[(($arrayidx304)>>3)];
      var $mul305=($250)*($251);
      var $252=$stheta;
      var $div306=($mul305)/($252);
      var $add307=($249)+($div306);
      var $253=$p4_addr;
      var $arrayidx308=(($253)|0);
      HEAPF64[(($arrayidx308)>>3)]=$add307;
      var $254=$p2_addr;
      var $arrayidx309=(($254+8)|0);
      var $255=HEAPF64[(($arrayidx309)>>3)];
      var $256=$dist_addr;
      var $arrayidx310=(($u+8)|0);
      var $257=HEAPF64[(($arrayidx310)>>3)];
      var $mul311=($256)*($257);
      var $258=$stheta;
      var $div312=($mul311)/($258);
      var $add313=($255)+($div312);
      var $259=$p4_addr;
      var $arrayidx314=(($259+8)|0);
      HEAPF64[(($arrayidx314)>>3)]=$add313;
      var $260=$p2_addr;
      var $arrayidx315=(($260)|0);
      var $261=HEAPF64[(($arrayidx315)>>3)];
      var $262=$dist_addr;
      var $arrayidx316=(($u)|0);
      var $263=HEAPF64[(($arrayidx316)>>3)];
      var $mul317=($262)*($263);
      var $264=$stheta;
      var $div318=($mul317)/($264);
      var $sub319=($261)-($div318);
      var $265=$p5_addr;
      var $arrayidx320=(($265)|0);
      HEAPF64[(($arrayidx320)>>3)]=$sub319;
      var $266=$p2_addr;
      var $arrayidx321=(($266+8)|0);
      var $267=HEAPF64[(($arrayidx321)>>3)];
      var $268=$dist_addr;
      var $arrayidx322=(($u+8)|0);
      var $269=HEAPF64[(($arrayidx322)>>3)];
      var $mul323=($268)*($269);
      var $270=$stheta;
      var $div324=($mul323)/($270);
      var $sub325=($267)-($div324);
      var $271=$p5_addr;
      var $arrayidx326=(($271+8)|0);
      HEAPF64[(($arrayidx326)>>3)]=$sub325;
      label = 25; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_box_2d"] = _angle_box_2d;
function _radians_to_degrees($angle) {
  var label = 0;
  var $angle_addr;
  var $pi;
  var $value;
  $angle_addr=$angle;
  $pi=3.141592653589793;
  var $0=$angle_addr;
  var $1=$pi;
  var $div=($0)/($1);
  var $mul=($div)*(180);
  $value=$mul;
  var $2=$value;
  return $2;
}
Module["_radians_to_degrees"] = _radians_to_degrees;
function _r8vec_dot_product($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$a1_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$a2_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($5)*($8);
      var $add=($2)+($mul);
      $value=$add;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $10=$value;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_dot_product"] = _r8vec_dot_product;
function _angle_deg_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $angle_rad;
      var $p=__stackBase__;
      var $pi;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pi=3.141592653589793;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p2_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p3_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p1_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p2_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p2_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $arrayidx12=(($p)|0);
      HEAPF64[(($arrayidx12)>>3)]=$add;
      var $16=$p1_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$p2_addr;
      var $arrayidx14=(($18)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $20=$p3_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$p2_addr;
      var $arrayidx17=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($23);
      var $mul19=($sub15)*($sub18);
      var $24=$p1_addr;
      var $arrayidx20=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$p2_addr;
      var $arrayidx21=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=$p3_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$p2_addr;
      var $arrayidx24=(($30)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($29)-($31);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      var $arrayidx28=(($p+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub27;
      var $arrayidx29=(($p)|0);
      var $32=HEAPF64[(($arrayidx29)>>3)];
      var $cmp=$32 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $arrayidx30=(($p+8)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $cmp31=$33 == 0;
      if ($cmp31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $value=0;
      label = 8; break;
    case 5: 
      var $arrayidx32=(($p+8)|0);
      var $34=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($p)|0);
      var $35=HEAPF64[(($arrayidx33)>>3)];
      var $call=Math.atan2($34, $35);
      $angle_rad=$call;
      var $36=$angle_rad;
      var $cmp34=$36 < 0;
      if ($cmp34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $37=$angle_rad;
      var $38=$pi;
      var $mul36=($38)*(2);
      var $add37=($37)+($mul36);
      $angle_rad=$add37;
      label = 7; break;
    case 7: 
      var $39=$angle_rad;
      var $call38=_radians_to_degrees($39);
      $value=$call38;
      label = 8; break;
    case 8: 
      var $40=$value;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_deg_2d"] = _angle_deg_2d;
function _angle_half_2d($p1, $p2, $p3) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $i;
      var $norm;
      var $p4;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      var $call=_malloc(16);
      var $0=$call;
      $p4=$0;
      var $1=$p1_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$p2_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=$p1_addr;
      var $arrayidx2=(($5)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p2_addr;
      var $arrayidx3=(($7)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $mul=($sub)*($sub4);
      var $9=$p1_addr;
      var $arrayidx5=(($9+8)|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$p2_addr;
      var $arrayidx6=(($11+8)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($10)-($12);
      var $13=$p1_addr;
      var $arrayidx8=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx8)>>3)];
      var $15=$p2_addr;
      var $arrayidx9=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($14)-($16);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $call12=Math.sqrt($add);
      $norm=$call12;
      $i=0;
      label = 3; break;
    case 3: 
      var $17=$i;
      var $cmp=(($17)|(0)) < 2;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $18=$i;
      var $19=$p1_addr;
      var $arrayidx13=(($19+($18<<3))|0);
      var $20=HEAPF64[(($arrayidx13)>>3)];
      var $21=$i;
      var $22=$p2_addr;
      var $arrayidx14=(($22+($21<<3))|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($20)-($23);
      var $24=$norm;
      var $div=($sub15)/($24);
      var $25=$i;
      var $26=$p4;
      var $arrayidx16=(($26+($25<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $27=$i;
      var $inc=((($27)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $28=$p3_addr;
      var $arrayidx17=(($28)|0);
      var $29=HEAPF64[(($arrayidx17)>>3)];
      var $30=$p2_addr;
      var $arrayidx18=(($30)|0);
      var $31=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($29)-($31);
      var $32=$p3_addr;
      var $arrayidx20=(($32)|0);
      var $33=HEAPF64[(($arrayidx20)>>3)];
      var $34=$p2_addr;
      var $arrayidx21=(($34)|0);
      var $35=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($33)-($35);
      var $mul23=($sub19)*($sub22);
      var $36=$p3_addr;
      var $arrayidx24=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx24)>>3)];
      var $38=$p2_addr;
      var $arrayidx25=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($37)-($39);
      var $40=$p3_addr;
      var $arrayidx27=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx27)>>3)];
      var $42=$p2_addr;
      var $arrayidx28=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($41)-($43);
      var $mul30=($sub26)*($sub29);
      var $add31=($mul23)+($mul30);
      var $call32=Math.sqrt($add31);
      $norm=$call32;
      $i=0;
      label = 7; break;
    case 7: 
      var $44=$i;
      var $cmp34=(($44)|(0)) < 2;
      if ($cmp34) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $45=$i;
      var $46=$p4;
      var $arrayidx36=(($46+($45<<3))|0);
      var $47=HEAPF64[(($arrayidx36)>>3)];
      var $48=$i;
      var $49=$p3_addr;
      var $arrayidx37=(($49+($48<<3))|0);
      var $50=HEAPF64[(($arrayidx37)>>3)];
      var $51=$i;
      var $52=$p2_addr;
      var $arrayidx38=(($52+($51<<3))|0);
      var $53=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($50)-($53);
      var $54=$norm;
      var $div40=($sub39)/($54);
      var $add41=($47)+($div40);
      var $55=$i;
      var $56=$p4;
      var $arrayidx42=(($56+($55<<3))|0);
      HEAPF64[(($arrayidx42)>>3)]=$add41;
      label = 9; break;
    case 9: 
      var $57=$i;
      var $inc44=((($57)+(1))|0);
      $i=$inc44;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $58=$i;
      var $cmp47=(($58)|(0)) < 2;
      if ($cmp47) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $59=$i;
      var $60=$p4;
      var $arrayidx49=(($60+($59<<3))|0);
      var $61=HEAPF64[(($arrayidx49)>>3)];
      var $mul50=($61)*(0.5);
      var $62=$i;
      var $63=$p4;
      var $arrayidx51=(($63+($62<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$mul50;
      label = 13; break;
    case 13: 
      var $64=$i;
      var $inc53=((($64)+(1))|0);
      $i=$inc53;
      label = 11; break;
    case 14: 
      var $65=$p4;
      var $call55=_r8vec_norm(2, $65);
      $norm=$call55;
      $i=0;
      label = 15; break;
    case 15: 
      var $66=$i;
      var $cmp57=(($66)|(0)) < 2;
      if ($cmp57) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $67=$i;
      var $68=$p2_addr;
      var $arrayidx59=(($68+($67<<3))|0);
      var $69=HEAPF64[(($arrayidx59)>>3)];
      var $70=$i;
      var $71=$p4;
      var $arrayidx60=(($71+($70<<3))|0);
      var $72=HEAPF64[(($arrayidx60)>>3)];
      var $73=$norm;
      var $div61=($72)/($73);
      var $add62=($69)+($div61);
      var $74=$i;
      var $75=$p4;
      var $arrayidx63=(($75+($74<<3))|0);
      HEAPF64[(($arrayidx63)>>3)]=$add62;
      label = 17; break;
    case 17: 
      var $76=$i;
      var $inc65=((($76)+(1))|0);
      $i=$inc65;
      label = 15; break;
    case 18: 
      var $77=$p4;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_half_2d"] = _angle_half_2d;
function _angle_rad_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p=__stackBase__;
      var $pi;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pi=3.141592653589793;
      var $0=$p3_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p2_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p1_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p3_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p2_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p1_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p2_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $arrayidx12=(($p)|0);
      HEAPF64[(($arrayidx12)>>3)]=$add;
      var $16=$p3_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$p2_addr;
      var $arrayidx14=(($18)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $20=$p1_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$p2_addr;
      var $arrayidx17=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($23);
      var $mul19=($sub15)*($sub18);
      var $24=$p3_addr;
      var $arrayidx20=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$p2_addr;
      var $arrayidx21=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=$p1_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$p2_addr;
      var $arrayidx24=(($30)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($29)-($31);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      var $arrayidx28=(($p+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub27;
      var $arrayidx29=(($p)|0);
      var $32=HEAPF64[(($arrayidx29)>>3)];
      var $cmp=$32 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $arrayidx30=(($p+8)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $cmp31=$33 == 0;
      if ($cmp31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $value=0;
      var $34=$value;
      $retval=$34;
      label = 8; break;
    case 5: 
      var $arrayidx32=(($p+8)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($p)|0);
      var $36=HEAPF64[(($arrayidx33)>>3)];
      var $call=Math.atan2($35, $36);
      $value=$call;
      var $37=$value;
      var $cmp34=$37 < 0;
      if ($cmp34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38=$value;
      var $39=$pi;
      var $mul36=($39)*(2);
      var $add37=($38)+($mul36);
      $value=$add37;
      label = 7; break;
    case 7: 
      var $40=$value;
      $retval=$40;
      label = 8; break;
    case 8: 
      var $41=$retval;
      STACKTOP = __stackBase__;
      return $41;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_rad_2d"] = _angle_rad_2d;
function _angle_rad_3d($p1, $p2, $p3) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $dot;
      var $i;
      var $v1norm;
      var $v2norm;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $v1norm=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$v1norm;
      var $2=$i;
      var $3=$p1_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$p2_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($4)-($7);
      var $8=Math.pow($sub, 2);
      var $add=($1)+($8);
      $v1norm=$add;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $10=$v1norm;
      var $call=Math.sqrt($10);
      $v1norm=$call;
      var $11=$v1norm;
      var $cmp2=$11 == 0;
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $value=0;
      var $12=$value;
      $retval=$12;
      label = 19; break;
    case 8: 
      $v2norm=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $13=$i;
      var $cmp4=(($13)|(0)) < 3;
      if ($cmp4) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $14=$v2norm;
      var $15=$i;
      var $16=$p3_addr;
      var $arrayidx6=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx6)>>3)];
      var $18=$i;
      var $19=$p2_addr;
      var $arrayidx7=(($19+($18<<3))|0);
      var $20=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($17)-($20);
      var $21=Math.pow($sub8, 2);
      var $add9=($14)+($21);
      $v2norm=$add9;
      label = 11; break;
    case 11: 
      var $22=$i;
      var $inc11=((($22)+(1))|0);
      $i=$inc11;
      label = 9; break;
    case 12: 
      var $23=$v2norm;
      var $call13=Math.sqrt($23);
      $v2norm=$call13;
      var $24=$v2norm;
      var $cmp14=$24 == 0;
      if ($cmp14) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $value=0;
      var $25=$value;
      $retval=$25;
      label = 19; break;
    case 14: 
      $dot=0;
      $i=0;
      label = 15; break;
    case 15: 
      var $26=$i;
      var $cmp18=(($26)|(0)) < 3;
      if ($cmp18) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $27=$dot;
      var $28=$i;
      var $29=$p1_addr;
      var $arrayidx20=(($29+($28<<3))|0);
      var $30=HEAPF64[(($arrayidx20)>>3)];
      var $31=$i;
      var $32=$p2_addr;
      var $arrayidx21=(($32+($31<<3))|0);
      var $33=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($30)-($33);
      var $34=$i;
      var $35=$p3_addr;
      var $arrayidx23=(($35+($34<<3))|0);
      var $36=HEAPF64[(($arrayidx23)>>3)];
      var $37=$i;
      var $38=$p2_addr;
      var $arrayidx24=(($38+($37<<3))|0);
      var $39=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($36)-($39);
      var $mul=($sub22)*($sub25);
      var $add26=($27)+($mul);
      $dot=$add26;
      label = 17; break;
    case 17: 
      var $40=$i;
      var $inc28=((($40)+(1))|0);
      $i=$inc28;
      label = 15; break;
    case 18: 
      var $41=$dot;
      var $42=$v1norm;
      var $43=$v2norm;
      var $mul30=($42)*($43);
      var $div=($41)/($mul30);
      var $call31=_r8_acos($div);
      $value=$call31;
      var $44=$value;
      $retval=$44;
      label = 19; break;
    case 19: 
      var $45=$retval;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_rad_3d"] = _angle_rad_3d;
function _r8_acos($c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $c_addr;
      var $angle;
      var $pi;
      $c_addr=$c;
      $pi=3.141592653589793;
      var $0=$c_addr;
      var $cmp=$0 <= -1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$pi;
      $angle=$1;
      label = 8; break;
    case 4: 
      var $2=$c_addr;
      var $cmp1=1 <= $2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $angle=0;
      label = 7; break;
    case 6: 
      var $3=$c_addr;
      var $call=Math.acos($3);
      $angle=$call;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $4=$angle;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_acos"] = _r8_acos;
function _angle_rad_nd($dim_num, $vec1, $vec2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $vec1_addr;
      var $vec2_addr;
      var $dot;
      var $v1norm;
      var $v2norm;
      var $value;
      $dim_num_addr=$dim_num;
      $vec1_addr=$vec1;
      $vec2_addr=$vec2;
      var $0=$dim_num_addr;
      var $1=$vec1_addr;
      var $2=$vec2_addr;
      var $call=_r8vec_dot_product($0, $1, $2);
      $dot=$call;
      var $3=$dim_num_addr;
      var $4=$vec1_addr;
      var $call1=_r8vec_norm($3, $4);
      $v1norm=$call1;
      var $5=$dim_num_addr;
      var $6=$vec2_addr;
      var $call2=_r8vec_norm($5, $6);
      $v2norm=$call2;
      var $7=$v1norm;
      var $cmp=$7 == 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $8=$v2norm;
      var $cmp3=$8 == 0;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $value=0;
      label = 6; break;
    case 5: 
      var $9=$dot;
      var $10=$v1norm;
      var $11=$v2norm;
      var $mul=($10)*($11);
      var $div=($9)/($mul);
      var $call4=Math.acos($div);
      $value=$call4;
      label = 6; break;
    case 6: 
      var $12=$value;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_rad_nd"] = _angle_rad_nd;
function _angle_turn_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p=__stackBase__;
      var $pi;
      var $turn;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pi=3.141592653589793;
      var $0=$p3_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p2_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p1_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p3_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p2_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p1_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p2_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $arrayidx12=(($p)|0);
      HEAPF64[(($arrayidx12)>>3)]=$add;
      var $16=$p3_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$p2_addr;
      var $arrayidx14=(($18)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $20=$p1_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$p2_addr;
      var $arrayidx17=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($23);
      var $mul19=($sub15)*($sub18);
      var $24=$p3_addr;
      var $arrayidx20=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$p2_addr;
      var $arrayidx21=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=$p1_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$p2_addr;
      var $arrayidx24=(($30)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($29)-($31);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      var $arrayidx28=(($p+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub27;
      var $arrayidx29=(($p)|0);
      var $32=HEAPF64[(($arrayidx29)>>3)];
      var $cmp=$32 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $arrayidx30=(($p+8)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $cmp31=$33 == 0;
      if ($cmp31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $turn=0;
      label = 6; break;
    case 5: 
      var $34=$pi;
      var $arrayidx32=(($p+8)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($p)|0);
      var $36=HEAPF64[(($arrayidx33)>>3)];
      var $call=_r8_atan($35, $36);
      var $sub34=($34)-($call);
      $turn=$sub34;
      label = 6; break;
    case 6: 
      var $37=$turn;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
Module["_angle_turn_2d"] = _angle_turn_2d;
function _annulus_area_2d($r1, $r2) {
  var label = 0;
  var $r1_addr;
  var $r2_addr;
  var $area;
  var $pi;
  $r1_addr=$r1;
  $r2_addr=$r2;
  $pi=3.141592653589793;
  var $0=$pi;
  var $1=$r2_addr;
  var $2=$r1_addr;
  var $add=($1)+($2);
  var $mul=($0)*($add);
  var $3=$r2_addr;
  var $4=$r1_addr;
  var $sub=($3)-($4);
  var $mul1=($mul)*($sub);
  $area=$mul1;
  var $5=$area;
  return $5;
}
Module["_annulus_area_2d"] = _annulus_area_2d;
function _annulus_sector_area_2d($r1, $r2, $theta1, $theta2) {
  var label = 0;
  var $r1_addr;
  var $r2_addr;
  var $theta1_addr;
  var $theta2_addr;
  var $area;
  $r1_addr=$r1;
  $r2_addr=$r2;
  $theta1_addr=$theta1;
  $theta2_addr=$theta2;
  var $0=$theta2_addr;
  var $1=$theta1_addr;
  var $sub=($0)-($1);
  var $mul=($sub)*(0.5);
  var $2=$r2_addr;
  var $3=$r1_addr;
  var $add=($2)+($3);
  var $mul1=($mul)*($add);
  var $4=$r2_addr;
  var $5=$r1_addr;
  var $sub2=($4)-($5);
  var $mul3=($mul1)*($sub2);
  $area=$mul3;
  var $6=$area;
  return $6;
}
Module["_annulus_sector_area_2d"] = _annulus_sector_area_2d;
function _r8_uniform_01($seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $seed_addr;
      var $k;
      var $r;
      $seed_addr=$seed;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $div=((((($1)|(0)))/(127773))&-1);
      $k=$div;
      var $2=$seed_addr;
      var $3=HEAP32[(($2)>>2)];
      var $4=$k;
      var $mul=((($4)*(127773))&-1);
      var $sub=((($3)-($mul))|0);
      var $mul1=((($sub)*(16807))&-1);
      var $5=$k;
      var $mul2=((($5)*(2836))&-1);
      var $sub3=((($mul1)-($mul2))|0);
      var $6=$seed_addr;
      HEAP32[(($6)>>2)]=$sub3;
      var $7=$seed_addr;
      var $8=HEAP32[(($7)>>2)];
      var $cmp=(($8)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$seed_addr;
      var $10=HEAP32[(($9)>>2)];
      var $add=((($10)+(2147483647))|0);
      var $11=$seed_addr;
      HEAP32[(($11)>>2)]=$add;
      label = 4; break;
    case 4: 
      var $12=$seed_addr;
      var $13=HEAP32[(($12)>>2)];
      var $conv=(($13)|(0));
      var $mul4=($conv)*(4.656612875e-10);
      $r=$mul4;
      var $14=$r;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_uniform_01"] = _r8_uniform_01;
function _r8_atan($y, $x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $y_addr;
      var $x_addr;
      var $abs_x;
      var $abs_y;
      var $pi;
      var $theta;
      var $theta_0;
      $y_addr=$y;
      $x_addr=$x;
      $pi=3.141592653589793;
      var $0=$x_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $1=$y_addr;
      var $cmp1=0 < $1;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=$pi;
      var $div=($2)/(2);
      $theta=$div;
      label = 11; break;
    case 5: 
      var $3=$y_addr;
      var $cmp3=$3 < 0;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$pi;
      var $mul=($4)*(3);
      var $div5=($mul)/(2);
      $theta=$div5;
      label = 10; break;
    case 7: 
      var $5=$y_addr;
      var $cmp7=$5 == 0;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $theta=0;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 36; break;
    case 12: 
      var $6=$y_addr;
      var $cmp12=$6 == 0;
      if ($cmp12) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $7=$x_addr;
      var $cmp14=0 < $7;
      if ($cmp14) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $theta=0;
      label = 18; break;
    case 15: 
      var $8=$x_addr;
      var $cmp17=$8 < 0;
      if ($cmp17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $9=$pi;
      $theta=$9;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 35; break;
    case 19: 
      var $10=$y_addr;
      var $call=Math.abs($10);
      $abs_y=$call;
      var $11=$x_addr;
      var $call22=Math.abs($11);
      $abs_x=$call22;
      var $12=$abs_y;
      var $13=$abs_x;
      var $call23=Math.atan2($12, $13);
      $theta_0=$call23;
      var $14=$x_addr;
      var $cmp24=0 < $14;
      if ($cmp24) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $15=$y_addr;
      var $cmp25=0 < $15;
      if ($cmp25) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $16=$theta_0;
      $theta=$16;
      label = 34; break;
    case 22: 
      var $17=$x_addr;
      var $cmp28=$17 < 0;
      if ($cmp28) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $18=$y_addr;
      var $cmp30=0 < $18;
      if ($cmp30) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $19=$pi;
      var $20=$theta_0;
      var $sub=($19)-($20);
      $theta=$sub;
      label = 33; break;
    case 25: 
      var $21=$x_addr;
      var $cmp33=$21 < 0;
      if ($cmp33) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $22=$y_addr;
      var $cmp35=$22 < 0;
      if ($cmp35) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $23=$pi;
      var $24=$theta_0;
      var $add=($23)+($24);
      $theta=$add;
      label = 32; break;
    case 28: 
      var $25=$x_addr;
      var $cmp38=0 < $25;
      if ($cmp38) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $26=$y_addr;
      var $cmp40=$26 < 0;
      if ($cmp40) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $27=$pi;
      var $mul42=($27)*(2);
      var $28=$theta_0;
      var $sub43=($mul42)-($28);
      $theta=$sub43;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $29=$theta;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_atan"] = _r8_atan;
function _anglei_deg_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p=__stackBase__;
      var $pi;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pi=3.141592653589793;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p2_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p3_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p1_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p2_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p2_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $arrayidx12=(($p)|0);
      HEAPF64[(($arrayidx12)>>3)]=$add;
      var $16=$p1_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$p2_addr;
      var $arrayidx14=(($18)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $20=$p3_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$p2_addr;
      var $arrayidx17=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($23);
      var $mul19=($sub15)*($sub18);
      var $24=$p1_addr;
      var $arrayidx20=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$p2_addr;
      var $arrayidx21=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=$p3_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$p2_addr;
      var $arrayidx24=(($30)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($29)-($31);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      var $arrayidx28=(($p+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub27;
      var $arrayidx29=(($p)|0);
      var $32=HEAPF64[(($arrayidx29)>>3)];
      var $cmp=$32 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $arrayidx30=(($p+8)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $cmp31=$33 == 0;
      if ($cmp31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $value=0;
      label = 10; break;
    case 5: 
      var $arrayidx32=(($p+8)|0);
      var $34=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($p)|0);
      var $35=HEAPF64[(($arrayidx33)>>3)];
      var $call=Math.atan2($34, $35);
      $value=$call;
      var $36=$value;
      var $cmp34=$36 < 0;
      if ($cmp34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $37=$value;
      var $38=$pi;
      var $mul36=($38)*(2);
      var $add37=($37)+($mul36);
      $value=$add37;
      label = 7; break;
    case 7: 
      var $39=$value;
      var $call38=_radians_to_degrees($39);
      $value=$call38;
      var $40=$value;
      var $cmp39=180 < $40;
      if ($cmp39) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $41=$value;
      var $sub41=(360)-($41);
      $value=$sub41;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $42=$value;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
Module["_anglei_deg_2d"] = _anglei_deg_2d;
function _anglei_rad_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p=__stackBase__;
      var $pi;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pi=3.141592653589793;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p2_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p3_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p1_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p2_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p2_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $arrayidx12=(($p)|0);
      HEAPF64[(($arrayidx12)>>3)]=$add;
      var $16=$p1_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$p2_addr;
      var $arrayidx14=(($18)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $20=$p3_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$p2_addr;
      var $arrayidx17=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($23);
      var $mul19=($sub15)*($sub18);
      var $24=$p1_addr;
      var $arrayidx20=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$p2_addr;
      var $arrayidx21=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=$p3_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$p2_addr;
      var $arrayidx24=(($30)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($29)-($31);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      var $arrayidx28=(($p+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub27;
      var $arrayidx29=(($p)|0);
      var $32=HEAPF64[(($arrayidx29)>>3)];
      var $cmp=$32 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $arrayidx30=(($p+8)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $cmp31=$33 == 0;
      if ($cmp31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $value=0;
      label = 10; break;
    case 5: 
      var $arrayidx32=(($p+8)|0);
      var $34=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($p)|0);
      var $35=HEAPF64[(($arrayidx33)>>3)];
      var $call=Math.atan2($34, $35);
      $value=$call;
      var $36=$value;
      var $cmp34=$36 < 0;
      if ($cmp34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $37=$value;
      var $38=$pi;
      var $mul36=($38)*(2);
      var $add37=($37)+($mul36);
      $value=$add37;
      label = 7; break;
    case 7: 
      var $39=$pi;
      var $40=$value;
      var $cmp38=$39 < $40;
      if ($cmp38) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $41=$pi;
      var $mul40=($41)*(2);
      var $42=$value;
      var $sub41=($mul40)-($42);
      $value=$sub41;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $43=$value;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
Module["_anglei_rad_2d"] = _anglei_rad_2d;
function _annulus_sector_centroid_2d($pc, $r1, $r2, $theta1, $theta2) {
  var label = 0;
  var $pc_addr;
  var $r1_addr;
  var $r2_addr;
  var $theta1_addr;
  var $theta2_addr;
  var $centroid;
  var $r;
  var $theta;
  $pc_addr=$pc;
  $r1_addr=$r1;
  $r2_addr=$r2;
  $theta1_addr=$theta1;
  $theta2_addr=$theta2;
  var $0=$theta2_addr;
  var $1=$theta1_addr;
  var $sub=($0)-($1);
  $theta=$sub;
  var $2=$theta;
  var $div=($2)/(2);
  var $call=Math.sin($div);
  var $mul=($call)*(4);
  var $3=$theta;
  var $mul1=($3)*(3);
  var $div2=($mul)/($mul1);
  var $4=$r1_addr;
  var $5=$r1_addr;
  var $mul3=($4)*($5);
  var $6=$r1_addr;
  var $7=$r2_addr;
  var $mul4=($6)*($7);
  var $add=($mul3)+($mul4);
  var $8=$r2_addr;
  var $9=$r2_addr;
  var $mul5=($8)*($9);
  var $add6=($add)+($mul5);
  var $mul7=($div2)*($add6);
  var $10=$r1_addr;
  var $11=$r2_addr;
  var $add8=($10)+($11);
  var $div9=($mul7)/($add8);
  $r=$div9;
  var $call10=_malloc(16);
  var $12=$call10;
  $centroid=$12;
  var $13=$pc_addr;
  var $arrayidx=(($13)|0);
  var $14=HEAPF64[(($arrayidx)>>3)];
  var $15=$r;
  var $16=$theta1_addr;
  var $17=$theta;
  var $div11=($17)/(2);
  var $add12=($16)+($div11);
  var $call13=Math.cos($add12);
  var $mul14=($15)*($call13);
  var $add15=($14)+($mul14);
  var $18=$centroid;
  var $arrayidx16=(($18)|0);
  HEAPF64[(($arrayidx16)>>3)]=$add15;
  var $19=$pc_addr;
  var $arrayidx17=(($19+8)|0);
  var $20=HEAPF64[(($arrayidx17)>>3)];
  var $21=$r;
  var $22=$theta1_addr;
  var $23=$theta;
  var $div18=($23)/(2);
  var $add19=($22)+($div18);
  var $call20=Math.sin($add19);
  var $mul21=($21)*($call20);
  var $add22=($20)+($mul21);
  var $24=$centroid;
  var $arrayidx23=(($24+8)|0);
  HEAPF64[(($arrayidx23)>>3)]=$add22;
  var $25=$centroid;
  return $25;
}
Module["_annulus_sector_centroid_2d"] = _annulus_sector_centroid_2d;
function _ball_unit_sample_2d($seed) {
  var label = 0;
  var $seed_addr;
  var $pi;
  var $r;
  var $theta;
  var $x;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$seed_addr;
  var $call=_r8_uniform_01($0);
  $r=$call;
  var $1=$r;
  var $call1=Math.sqrt($1);
  $r=$call1;
  var $2=$seed_addr;
  var $call2=_r8_uniform_01($2);
  $theta=$call2;
  var $3=$pi;
  var $mul=($3)*(2);
  var $4=$theta;
  var $mul3=($mul)*($4);
  $theta=$mul3;
  var $call4=_malloc(16);
  var $5=$call4;
  $x=$5;
  var $6=$r;
  var $7=$theta;
  var $call5=Math.cos($7);
  var $mul6=($6)*($call5);
  var $8=$x;
  var $arrayidx=(($8)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul6;
  var $9=$r;
  var $10=$theta;
  var $call7=Math.sin($10);
  var $mul8=($9)*($call7);
  var $11=$x;
  var $arrayidx9=(($11+8)|0);
  HEAPF64[(($arrayidx9)>>3)]=$mul8;
  var $12=$x;
  return $12;
}
Module["_ball_unit_sample_2d"] = _ball_unit_sample_2d;
function _ball_unit_sample_3d($seed) {
  var label = 0;
  var $seed_addr;
  var $phi;
  var $pi;
  var $r;
  var $theta;
  var $vdot;
  var $x;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$seed_addr;
  var $call=_r8_uniform_01($0);
  $vdot=$call;
  var $1=$vdot;
  var $mul=($1)*(2);
  var $sub=($mul)-(1);
  $vdot=$sub;
  var $2=$vdot;
  var $call1=_r8_acos($2);
  $phi=$call1;
  var $3=$seed_addr;
  var $call2=_r8_uniform_01($3);
  $theta=$call2;
  var $4=$pi;
  var $mul3=($4)*(2);
  var $5=$theta;
  var $mul4=($mul3)*($5);
  $theta=$mul4;
  var $6=$seed_addr;
  var $call5=_r8_uniform_01($6);
  $r=$call5;
  var $7=$r;
  var $8=Math.pow($7, 0.3333333333333333);
  $r=$8;
  var $call6=_malloc(24);
  var $9=$call6;
  $x=$9;
  var $10=$r;
  var $11=$theta;
  var $call7=Math.cos($11);
  var $mul8=($10)*($call7);
  var $12=$phi;
  var $call9=Math.sin($12);
  var $mul10=($mul8)*($call9);
  var $13=$x;
  var $arrayidx=(($13)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul10;
  var $14=$r;
  var $15=$theta;
  var $call11=Math.sin($15);
  var $mul12=($14)*($call11);
  var $16=$phi;
  var $call13=Math.sin($16);
  var $mul14=($mul12)*($call13);
  var $17=$x;
  var $arrayidx15=(($17+8)|0);
  HEAPF64[(($arrayidx15)>>3)]=$mul14;
  var $18=$r;
  var $19=$phi;
  var $call16=Math.cos($19);
  var $mul17=($18)*($call16);
  var $20=$x;
  var $arrayidx18=(($20+16)|0);
  HEAPF64[(($arrayidx18)>>3)]=$mul17;
  var $21=$x;
  return $21;
}
Module["_ball_unit_sample_3d"] = _ball_unit_sample_3d;
function _ball_unit_sample_nd($dim_num, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $seed_addr;
      var $i;
      var $r;
      var $random_cosine;
      var $random_sign;
      var $random_sine;
      var $x;
      var $xi;
      $dim_num_addr=$dim_num;
      $seed_addr=$seed;
      var $0=$dim_num_addr;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $x=$1;
      var $2=$x;
      var $arrayidx=(($2)|0);
      HEAPF64[(($arrayidx)>>3)]=1;
      $i=1;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$dim_num_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$i;
      var $6=$x;
      var $arrayidx1=(($6+($5<<3))|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $9=$dim_num_addr;
      var $sub=((($9)-(1))|0);
      var $cmp3=(($8)|(0)) < (($sub)|(0));
      if ($cmp3) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$seed_addr;
      var $call5=_r8_uniform_01($10);
      $random_cosine=$call5;
      var $11=$random_cosine;
      var $mul6=($11)*(2);
      var $sub7=($mul6)-(1);
      $random_cosine=$sub7;
      var $12=$seed_addr;
      var $call8=_r8_uniform_01($12);
      $random_sign=$call8;
      var $13=$random_sign;
      var $mul9=($13)*(2);
      var $sub10=($mul9)-(1);
      var $conv=(($sub10)&-1);
      var $mul11=($conv<<1);
      var $conv12=(($mul11)|(0));
      $random_sign=$conv12;
      var $14=$random_sign;
      var $15=$random_cosine;
      var $16=$random_cosine;
      var $mul13=($15)*($16);
      var $sub14=(1)-($mul13);
      var $call15=Math.sqrt($sub14);
      var $mul16=($14)*($call15);
      $random_sine=$mul16;
      var $17=$i;
      var $18=$x;
      var $arrayidx17=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx17)>>3)];
      $xi=$19;
      var $20=$random_cosine;
      var $21=$xi;
      var $mul18=($20)*($21);
      var $22=$i;
      var $23=$x;
      var $arrayidx19=(($23+($22<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$mul18;
      var $24=$random_sine;
      var $25=$xi;
      var $mul20=($24)*($25);
      var $26=$i;
      var $add=((($26)+(1))|0);
      var $27=$x;
      var $arrayidx21=(($27+($add<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$mul20;
      label = 9; break;
    case 9: 
      var $28=$i;
      var $inc23=((($28)+(1))|0);
      $i=$inc23;
      label = 7; break;
    case 10: 
      var $29=$seed_addr;
      var $call25=_r8_uniform_01($29);
      $r=$call25;
      var $30=$r;
      var $31=$dim_num_addr;
      var $conv26=(($31)|(0));
      var $div=(1)/($conv26);
      var $32=Math.pow($30, $div);
      $r=$32;
      $i=0;
      label = 11; break;
    case 11: 
      var $33=$i;
      var $34=$dim_num_addr;
      var $cmp28=(($33)|(0)) < (($34)|(0));
      if ($cmp28) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $35=$r;
      var $36=$i;
      var $37=$x;
      var $arrayidx31=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx31)>>3)];
      var $mul32=($35)*($38);
      var $39=$i;
      var $40=$x;
      var $arrayidx33=(($40+($39<<3))|0);
      HEAPF64[(($arrayidx33)>>3)]=$mul32;
      label = 13; break;
    case 13: 
      var $41=$i;
      var $inc35=((($41)+(1))|0);
      $i=$inc35;
      label = 11; break;
    case 14: 
      var $42=$x;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
Module["_ball_unit_sample_nd"] = _ball_unit_sample_nd;
function _box_01_contains_point_2d($p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p_addr;
      $p_addr=$p;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $cmp=0 <= $1;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$p_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $cmp2=$3 <= 1;
      if ($cmp2) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $4=$p_addr;
      var $arrayidx4=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $cmp5=0 <= $5;
      if ($cmp5) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $6=$p_addr;
      var $arrayidx7=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx7)>>3)];
      var $cmp8=$7 <= 1;
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=1;
      label = 8; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $8=$retval;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
Module["_box_01_contains_point_2d"] = _box_01_contains_point_2d;
function _box_01_contains_point_nd($dim_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_num_addr;
      var $p_addr;
      var $i;
      $dim_num_addr=$dim_num;
      $p_addr=$p;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $2=$i;
      var $3=$p_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $cmp1=$4 < 0;
      if ($cmp1) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $5=$i;
      var $6=$p_addr;
      var $arrayidx2=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $cmp3=1 < $7;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      $retval=1;
      label = 10; break;
    case 10: 
      var $9=$retval;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_box_01_contains_point_nd"] = _box_01_contains_point_nd;
function _box_contains_point_2d($p1, $p2, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $cmp=$1 <= $3;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=$p_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $cmp4=$5 <= $7;
      if ($cmp4) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $8=$p1_addr;
      var $arrayidx6=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx6)>>3)];
      var $10=$p_addr;
      var $arrayidx7=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx7)>>3)];
      var $cmp8=$9 <= $11;
      if ($cmp8) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $12=$p_addr;
      var $arrayidx10=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx10)>>3)];
      var $14=$p2_addr;
      var $arrayidx11=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx11)>>3)];
      var $cmp12=$13 <= $15;
      if ($cmp12) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=1;
      label = 8; break;
    case 7: 
      $retval=0;
      label = 8; break;
    case 8: 
      var $16=$retval;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_box_contains_point_2d"] = _box_contains_point_2d;
function _box_contains_point_nd($dim_num, $p1, $p2, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_num_addr;
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $i;
      $dim_num_addr=$dim_num;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $2=$i;
      var $3=$p_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$p1_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $cmp2=$4 < $7;
      if ($cmp2) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $8=$i;
      var $9=$p2_addr;
      var $arrayidx3=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx3)>>3)];
      var $11=$i;
      var $12=$p_addr;
      var $arrayidx4=(($12+($11<<3))|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $cmp5=$10 < $13;
      if ($cmp5) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $retval=0;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      $retval=1;
      label = 10; break;
    case 10: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
Module["_box_contains_point_nd"] = _box_contains_point_nd;
function _basis_map_3d($u, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $u_addr;
      var $v_addr;
      var $a;
      var $c;
      var $i;
      var $j;
      var $k;
      $u_addr=$u;
      $v_addr=$v;
      var $0=$u_addr;
      var $call=_r8mat_inverse_3d($0);
      $c=$call;
      var $1=$c;
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 17; break;
    case 4: 
      var $call1=_malloc(72);
      var $2=$call1;
      $a=$2;
      $j=0;
      label = 5; break;
    case 5: 
      var $3=$j;
      var $cmp2=(($3)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 16; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $4=$i;
      var $cmp4=(($4)|(0)) < 3;
      if ($cmp4) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $5=$i;
      var $6=$j;
      var $mul=((($6)*(3))&-1);
      var $add=((($5)+($mul))|0);
      var $7=$a;
      var $arrayidx=(($7+($add<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $k=0;
      label = 9; break;
    case 9: 
      var $8=$k;
      var $cmp7=(($8)|(0)) < 3;
      if ($cmp7) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $9=$i;
      var $10=$j;
      var $mul9=((($10)*(3))&-1);
      var $add10=((($9)+($mul9))|0);
      var $11=$a;
      var $arrayidx11=(($11+($add10<<3))|0);
      var $12=HEAPF64[(($arrayidx11)>>3)];
      var $13=$i;
      var $14=$k;
      var $mul12=((($14)*(3))&-1);
      var $add13=((($13)+($mul12))|0);
      var $15=$v_addr;
      var $arrayidx14=(($15+($add13<<3))|0);
      var $16=HEAPF64[(($arrayidx14)>>3)];
      var $17=$k;
      var $18=$j;
      var $mul15=((($18)*(3))&-1);
      var $add16=((($17)+($mul15))|0);
      var $19=$c;
      var $arrayidx17=(($19+($add16<<3))|0);
      var $20=HEAPF64[(($arrayidx17)>>3)];
      var $mul18=($16)*($20);
      var $add19=($12)+($mul18);
      var $21=$i;
      var $22=$j;
      var $mul20=((($22)*(3))&-1);
      var $add21=((($21)+($mul20))|0);
      var $23=$a;
      var $arrayidx22=(($23+($add21<<3))|0);
      HEAPF64[(($arrayidx22)>>3)]=$add19;
      label = 11; break;
    case 11: 
      var $24=$k;
      var $inc=((($24)+(1))|0);
      $k=$inc;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $25=$i;
      var $inc24=((($25)+(1))|0);
      $i=$inc24;
      label = 7; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $26=$j;
      var $inc27=((($26)+(1))|0);
      $j=$inc27;
      label = 5; break;
    case 16: 
      var $27=$c;
      var $28=$27;
      _free($28);
      var $29=$a;
      $retval=$29;
      label = 17; break;
    case 17: 
      var $30=$retval;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
Module["_basis_map_3d"] = _basis_map_3d;
function _r8mat_inverse_3d($a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b;
      var $det;
      $a_addr=$a;
      var $0=$a_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$a_addr;
      var $arrayidx1=(($2+32)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $4=$a_addr;
      var $arrayidx2=(($4+64)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $mul=($3)*($5);
      var $6=$a_addr;
      var $arrayidx3=(($6+56)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $8=$a_addr;
      var $arrayidx4=(($8+40)|0);
      var $9=HEAPF64[(($arrayidx4)>>3)];
      var $mul5=($7)*($9);
      var $sub=($mul)-($mul5);
      var $mul6=($1)*($sub);
      var $10=$a_addr;
      var $arrayidx7=(($10+24)|0);
      var $11=HEAPF64[(($arrayidx7)>>3)];
      var $12=$a_addr;
      var $arrayidx8=(($12+56)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$a_addr;
      var $arrayidx9=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $mul10=($13)*($15);
      var $16=$a_addr;
      var $arrayidx11=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx11)>>3)];
      var $18=$a_addr;
      var $arrayidx12=(($18+64)|0);
      var $19=HEAPF64[(($arrayidx12)>>3)];
      var $mul13=($17)*($19);
      var $sub14=($mul10)-($mul13);
      var $mul15=($11)*($sub14);
      var $add=($mul6)+($mul15);
      var $20=$a_addr;
      var $arrayidx16=(($20+48)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$a_addr;
      var $arrayidx17=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $24=$a_addr;
      var $arrayidx18=(($24+40)|0);
      var $25=HEAPF64[(($arrayidx18)>>3)];
      var $mul19=($23)*($25);
      var $26=$a_addr;
      var $arrayidx20=(($26+32)|0);
      var $27=HEAPF64[(($arrayidx20)>>3)];
      var $28=$a_addr;
      var $arrayidx21=(($28+16)|0);
      var $29=HEAPF64[(($arrayidx21)>>3)];
      var $mul22=($27)*($29);
      var $sub23=($mul19)-($mul22);
      var $mul24=($21)*($sub23);
      var $add25=($add)+($mul24);
      $det=$add25;
      var $30=$det;
      var $cmp=$30 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $call=_malloc(72);
      var $31=$call;
      $b=$31;
      var $32=$a_addr;
      var $arrayidx26=(($32+32)|0);
      var $33=HEAPF64[(($arrayidx26)>>3)];
      var $34=$a_addr;
      var $arrayidx27=(($34+64)|0);
      var $35=HEAPF64[(($arrayidx27)>>3)];
      var $mul28=($33)*($35);
      var $36=$a_addr;
      var $arrayidx29=(($36+56)|0);
      var $37=HEAPF64[(($arrayidx29)>>3)];
      var $38=$a_addr;
      var $arrayidx30=(($38+40)|0);
      var $39=HEAPF64[(($arrayidx30)>>3)];
      var $mul31=($37)*($39);
      var $sub32=($mul28)-($mul31);
      var $40=$det;
      var $div=($sub32)/($40);
      var $41=$b;
      var $arrayidx33=(($41)|0);
      HEAPF64[(($arrayidx33)>>3)]=$div;
      var $42=$a_addr;
      var $arrayidx34=(($42+24)|0);
      var $43=HEAPF64[(($arrayidx34)>>3)];
      var $44=$a_addr;
      var $arrayidx35=(($44+64)|0);
      var $45=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($43)*($45);
      var $46=$a_addr;
      var $arrayidx37=(($46+48)|0);
      var $47=HEAPF64[(($arrayidx37)>>3)];
      var $48=$a_addr;
      var $arrayidx38=(($48+40)|0);
      var $49=HEAPF64[(($arrayidx38)>>3)];
      var $mul39=($47)*($49);
      var $sub40=($mul36)-($mul39);
      var $sub41=(-$sub40);
      var $50=$det;
      var $div42=($sub41)/($50);
      var $51=$b;
      var $arrayidx43=(($51+24)|0);
      HEAPF64[(($arrayidx43)>>3)]=$div42;
      var $52=$a_addr;
      var $arrayidx44=(($52+24)|0);
      var $53=HEAPF64[(($arrayidx44)>>3)];
      var $54=$a_addr;
      var $arrayidx45=(($54+56)|0);
      var $55=HEAPF64[(($arrayidx45)>>3)];
      var $mul46=($53)*($55);
      var $56=$a_addr;
      var $arrayidx47=(($56+48)|0);
      var $57=HEAPF64[(($arrayidx47)>>3)];
      var $58=$a_addr;
      var $arrayidx48=(($58+32)|0);
      var $59=HEAPF64[(($arrayidx48)>>3)];
      var $mul49=($57)*($59);
      var $sub50=($mul46)-($mul49);
      var $60=$det;
      var $div51=($sub50)/($60);
      var $61=$b;
      var $arrayidx52=(($61+48)|0);
      HEAPF64[(($arrayidx52)>>3)]=$div51;
      var $62=$a_addr;
      var $arrayidx53=(($62+8)|0);
      var $63=HEAPF64[(($arrayidx53)>>3)];
      var $64=$a_addr;
      var $arrayidx54=(($64+64)|0);
      var $65=HEAPF64[(($arrayidx54)>>3)];
      var $mul55=($63)*($65);
      var $66=$a_addr;
      var $arrayidx56=(($66+56)|0);
      var $67=HEAPF64[(($arrayidx56)>>3)];
      var $68=$a_addr;
      var $arrayidx57=(($68+16)|0);
      var $69=HEAPF64[(($arrayidx57)>>3)];
      var $mul58=($67)*($69);
      var $sub59=($mul55)-($mul58);
      var $sub60=(-$sub59);
      var $70=$det;
      var $div61=($sub60)/($70);
      var $71=$b;
      var $arrayidx62=(($71+8)|0);
      HEAPF64[(($arrayidx62)>>3)]=$div61;
      var $72=$a_addr;
      var $arrayidx63=(($72)|0);
      var $73=HEAPF64[(($arrayidx63)>>3)];
      var $74=$a_addr;
      var $arrayidx64=(($74+64)|0);
      var $75=HEAPF64[(($arrayidx64)>>3)];
      var $mul65=($73)*($75);
      var $76=$a_addr;
      var $arrayidx66=(($76+48)|0);
      var $77=HEAPF64[(($arrayidx66)>>3)];
      var $78=$a_addr;
      var $arrayidx67=(($78+16)|0);
      var $79=HEAPF64[(($arrayidx67)>>3)];
      var $mul68=($77)*($79);
      var $sub69=($mul65)-($mul68);
      var $80=$det;
      var $div70=($sub69)/($80);
      var $81=$b;
      var $arrayidx71=(($81+32)|0);
      HEAPF64[(($arrayidx71)>>3)]=$div70;
      var $82=$a_addr;
      var $arrayidx72=(($82)|0);
      var $83=HEAPF64[(($arrayidx72)>>3)];
      var $84=$a_addr;
      var $arrayidx73=(($84+56)|0);
      var $85=HEAPF64[(($arrayidx73)>>3)];
      var $mul74=($83)*($85);
      var $86=$a_addr;
      var $arrayidx75=(($86+48)|0);
      var $87=HEAPF64[(($arrayidx75)>>3)];
      var $88=$a_addr;
      var $arrayidx76=(($88+8)|0);
      var $89=HEAPF64[(($arrayidx76)>>3)];
      var $mul77=($87)*($89);
      var $sub78=($mul74)-($mul77);
      var $sub79=(-$sub78);
      var $90=$det;
      var $div80=($sub79)/($90);
      var $91=$b;
      var $arrayidx81=(($91+56)|0);
      HEAPF64[(($arrayidx81)>>3)]=$div80;
      var $92=$a_addr;
      var $arrayidx82=(($92+8)|0);
      var $93=HEAPF64[(($arrayidx82)>>3)];
      var $94=$a_addr;
      var $arrayidx83=(($94+40)|0);
      var $95=HEAPF64[(($arrayidx83)>>3)];
      var $mul84=($93)*($95);
      var $96=$a_addr;
      var $arrayidx85=(($96+32)|0);
      var $97=HEAPF64[(($arrayidx85)>>3)];
      var $98=$a_addr;
      var $arrayidx86=(($98+16)|0);
      var $99=HEAPF64[(($arrayidx86)>>3)];
      var $mul87=($97)*($99);
      var $sub88=($mul84)-($mul87);
      var $100=$det;
      var $div89=($sub88)/($100);
      var $101=$b;
      var $arrayidx90=(($101+16)|0);
      HEAPF64[(($arrayidx90)>>3)]=$div89;
      var $102=$a_addr;
      var $arrayidx91=(($102)|0);
      var $103=HEAPF64[(($arrayidx91)>>3)];
      var $104=$a_addr;
      var $arrayidx92=(($104+40)|0);
      var $105=HEAPF64[(($arrayidx92)>>3)];
      var $mul93=($103)*($105);
      var $106=$a_addr;
      var $arrayidx94=(($106+24)|0);
      var $107=HEAPF64[(($arrayidx94)>>3)];
      var $108=$a_addr;
      var $arrayidx95=(($108+16)|0);
      var $109=HEAPF64[(($arrayidx95)>>3)];
      var $mul96=($107)*($109);
      var $sub97=($mul93)-($mul96);
      var $sub98=(-$sub97);
      var $110=$det;
      var $div99=($sub98)/($110);
      var $111=$b;
      var $arrayidx100=(($111+40)|0);
      HEAPF64[(($arrayidx100)>>3)]=$div99;
      var $112=$a_addr;
      var $arrayidx101=(($112)|0);
      var $113=HEAPF64[(($arrayidx101)>>3)];
      var $114=$a_addr;
      var $arrayidx102=(($114+32)|0);
      var $115=HEAPF64[(($arrayidx102)>>3)];
      var $mul103=($113)*($115);
      var $116=$a_addr;
      var $arrayidx104=(($116+24)|0);
      var $117=HEAPF64[(($arrayidx104)>>3)];
      var $118=$a_addr;
      var $arrayidx105=(($118+8)|0);
      var $119=HEAPF64[(($arrayidx105)>>3)];
      var $mul106=($117)*($119);
      var $sub107=($mul103)-($mul106);
      var $120=$det;
      var $div108=($sub107)/($120);
      var $121=$b;
      var $arrayidx109=(($121+64)|0);
      HEAPF64[(($arrayidx109)>>3)]=$div108;
      var $122=$b;
      $retval=$122;
      label = 5; break;
    case 5: 
      var $123=$retval;
      return $123;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_inverse_3d"] = _r8mat_inverse_3d;
function _box_ray_int_2d($p1, $p2, $pa, $pb, $pint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $pa_addr;
      var $pb_addr;
      var $pint_addr;
      var $inside;
      var $ival=__stackBase__;
      var $pc=(__stackBase__)+(8);
      var $pd=(__stackBase__)+(24);
      var $side;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $pa_addr=$pa;
      $pb_addr=$pb;
      $pint_addr=$pint;
      $side=1;
      label = 3; break;
    case 3: 
      var $0=$side;
      var $cmp=(($0)|(0)) <= 4;
      if ($cmp) { label = 4; break; } else { label = 21; break; }
    case 4: 
      var $1=$side;
      var $cmp1=(($1)|(0))==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $2=$p1_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx2=(($pc)|0);
      HEAPF64[(($arrayidx2)>>3)]=$3;
      var $4=$p1_addr;
      var $arrayidx3=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $arrayidx4=(($pc+8)|0);
      HEAPF64[(($arrayidx4)>>3)]=$5;
      var $6=$p2_addr;
      var $arrayidx5=(($6)|0);
      var $7=HEAPF64[(($arrayidx5)>>3)];
      var $arrayidx6=(($pd)|0);
      HEAPF64[(($arrayidx6)>>3)]=$7;
      var $8=$p1_addr;
      var $arrayidx7=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $arrayidx8=(($pd+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$9;
      label = 15; break;
    case 6: 
      var $10=$side;
      var $cmp9=(($10)|(0))==2;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$p2_addr;
      var $arrayidx11=(($11)|0);
      var $12=HEAPF64[(($arrayidx11)>>3)];
      var $arrayidx12=(($pc)|0);
      HEAPF64[(($arrayidx12)>>3)]=$12;
      var $13=$p1_addr;
      var $arrayidx13=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx13)>>3)];
      var $arrayidx14=(($pc+8)|0);
      HEAPF64[(($arrayidx14)>>3)]=$14;
      var $15=$p2_addr;
      var $arrayidx15=(($15)|0);
      var $16=HEAPF64[(($arrayidx15)>>3)];
      var $arrayidx16=(($pd)|0);
      HEAPF64[(($arrayidx16)>>3)]=$16;
      var $17=$p2_addr;
      var $arrayidx17=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx17)>>3)];
      var $arrayidx18=(($pd+8)|0);
      HEAPF64[(($arrayidx18)>>3)]=$18;
      label = 14; break;
    case 8: 
      var $19=$side;
      var $cmp20=(($19)|(0))==3;
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $20=$p2_addr;
      var $arrayidx22=(($20)|0);
      var $21=HEAPF64[(($arrayidx22)>>3)];
      var $arrayidx23=(($pc)|0);
      HEAPF64[(($arrayidx23)>>3)]=$21;
      var $22=$p2_addr;
      var $arrayidx24=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx24)>>3)];
      var $arrayidx25=(($pc+8)|0);
      HEAPF64[(($arrayidx25)>>3)]=$23;
      var $24=$p1_addr;
      var $arrayidx26=(($24)|0);
      var $25=HEAPF64[(($arrayidx26)>>3)];
      var $arrayidx27=(($pd)|0);
      HEAPF64[(($arrayidx27)>>3)]=$25;
      var $26=$p2_addr;
      var $arrayidx28=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx28)>>3)];
      var $arrayidx29=(($pd+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$27;
      label = 13; break;
    case 10: 
      var $28=$side;
      var $cmp31=(($28)|(0))==4;
      if ($cmp31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $29=$p1_addr;
      var $arrayidx33=(($29)|0);
      var $30=HEAPF64[(($arrayidx33)>>3)];
      var $arrayidx34=(($pc)|0);
      HEAPF64[(($arrayidx34)>>3)]=$30;
      var $31=$p2_addr;
      var $arrayidx35=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx35)>>3)];
      var $arrayidx36=(($pc+8)|0);
      HEAPF64[(($arrayidx36)>>3)]=$32;
      var $33=$p1_addr;
      var $arrayidx37=(($33)|0);
      var $34=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($pd)|0);
      HEAPF64[(($arrayidx38)>>3)]=$34;
      var $35=$p1_addr;
      var $arrayidx39=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx39)>>3)];
      var $arrayidx40=(($pd+8)|0);
      HEAPF64[(($arrayidx40)>>3)]=$36;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $arraydecay=(($pc)|0);
      var $37=$pa_addr;
      var $arraydecay44=(($pd)|0);
      var $38=$pb_addr;
      var $call=_angle_contains_ray_2d($arraydecay, $37, $arraydecay44, $38);
      $inside=$call;
      var $39=$inside;
      var $tobool=(($39)|(0))!=0;
      if ($tobool) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 21; break;
    case 17: 
      var $40=$side;
      var $cmp47=(($40)|(0))==4;
      if ($cmp47) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $call49=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call50=_printf(((10104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call51=_printf(((9632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 19: 
      label = 20; break;
    case 20: 
      var $41=$side;
      var $inc=((($41)+(1))|0);
      $side=$inc;
      label = 3; break;
    case 21: 
      var $42=$pa_addr;
      var $43=$pb_addr;
      var $arraydecay53=(($pc)|0);
      var $arraydecay54=(($pd)|0);
      var $44=$pint_addr;
      _lines_exp_int_2d($42, $43, $arraydecay53, $arraydecay54, $ival, $44);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_box_ray_int_2d"] = _box_ray_int_2d;
function _box_segment_clip_2d($p1, $p2, $pa, $pb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $pa_addr;
      var $pb_addr;
      var $clip_a;
      var $clip_b;
      var $ival;
      var $x;
      var $y;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $pa_addr=$pa;
      $pb_addr=$pb;
      $clip_a=0;
      $clip_b=0;
      var $0=$pa_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $cmp=$1 < $3;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $4=$pb_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p1_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $cmp4=$5 < $7;
      if ($cmp4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $ival=-1;
      var $8=$ival;
      $retval=$8;
      label = 47; break;
    case 5: 
      var $9=$pa_addr;
      var $arrayidx5=(($9)|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$p1_addr;
      var $arrayidx6=(($11)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $cmp7=$10 < $12;
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $13=$p1_addr;
      var $arrayidx9=(($13)|0);
      var $14=HEAPF64[(($arrayidx9)>>3)];
      var $15=$pb_addr;
      var $arrayidx10=(($15)|0);
      var $16=HEAPF64[(($arrayidx10)>>3)];
      var $cmp11=$14 <= $16;
      if ($cmp11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $17=$p1_addr;
      var $arrayidx13=(($17)|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      $x=$18;
      var $19=$pa_addr;
      var $arrayidx14=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx14)>>3)];
      var $21=$pb_addr;
      var $arrayidx15=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx15)>>3)];
      var $23=$pa_addr;
      var $arrayidx16=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx16)>>3)];
      var $sub=($22)-($24);
      var $25=$x;
      var $26=$pa_addr;
      var $arrayidx17=(($26)|0);
      var $27=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($25)-($27);
      var $mul=($sub)*($sub18);
      var $28=$pb_addr;
      var $arrayidx19=(($28)|0);
      var $29=HEAPF64[(($arrayidx19)>>3)];
      var $30=$pa_addr;
      var $arrayidx20=(($30)|0);
      var $31=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($29)-($31);
      var $div=($mul)/($sub21);
      var $add=($20)+($div);
      $y=$add;
      var $32=$x;
      var $33=$pa_addr;
      var $arrayidx22=(($33)|0);
      HEAPF64[(($arrayidx22)>>3)]=$32;
      var $34=$y;
      var $35=$pa_addr;
      var $arrayidx23=(($35+8)|0);
      HEAPF64[(($arrayidx23)>>3)]=$34;
      $clip_a=1;
      label = 12; break;
    case 8: 
      var $36=$p1_addr;
      var $arrayidx24=(($36)|0);
      var $37=HEAPF64[(($arrayidx24)>>3)];
      var $38=$pa_addr;
      var $arrayidx25=(($38)|0);
      var $39=HEAPF64[(($arrayidx25)>>3)];
      var $cmp26=$37 <= $39;
      if ($cmp26) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $40=$pb_addr;
      var $arrayidx28=(($40)|0);
      var $41=HEAPF64[(($arrayidx28)>>3)];
      var $42=$p1_addr;
      var $arrayidx29=(($42)|0);
      var $43=HEAPF64[(($arrayidx29)>>3)];
      var $cmp30=$41 < $43;
      if ($cmp30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$p1_addr;
      var $arrayidx32=(($44)|0);
      var $45=HEAPF64[(($arrayidx32)>>3)];
      $x=$45;
      var $46=$pa_addr;
      var $arrayidx33=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx33)>>3)];
      var $48=$pb_addr;
      var $arrayidx34=(($48+8)|0);
      var $49=HEAPF64[(($arrayidx34)>>3)];
      var $50=$pa_addr;
      var $arrayidx35=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($49)-($51);
      var $52=$x;
      var $53=$pa_addr;
      var $arrayidx37=(($53)|0);
      var $54=HEAPF64[(($arrayidx37)>>3)];
      var $sub38=($52)-($54);
      var $mul39=($sub36)*($sub38);
      var $55=$pb_addr;
      var $arrayidx40=(($55)|0);
      var $56=HEAPF64[(($arrayidx40)>>3)];
      var $57=$pa_addr;
      var $arrayidx41=(($57)|0);
      var $58=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($56)-($58);
      var $div43=($mul39)/($sub42);
      var $add44=($47)+($div43);
      $y=$add44;
      var $59=$x;
      var $60=$pb_addr;
      var $arrayidx45=(($60)|0);
      HEAPF64[(($arrayidx45)>>3)]=$59;
      var $61=$y;
      var $62=$pb_addr;
      var $arrayidx46=(($62+8)|0);
      HEAPF64[(($arrayidx46)>>3)]=$61;
      $clip_b=1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $63=$p2_addr;
      var $arrayidx49=(($63)|0);
      var $64=HEAPF64[(($arrayidx49)>>3)];
      var $65=$pa_addr;
      var $arrayidx50=(($65)|0);
      var $66=HEAPF64[(($arrayidx50)>>3)];
      var $cmp51=$64 < $66;
      if ($cmp51) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $67=$p2_addr;
      var $arrayidx53=(($67)|0);
      var $68=HEAPF64[(($arrayidx53)>>3)];
      var $69=$pb_addr;
      var $arrayidx54=(($69)|0);
      var $70=HEAPF64[(($arrayidx54)>>3)];
      var $cmp55=$68 < $70;
      if ($cmp55) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $ival=-1;
      var $71=$ival;
      $retval=$71;
      label = 47; break;
    case 15: 
      var $72=$p2_addr;
      var $arrayidx58=(($72)|0);
      var $73=HEAPF64[(($arrayidx58)>>3)];
      var $74=$pa_addr;
      var $arrayidx59=(($74)|0);
      var $75=HEAPF64[(($arrayidx59)>>3)];
      var $cmp60=$73 < $75;
      if ($cmp60) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $76=$pb_addr;
      var $arrayidx62=(($76)|0);
      var $77=HEAPF64[(($arrayidx62)>>3)];
      var $78=$p2_addr;
      var $arrayidx63=(($78)|0);
      var $79=HEAPF64[(($arrayidx63)>>3)];
      var $cmp64=$77 <= $79;
      if ($cmp64) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $80=$p2_addr;
      var $arrayidx66=(($80)|0);
      var $81=HEAPF64[(($arrayidx66)>>3)];
      $x=$81;
      var $82=$pa_addr;
      var $arrayidx67=(($82+8)|0);
      var $83=HEAPF64[(($arrayidx67)>>3)];
      var $84=$pb_addr;
      var $arrayidx68=(($84+8)|0);
      var $85=HEAPF64[(($arrayidx68)>>3)];
      var $86=$pa_addr;
      var $arrayidx69=(($86+8)|0);
      var $87=HEAPF64[(($arrayidx69)>>3)];
      var $sub70=($85)-($87);
      var $88=$x;
      var $89=$pa_addr;
      var $arrayidx71=(($89)|0);
      var $90=HEAPF64[(($arrayidx71)>>3)];
      var $sub72=($88)-($90);
      var $mul73=($sub70)*($sub72);
      var $91=$pb_addr;
      var $arrayidx74=(($91)|0);
      var $92=HEAPF64[(($arrayidx74)>>3)];
      var $93=$pa_addr;
      var $arrayidx75=(($93)|0);
      var $94=HEAPF64[(($arrayidx75)>>3)];
      var $sub76=($92)-($94);
      var $div77=($mul73)/($sub76);
      var $add78=($83)+($div77);
      $y=$add78;
      var $95=$x;
      var $96=$pa_addr;
      var $arrayidx79=(($96)|0);
      HEAPF64[(($arrayidx79)>>3)]=$95;
      var $97=$y;
      var $98=$pa_addr;
      var $arrayidx80=(($98+8)|0);
      HEAPF64[(($arrayidx80)>>3)]=$97;
      $clip_a=1;
      label = 22; break;
    case 18: 
      var $99=$pa_addr;
      var $arrayidx82=(($99)|0);
      var $100=HEAPF64[(($arrayidx82)>>3)];
      var $101=$p2_addr;
      var $arrayidx83=(($101)|0);
      var $102=HEAPF64[(($arrayidx83)>>3)];
      var $cmp84=$100 <= $102;
      if ($cmp84) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $103=$p2_addr;
      var $arrayidx86=(($103)|0);
      var $104=HEAPF64[(($arrayidx86)>>3)];
      var $105=$pb_addr;
      var $arrayidx87=(($105)|0);
      var $106=HEAPF64[(($arrayidx87)>>3)];
      var $cmp88=$104 < $106;
      if ($cmp88) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $107=$p2_addr;
      var $arrayidx90=(($107)|0);
      var $108=HEAPF64[(($arrayidx90)>>3)];
      $x=$108;
      var $109=$pa_addr;
      var $arrayidx91=(($109+8)|0);
      var $110=HEAPF64[(($arrayidx91)>>3)];
      var $111=$pb_addr;
      var $arrayidx92=(($111+8)|0);
      var $112=HEAPF64[(($arrayidx92)>>3)];
      var $113=$pa_addr;
      var $arrayidx93=(($113+8)|0);
      var $114=HEAPF64[(($arrayidx93)>>3)];
      var $sub94=($112)-($114);
      var $115=$x;
      var $116=$pa_addr;
      var $arrayidx95=(($116)|0);
      var $117=HEAPF64[(($arrayidx95)>>3)];
      var $sub96=($115)-($117);
      var $mul97=($sub94)*($sub96);
      var $118=$pb_addr;
      var $arrayidx98=(($118)|0);
      var $119=HEAPF64[(($arrayidx98)>>3)];
      var $120=$pa_addr;
      var $arrayidx99=(($120)|0);
      var $121=HEAPF64[(($arrayidx99)>>3)];
      var $sub100=($119)-($121);
      var $div101=($mul97)/($sub100);
      var $add102=($110)+($div101);
      $y=$add102;
      var $122=$x;
      var $123=$pb_addr;
      var $arrayidx103=(($123)|0);
      HEAPF64[(($arrayidx103)>>3)]=$122;
      var $124=$y;
      var $125=$pb_addr;
      var $arrayidx104=(($125+8)|0);
      HEAPF64[(($arrayidx104)>>3)]=$124;
      $clip_b=1;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $126=$pa_addr;
      var $arrayidx107=(($126+8)|0);
      var $127=HEAPF64[(($arrayidx107)>>3)];
      var $128=$p1_addr;
      var $arrayidx108=(($128+8)|0);
      var $129=HEAPF64[(($arrayidx108)>>3)];
      var $cmp109=$127 < $129;
      if ($cmp109) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $130=$pb_addr;
      var $arrayidx111=(($130+8)|0);
      var $131=HEAPF64[(($arrayidx111)>>3)];
      var $132=$p1_addr;
      var $arrayidx112=(($132+8)|0);
      var $133=HEAPF64[(($arrayidx112)>>3)];
      var $cmp113=$131 < $133;
      if ($cmp113) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $ival=-1;
      var $134=$ival;
      $retval=$134;
      label = 47; break;
    case 25: 
      var $135=$pa_addr;
      var $arrayidx116=(($135+8)|0);
      var $136=HEAPF64[(($arrayidx116)>>3)];
      var $137=$p1_addr;
      var $arrayidx117=(($137+8)|0);
      var $138=HEAPF64[(($arrayidx117)>>3)];
      var $cmp118=$136 < $138;
      if ($cmp118) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $139=$p1_addr;
      var $arrayidx120=(($139+8)|0);
      var $140=HEAPF64[(($arrayidx120)>>3)];
      var $141=$pb_addr;
      var $arrayidx121=(($141+8)|0);
      var $142=HEAPF64[(($arrayidx121)>>3)];
      var $cmp122=$140 <= $142;
      if ($cmp122) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $143=$p1_addr;
      var $arrayidx124=(($143+8)|0);
      var $144=HEAPF64[(($arrayidx124)>>3)];
      $y=$144;
      var $145=$pa_addr;
      var $arrayidx125=(($145)|0);
      var $146=HEAPF64[(($arrayidx125)>>3)];
      var $147=$pb_addr;
      var $arrayidx126=(($147)|0);
      var $148=HEAPF64[(($arrayidx126)>>3)];
      var $149=$pa_addr;
      var $arrayidx127=(($149)|0);
      var $150=HEAPF64[(($arrayidx127)>>3)];
      var $sub128=($148)-($150);
      var $151=$y;
      var $152=$pa_addr;
      var $arrayidx129=(($152+8)|0);
      var $153=HEAPF64[(($arrayidx129)>>3)];
      var $sub130=($151)-($153);
      var $mul131=($sub128)*($sub130);
      var $154=$pb_addr;
      var $arrayidx132=(($154+8)|0);
      var $155=HEAPF64[(($arrayidx132)>>3)];
      var $156=$pa_addr;
      var $arrayidx133=(($156+8)|0);
      var $157=HEAPF64[(($arrayidx133)>>3)];
      var $sub134=($155)-($157);
      var $div135=($mul131)/($sub134);
      var $add136=($146)+($div135);
      $x=$add136;
      var $158=$x;
      var $159=$pa_addr;
      var $arrayidx137=(($159)|0);
      HEAPF64[(($arrayidx137)>>3)]=$158;
      var $160=$y;
      var $161=$pa_addr;
      var $arrayidx138=(($161+8)|0);
      HEAPF64[(($arrayidx138)>>3)]=$160;
      $clip_a=1;
      label = 32; break;
    case 28: 
      var $162=$p1_addr;
      var $arrayidx140=(($162+8)|0);
      var $163=HEAPF64[(($arrayidx140)>>3)];
      var $164=$pa_addr;
      var $arrayidx141=(($164+8)|0);
      var $165=HEAPF64[(($arrayidx141)>>3)];
      var $cmp142=$163 <= $165;
      if ($cmp142) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $166=$pb_addr;
      var $arrayidx144=(($166+8)|0);
      var $167=HEAPF64[(($arrayidx144)>>3)];
      var $168=$p1_addr;
      var $arrayidx145=(($168+8)|0);
      var $169=HEAPF64[(($arrayidx145)>>3)];
      var $cmp146=$167 < $169;
      if ($cmp146) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $170=$p1_addr;
      var $arrayidx148=(($170+8)|0);
      var $171=HEAPF64[(($arrayidx148)>>3)];
      $y=$171;
      var $172=$pa_addr;
      var $arrayidx149=(($172)|0);
      var $173=HEAPF64[(($arrayidx149)>>3)];
      var $174=$pb_addr;
      var $arrayidx150=(($174)|0);
      var $175=HEAPF64[(($arrayidx150)>>3)];
      var $176=$pa_addr;
      var $arrayidx151=(($176)|0);
      var $177=HEAPF64[(($arrayidx151)>>3)];
      var $sub152=($175)-($177);
      var $178=$y;
      var $179=$pa_addr;
      var $arrayidx153=(($179+8)|0);
      var $180=HEAPF64[(($arrayidx153)>>3)];
      var $sub154=($178)-($180);
      var $mul155=($sub152)*($sub154);
      var $181=$pb_addr;
      var $arrayidx156=(($181+8)|0);
      var $182=HEAPF64[(($arrayidx156)>>3)];
      var $183=$pa_addr;
      var $arrayidx157=(($183+8)|0);
      var $184=HEAPF64[(($arrayidx157)>>3)];
      var $sub158=($182)-($184);
      var $div159=($mul155)/($sub158);
      var $add160=($173)+($div159);
      $x=$add160;
      var $185=$x;
      var $186=$pb_addr;
      var $arrayidx161=(($186)|0);
      HEAPF64[(($arrayidx161)>>3)]=$185;
      var $187=$y;
      var $188=$pb_addr;
      var $arrayidx162=(($188+8)|0);
      HEAPF64[(($arrayidx162)>>3)]=$187;
      $clip_b=1;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $189=$p2_addr;
      var $arrayidx165=(($189+8)|0);
      var $190=HEAPF64[(($arrayidx165)>>3)];
      var $191=$pa_addr;
      var $arrayidx166=(($191+8)|0);
      var $192=HEAPF64[(($arrayidx166)>>3)];
      var $cmp167=$190 < $192;
      if ($cmp167) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $193=$p2_addr;
      var $arrayidx169=(($193+8)|0);
      var $194=HEAPF64[(($arrayidx169)>>3)];
      var $195=$pb_addr;
      var $arrayidx170=(($195+8)|0);
      var $196=HEAPF64[(($arrayidx170)>>3)];
      var $cmp171=$194 < $196;
      if ($cmp171) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $ival=-1;
      var $197=$ival;
      $retval=$197;
      label = 47; break;
    case 35: 
      var $198=$p2_addr;
      var $arrayidx174=(($198+8)|0);
      var $199=HEAPF64[(($arrayidx174)>>3)];
      var $200=$pa_addr;
      var $arrayidx175=(($200+8)|0);
      var $201=HEAPF64[(($arrayidx175)>>3)];
      var $cmp176=$199 < $201;
      if ($cmp176) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $202=$pb_addr;
      var $arrayidx178=(($202+8)|0);
      var $203=HEAPF64[(($arrayidx178)>>3)];
      var $204=$p2_addr;
      var $arrayidx179=(($204+8)|0);
      var $205=HEAPF64[(($arrayidx179)>>3)];
      var $cmp180=$203 <= $205;
      if ($cmp180) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $206=$p2_addr;
      var $arrayidx182=(($206+8)|0);
      var $207=HEAPF64[(($arrayidx182)>>3)];
      $y=$207;
      var $208=$pa_addr;
      var $arrayidx183=(($208)|0);
      var $209=HEAPF64[(($arrayidx183)>>3)];
      var $210=$pb_addr;
      var $arrayidx184=(($210)|0);
      var $211=HEAPF64[(($arrayidx184)>>3)];
      var $212=$pa_addr;
      var $arrayidx185=(($212)|0);
      var $213=HEAPF64[(($arrayidx185)>>3)];
      var $sub186=($211)-($213);
      var $214=$y;
      var $215=$pa_addr;
      var $arrayidx187=(($215+8)|0);
      var $216=HEAPF64[(($arrayidx187)>>3)];
      var $sub188=($214)-($216);
      var $mul189=($sub186)*($sub188);
      var $217=$pb_addr;
      var $arrayidx190=(($217+8)|0);
      var $218=HEAPF64[(($arrayidx190)>>3)];
      var $219=$pa_addr;
      var $arrayidx191=(($219+8)|0);
      var $220=HEAPF64[(($arrayidx191)>>3)];
      var $sub192=($218)-($220);
      var $div193=($mul189)/($sub192);
      var $add194=($209)+($div193);
      $x=$add194;
      var $221=$x;
      var $222=$pa_addr;
      var $arrayidx195=(($222)|0);
      HEAPF64[(($arrayidx195)>>3)]=$221;
      var $223=$y;
      var $224=$pa_addr;
      var $arrayidx196=(($224+8)|0);
      HEAPF64[(($arrayidx196)>>3)]=$223;
      $clip_a=1;
      label = 42; break;
    case 38: 
      var $225=$pa_addr;
      var $arrayidx198=(($225+8)|0);
      var $226=HEAPF64[(($arrayidx198)>>3)];
      var $227=$p2_addr;
      var $arrayidx199=(($227+8)|0);
      var $228=HEAPF64[(($arrayidx199)>>3)];
      var $cmp200=$226 <= $228;
      if ($cmp200) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $229=$p2_addr;
      var $arrayidx202=(($229+8)|0);
      var $230=HEAPF64[(($arrayidx202)>>3)];
      var $231=$pb_addr;
      var $arrayidx203=(($231+8)|0);
      var $232=HEAPF64[(($arrayidx203)>>3)];
      var $cmp204=$230 < $232;
      if ($cmp204) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $233=$p2_addr;
      var $arrayidx206=(($233+8)|0);
      var $234=HEAPF64[(($arrayidx206)>>3)];
      $y=$234;
      var $235=$pa_addr;
      var $arrayidx207=(($235)|0);
      var $236=HEAPF64[(($arrayidx207)>>3)];
      var $237=$pb_addr;
      var $arrayidx208=(($237)|0);
      var $238=HEAPF64[(($arrayidx208)>>3)];
      var $239=$pa_addr;
      var $arrayidx209=(($239)|0);
      var $240=HEAPF64[(($arrayidx209)>>3)];
      var $sub210=($238)-($240);
      var $241=$y;
      var $242=$pa_addr;
      var $arrayidx211=(($242+8)|0);
      var $243=HEAPF64[(($arrayidx211)>>3)];
      var $sub212=($241)-($243);
      var $mul213=($sub210)*($sub212);
      var $244=$pb_addr;
      var $arrayidx214=(($244+8)|0);
      var $245=HEAPF64[(($arrayidx214)>>3)];
      var $246=$pa_addr;
      var $arrayidx215=(($246+8)|0);
      var $247=HEAPF64[(($arrayidx215)>>3)];
      var $sub216=($245)-($247);
      var $div217=($mul213)/($sub216);
      var $add218=($236)+($div217);
      $x=$add218;
      var $248=$x;
      var $249=$pb_addr;
      var $arrayidx219=(($249)|0);
      HEAPF64[(($arrayidx219)>>3)]=$248;
      var $250=$y;
      var $251=$pb_addr;
      var $arrayidx220=(($251+8)|0);
      HEAPF64[(($arrayidx220)>>3)]=$250;
      $clip_b=1;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      $ival=0;
      var $252=$clip_a;
      var $tobool=(($252)|(0))!=0;
      if ($tobool) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $253=$ival;
      var $add224=((($253)+(1))|0);
      $ival=$add224;
      label = 44; break;
    case 44: 
      var $254=$clip_b;
      var $tobool226=(($254)|(0))!=0;
      if ($tobool226) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $255=$ival;
      var $add228=((($255)+(2))|0);
      $ival=$add228;
      label = 46; break;
    case 46: 
      var $256=$ival;
      $retval=$256;
      label = 47; break;
    case 47: 
      var $257=$retval;
      return $257;
    default: assert(0, "bad label: " + label);
  }
}
Module["_box_segment_clip_2d"] = _box_segment_clip_2d;
function _lines_exp_int_2d($p1, $p2, $p3, $p4, $ival, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $ival_addr;
      var $p_addr;
      var $a1=__stackBase__;
      var $a2=(__stackBase__)+(8);
      var $b1=(__stackBase__)+(16);
      var $b2=(__stackBase__)+(24);
      var $c1=(__stackBase__)+(32);
      var $c2=(__stackBase__)+(40);
      var $point_1;
      var $point_2;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $ival_addr=$ival;
      $p_addr=$p;
      HEAPF64[(($a1)>>3)]=0;
      HEAPF64[(($a2)>>3)]=0;
      HEAPF64[(($b1)>>3)]=0;
      HEAPF64[(($b2)>>3)]=0;
      HEAPF64[(($c1)>>3)]=0;
      HEAPF64[(($c2)>>3)]=0;
      $point_1=0;
      $point_2=0;
      var $0=$ival_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$p_addr;
      var $arrayidx=(($1)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      var $2=$p_addr;
      var $arrayidx1=(($2+8)|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      var $3=$p1_addr;
      var $4=$p2_addr;
      var $call=_r8vec_eq(2, $3, $4);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $point_1=1;
      label = 5; break;
    case 4: 
      $point_1=0;
      label = 5; break;
    case 5: 
      var $5=$p3_addr;
      var $6=$p4_addr;
      var $call2=_r8vec_eq(2, $5, $6);
      var $tobool3=(($call2)|(0))!=0;
      if ($tobool3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $point_2=1;
      label = 8; break;
    case 7: 
      $point_2=0;
      label = 8; break;
    case 8: 
      var $7=$point_1;
      var $tobool7=$7 != 0;
      if ($tobool7) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $8=$p1_addr;
      var $9=$p2_addr;
      _line_exp2imp_2d($8, $9, $a1, $b1, $c1);
      label = 10; break;
    case 10: 
      var $10=$point_2;
      var $tobool10=$10 != 0;
      if ($tobool10) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $11=$p3_addr;
      var $12=$p4_addr;
      _line_exp2imp_2d($11, $12, $a2, $b2, $c2);
      label = 12; break;
    case 12: 
      var $13=$point_1;
      var $tobool13=$13 != 0;
      if ($tobool13) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $14=$point_2;
      var $tobool14=$14 != 0;
      if ($tobool14) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $15=$p1_addr;
      var $16=$p3_addr;
      var $call16=_r8vec_eq(2, $15, $16);
      var $tobool17=(($call16)|(0))!=0;
      if ($tobool17) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $17=$ival_addr;
      HEAP32[(($17)>>2)]=1;
      var $18=$p1_addr;
      var $19=$p_addr;
      _r8vec_copy(2, $18, $19);
      label = 16; break;
    case 16: 
      label = 28; break;
    case 17: 
      var $20=$point_1;
      var $tobool21=$20 != 0;
      if ($tobool21) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $21=HEAPF64[(($a2)>>3)];
      var $22=$p1_addr;
      var $arrayidx23=(($22)|0);
      var $23=HEAPF64[(($arrayidx23)>>3)];
      var $mul=($21)*($23);
      var $24=HEAPF64[(($b2)>>3)];
      var $25=$p1_addr;
      var $arrayidx24=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx24)>>3)];
      var $mul25=($24)*($26);
      var $add=($mul)+($mul25);
      var $27=HEAPF64[(($c2)>>3)];
      var $cmp=$add == $27;
      if ($cmp) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $28=$ival_addr;
      HEAP32[(($28)>>2)]=1;
      var $29=$p1_addr;
      var $30=$p_addr;
      _r8vec_copy(2, $29, $30);
      label = 20; break;
    case 20: 
      label = 27; break;
    case 21: 
      var $31=$point_2;
      var $tobool29=$31 != 0;
      if ($tobool29) { label = 22; break; } else { label = 25; break; }
    case 22: 
      var $32=HEAPF64[(($a1)>>3)];
      var $33=$p3_addr;
      var $arrayidx31=(($33)|0);
      var $34=HEAPF64[(($arrayidx31)>>3)];
      var $mul32=($32)*($34);
      var $35=HEAPF64[(($b1)>>3)];
      var $36=$p3_addr;
      var $arrayidx33=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($35)*($37);
      var $add35=($mul32)+($mul34);
      var $38=HEAPF64[(($c1)>>3)];
      var $cmp36=$add35 == $38;
      if ($cmp36) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $39=$ival_addr;
      HEAP32[(($39)>>2)]=1;
      var $40=$p3_addr;
      var $41=$p_addr;
      _r8vec_copy(2, $40, $41);
      label = 24; break;
    case 24: 
      label = 26; break;
    case 25: 
      var $42=HEAPF64[(($a1)>>3)];
      var $43=HEAPF64[(($b1)>>3)];
      var $44=HEAPF64[(($c1)>>3)];
      var $45=HEAPF64[(($a2)>>3)];
      var $46=HEAPF64[(($b2)>>3)];
      var $47=HEAPF64[(($c2)>>3)];
      var $48=$ival_addr;
      var $49=$p_addr;
      _lines_imp_int_2d($42, $43, $44, $45, $46, $47, $48, $49);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_int_2d"] = _lines_exp_int_2d;
function _circle_area_2d($r) {
  var label = 0;
  var $r_addr;
  var $area;
  var $pi;
  $r_addr=$r;
  $pi=3.141592653589793;
  var $0=$pi;
  var $1=$r_addr;
  var $mul=($0)*($1);
  var $2=$r_addr;
  var $mul1=($mul)*($2);
  $area=$mul1;
  var $3=$area;
  return $3;
}
Module["_circle_area_2d"] = _circle_area_2d;
function _circle_arc_point_near_2d($r, $pc, $theta1, $theta2, $p, $pn, $dist) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $i;
      var $pi;
      var $r2;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $pi=3.141592653589793;
      var $0=$r_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$pc_addr;
      var $2=$pn_addr;
      _r8vec_copy(2, $1, $2);
      var $3=$dist_addr;
      HEAPF64[(($3)>>3)]=0;
      $i=0;
      label = 4; break;
    case 4: 
      var $4=$i;
      var $cmp1=(($4)|(0)) < 2;
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$dist_addr;
      var $6=HEAPF64[(($5)>>3)];
      var $7=$i;
      var $8=$p_addr;
      var $arrayidx=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$i;
      var $11=$pn_addr;
      var $arrayidx2=(($11+($10<<3))|0);
      var $12=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($9)-($12);
      var $13=Math.pow($sub, 2);
      var $add=($6)+($13);
      var $14=$dist_addr;
      HEAPF64[(($14)>>3)]=$add;
      label = 6; break;
    case 6: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      var $16=$dist_addr;
      var $17=HEAPF64[(($16)>>3)];
      var $call=Math.sqrt($17);
      var $18=$dist_addr;
      HEAPF64[(($18)>>3)]=$call;
      label = 27; break;
    case 8: 
      var $19=$p_addr;
      var $arrayidx3=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx3)>>3)];
      var $21=$pc_addr;
      var $arrayidx4=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($20)-($22);
      var $23=$p_addr;
      var $arrayidx6=(($23)|0);
      var $24=HEAPF64[(($arrayidx6)>>3)];
      var $25=$pc_addr;
      var $arrayidx7=(($25)|0);
      var $26=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($24)-($26);
      var $call9=_r8_atan($sub5, $sub8);
      $theta=$call9;
      var $27=$theta;
      var $28=$theta1_addr;
      var $sub10=($27)-($28);
      var $29=$pi;
      var $mul=($29)*(2);
      var $call11=_r8_modp($sub10, $mul);
      var $30=$theta2_addr;
      var $31=$theta1_addr;
      var $sub12=($30)-($31);
      var $32=$pi;
      var $mul13=($32)*(2);
      var $call14=_r8_modp($sub12, $mul13);
      var $cmp15=$call11 <= $call14;
      if ($cmp15) { label = 9; break; } else { label = 18; break; }
    case 9: 
      $r2=0;
      $i=0;
      label = 10; break;
    case 10: 
      var $33=$i;
      var $cmp18=(($33)|(0)) < 2;
      if ($cmp18) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $34=$r2;
      var $35=$i;
      var $36=$p_addr;
      var $arrayidx20=(($36+($35<<3))|0);
      var $37=HEAPF64[(($arrayidx20)>>3)];
      var $38=$i;
      var $39=$pc_addr;
      var $arrayidx21=(($39+($38<<3))|0);
      var $40=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($37)-($40);
      var $41=Math.pow($sub22, 2);
      var $add23=($34)+($41);
      $r2=$add23;
      label = 12; break;
    case 12: 
      var $42=$i;
      var $inc25=((($42)+(1))|0);
      $i=$inc25;
      label = 10; break;
    case 13: 
      var $43=$r2;
      var $call27=Math.sqrt($43);
      $r2=$call27;
      $i=0;
      label = 14; break;
    case 14: 
      var $44=$i;
      var $cmp29=(($44)|(0)) < 2;
      if ($cmp29) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $45=$i;
      var $46=$pc_addr;
      var $arrayidx31=(($46+($45<<3))|0);
      var $47=HEAPF64[(($arrayidx31)>>3)];
      var $48=$i;
      var $49=$p_addr;
      var $arrayidx32=(($49+($48<<3))|0);
      var $50=HEAPF64[(($arrayidx32)>>3)];
      var $51=$i;
      var $52=$pc_addr;
      var $arrayidx33=(($52+($51<<3))|0);
      var $53=HEAPF64[(($arrayidx33)>>3)];
      var $sub34=($50)-($53);
      var $54=$r_addr;
      var $mul35=($sub34)*($54);
      var $55=$r2;
      var $div=($mul35)/($55);
      var $add36=($47)+($div);
      var $56=$i;
      var $57=$pn_addr;
      var $arrayidx37=(($57+($56<<3))|0);
      HEAPF64[(($arrayidx37)>>3)]=$add36;
      label = 16; break;
    case 16: 
      var $58=$i;
      var $inc39=((($58)+(1))|0);
      $i=$inc39;
      label = 14; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $59=$theta;
      var $60=$theta1_addr;
      var $61=$theta2_addr;
      var $add41=($60)+($61);
      var $mul42=($add41)*(0.5);
      var $sub43=($59)-($mul42);
      var $62=$pi;
      var $mul44=($62)*(2);
      var $call45=_r8_modp($sub43, $mul44);
      var $63=$pi;
      var $cmp46=$call45 <= $63;
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $64=$pc_addr;
      var $arrayidx48=(($64)|0);
      var $65=HEAPF64[(($arrayidx48)>>3)];
      var $66=$r_addr;
      var $67=$theta2_addr;
      var $call49=Math.cos($67);
      var $mul50=($66)*($call49);
      var $add51=($65)+($mul50);
      var $68=$pn_addr;
      var $arrayidx52=(($68)|0);
      HEAPF64[(($arrayidx52)>>3)]=$add51;
      var $69=$pc_addr;
      var $arrayidx53=(($69+8)|0);
      var $70=HEAPF64[(($arrayidx53)>>3)];
      var $71=$r_addr;
      var $72=$theta2_addr;
      var $call54=Math.sin($72);
      var $mul55=($71)*($call54);
      var $add56=($70)+($mul55);
      var $73=$pn_addr;
      var $arrayidx57=(($73+8)|0);
      HEAPF64[(($arrayidx57)>>3)]=$add56;
      label = 21; break;
    case 20: 
      var $74=$pc_addr;
      var $arrayidx59=(($74)|0);
      var $75=HEAPF64[(($arrayidx59)>>3)];
      var $76=$r_addr;
      var $77=$theta1_addr;
      var $call60=Math.cos($77);
      var $mul61=($76)*($call60);
      var $add62=($75)+($mul61);
      var $78=$pn_addr;
      var $arrayidx63=(($78)|0);
      HEAPF64[(($arrayidx63)>>3)]=$add62;
      var $79=$pc_addr;
      var $arrayidx64=(($79+8)|0);
      var $80=HEAPF64[(($arrayidx64)>>3)];
      var $81=$r_addr;
      var $82=$theta1_addr;
      var $call65=Math.sin($82);
      var $mul66=($81)*($call65);
      var $add67=($80)+($mul66);
      var $83=$pn_addr;
      var $arrayidx68=(($83+8)|0);
      HEAPF64[(($arrayidx68)>>3)]=$add67;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $84=$dist_addr;
      HEAPF64[(($84)>>3)]=0;
      $i=0;
      label = 23; break;
    case 23: 
      var $85=$i;
      var $cmp72=(($85)|(0)) < 2;
      if ($cmp72) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $86=$dist_addr;
      var $87=HEAPF64[(($86)>>3)];
      var $88=$i;
      var $89=$p_addr;
      var $arrayidx74=(($89+($88<<3))|0);
      var $90=HEAPF64[(($arrayidx74)>>3)];
      var $91=$i;
      var $92=$pn_addr;
      var $arrayidx75=(($92+($91<<3))|0);
      var $93=HEAPF64[(($arrayidx75)>>3)];
      var $sub76=($90)-($93);
      var $94=Math.pow($sub76, 2);
      var $add77=($87)+($94);
      var $95=$dist_addr;
      HEAPF64[(($95)>>3)]=$add77;
      label = 25; break;
    case 25: 
      var $96=$i;
      var $inc79=((($96)+(1))|0);
      $i=$inc79;
      label = 23; break;
    case 26: 
      var $97=$dist_addr;
      var $98=HEAPF64[(($97)>>3)];
      var $call81=Math.sqrt($98);
      var $99=$dist_addr;
      HEAPF64[(($99)>>3)]=$call81;
      label = 27; break;
    case 27: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_arc_point_near_2d"] = _circle_arc_point_near_2d;
function _circle_dia2imp_2d($p1, $p2, $r, $pc) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $r_addr;
  var $pc_addr;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $r_addr=$r;
  $pc_addr=$pc;
  var $0=$p1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p2_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=Math.pow($sub, 2);
  var $5=$p1_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$p2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=Math.pow($sub4, 2);
  var $add=($4)+($9);
  var $call=Math.sqrt($add);
  var $mul=($call)*(0.5);
  var $10=$r_addr;
  HEAPF64[(($10)>>3)]=$mul;
  var $11=$p1_addr;
  var $arrayidx5=(($11)|0);
  var $12=HEAPF64[(($arrayidx5)>>3)];
  var $13=$p2_addr;
  var $arrayidx6=(($13)|0);
  var $14=HEAPF64[(($arrayidx6)>>3)];
  var $add7=($12)+($14);
  var $mul8=($add7)*(0.5);
  var $15=$pc_addr;
  var $arrayidx9=(($15)|0);
  HEAPF64[(($arrayidx9)>>3)]=$mul8;
  var $16=$p1_addr;
  var $arrayidx10=(($16+8)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $18=$p2_addr;
  var $arrayidx11=(($18+8)|0);
  var $19=HEAPF64[(($arrayidx11)>>3)];
  var $add12=($17)+($19);
  var $mul13=($add12)*(0.5);
  var $20=$pc_addr;
  var $arrayidx14=(($20+8)|0);
  HEAPF64[(($arrayidx14)>>3)]=$mul13;
  return;
}
Module["_circle_dia2imp_2d"] = _circle_dia2imp_2d;
function _circle_exp_contains_point_2d($p1, $p2, $p3, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p_addr;
      var $a=__stackBase__;
      var $det;
      var $inside;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p_addr=$p;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $2=$p1_addr;
      var $3=$p3_addr;
      var $call1=_r8vec_eq(2, $2, $3);
      var $tobool2=(($call1)|(0))!=0;
      if ($tobool2) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$p1_addr;
      var $5=$p_addr;
      var $call4=_r8vec_eq(2, $4, $5);
      var $tobool5=(($call4)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $inside=6;
      label = 7; break;
    case 6: 
      $inside=7;
      label = 7; break;
    case 7: 
      label = 12; break;
    case 8: 
      var $6=$p1_addr;
      var $arrayidx=(($6)|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$p3_addr;
      var $arrayidx8=(($8)|0);
      var $9=HEAPF64[(($arrayidx8)>>3)];
      var $sub=($7)-($9);
      var $10=$p_addr;
      var $arrayidx9=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx9)>>3)];
      var $12=$p3_addr;
      var $arrayidx10=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($11)-($13);
      var $mul=($sub)*($sub11);
      var $14=$p_addr;
      var $arrayidx12=(($14)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $16=$p3_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($15)-($17);
      var $18=$p1_addr;
      var $arrayidx15=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $20=$p3_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($19)-($21);
      var $mul18=($sub14)*($sub17);
      var $sub19=($mul)-($mul18);
      $det=$sub19;
      var $22=$det;
      var $cmp=$22 == 0;
      if ($cmp) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $inside=4;
      label = 11; break;
    case 10: 
      $inside=5;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $23=$inside;
      $retval=$23;
      label = 30; break;
    case 13: 
      var $24=$p1_addr;
      var $25=$p3_addr;
      var $call25=_r8vec_eq(2, $24, $25);
      var $tobool26=(($call25)|(0))!=0;
      if ($tobool26) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $26=$p1_addr;
      var $arrayidx28=(($26)|0);
      var $27=HEAPF64[(($arrayidx28)>>3)];
      var $28=$p2_addr;
      var $arrayidx29=(($28)|0);
      var $29=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($27)-($29);
      var $30=$p_addr;
      var $arrayidx31=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx31)>>3)];
      var $32=$p2_addr;
      var $arrayidx32=(($32+8)|0);
      var $33=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($31)-($33);
      var $mul34=($sub30)*($sub33);
      var $34=$p_addr;
      var $arrayidx35=(($34)|0);
      var $35=HEAPF64[(($arrayidx35)>>3)];
      var $36=$p2_addr;
      var $arrayidx36=(($36)|0);
      var $37=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($35)-($37);
      var $38=$p1_addr;
      var $arrayidx38=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx38)>>3)];
      var $40=$p2_addr;
      var $arrayidx39=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($39)-($41);
      var $mul41=($sub37)*($sub40);
      var $sub42=($mul34)-($mul41);
      $det=$sub42;
      var $42=$det;
      var $cmp43=$42 == 0;
      if ($cmp43) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $inside=4;
      label = 17; break;
    case 16: 
      $inside=5;
      label = 17; break;
    case 17: 
      var $43=$inside;
      $retval=$43;
      label = 30; break;
    case 18: 
      var $44=$p1_addr;
      var $arrayidx48=(($44)|0);
      var $45=HEAPF64[(($arrayidx48)>>3)];
      var $46=$p2_addr;
      var $arrayidx49=(($46)|0);
      var $47=HEAPF64[(($arrayidx49)>>3)];
      var $sub50=($45)-($47);
      var $48=$p3_addr;
      var $arrayidx51=(($48+8)|0);
      var $49=HEAPF64[(($arrayidx51)>>3)];
      var $50=$p2_addr;
      var $arrayidx52=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx52)>>3)];
      var $sub53=($49)-($51);
      var $mul54=($sub50)*($sub53);
      var $52=$p3_addr;
      var $arrayidx55=(($52)|0);
      var $53=HEAPF64[(($arrayidx55)>>3)];
      var $54=$p2_addr;
      var $arrayidx56=(($54)|0);
      var $55=HEAPF64[(($arrayidx56)>>3)];
      var $sub57=($53)-($55);
      var $56=$p1_addr;
      var $arrayidx58=(($56+8)|0);
      var $57=HEAPF64[(($arrayidx58)>>3)];
      var $58=$p2_addr;
      var $arrayidx59=(($58+8)|0);
      var $59=HEAPF64[(($arrayidx59)>>3)];
      var $sub60=($57)-($59);
      var $mul61=($sub57)*($sub60);
      var $sub62=($mul54)-($mul61);
      $det=$sub62;
      var $60=$det;
      var $cmp63=$60 == 0;
      if ($cmp63) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $61=$p1_addr;
      var $arrayidx65=(($61)|0);
      var $62=HEAPF64[(($arrayidx65)>>3)];
      var $63=$p2_addr;
      var $arrayidx66=(($63)|0);
      var $64=HEAPF64[(($arrayidx66)>>3)];
      var $sub67=($62)-($64);
      var $65=$p_addr;
      var $arrayidx68=(($65+8)|0);
      var $66=HEAPF64[(($arrayidx68)>>3)];
      var $67=$p2_addr;
      var $arrayidx69=(($67+8)|0);
      var $68=HEAPF64[(($arrayidx69)>>3)];
      var $sub70=($66)-($68);
      var $mul71=($sub67)*($sub70);
      var $69=$p_addr;
      var $arrayidx72=(($69)|0);
      var $70=HEAPF64[(($arrayidx72)>>3)];
      var $71=$p2_addr;
      var $arrayidx73=(($71)|0);
      var $72=HEAPF64[(($arrayidx73)>>3)];
      var $sub74=($70)-($72);
      var $73=$p1_addr;
      var $arrayidx75=(($73+8)|0);
      var $74=HEAPF64[(($arrayidx75)>>3)];
      var $75=$p2_addr;
      var $arrayidx76=(($75+8)|0);
      var $76=HEAPF64[(($arrayidx76)>>3)];
      var $sub77=($74)-($76);
      var $mul78=($sub74)*($sub77);
      var $sub79=($mul71)-($mul78);
      $det=$sub79;
      var $77=$det;
      var $cmp80=$77 == 0;
      if ($cmp80) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $inside=2;
      label = 22; break;
    case 21: 
      $inside=3;
      label = 22; break;
    case 22: 
      var $78=$inside;
      $retval=$78;
      label = 30; break;
    case 23: 
      var $79=$p1_addr;
      var $arrayidx85=(($79)|0);
      var $80=HEAPF64[(($arrayidx85)>>3)];
      var $arrayidx86=(($a)|0);
      HEAPF64[(($arrayidx86)>>3)]=$80;
      var $81=$p2_addr;
      var $arrayidx87=(($81)|0);
      var $82=HEAPF64[(($arrayidx87)>>3)];
      var $arrayidx88=(($a+8)|0);
      HEAPF64[(($arrayidx88)>>3)]=$82;
      var $83=$p3_addr;
      var $arrayidx89=(($83)|0);
      var $84=HEAPF64[(($arrayidx89)>>3)];
      var $arrayidx90=(($a+16)|0);
      HEAPF64[(($arrayidx90)>>3)]=$84;
      var $85=$p_addr;
      var $arrayidx91=(($85)|0);
      var $86=HEAPF64[(($arrayidx91)>>3)];
      var $arrayidx92=(($a+24)|0);
      HEAPF64[(($arrayidx92)>>3)]=$86;
      var $87=$p1_addr;
      var $arrayidx93=(($87+8)|0);
      var $88=HEAPF64[(($arrayidx93)>>3)];
      var $arrayidx94=(($a+32)|0);
      HEAPF64[(($arrayidx94)>>3)]=$88;
      var $89=$p2_addr;
      var $arrayidx95=(($89+8)|0);
      var $90=HEAPF64[(($arrayidx95)>>3)];
      var $arrayidx96=(($a+40)|0);
      HEAPF64[(($arrayidx96)>>3)]=$90;
      var $91=$p3_addr;
      var $arrayidx97=(($91+8)|0);
      var $92=HEAPF64[(($arrayidx97)>>3)];
      var $arrayidx98=(($a+48)|0);
      HEAPF64[(($arrayidx98)>>3)]=$92;
      var $93=$p_addr;
      var $arrayidx99=(($93+8)|0);
      var $94=HEAPF64[(($arrayidx99)>>3)];
      var $arrayidx100=(($a+56)|0);
      HEAPF64[(($arrayidx100)>>3)]=$94;
      var $95=$p1_addr;
      var $arrayidx101=(($95)|0);
      var $96=HEAPF64[(($arrayidx101)>>3)];
      var $97=$p1_addr;
      var $arrayidx102=(($97)|0);
      var $98=HEAPF64[(($arrayidx102)>>3)];
      var $mul103=($96)*($98);
      var $99=$p1_addr;
      var $arrayidx104=(($99+8)|0);
      var $100=HEAPF64[(($arrayidx104)>>3)];
      var $101=$p1_addr;
      var $arrayidx105=(($101+8)|0);
      var $102=HEAPF64[(($arrayidx105)>>3)];
      var $mul106=($100)*($102);
      var $add=($mul103)+($mul106);
      var $arrayidx107=(($a+64)|0);
      HEAPF64[(($arrayidx107)>>3)]=$add;
      var $103=$p2_addr;
      var $arrayidx108=(($103)|0);
      var $104=HEAPF64[(($arrayidx108)>>3)];
      var $105=$p2_addr;
      var $arrayidx109=(($105)|0);
      var $106=HEAPF64[(($arrayidx109)>>3)];
      var $mul110=($104)*($106);
      var $107=$p2_addr;
      var $arrayidx111=(($107+8)|0);
      var $108=HEAPF64[(($arrayidx111)>>3)];
      var $109=$p2_addr;
      var $arrayidx112=(($109+8)|0);
      var $110=HEAPF64[(($arrayidx112)>>3)];
      var $mul113=($108)*($110);
      var $add114=($mul110)+($mul113);
      var $arrayidx115=(($a+72)|0);
      HEAPF64[(($arrayidx115)>>3)]=$add114;
      var $111=$p3_addr;
      var $arrayidx116=(($111)|0);
      var $112=HEAPF64[(($arrayidx116)>>3)];
      var $113=$p3_addr;
      var $arrayidx117=(($113)|0);
      var $114=HEAPF64[(($arrayidx117)>>3)];
      var $mul118=($112)*($114);
      var $115=$p3_addr;
      var $arrayidx119=(($115+8)|0);
      var $116=HEAPF64[(($arrayidx119)>>3)];
      var $117=$p3_addr;
      var $arrayidx120=(($117+8)|0);
      var $118=HEAPF64[(($arrayidx120)>>3)];
      var $mul121=($116)*($118);
      var $add122=($mul118)+($mul121);
      var $arrayidx123=(($a+80)|0);
      HEAPF64[(($arrayidx123)>>3)]=$add122;
      var $119=$p_addr;
      var $arrayidx124=(($119)|0);
      var $120=HEAPF64[(($arrayidx124)>>3)];
      var $121=$p_addr;
      var $arrayidx125=(($121)|0);
      var $122=HEAPF64[(($arrayidx125)>>3)];
      var $mul126=($120)*($122);
      var $123=$p_addr;
      var $arrayidx127=(($123+8)|0);
      var $124=HEAPF64[(($arrayidx127)>>3)];
      var $125=$p_addr;
      var $arrayidx128=(($125+8)|0);
      var $126=HEAPF64[(($arrayidx128)>>3)];
      var $mul129=($124)*($126);
      var $add130=($mul126)+($mul129);
      var $arrayidx131=(($a+88)|0);
      HEAPF64[(($arrayidx131)>>3)]=$add130;
      var $arrayidx132=(($a+96)|0);
      HEAPF64[(($arrayidx132)>>3)]=1;
      var $arrayidx133=(($a+104)|0);
      HEAPF64[(($arrayidx133)>>3)]=1;
      var $arrayidx134=(($a+112)|0);
      HEAPF64[(($arrayidx134)>>3)]=1;
      var $arrayidx135=(($a+120)|0);
      HEAPF64[(($arrayidx135)>>3)]=1;
      var $arraydecay=(($a)|0);
      var $call136=_r8mat_det_4d($arraydecay);
      $det=$call136;
      var $127=$det;
      var $cmp137=$127 < 0;
      if ($cmp137) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $inside=1;
      label = 29; break;
    case 25: 
      var $128=$det;
      var $cmp140=$128 == 0;
      if ($cmp140) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $inside=0;
      label = 28; break;
    case 27: 
      $inside=-1;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $129=$inside;
      $retval=$129;
      label = 30; break;
    case 30: 
      var $130=$retval;
      STACKTOP = __stackBase__;
      return $130;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_exp_contains_point_2d"] = _circle_exp_contains_point_2d;
function _r8_modp($x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $y_addr;
      var $value;
      $x_addr=$x;
      $y_addr=$y;
      var $0=$y_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $4=$y_addr;
      var $call2=_fprintf($3, ((14488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$4,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$x_addr;
      var $6=$x_addr;
      var $7=$y_addr;
      var $div=($6)/($7);
      var $conv=(($div)&-1);
      var $conv3=(($conv)|(0));
      var $8=$y_addr;
      var $mul=($conv3)*($8);
      var $sub=($5)-($mul);
      $value=$sub;
      var $9=$value;
      var $cmp4=$9 < 0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$value;
      var $11=$y_addr;
      var $call7=Math.abs($11);
      var $add=($10)+($call7);
      $value=$add;
      label = 6; break;
    case 6: 
      var $12=$value;
      STACKTOP = __stackBase__;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_modp"] = _r8_modp;
function _r8mat_det_4d($a) {
  var label = 0;
  var $a_addr;
  var $det;
  $a_addr=$a;
  var $0=$a_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$a_addr;
  var $arrayidx1=(($2+40)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $4=$a_addr;
  var $arrayidx2=(($4+80)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$a_addr;
  var $arrayidx3=(($6+120)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $mul=($5)*($7);
  var $8=$a_addr;
  var $arrayidx4=(($8+112)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $10=$a_addr;
  var $arrayidx5=(($10+88)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $mul6=($9)*($11);
  var $sub=($mul)-($mul6);
  var $mul7=($3)*($sub);
  var $12=$a_addr;
  var $arrayidx8=(($12+72)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$a_addr;
  var $arrayidx9=(($14+48)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $16=$a_addr;
  var $arrayidx10=(($16+120)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $mul11=($15)*($17);
  var $18=$a_addr;
  var $arrayidx12=(($18+112)|0);
  var $19=HEAPF64[(($arrayidx12)>>3)];
  var $20=$a_addr;
  var $arrayidx13=(($20+56)|0);
  var $21=HEAPF64[(($arrayidx13)>>3)];
  var $mul14=($19)*($21);
  var $sub15=($mul11)-($mul14);
  var $mul16=($13)*($sub15);
  var $sub17=($mul7)-($mul16);
  var $22=$a_addr;
  var $arrayidx18=(($22+104)|0);
  var $23=HEAPF64[(($arrayidx18)>>3)];
  var $24=$a_addr;
  var $arrayidx19=(($24+48)|0);
  var $25=HEAPF64[(($arrayidx19)>>3)];
  var $26=$a_addr;
  var $arrayidx20=(($26+88)|0);
  var $27=HEAPF64[(($arrayidx20)>>3)];
  var $mul21=($25)*($27);
  var $28=$a_addr;
  var $arrayidx22=(($28+80)|0);
  var $29=HEAPF64[(($arrayidx22)>>3)];
  var $30=$a_addr;
  var $arrayidx23=(($30+56)|0);
  var $31=HEAPF64[(($arrayidx23)>>3)];
  var $mul24=($29)*($31);
  var $sub25=($mul21)-($mul24);
  var $mul26=($23)*($sub25);
  var $add=($sub17)+($mul26);
  var $mul27=($1)*($add);
  var $32=$a_addr;
  var $arrayidx28=(($32+32)|0);
  var $33=HEAPF64[(($arrayidx28)>>3)];
  var $34=$a_addr;
  var $arrayidx29=(($34+8)|0);
  var $35=HEAPF64[(($arrayidx29)>>3)];
  var $36=$a_addr;
  var $arrayidx30=(($36+80)|0);
  var $37=HEAPF64[(($arrayidx30)>>3)];
  var $38=$a_addr;
  var $arrayidx31=(($38+120)|0);
  var $39=HEAPF64[(($arrayidx31)>>3)];
  var $mul32=($37)*($39);
  var $40=$a_addr;
  var $arrayidx33=(($40+112)|0);
  var $41=HEAPF64[(($arrayidx33)>>3)];
  var $42=$a_addr;
  var $arrayidx34=(($42+88)|0);
  var $43=HEAPF64[(($arrayidx34)>>3)];
  var $mul35=($41)*($43);
  var $sub36=($mul32)-($mul35);
  var $mul37=($35)*($sub36);
  var $44=$a_addr;
  var $arrayidx38=(($44+72)|0);
  var $45=HEAPF64[(($arrayidx38)>>3)];
  var $46=$a_addr;
  var $arrayidx39=(($46+16)|0);
  var $47=HEAPF64[(($arrayidx39)>>3)];
  var $48=$a_addr;
  var $arrayidx40=(($48+120)|0);
  var $49=HEAPF64[(($arrayidx40)>>3)];
  var $mul41=($47)*($49);
  var $50=$a_addr;
  var $arrayidx42=(($50+112)|0);
  var $51=HEAPF64[(($arrayidx42)>>3)];
  var $52=$a_addr;
  var $arrayidx43=(($52+24)|0);
  var $53=HEAPF64[(($arrayidx43)>>3)];
  var $mul44=($51)*($53);
  var $sub45=($mul41)-($mul44);
  var $mul46=($45)*($sub45);
  var $sub47=($mul37)-($mul46);
  var $54=$a_addr;
  var $arrayidx48=(($54+104)|0);
  var $55=HEAPF64[(($arrayidx48)>>3)];
  var $56=$a_addr;
  var $arrayidx49=(($56+16)|0);
  var $57=HEAPF64[(($arrayidx49)>>3)];
  var $58=$a_addr;
  var $arrayidx50=(($58+88)|0);
  var $59=HEAPF64[(($arrayidx50)>>3)];
  var $mul51=($57)*($59);
  var $60=$a_addr;
  var $arrayidx52=(($60+80)|0);
  var $61=HEAPF64[(($arrayidx52)>>3)];
  var $62=$a_addr;
  var $arrayidx53=(($62+24)|0);
  var $63=HEAPF64[(($arrayidx53)>>3)];
  var $mul54=($61)*($63);
  var $sub55=($mul51)-($mul54);
  var $mul56=($55)*($sub55);
  var $add57=($sub47)+($mul56);
  var $mul58=($33)*($add57);
  var $sub59=($mul27)-($mul58);
  var $64=$a_addr;
  var $arrayidx60=(($64+64)|0);
  var $65=HEAPF64[(($arrayidx60)>>3)];
  var $66=$a_addr;
  var $arrayidx61=(($66+8)|0);
  var $67=HEAPF64[(($arrayidx61)>>3)];
  var $68=$a_addr;
  var $arrayidx62=(($68+48)|0);
  var $69=HEAPF64[(($arrayidx62)>>3)];
  var $70=$a_addr;
  var $arrayidx63=(($70+120)|0);
  var $71=HEAPF64[(($arrayidx63)>>3)];
  var $mul64=($69)*($71);
  var $72=$a_addr;
  var $arrayidx65=(($72+112)|0);
  var $73=HEAPF64[(($arrayidx65)>>3)];
  var $74=$a_addr;
  var $arrayidx66=(($74+56)|0);
  var $75=HEAPF64[(($arrayidx66)>>3)];
  var $mul67=($73)*($75);
  var $sub68=($mul64)-($mul67);
  var $mul69=($67)*($sub68);
  var $76=$a_addr;
  var $arrayidx70=(($76+40)|0);
  var $77=HEAPF64[(($arrayidx70)>>3)];
  var $78=$a_addr;
  var $arrayidx71=(($78+16)|0);
  var $79=HEAPF64[(($arrayidx71)>>3)];
  var $80=$a_addr;
  var $arrayidx72=(($80+120)|0);
  var $81=HEAPF64[(($arrayidx72)>>3)];
  var $mul73=($79)*($81);
  var $82=$a_addr;
  var $arrayidx74=(($82+112)|0);
  var $83=HEAPF64[(($arrayidx74)>>3)];
  var $84=$a_addr;
  var $arrayidx75=(($84+24)|0);
  var $85=HEAPF64[(($arrayidx75)>>3)];
  var $mul76=($83)*($85);
  var $sub77=($mul73)-($mul76);
  var $mul78=($77)*($sub77);
  var $sub79=($mul69)-($mul78);
  var $86=$a_addr;
  var $arrayidx80=(($86+104)|0);
  var $87=HEAPF64[(($arrayidx80)>>3)];
  var $88=$a_addr;
  var $arrayidx81=(($88+16)|0);
  var $89=HEAPF64[(($arrayidx81)>>3)];
  var $90=$a_addr;
  var $arrayidx82=(($90+56)|0);
  var $91=HEAPF64[(($arrayidx82)>>3)];
  var $mul83=($89)*($91);
  var $92=$a_addr;
  var $arrayidx84=(($92+48)|0);
  var $93=HEAPF64[(($arrayidx84)>>3)];
  var $94=$a_addr;
  var $arrayidx85=(($94+24)|0);
  var $95=HEAPF64[(($arrayidx85)>>3)];
  var $mul86=($93)*($95);
  var $sub87=($mul83)-($mul86);
  var $mul88=($87)*($sub87);
  var $add89=($sub79)+($mul88);
  var $mul90=($65)*($add89);
  var $add91=($sub59)+($mul90);
  var $96=$a_addr;
  var $arrayidx92=(($96+96)|0);
  var $97=HEAPF64[(($arrayidx92)>>3)];
  var $98=$a_addr;
  var $arrayidx93=(($98+8)|0);
  var $99=HEAPF64[(($arrayidx93)>>3)];
  var $100=$a_addr;
  var $arrayidx94=(($100+48)|0);
  var $101=HEAPF64[(($arrayidx94)>>3)];
  var $102=$a_addr;
  var $arrayidx95=(($102+88)|0);
  var $103=HEAPF64[(($arrayidx95)>>3)];
  var $mul96=($101)*($103);
  var $104=$a_addr;
  var $arrayidx97=(($104+80)|0);
  var $105=HEAPF64[(($arrayidx97)>>3)];
  var $106=$a_addr;
  var $arrayidx98=(($106+56)|0);
  var $107=HEAPF64[(($arrayidx98)>>3)];
  var $mul99=($105)*($107);
  var $sub100=($mul96)-($mul99);
  var $mul101=($99)*($sub100);
  var $108=$a_addr;
  var $arrayidx102=(($108+40)|0);
  var $109=HEAPF64[(($arrayidx102)>>3)];
  var $110=$a_addr;
  var $arrayidx103=(($110+16)|0);
  var $111=HEAPF64[(($arrayidx103)>>3)];
  var $112=$a_addr;
  var $arrayidx104=(($112+88)|0);
  var $113=HEAPF64[(($arrayidx104)>>3)];
  var $mul105=($111)*($113);
  var $114=$a_addr;
  var $arrayidx106=(($114+80)|0);
  var $115=HEAPF64[(($arrayidx106)>>3)];
  var $116=$a_addr;
  var $arrayidx107=(($116+24)|0);
  var $117=HEAPF64[(($arrayidx107)>>3)];
  var $mul108=($115)*($117);
  var $sub109=($mul105)-($mul108);
  var $mul110=($109)*($sub109);
  var $sub111=($mul101)-($mul110);
  var $118=$a_addr;
  var $arrayidx112=(($118+72)|0);
  var $119=HEAPF64[(($arrayidx112)>>3)];
  var $120=$a_addr;
  var $arrayidx113=(($120+16)|0);
  var $121=HEAPF64[(($arrayidx113)>>3)];
  var $122=$a_addr;
  var $arrayidx114=(($122+56)|0);
  var $123=HEAPF64[(($arrayidx114)>>3)];
  var $mul115=($121)*($123);
  var $124=$a_addr;
  var $arrayidx116=(($124+48)|0);
  var $125=HEAPF64[(($arrayidx116)>>3)];
  var $126=$a_addr;
  var $arrayidx117=(($126+24)|0);
  var $127=HEAPF64[(($arrayidx117)>>3)];
  var $mul118=($125)*($127);
  var $sub119=($mul115)-($mul118);
  var $mul120=($119)*($sub119);
  var $add121=($sub111)+($mul120);
  var $mul122=($97)*($add121);
  var $sub123=($add91)-($mul122);
  $det=$sub123;
  var $128=$det;
  return $128;
}
Module["_r8mat_det_4d"] = _r8mat_det_4d;
function _circle_exp2imp_2d($p1, $p2, $p3, $r, $pc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $r_addr;
      var $pc_addr;
      var $a;
      var $b;
      var $c;
      var $d;
      var $e;
      var $f;
      var $g;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $r_addr=$r;
      $pc_addr=$pc;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$p1_addr;
      var $3=$p3_addr;
      var $call1=_r8vec_eq(2, $2, $3);
      var $tobool2=(($call1)|(0))!=0;
      if ($tobool2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$r_addr;
      HEAPF64[(($4)>>3)]=0;
      var $5=$p1_addr;
      var $6=$pc_addr;
      _r8vec_copy(2, $5, $6);
      label = 16; break;
    case 5: 
      var $7=$p1_addr;
      var $8=$p2_addr;
      var $call3=_r8vec_eq(2, $7, $8);
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$p1_addr;
      var $arrayidx=(($9)|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $11=$p3_addr;
      var $arrayidx6=(($11)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $sub=($10)-($12);
      var $13=$p1_addr;
      var $arrayidx7=(($13)|0);
      var $14=HEAPF64[(($arrayidx7)>>3)];
      var $15=$p3_addr;
      var $arrayidx8=(($15)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($14)-($16);
      var $mul=($sub)*($sub9);
      var $17=$p1_addr;
      var $arrayidx10=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $19=$p3_addr;
      var $arrayidx11=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($18)-($20);
      var $21=$p1_addr;
      var $arrayidx13=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx13)>>3)];
      var $23=$p3_addr;
      var $arrayidx14=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($22)-($24);
      var $mul16=($sub12)*($sub15);
      var $add=($mul)+($mul16);
      var $call17=Math.sqrt($add);
      var $mul18=($call17)*(0.5);
      var $25=$r_addr;
      HEAPF64[(($25)>>3)]=$mul18;
      var $26=$p1_addr;
      var $arrayidx19=(($26)|0);
      var $27=HEAPF64[(($arrayidx19)>>3)];
      var $28=$p3_addr;
      var $arrayidx20=(($28)|0);
      var $29=HEAPF64[(($arrayidx20)>>3)];
      var $add21=($27)+($29);
      var $mul22=($add21)*(0.5);
      var $30=$pc_addr;
      var $arrayidx23=(($30)|0);
      HEAPF64[(($arrayidx23)>>3)]=$mul22;
      var $31=$p1_addr;
      var $arrayidx24=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx24)>>3)];
      var $33=$p3_addr;
      var $arrayidx25=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx25)>>3)];
      var $add26=($32)+($34);
      var $mul27=($add26)*(0.5);
      var $35=$pc_addr;
      var $arrayidx28=(($35+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$mul27;
      label = 16; break;
    case 7: 
      var $36=$p1_addr;
      var $37=$p3_addr;
      var $call29=_r8vec_eq(2, $36, $37);
      var $tobool30=(($call29)|(0))!=0;
      if ($tobool30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $38=$p1_addr;
      var $arrayidx32=(($38)|0);
      var $39=HEAPF64[(($arrayidx32)>>3)];
      var $40=$p2_addr;
      var $arrayidx33=(($40)|0);
      var $41=HEAPF64[(($arrayidx33)>>3)];
      var $sub34=($39)-($41);
      var $42=$p1_addr;
      var $arrayidx35=(($42)|0);
      var $43=HEAPF64[(($arrayidx35)>>3)];
      var $44=$p2_addr;
      var $arrayidx36=(($44)|0);
      var $45=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($43)-($45);
      var $mul38=($sub34)*($sub37);
      var $46=$p1_addr;
      var $arrayidx39=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx39)>>3)];
      var $48=$p2_addr;
      var $arrayidx40=(($48+8)|0);
      var $49=HEAPF64[(($arrayidx40)>>3)];
      var $sub41=($47)-($49);
      var $50=$p1_addr;
      var $arrayidx42=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx42)>>3)];
      var $52=$p2_addr;
      var $arrayidx43=(($52+8)|0);
      var $53=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=($51)-($53);
      var $mul45=($sub41)*($sub44);
      var $add46=($mul38)+($mul45);
      var $call47=Math.sqrt($add46);
      var $mul48=($call47)*(0.5);
      var $54=$r_addr;
      HEAPF64[(($54)>>3)]=$mul48;
      var $55=$p1_addr;
      var $arrayidx49=(($55)|0);
      var $56=HEAPF64[(($arrayidx49)>>3)];
      var $57=$p2_addr;
      var $arrayidx50=(($57)|0);
      var $58=HEAPF64[(($arrayidx50)>>3)];
      var $add51=($56)+($58);
      var $mul52=($add51)*(0.5);
      var $59=$pc_addr;
      var $arrayidx53=(($59)|0);
      HEAPF64[(($arrayidx53)>>3)]=$mul52;
      var $60=$p1_addr;
      var $arrayidx54=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx54)>>3)];
      var $62=$p2_addr;
      var $arrayidx55=(($62+8)|0);
      var $63=HEAPF64[(($arrayidx55)>>3)];
      var $add56=($61)+($63);
      var $mul57=($add56)*(0.5);
      var $64=$pc_addr;
      var $arrayidx58=(($64+8)|0);
      HEAPF64[(($arrayidx58)>>3)]=$mul57;
      label = 16; break;
    case 9: 
      var $65=$p2_addr;
      var $66=$p3_addr;
      var $call60=_r8vec_eq(2, $65, $66);
      var $tobool61=(($call60)|(0))!=0;
      if ($tobool61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $67=$p1_addr;
      var $arrayidx63=(($67)|0);
      var $68=HEAPF64[(($arrayidx63)>>3)];
      var $69=$p2_addr;
      var $arrayidx64=(($69)|0);
      var $70=HEAPF64[(($arrayidx64)>>3)];
      var $sub65=($68)-($70);
      var $71=$p1_addr;
      var $arrayidx66=(($71)|0);
      var $72=HEAPF64[(($arrayidx66)>>3)];
      var $73=$p2_addr;
      var $arrayidx67=(($73)|0);
      var $74=HEAPF64[(($arrayidx67)>>3)];
      var $sub68=($72)-($74);
      var $mul69=($sub65)*($sub68);
      var $75=$p1_addr;
      var $arrayidx70=(($75+8)|0);
      var $76=HEAPF64[(($arrayidx70)>>3)];
      var $77=$p2_addr;
      var $arrayidx71=(($77+8)|0);
      var $78=HEAPF64[(($arrayidx71)>>3)];
      var $sub72=($76)-($78);
      var $79=$p1_addr;
      var $arrayidx73=(($79+8)|0);
      var $80=HEAPF64[(($arrayidx73)>>3)];
      var $81=$p2_addr;
      var $arrayidx74=(($81+8)|0);
      var $82=HEAPF64[(($arrayidx74)>>3)];
      var $sub75=($80)-($82);
      var $mul76=($sub72)*($sub75);
      var $add77=($mul69)+($mul76);
      var $call78=Math.sqrt($add77);
      var $mul79=($call78)*(0.5);
      var $83=$r_addr;
      HEAPF64[(($83)>>3)]=$mul79;
      var $84=$p1_addr;
      var $arrayidx80=(($84)|0);
      var $85=HEAPF64[(($arrayidx80)>>3)];
      var $86=$p2_addr;
      var $arrayidx81=(($86)|0);
      var $87=HEAPF64[(($arrayidx81)>>3)];
      var $add82=($85)+($87);
      var $mul83=($add82)*(0.5);
      var $88=$pc_addr;
      var $arrayidx84=(($88)|0);
      HEAPF64[(($arrayidx84)>>3)]=$mul83;
      var $89=$p1_addr;
      var $arrayidx85=(($89+8)|0);
      var $90=HEAPF64[(($arrayidx85)>>3)];
      var $91=$p2_addr;
      var $arrayidx86=(($91+8)|0);
      var $92=HEAPF64[(($arrayidx86)>>3)];
      var $add87=($90)+($92);
      var $mul88=($add87)*(0.5);
      var $93=$pc_addr;
      var $arrayidx89=(($93+8)|0);
      HEAPF64[(($arrayidx89)>>3)]=$mul88;
      label = 16; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $94=$p2_addr;
      var $arrayidx93=(($94)|0);
      var $95=HEAPF64[(($arrayidx93)>>3)];
      var $96=$p1_addr;
      var $arrayidx94=(($96)|0);
      var $97=HEAPF64[(($arrayidx94)>>3)];
      var $sub95=($95)-($97);
      $a=$sub95;
      var $98=$p2_addr;
      var $arrayidx96=(($98+8)|0);
      var $99=HEAPF64[(($arrayidx96)>>3)];
      var $100=$p1_addr;
      var $arrayidx97=(($100+8)|0);
      var $101=HEAPF64[(($arrayidx97)>>3)];
      var $sub98=($99)-($101);
      $b=$sub98;
      var $102=$p3_addr;
      var $arrayidx99=(($102)|0);
      var $103=HEAPF64[(($arrayidx99)>>3)];
      var $104=$p1_addr;
      var $arrayidx100=(($104)|0);
      var $105=HEAPF64[(($arrayidx100)>>3)];
      var $sub101=($103)-($105);
      $c=$sub101;
      var $106=$p3_addr;
      var $arrayidx102=(($106+8)|0);
      var $107=HEAPF64[(($arrayidx102)>>3)];
      var $108=$p1_addr;
      var $arrayidx103=(($108+8)|0);
      var $109=HEAPF64[(($arrayidx103)>>3)];
      var $sub104=($107)-($109);
      $d=$sub104;
      var $110=$a;
      var $111=$p1_addr;
      var $arrayidx105=(($111)|0);
      var $112=HEAPF64[(($arrayidx105)>>3)];
      var $113=$p2_addr;
      var $arrayidx106=(($113)|0);
      var $114=HEAPF64[(($arrayidx106)>>3)];
      var $add107=($112)+($114);
      var $mul108=($110)*($add107);
      var $115=$b;
      var $116=$p1_addr;
      var $arrayidx109=(($116+8)|0);
      var $117=HEAPF64[(($arrayidx109)>>3)];
      var $118=$p2_addr;
      var $arrayidx110=(($118+8)|0);
      var $119=HEAPF64[(($arrayidx110)>>3)];
      var $add111=($117)+($119);
      var $mul112=($115)*($add111);
      var $add113=($mul108)+($mul112);
      $e=$add113;
      var $120=$c;
      var $121=$p1_addr;
      var $arrayidx114=(($121)|0);
      var $122=HEAPF64[(($arrayidx114)>>3)];
      var $123=$p3_addr;
      var $arrayidx115=(($123)|0);
      var $124=HEAPF64[(($arrayidx115)>>3)];
      var $add116=($122)+($124);
      var $mul117=($120)*($add116);
      var $125=$d;
      var $126=$p1_addr;
      var $arrayidx118=(($126+8)|0);
      var $127=HEAPF64[(($arrayidx118)>>3)];
      var $128=$p3_addr;
      var $arrayidx119=(($128+8)|0);
      var $129=HEAPF64[(($arrayidx119)>>3)];
      var $add120=($127)+($129);
      var $mul121=($125)*($add120);
      var $add122=($mul117)+($mul121);
      $f=$add122;
      var $130=$a;
      var $131=$p3_addr;
      var $arrayidx123=(($131+8)|0);
      var $132=HEAPF64[(($arrayidx123)>>3)];
      var $133=$p2_addr;
      var $arrayidx124=(($133+8)|0);
      var $134=HEAPF64[(($arrayidx124)>>3)];
      var $sub125=($132)-($134);
      var $mul126=($130)*($sub125);
      var $135=$b;
      var $136=$p3_addr;
      var $arrayidx127=(($136)|0);
      var $137=HEAPF64[(($arrayidx127)>>3)];
      var $138=$p2_addr;
      var $arrayidx128=(($138)|0);
      var $139=HEAPF64[(($arrayidx128)>>3)];
      var $sub129=($137)-($139);
      var $mul130=($135)*($sub129);
      var $sub131=($mul126)-($mul130);
      $g=$sub131;
      var $140=$g;
      var $cmp=$140 == 0;
      if ($cmp) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $141=$pc_addr;
      var $arrayidx133=(($141)|0);
      HEAPF64[(($arrayidx133)>>3)]=0;
      var $142=$pc_addr;
      var $arrayidx134=(($142+8)|0);
      HEAPF64[(($arrayidx134)>>3)]=0;
      var $143=$r_addr;
      HEAPF64[(($143)>>3)]=-1;
      label = 16; break;
    case 15: 
      var $144=$d;
      var $145=$e;
      var $mul136=($144)*($145);
      var $146=$b;
      var $147=$f;
      var $mul137=($146)*($147);
      var $sub138=($mul136)-($mul137);
      var $mul139=($sub138)*(0.5);
      var $148=$g;
      var $div=($mul139)/($148);
      var $149=$pc_addr;
      var $arrayidx140=(($149)|0);
      HEAPF64[(($arrayidx140)>>3)]=$div;
      var $150=$a;
      var $151=$f;
      var $mul141=($150)*($151);
      var $152=$c;
      var $153=$e;
      var $mul142=($152)*($153);
      var $sub143=($mul141)-($mul142);
      var $mul144=($sub143)*(0.5);
      var $154=$g;
      var $div145=($mul144)/($154);
      var $155=$pc_addr;
      var $arrayidx146=(($155+8)|0);
      HEAPF64[(($arrayidx146)>>3)]=$div145;
      var $156=$p1_addr;
      var $arrayidx147=(($156)|0);
      var $157=HEAPF64[(($arrayidx147)>>3)];
      var $158=$pc_addr;
      var $arrayidx148=(($158)|0);
      var $159=HEAPF64[(($arrayidx148)>>3)];
      var $sub149=($157)-($159);
      var $160=$p1_addr;
      var $arrayidx150=(($160)|0);
      var $161=HEAPF64[(($arrayidx150)>>3)];
      var $162=$pc_addr;
      var $arrayidx151=(($162)|0);
      var $163=HEAPF64[(($arrayidx151)>>3)];
      var $sub152=($161)-($163);
      var $mul153=($sub149)*($sub152);
      var $164=$p1_addr;
      var $arrayidx154=(($164+8)|0);
      var $165=HEAPF64[(($arrayidx154)>>3)];
      var $166=$pc_addr;
      var $arrayidx155=(($166+8)|0);
      var $167=HEAPF64[(($arrayidx155)>>3)];
      var $sub156=($165)-($167);
      var $168=$p1_addr;
      var $arrayidx157=(($168+8)|0);
      var $169=HEAPF64[(($arrayidx157)>>3)];
      var $170=$pc_addr;
      var $arrayidx158=(($170+8)|0);
      var $171=HEAPF64[(($arrayidx158)>>3)];
      var $sub159=($169)-($171);
      var $mul160=($sub156)*($sub159);
      var $add161=($mul153)+($mul160);
      var $call162=Math.sqrt($add161);
      var $172=$r_addr;
      HEAPF64[(($172)>>3)]=$call162;
      label = 16; break;
    case 16: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_exp2imp_2d"] = _circle_exp2imp_2d;
function _circle_imp_contains_point_2d($r, $pc, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $pc_addr;
      var $p_addr;
      $r_addr=$r;
      $pc_addr=$pc;
      $p_addr=$p;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$pc_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$pc_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$r_addr;
      var $11=$r_addr;
      var $mul=($10)*($11);
      var $cmp=$add <= $mul;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $12=$retval;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_imp_contains_point_2d"] = _circle_imp_contains_point_2d;
function _circle_imp_line_par_int_2d($r, $pc, $x0, $y0, $f, $g, $int_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $x0_addr;
      var $y0_addr;
      var $f_addr;
      var $g_addr;
      var $int_num_addr;
      var $p_addr;
      var $root;
      var $t;
      $r_addr=$r;
      $pc_addr=$pc;
      $x0_addr=$x0;
      $y0_addr=$y0;
      $f_addr=$f;
      $g_addr=$g;
      $int_num_addr=$int_num;
      $p_addr=$p;
      var $0=$r_addr;
      var $1=$r_addr;
      var $mul=($0)*($1);
      var $2=$f_addr;
      var $3=$f_addr;
      var $mul1=($2)*($3);
      var $4=$g_addr;
      var $5=$g_addr;
      var $mul2=($4)*($5);
      var $add=($mul1)+($mul2);
      var $mul3=($mul)*($add);
      var $6=$f_addr;
      var $7=$pc_addr;
      var $arrayidx=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$y0_addr;
      var $sub=($8)-($9);
      var $mul4=($6)*($sub);
      var $10=$g_addr;
      var $11=$pc_addr;
      var $arrayidx5=(($11)|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $13=$x0_addr;
      var $sub6=($12)-($13);
      var $mul7=($10)*($sub6);
      var $sub8=($mul4)-($mul7);
      var $14=$f_addr;
      var $15=$pc_addr;
      var $arrayidx9=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$y0_addr;
      var $sub10=($16)-($17);
      var $mul11=($14)*($sub10);
      var $18=$g_addr;
      var $19=$pc_addr;
      var $arrayidx12=(($19)|0);
      var $20=HEAPF64[(($arrayidx12)>>3)];
      var $21=$x0_addr;
      var $sub13=($20)-($21);
      var $mul14=($18)*($sub13);
      var $sub15=($mul11)-($mul14);
      var $mul16=($sub8)*($sub15);
      var $sub17=($mul3)-($mul16);
      $root=$sub17;
      var $22=$root;
      var $cmp=$22 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$int_num_addr;
      HEAP32[(($23)>>2)]=0;
      label = 10; break;
    case 4: 
      var $24=$root;
      var $cmp18=$24 == 0;
      if ($cmp18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$int_num_addr;
      HEAP32[(($25)>>2)]=1;
      var $26=$f_addr;
      var $27=$pc_addr;
      var $arrayidx20=(($27)|0);
      var $28=HEAPF64[(($arrayidx20)>>3)];
      var $29=$x0_addr;
      var $sub21=($28)-($29);
      var $mul22=($26)*($sub21);
      var $30=$g_addr;
      var $31=$pc_addr;
      var $arrayidx23=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx23)>>3)];
      var $33=$y0_addr;
      var $sub24=($32)-($33);
      var $mul25=($30)*($sub24);
      var $add26=($mul22)+($mul25);
      var $34=$f_addr;
      var $35=$f_addr;
      var $mul27=($34)*($35);
      var $36=$g_addr;
      var $37=$g_addr;
      var $mul28=($36)*($37);
      var $add29=($mul27)+($mul28);
      var $div=($add26)/($add29);
      $t=$div;
      var $38=$x0_addr;
      var $39=$f_addr;
      var $40=$t;
      var $mul30=($39)*($40);
      var $add31=($38)+($mul30);
      var $41=$p_addr;
      var $arrayidx32=(($41)|0);
      HEAPF64[(($arrayidx32)>>3)]=$add31;
      var $42=$y0_addr;
      var $43=$g_addr;
      var $44=$t;
      var $mul33=($43)*($44);
      var $add34=($42)+($mul33);
      var $45=$p_addr;
      var $arrayidx35=(($45+8)|0);
      HEAPF64[(($arrayidx35)>>3)]=$add34;
      label = 9; break;
    case 6: 
      var $46=$root;
      var $cmp37=0 < $46;
      if ($cmp37) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $47=$int_num_addr;
      HEAP32[(($47)>>2)]=2;
      var $48=$f_addr;
      var $49=$pc_addr;
      var $arrayidx39=(($49)|0);
      var $50=HEAPF64[(($arrayidx39)>>3)];
      var $51=$x0_addr;
      var $sub40=($50)-($51);
      var $mul41=($48)*($sub40);
      var $52=$g_addr;
      var $53=$pc_addr;
      var $arrayidx42=(($53+8)|0);
      var $54=HEAPF64[(($arrayidx42)>>3)];
      var $55=$y0_addr;
      var $sub43=($54)-($55);
      var $mul44=($52)*($sub43);
      var $add45=($mul41)+($mul44);
      var $56=$root;
      var $call=Math.sqrt($56);
      var $sub46=($add45)-($call);
      var $57=$f_addr;
      var $58=$f_addr;
      var $mul47=($57)*($58);
      var $59=$g_addr;
      var $60=$g_addr;
      var $mul48=($59)*($60);
      var $add49=($mul47)+($mul48);
      var $div50=($sub46)/($add49);
      $t=$div50;
      var $61=$x0_addr;
      var $62=$f_addr;
      var $63=$t;
      var $mul51=($62)*($63);
      var $add52=($61)+($mul51);
      var $64=$p_addr;
      var $arrayidx53=(($64)|0);
      HEAPF64[(($arrayidx53)>>3)]=$add52;
      var $65=$y0_addr;
      var $66=$g_addr;
      var $67=$t;
      var $mul54=($66)*($67);
      var $add55=($65)+($mul54);
      var $68=$p_addr;
      var $arrayidx56=(($68+8)|0);
      HEAPF64[(($arrayidx56)>>3)]=$add55;
      var $69=$f_addr;
      var $70=$pc_addr;
      var $arrayidx57=(($70)|0);
      var $71=HEAPF64[(($arrayidx57)>>3)];
      var $72=$x0_addr;
      var $sub58=($71)-($72);
      var $mul59=($69)*($sub58);
      var $73=$g_addr;
      var $74=$pc_addr;
      var $arrayidx60=(($74+8)|0);
      var $75=HEAPF64[(($arrayidx60)>>3)];
      var $76=$y0_addr;
      var $sub61=($75)-($76);
      var $mul62=($73)*($sub61);
      var $add63=($mul59)+($mul62);
      var $77=$root;
      var $call64=Math.sqrt($77);
      var $add65=($add63)+($call64);
      var $78=$f_addr;
      var $79=$f_addr;
      var $mul66=($78)*($79);
      var $80=$g_addr;
      var $81=$g_addr;
      var $mul67=($80)*($81);
      var $add68=($mul66)+($mul67);
      var $div69=($add65)/($add68);
      $t=$div69;
      var $82=$x0_addr;
      var $83=$f_addr;
      var $84=$t;
      var $mul70=($83)*($84);
      var $add71=($82)+($mul70);
      var $85=$p_addr;
      var $arrayidx72=(($85+16)|0);
      HEAPF64[(($arrayidx72)>>3)]=$add71;
      var $86=$y0_addr;
      var $87=$g_addr;
      var $88=$t;
      var $mul73=($87)*($88);
      var $add74=($86)+($mul73);
      var $89=$p_addr;
      var $arrayidx75=(($89+24)|0);
      HEAPF64[(($arrayidx75)>>3)]=$add74;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_imp_line_par_int_2d"] = _circle_imp_line_par_int_2d;
function _circle_imp_point_dist_2d($r, $pc, $p) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $p_addr;
  var $value;
  $r_addr=$r;
  $pc_addr=$pc;
  $p_addr=$p;
  var $0=$p_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$pc_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=Math.pow($sub, 2);
  var $5=$p_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$pc_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=Math.pow($sub4, 2);
  var $add=($4)+($9);
  var $10=$r_addr;
  var $11=$r_addr;
  var $mul=($10)*($11);
  var $sub5=($add)-($mul);
  var $call=_r8_abs($sub5);
  var $call6=Math.sqrt($call);
  $value=$call6;
  var $12=$value;
  return $12;
}
Module["_circle_imp_point_dist_2d"] = _circle_imp_point_dist_2d;
function _r8_abs($x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $value;
      $x_addr=$x;
      var $0=$x_addr;
      var $cmp=0 <= $0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$x_addr;
      $value=$1;
      label = 5; break;
    case 4: 
      var $2=$x_addr;
      var $sub=(-$2);
      $value=$sub;
      label = 5; break;
    case 5: 
      var $3=$value;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_abs"] = _r8_abs;
function _r8_sign($x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $value;
      $x_addr=$x;
      var $0=$x_addr;
      var $cmp=$0 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $value=-1;
      label = 5; break;
    case 4: 
      $value=1;
      label = 5; break;
    case 5: 
      var $1=$value;
      return $1;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_sign"] = _r8_sign;
function _circle_imp_point_dist_signed_2d($r, $pc, $p) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $p_addr;
  var $t;
  var $value;
  $r_addr=$r;
  $pc_addr=$pc;
  $p_addr=$p;
  var $0=$p_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$pc_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=Math.pow($sub, 2);
  var $5=$p_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$pc_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=Math.pow($sub4, 2);
  var $add=($4)+($9);
  var $10=$r_addr;
  var $11=$r_addr;
  var $mul=($10)*($11);
  var $sub5=($add)-($mul);
  $t=$sub5;
  var $12=$t;
  var $call=_r8_sign($12);
  var $13=$t;
  var $call6=_r8_abs($13);
  var $call7=Math.sqrt($call6);
  var $mul8=($call)*($call7);
  $value=$mul8;
  var $14=$value;
  return $14;
}
Module["_circle_imp_point_dist_signed_2d"] = _circle_imp_point_dist_signed_2d;
function _circle_imp_point_near_2d($r, $pc, $p, $pn) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $pc_addr;
      var $p_addr;
      var $pn_addr;
      var $dist;
      var $i;
      var $r2;
      $r_addr=$r;
      $pc_addr=$pc;
      $p_addr=$p;
      $pn_addr=$pn;
      var $0=$p_addr;
      var $1=$pc_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $2=$r_addr;
      $dist=$2;
      $i=0;
      label = 4; break;
    case 4: 
      var $3=$i;
      var $cmp=(($3)|(0)) < 2;
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$i;
      var $5=$pc_addr;
      var $arrayidx=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$r_addr;
      var $call1=Math.sqrt(2);
      var $div=($7)/($call1);
      var $add=($6)+($div);
      var $8=$i;
      var $9=$pn_addr;
      var $arrayidx2=(($9+($8<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$add;
      label = 6; break;
    case 6: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      var $11=$dist;
      $retval=$11;
      label = 17; break;
    case 8: 
      $r2=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $12=$i;
      var $cmp4=(($12)|(0)) < 2;
      if ($cmp4) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $13=$r2;
      var $14=$i;
      var $15=$p_addr;
      var $arrayidx6=(($15+($14<<3))|0);
      var $16=HEAPF64[(($arrayidx6)>>3)];
      var $17=$i;
      var $18=$pc_addr;
      var $arrayidx7=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx7)>>3)];
      var $sub=($16)-($19);
      var $20=Math.pow($sub, 2);
      var $add8=($13)+($20);
      $r2=$add8;
      label = 11; break;
    case 11: 
      var $21=$i;
      var $inc10=((($21)+(1))|0);
      $i=$inc10;
      label = 9; break;
    case 12: 
      var $22=$r2;
      var $call12=Math.sqrt($22);
      $r2=$call12;
      var $23=$r2;
      var $24=$r_addr;
      var $sub13=($23)-($24);
      var $call14=_r8_abs($sub13);
      $dist=$call14;
      $i=0;
      label = 13; break;
    case 13: 
      var $25=$i;
      var $cmp16=(($25)|(0)) < 2;
      if ($cmp16) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $26=$i;
      var $27=$pc_addr;
      var $arrayidx18=(($27+($26<<3))|0);
      var $28=HEAPF64[(($arrayidx18)>>3)];
      var $29=$r_addr;
      var $30=$i;
      var $31=$p_addr;
      var $arrayidx19=(($31+($30<<3))|0);
      var $32=HEAPF64[(($arrayidx19)>>3)];
      var $33=$i;
      var $34=$pc_addr;
      var $arrayidx20=(($34+($33<<3))|0);
      var $35=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($32)-($35);
      var $mul=($29)*($sub21);
      var $36=$r2;
      var $div22=($mul)/($36);
      var $add23=($28)+($div22);
      var $37=$i;
      var $38=$pn_addr;
      var $arrayidx24=(($38+($37<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$add23;
      label = 15; break;
    case 15: 
      var $39=$i;
      var $inc26=((($39)+(1))|0);
      $i=$inc26;
      label = 13; break;
    case 16: 
      var $40=$dist;
      $retval=$40;
      label = 17; break;
    case 17: 
      var $41=$retval;
      return $41;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_imp_point_near_2d"] = _circle_imp_point_near_2d;
function _circle_imp_points_2d($r, $pc, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $n_addr;
      var $angle;
      var $j;
      var $p;
      var $pi;
      $r_addr=$r;
      $pc_addr=$pc;
      $n_addr=$n;
      $pi=3.141592653589793;
      var $0=$n_addr;
      var $mul=($0<<1);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $1=$call;
      $p=$1;
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$pi;
      var $mul2=($4)*(2);
      var $5=$j;
      var $conv=(($5)|(0));
      var $mul3=($mul2)*($conv);
      var $6=$n_addr;
      var $conv4=(($6)|(0));
      var $div=($mul3)/($conv4);
      $angle=$div;
      var $7=$pc_addr;
      var $arrayidx=(($7)|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$r_addr;
      var $10=$angle;
      var $call5=Math.cos($10);
      var $mul6=($9)*($call5);
      var $add=($8)+($mul6);
      var $11=$j;
      var $mul7=($11<<1);
      var $add8=(($mul7)|0);
      var $12=$p;
      var $arrayidx9=(($12+($add8<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$add;
      var $13=$pc_addr;
      var $arrayidx10=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx10)>>3)];
      var $15=$r_addr;
      var $16=$angle;
      var $call11=Math.sin($16);
      var $mul12=($15)*($call11);
      var $add13=($14)+($mul12);
      var $17=$j;
      var $mul14=($17<<1);
      var $add15=((($mul14)+(1))|0);
      var $18=$p;
      var $arrayidx16=(($18+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$add13;
      label = 5; break;
    case 5: 
      var $19=$j;
      var $inc=((($19)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 6: 
      var $20=$p;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_imp_points_2d"] = _circle_imp_points_2d;
function _circle_imp_points_3d($r, $pc, $nc, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $nc_addr;
      var $n_addr;
      var $i;
      var $j;
      var $n1;
      var $n2;
      var $p;
      var $pi;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $nc_addr=$nc;
      $n_addr=$n;
      $pi=3.141592653589793;
      var $call=_malloc(24);
      var $0=$call;
      $n1=$0;
      var $call1=_malloc(24);
      var $1=$call1;
      $n2=$1;
      var $2=$pc_addr;
      var $3=$nc_addr;
      var $4=$n1;
      var $5=$n2;
      _plane_normal_basis_3d($2, $3, $4, $5);
      var $6=$n_addr;
      var $mul=((($6)*(3))&-1);
      var $mul2=($mul<<3);
      var $call3=_malloc($mul2);
      var $7=$call3;
      $p=$7;
      $j=0;
      label = 3; break;
    case 3: 
      var $8=$j;
      var $9=$n_addr;
      var $cmp=(($8)|(0)) < (($9)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $10=$pi;
      var $mul4=($10)*(2);
      var $11=$j;
      var $conv=(($11)|(0));
      var $mul5=($mul4)*($conv);
      var $12=$n_addr;
      var $conv6=(($12)|(0));
      var $div=($mul5)/($conv6);
      $theta=$div;
      $i=0;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $cmp8=(($13)|(0)) < 3;
      if ($cmp8) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $14=$i;
      var $15=$pc_addr;
      var $arrayidx=(($15+($14<<3))|0);
      var $16=HEAPF64[(($arrayidx)>>3)];
      var $17=$r_addr;
      var $18=$theta;
      var $call11=Math.cos($18);
      var $19=$i;
      var $20=$n1;
      var $arrayidx12=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx12)>>3)];
      var $mul13=($call11)*($21);
      var $22=$theta;
      var $call14=Math.sin($22);
      var $23=$i;
      var $24=$n2;
      var $arrayidx15=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($call14)*($25);
      var $add=($mul13)+($mul16);
      var $mul17=($17)*($add);
      var $add18=($16)+($mul17);
      var $26=$i;
      var $27=$j;
      var $mul19=((($27)*(3))&-1);
      var $add20=((($26)+($mul19))|0);
      var $28=$p;
      var $arrayidx21=(($28+($add20<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$add18;
      label = 7; break;
    case 7: 
      var $29=$i;
      var $inc=((($29)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $30=$j;
      var $inc23=((($30)+(1))|0);
      $j=$inc23;
      label = 3; break;
    case 10: 
      var $31=$n1;
      var $32=$31;
      _free($32);
      var $33=$n2;
      var $34=$33;
      _free($34);
      var $35=$p;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_imp_points_3d"] = _circle_imp_points_3d;
function _circle_imp_points_arc_2d($r, $pc, $theta1, $theta2, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $n_addr;
      var $p_addr;
      var $i;
      var $pi;
      var $theta;
      var $theta3;
      $r_addr=$r;
      $pc_addr=$pc;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $n_addr=$n;
      $p_addr=$p;
      $pi=3.141592653589793;
      var $0=$theta1_addr;
      var $1=$theta2_addr;
      var $2=$theta1_addr;
      var $sub=($1)-($2);
      var $3=$pi;
      var $mul=($3)*(2);
      var $call=_r8_modp($sub, $mul);
      var $add=($0)+($call);
      $theta3=$add;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp=(($4)|(0)) < (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $6=$n_addr;
      var $cmp1=1 < (($6)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$n_addr;
      var $8=$i;
      var $sub2=((($7)-($8))|0);
      var $sub3=((($sub2)-(1))|0);
      var $conv=(($sub3)|(0));
      var $9=$theta1_addr;
      var $mul4=($conv)*($9);
      var $10=$i;
      var $conv5=(($10)|(0));
      var $11=$theta3;
      var $mul6=($conv5)*($11);
      var $add7=($mul4)+($mul6);
      var $12=$n_addr;
      var $sub8=((($12)-(1))|0);
      var $conv9=(($sub8)|(0));
      var $div=($add7)/($conv9);
      $theta=$div;
      label = 7; break;
    case 6: 
      var $13=$theta1_addr;
      var $14=$theta3;
      var $add10=($13)+($14);
      var $mul11=($add10)*(0.5);
      $theta=$mul11;
      label = 7; break;
    case 7: 
      var $15=$pc_addr;
      var $arrayidx=(($15)|0);
      var $16=HEAPF64[(($arrayidx)>>3)];
      var $17=$r_addr;
      var $18=$theta;
      var $call12=Math.cos($18);
      var $mul13=($17)*($call12);
      var $add14=($16)+($mul13);
      var $19=$i;
      var $mul15=($19<<1);
      var $add16=(($mul15)|0);
      var $20=$p_addr;
      var $arrayidx17=(($20+($add16<<3))|0);
      HEAPF64[(($arrayidx17)>>3)]=$add14;
      var $21=$pc_addr;
      var $arrayidx18=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx18)>>3)];
      var $23=$r_addr;
      var $24=$theta;
      var $call19=Math.sin($24);
      var $mul20=($23)*($call19);
      var $add21=($22)+($mul20);
      var $25=$i;
      var $mul22=($25<<1);
      var $add23=((($mul22)+(1))|0);
      var $26=$p_addr;
      var $arrayidx24=(($26+($add23<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$add21;
      label = 8; break;
    case 8: 
      var $27=$i;
      var $inc=((($27)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_imp_points_arc_2d"] = _circle_imp_points_arc_2d;
function _circle_imp_print_2d($r, $pc, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $r_addr;
  var $pc_addr;
  var $title_addr;
  $r_addr=$r;
  $pc_addr=$pc;
  $title_addr=$title;
  var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $0=$title_addr;
  var $call1=_printf(((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$0,tempInt));
  var $call2=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $1=$r_addr;
  var $call3=_printf(((8232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,tempInt));
  var $2=$pc_addr;
  var $arrayidx=(($2)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$pc_addr;
  var $arrayidx4=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx4)>>3)];
  var $call5=_printf(((7528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$3,HEAPF64[(((tempInt)+(8))>>3)]=$5,tempInt));
  STACKTOP = __stackBase__;
  return;
}
Module["_circle_imp_print_2d"] = _circle_imp_print_2d;
function _circle_imp_print_3d($r, $pc, $nc, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $r_addr;
  var $pc_addr;
  var $nc_addr;
  var $title_addr;
  $r_addr=$r;
  $pc_addr=$pc;
  $nc_addr=$nc;
  $title_addr=$title;
  var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $0=$title_addr;
  var $call1=_printf(((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$0,tempInt));
  var $call2=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $1=$r_addr;
  var $call3=_printf(((8232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$1,tempInt));
  var $2=$pc_addr;
  var $arrayidx=(($2)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$pc_addr;
  var $arrayidx4=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx4)>>3)];
  var $6=$pc_addr;
  var $arrayidx5=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx5)>>3)];
  var $call6=_printf(((6848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$3,HEAPF64[(((tempInt)+(8))>>3)]=$5,HEAPF64[(((tempInt)+(16))>>3)]=$7,tempInt));
  var $8=$nc_addr;
  var $arrayidx7=(($8)|0);
  var $9=HEAPF64[(($arrayidx7)>>3)];
  var $10=$nc_addr;
  var $arrayidx8=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx8)>>3)];
  var $12=$nc_addr;
  var $arrayidx9=(($12+16)|0);
  var $13=HEAPF64[(($arrayidx9)>>3)];
  var $call10=_printf(((17496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$9,HEAPF64[(((tempInt)+(8))>>3)]=$11,HEAPF64[(((tempInt)+(16))>>3)]=$13,tempInt));
  STACKTOP = __stackBase__;
  return;
}
Module["_circle_imp_print_3d"] = _circle_imp_print_3d;
function _circle_imp2exp_2d($r, $pc, $p1, $p2, $p3) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $pi;
  var $theta;
  $r_addr=$r;
  $pc_addr=$pc;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  $pi=3.141592653589793;
  $theta=0;
  var $0=$pc_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$r_addr;
  var $3=$theta;
  var $call=Math.cos($3);
  var $mul=($2)*($call);
  var $add=($1)+($mul);
  var $4=$p1_addr;
  var $arrayidx1=(($4)|0);
  HEAPF64[(($arrayidx1)>>3)]=$add;
  var $5=$pc_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$r_addr;
  var $8=$theta;
  var $call3=Math.sin($8);
  var $mul4=($7)*($call3);
  var $add5=($6)+($mul4);
  var $9=$p1_addr;
  var $arrayidx6=(($9+8)|0);
  HEAPF64[(($arrayidx6)>>3)]=$add5;
  var $10=$pi;
  var $mul7=($10)*(2);
  var $div=($mul7)/(3);
  $theta=$div;
  var $11=$pc_addr;
  var $arrayidx8=(($11)|0);
  var $12=HEAPF64[(($arrayidx8)>>3)];
  var $13=$r_addr;
  var $14=$theta;
  var $call9=Math.cos($14);
  var $mul10=($13)*($call9);
  var $add11=($12)+($mul10);
  var $15=$p2_addr;
  var $arrayidx12=(($15)|0);
  HEAPF64[(($arrayidx12)>>3)]=$add11;
  var $16=$pc_addr;
  var $arrayidx13=(($16+8)|0);
  var $17=HEAPF64[(($arrayidx13)>>3)];
  var $18=$r_addr;
  var $19=$theta;
  var $call14=Math.sin($19);
  var $mul15=($18)*($call14);
  var $add16=($17)+($mul15);
  var $20=$p2_addr;
  var $arrayidx17=(($20+8)|0);
  HEAPF64[(($arrayidx17)>>3)]=$add16;
  var $21=$pi;
  var $mul18=($21)*(4);
  var $div19=($mul18)/(3);
  $theta=$div19;
  var $22=$pc_addr;
  var $arrayidx20=(($22)|0);
  var $23=HEAPF64[(($arrayidx20)>>3)];
  var $24=$r_addr;
  var $25=$theta;
  var $call21=Math.cos($25);
  var $mul22=($24)*($call21);
  var $add23=($23)+($mul22);
  var $26=$p3_addr;
  var $arrayidx24=(($26)|0);
  HEAPF64[(($arrayidx24)>>3)]=$add23;
  var $27=$pc_addr;
  var $arrayidx25=(($27+8)|0);
  var $28=HEAPF64[(($arrayidx25)>>3)];
  var $29=$r_addr;
  var $30=$theta;
  var $call26=Math.sin($30);
  var $mul27=($29)*($call26);
  var $add28=($28)+($mul27);
  var $31=$p3_addr;
  var $arrayidx29=(($31+8)|0);
  HEAPF64[(($arrayidx29)>>3)]=$add28;
  return;
}
Module["_circle_imp2exp_2d"] = _circle_imp2exp_2d;
function _plane_normal_basis_3d($pp, $pn, $pq, $pr) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pp_addr;
      var $pn_addr;
      var $pq_addr;
      var $pr_addr;
      var $i;
      var $normal_norm;
      var $pr_norm;
      var $temp;
      $pp_addr=$pp;
      $pn_addr=$pn;
      $pq_addr=$pq;
      $pr_addr=$pr;
      var $0=$pn_addr;
      var $call=_r8vec_norm(3, $0);
      $normal_norm=$call;
      var $1=$normal_norm;
      var $cmp=$1 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((17144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((17040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$pn_addr;
      var $call4=_r8vec_any_normal(3, $5);
      $temp=$call4;
      var $6=$temp;
      var $7=$pq_addr;
      _r8vec_copy(3, $6, $7);
      var $8=$temp;
      var $9=$8;
      _free($9);
      var $10=$pn_addr;
      var $11=$pq_addr;
      var $call5=_r8vec_cross_product_3d($10, $11);
      $temp=$call5;
      var $12=$temp;
      var $call6=_r8vec_norm(3, $12);
      $pr_norm=$call6;
      $i=0;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $cmp7=(($13)|(0)) < 3;
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $14=$i;
      var $15=$temp;
      var $arrayidx=(($15+($14<<3))|0);
      var $16=HEAPF64[(($arrayidx)>>3)];
      var $17=$pr_norm;
      var $div=($16)/($17);
      var $18=$i;
      var $19=$pr_addr;
      var $arrayidx8=(($19+($18<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$div;
      label = 7; break;
    case 7: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $21=$temp;
      var $22=$21;
      _free($22);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_basis_3d"] = _plane_normal_basis_3d;
function _circle_sector_area_2d($r, $pc, $theta1, $theta2) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $theta1_addr;
  var $theta2_addr;
  var $area;
  $r_addr=$r;
  $pc_addr=$pc;
  $theta1_addr=$theta1;
  $theta2_addr=$theta2;
  var $0=$r_addr;
  var $mul=($0)*(0.5);
  var $1=$r_addr;
  var $mul1=($mul)*($1);
  var $2=$theta2_addr;
  var $3=$theta1_addr;
  var $sub=($2)-($3);
  var $mul2=($mul1)*($sub);
  $area=$mul2;
  var $4=$area;
  return $4;
}
Module["_circle_sector_area_2d"] = _circle_sector_area_2d;
function _circle_llr2imp_2d($p1, $p2, $q1, $q2, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $p1_addr;
  var $p2_addr;
  var $q1_addr;
  var $q2_addr;
  var $r_addr;
  var $a;
  var $b;
  var $det=__stackBase__;
  var $n1;
  var $n2;
  var $pc;
  var $x;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $q1_addr=$q1;
  $q2_addr=$q2;
  $r_addr=$r;
  var $call=_malloc(32);
  var $0=$call;
  $a=$0;
  var $call1=_malloc(16);
  var $1=$call1;
  $b=$1;
  var $call2=_malloc(64);
  var $2=$call2;
  $pc=$2;
  var $3=$p1_addr;
  var $4=$p2_addr;
  var $call3=_line_exp_normal_2d($3, $4);
  $n1=$call3;
  var $5=$q1_addr;
  var $6=$q2_addr;
  var $call4=_line_exp_normal_2d($5, $6);
  $n2=$call4;
  var $7=$p2_addr;
  var $arrayidx=(($7)|0);
  var $8=HEAPF64[(($arrayidx)>>3)];
  var $9=$p1_addr;
  var $arrayidx5=(($9)|0);
  var $10=HEAPF64[(($arrayidx5)>>3)];
  var $sub=($8)-($10);
  var $11=$a;
  var $arrayidx6=(($11)|0);
  HEAPF64[(($arrayidx6)>>3)]=$sub;
  var $12=$p2_addr;
  var $arrayidx7=(($12+8)|0);
  var $13=HEAPF64[(($arrayidx7)>>3)];
  var $14=$p1_addr;
  var $arrayidx8=(($14+8)|0);
  var $15=HEAPF64[(($arrayidx8)>>3)];
  var $sub9=($13)-($15);
  var $16=$a;
  var $arrayidx10=(($16+8)|0);
  HEAPF64[(($arrayidx10)>>3)]=$sub9;
  var $17=$q2_addr;
  var $arrayidx11=(($17)|0);
  var $18=HEAPF64[(($arrayidx11)>>3)];
  var $sub12=(-$18);
  var $19=$q1_addr;
  var $arrayidx13=(($19)|0);
  var $20=HEAPF64[(($arrayidx13)>>3)];
  var $add=($sub12)+($20);
  var $21=$a;
  var $arrayidx14=(($21+16)|0);
  HEAPF64[(($arrayidx14)>>3)]=$add;
  var $22=$q2_addr;
  var $arrayidx15=(($22+8)|0);
  var $23=HEAPF64[(($arrayidx15)>>3)];
  var $sub16=(-$23);
  var $24=$q1_addr;
  var $arrayidx17=(($24+8)|0);
  var $25=HEAPF64[(($arrayidx17)>>3)];
  var $add18=($sub16)+($25);
  var $26=$a;
  var $arrayidx19=(($26+24)|0);
  HEAPF64[(($arrayidx19)>>3)]=$add18;
  var $27=$p1_addr;
  var $arrayidx20=(($27)|0);
  var $28=HEAPF64[(($arrayidx20)>>3)];
  var $sub21=(-$28);
  var $29=$q1_addr;
  var $arrayidx22=(($29)|0);
  var $30=HEAPF64[(($arrayidx22)>>3)];
  var $add23=($sub21)+($30);
  var $31=$r_addr;
  var $32=$n1;
  var $arrayidx24=(($32)|0);
  var $33=HEAPF64[(($arrayidx24)>>3)];
  var $mul=($31)*($33);
  var $add25=($add23)+($mul);
  var $34=$r_addr;
  var $35=$n2;
  var $arrayidx26=(($35)|0);
  var $36=HEAPF64[(($arrayidx26)>>3)];
  var $mul27=($34)*($36);
  var $add28=($add25)+($mul27);
  var $37=$b;
  var $arrayidx29=(($37)|0);
  HEAPF64[(($arrayidx29)>>3)]=$add28;
  var $38=$p1_addr;
  var $arrayidx30=(($38+8)|0);
  var $39=HEAPF64[(($arrayidx30)>>3)];
  var $sub31=(-$39);
  var $40=$q1_addr;
  var $arrayidx32=(($40+8)|0);
  var $41=HEAPF64[(($arrayidx32)>>3)];
  var $add33=($sub31)+($41);
  var $42=$r_addr;
  var $43=$n1;
  var $arrayidx34=(($43+8)|0);
  var $44=HEAPF64[(($arrayidx34)>>3)];
  var $mul35=($42)*($44);
  var $add36=($add33)+($mul35);
  var $45=$r_addr;
  var $46=$n2;
  var $arrayidx37=(($46+8)|0);
  var $47=HEAPF64[(($arrayidx37)>>3)];
  var $mul38=($45)*($47);
  var $add39=($add36)+($mul38);
  var $48=$b;
  var $arrayidx40=(($48+8)|0);
  HEAPF64[(($arrayidx40)>>3)]=$add39;
  var $49=$a;
  var $50=$b;
  var $call41=_r8mat_solve_2d($49, $50, $det);
  $x=$call41;
  var $51=$p1_addr;
  var $arrayidx42=(($51)|0);
  var $52=HEAPF64[(($arrayidx42)>>3)];
  var $53=$p2_addr;
  var $arrayidx43=(($53)|0);
  var $54=HEAPF64[(($arrayidx43)>>3)];
  var $55=$p1_addr;
  var $arrayidx44=(($55)|0);
  var $56=HEAPF64[(($arrayidx44)>>3)];
  var $sub45=($54)-($56);
  var $57=$x;
  var $arrayidx46=(($57)|0);
  var $58=HEAPF64[(($arrayidx46)>>3)];
  var $mul47=($sub45)*($58);
  var $add48=($52)+($mul47);
  var $59=$r_addr;
  var $60=$n1;
  var $arrayidx49=(($60)|0);
  var $61=HEAPF64[(($arrayidx49)>>3)];
  var $mul50=($59)*($61);
  var $sub51=($add48)-($mul50);
  var $62=$pc;
  var $arrayidx52=(($62)|0);
  HEAPF64[(($arrayidx52)>>3)]=$sub51;
  var $63=$p1_addr;
  var $arrayidx53=(($63+8)|0);
  var $64=HEAPF64[(($arrayidx53)>>3)];
  var $65=$p2_addr;
  var $arrayidx54=(($65+8)|0);
  var $66=HEAPF64[(($arrayidx54)>>3)];
  var $67=$p1_addr;
  var $arrayidx55=(($67+8)|0);
  var $68=HEAPF64[(($arrayidx55)>>3)];
  var $sub56=($66)-($68);
  var $69=$x;
  var $arrayidx57=(($69)|0);
  var $70=HEAPF64[(($arrayidx57)>>3)];
  var $mul58=($sub56)*($70);
  var $add59=($64)+($mul58);
  var $71=$r_addr;
  var $72=$n1;
  var $arrayidx60=(($72+8)|0);
  var $73=HEAPF64[(($arrayidx60)>>3)];
  var $mul61=($71)*($73);
  var $sub62=($add59)-($mul61);
  var $74=$pc;
  var $arrayidx63=(($74+8)|0);
  HEAPF64[(($arrayidx63)>>3)]=$sub62;
  var $75=$x;
  var $76=$75;
  _free($76);
  var $77=$p1_addr;
  var $arrayidx64=(($77)|0);
  var $78=HEAPF64[(($arrayidx64)>>3)];
  var $sub65=(-$78);
  var $79=$q1_addr;
  var $arrayidx66=(($79)|0);
  var $80=HEAPF64[(($arrayidx66)>>3)];
  var $add67=($sub65)+($80);
  var $81=$r_addr;
  var $82=$n1;
  var $arrayidx68=(($82)|0);
  var $83=HEAPF64[(($arrayidx68)>>3)];
  var $mul69=($81)*($83);
  var $add70=($add67)+($mul69);
  var $84=$r_addr;
  var $85=$n2;
  var $arrayidx71=(($85)|0);
  var $86=HEAPF64[(($arrayidx71)>>3)];
  var $mul72=($84)*($86);
  var $sub73=($add70)-($mul72);
  var $87=$b;
  var $arrayidx74=(($87)|0);
  HEAPF64[(($arrayidx74)>>3)]=$sub73;
  var $88=$p1_addr;
  var $arrayidx75=(($88+8)|0);
  var $89=HEAPF64[(($arrayidx75)>>3)];
  var $sub76=(-$89);
  var $90=$q1_addr;
  var $arrayidx77=(($90+8)|0);
  var $91=HEAPF64[(($arrayidx77)>>3)];
  var $add78=($sub76)+($91);
  var $92=$r_addr;
  var $93=$n1;
  var $arrayidx79=(($93+8)|0);
  var $94=HEAPF64[(($arrayidx79)>>3)];
  var $mul80=($92)*($94);
  var $add81=($add78)+($mul80);
  var $95=$r_addr;
  var $96=$n2;
  var $arrayidx82=(($96+8)|0);
  var $97=HEAPF64[(($arrayidx82)>>3)];
  var $mul83=($95)*($97);
  var $sub84=($add81)-($mul83);
  var $98=$b;
  var $arrayidx85=(($98+8)|0);
  HEAPF64[(($arrayidx85)>>3)]=$sub84;
  var $99=$a;
  var $100=$b;
  var $call86=_r8mat_solve_2d($99, $100, $det);
  $x=$call86;
  var $101=$p1_addr;
  var $arrayidx87=(($101)|0);
  var $102=HEAPF64[(($arrayidx87)>>3)];
  var $103=$p2_addr;
  var $arrayidx88=(($103)|0);
  var $104=HEAPF64[(($arrayidx88)>>3)];
  var $105=$p1_addr;
  var $arrayidx89=(($105)|0);
  var $106=HEAPF64[(($arrayidx89)>>3)];
  var $sub90=($104)-($106);
  var $107=$x;
  var $arrayidx91=(($107)|0);
  var $108=HEAPF64[(($arrayidx91)>>3)];
  var $mul92=($sub90)*($108);
  var $add93=($102)+($mul92);
  var $109=$r_addr;
  var $110=$n1;
  var $arrayidx94=(($110)|0);
  var $111=HEAPF64[(($arrayidx94)>>3)];
  var $mul95=($109)*($111);
  var $sub96=($add93)-($mul95);
  var $112=$pc;
  var $arrayidx97=(($112+16)|0);
  HEAPF64[(($arrayidx97)>>3)]=$sub96;
  var $113=$p1_addr;
  var $arrayidx98=(($113+8)|0);
  var $114=HEAPF64[(($arrayidx98)>>3)];
  var $115=$p2_addr;
  var $arrayidx99=(($115+8)|0);
  var $116=HEAPF64[(($arrayidx99)>>3)];
  var $117=$p1_addr;
  var $arrayidx100=(($117+8)|0);
  var $118=HEAPF64[(($arrayidx100)>>3)];
  var $sub101=($116)-($118);
  var $119=$x;
  var $arrayidx102=(($119)|0);
  var $120=HEAPF64[(($arrayidx102)>>3)];
  var $mul103=($sub101)*($120);
  var $add104=($114)+($mul103);
  var $121=$r_addr;
  var $122=$n1;
  var $arrayidx105=(($122+8)|0);
  var $123=HEAPF64[(($arrayidx105)>>3)];
  var $mul106=($121)*($123);
  var $sub107=($add104)-($mul106);
  var $124=$pc;
  var $arrayidx108=(($124+24)|0);
  HEAPF64[(($arrayidx108)>>3)]=$sub107;
  var $125=$x;
  var $126=$125;
  _free($126);
  var $127=$p1_addr;
  var $arrayidx109=(($127)|0);
  var $128=HEAPF64[(($arrayidx109)>>3)];
  var $sub110=(-$128);
  var $129=$q1_addr;
  var $arrayidx111=(($129)|0);
  var $130=HEAPF64[(($arrayidx111)>>3)];
  var $add112=($sub110)+($130);
  var $131=$r_addr;
  var $132=$n1;
  var $arrayidx113=(($132)|0);
  var $133=HEAPF64[(($arrayidx113)>>3)];
  var $mul114=($131)*($133);
  var $sub115=($add112)-($mul114);
  var $134=$r_addr;
  var $135=$n2;
  var $arrayidx116=(($135)|0);
  var $136=HEAPF64[(($arrayidx116)>>3)];
  var $mul117=($134)*($136);
  var $add118=($sub115)+($mul117);
  var $137=$b;
  var $arrayidx119=(($137)|0);
  HEAPF64[(($arrayidx119)>>3)]=$add118;
  var $138=$p1_addr;
  var $arrayidx120=(($138+8)|0);
  var $139=HEAPF64[(($arrayidx120)>>3)];
  var $sub121=(-$139);
  var $140=$q1_addr;
  var $arrayidx122=(($140+8)|0);
  var $141=HEAPF64[(($arrayidx122)>>3)];
  var $add123=($sub121)+($141);
  var $142=$r_addr;
  var $143=$n1;
  var $arrayidx124=(($143+8)|0);
  var $144=HEAPF64[(($arrayidx124)>>3)];
  var $mul125=($142)*($144);
  var $sub126=($add123)-($mul125);
  var $145=$r_addr;
  var $146=$n2;
  var $arrayidx127=(($146+8)|0);
  var $147=HEAPF64[(($arrayidx127)>>3)];
  var $mul128=($145)*($147);
  var $add129=($sub126)+($mul128);
  var $148=$b;
  var $arrayidx130=(($148+8)|0);
  HEAPF64[(($arrayidx130)>>3)]=$add129;
  var $149=$a;
  var $150=$b;
  var $call131=_r8mat_solve_2d($149, $150, $det);
  $x=$call131;
  var $151=$p1_addr;
  var $arrayidx132=(($151)|0);
  var $152=HEAPF64[(($arrayidx132)>>3)];
  var $153=$p2_addr;
  var $arrayidx133=(($153)|0);
  var $154=HEAPF64[(($arrayidx133)>>3)];
  var $155=$p1_addr;
  var $arrayidx134=(($155)|0);
  var $156=HEAPF64[(($arrayidx134)>>3)];
  var $sub135=($154)-($156);
  var $157=$x;
  var $arrayidx136=(($157)|0);
  var $158=HEAPF64[(($arrayidx136)>>3)];
  var $mul137=($sub135)*($158);
  var $add138=($152)+($mul137);
  var $159=$r_addr;
  var $160=$n1;
  var $arrayidx139=(($160)|0);
  var $161=HEAPF64[(($arrayidx139)>>3)];
  var $mul140=($159)*($161);
  var $add141=($add138)+($mul140);
  var $162=$pc;
  var $arrayidx142=(($162+32)|0);
  HEAPF64[(($arrayidx142)>>3)]=$add141;
  var $163=$p1_addr;
  var $arrayidx143=(($163+8)|0);
  var $164=HEAPF64[(($arrayidx143)>>3)];
  var $165=$p2_addr;
  var $arrayidx144=(($165+8)|0);
  var $166=HEAPF64[(($arrayidx144)>>3)];
  var $167=$p1_addr;
  var $arrayidx145=(($167+8)|0);
  var $168=HEAPF64[(($arrayidx145)>>3)];
  var $sub146=($166)-($168);
  var $169=$x;
  var $arrayidx147=(($169)|0);
  var $170=HEAPF64[(($arrayidx147)>>3)];
  var $mul148=($sub146)*($170);
  var $add149=($164)+($mul148);
  var $171=$r_addr;
  var $172=$n1;
  var $arrayidx150=(($172+8)|0);
  var $173=HEAPF64[(($arrayidx150)>>3)];
  var $mul151=($171)*($173);
  var $add152=($add149)+($mul151);
  var $174=$pc;
  var $arrayidx153=(($174+40)|0);
  HEAPF64[(($arrayidx153)>>3)]=$add152;
  var $175=$x;
  var $176=$175;
  _free($176);
  var $177=$p1_addr;
  var $arrayidx154=(($177)|0);
  var $178=HEAPF64[(($arrayidx154)>>3)];
  var $sub155=(-$178);
  var $179=$q1_addr;
  var $arrayidx156=(($179)|0);
  var $180=HEAPF64[(($arrayidx156)>>3)];
  var $add157=($sub155)+($180);
  var $181=$r_addr;
  var $182=$n1;
  var $arrayidx158=(($182)|0);
  var $183=HEAPF64[(($arrayidx158)>>3)];
  var $mul159=($181)*($183);
  var $sub160=($add157)-($mul159);
  var $184=$r_addr;
  var $185=$n2;
  var $arrayidx161=(($185)|0);
  var $186=HEAPF64[(($arrayidx161)>>3)];
  var $mul162=($184)*($186);
  var $sub163=($sub160)-($mul162);
  var $187=$b;
  var $arrayidx164=(($187)|0);
  HEAPF64[(($arrayidx164)>>3)]=$sub163;
  var $188=$p1_addr;
  var $arrayidx165=(($188+8)|0);
  var $189=HEAPF64[(($arrayidx165)>>3)];
  var $sub166=(-$189);
  var $190=$q1_addr;
  var $arrayidx167=(($190+8)|0);
  var $191=HEAPF64[(($arrayidx167)>>3)];
  var $add168=($sub166)+($191);
  var $192=$r_addr;
  var $193=$n1;
  var $arrayidx169=(($193+8)|0);
  var $194=HEAPF64[(($arrayidx169)>>3)];
  var $mul170=($192)*($194);
  var $sub171=($add168)-($mul170);
  var $195=$r_addr;
  var $196=$n2;
  var $arrayidx172=(($196+8)|0);
  var $197=HEAPF64[(($arrayidx172)>>3)];
  var $mul173=($195)*($197);
  var $sub174=($sub171)-($mul173);
  var $198=$b;
  var $arrayidx175=(($198+8)|0);
  HEAPF64[(($arrayidx175)>>3)]=$sub174;
  var $199=$a;
  var $200=$b;
  var $call176=_r8mat_solve_2d($199, $200, $det);
  $x=$call176;
  var $201=$p1_addr;
  var $arrayidx177=(($201)|0);
  var $202=HEAPF64[(($arrayidx177)>>3)];
  var $203=$p2_addr;
  var $arrayidx178=(($203)|0);
  var $204=HEAPF64[(($arrayidx178)>>3)];
  var $205=$p1_addr;
  var $arrayidx179=(($205)|0);
  var $206=HEAPF64[(($arrayidx179)>>3)];
  var $sub180=($204)-($206);
  var $207=$x;
  var $arrayidx181=(($207)|0);
  var $208=HEAPF64[(($arrayidx181)>>3)];
  var $mul182=($sub180)*($208);
  var $add183=($202)+($mul182);
  var $209=$r_addr;
  var $210=$n1;
  var $arrayidx184=(($210)|0);
  var $211=HEAPF64[(($arrayidx184)>>3)];
  var $mul185=($209)*($211);
  var $add186=($add183)+($mul185);
  var $212=$pc;
  var $arrayidx187=(($212+48)|0);
  HEAPF64[(($arrayidx187)>>3)]=$add186;
  var $213=$p1_addr;
  var $arrayidx188=(($213+8)|0);
  var $214=HEAPF64[(($arrayidx188)>>3)];
  var $215=$p2_addr;
  var $arrayidx189=(($215+8)|0);
  var $216=HEAPF64[(($arrayidx189)>>3)];
  var $217=$p1_addr;
  var $arrayidx190=(($217+8)|0);
  var $218=HEAPF64[(($arrayidx190)>>3)];
  var $sub191=($216)-($218);
  var $219=$x;
  var $arrayidx192=(($219)|0);
  var $220=HEAPF64[(($arrayidx192)>>3)];
  var $mul193=($sub191)*($220);
  var $add194=($214)+($mul193);
  var $221=$r_addr;
  var $222=$n1;
  var $arrayidx195=(($222+8)|0);
  var $223=HEAPF64[(($arrayidx195)>>3)];
  var $mul196=($221)*($223);
  var $add197=($add194)+($mul196);
  var $224=$pc;
  var $arrayidx198=(($224+56)|0);
  HEAPF64[(($arrayidx198)>>3)]=$add197;
  var $225=$a;
  var $226=$225;
  _free($226);
  var $227=$b;
  var $228=$227;
  _free($228);
  var $229=$n1;
  var $230=$229;
  _free($230);
  var $231=$n2;
  var $232=$231;
  _free($232);
  var $233=$x;
  var $234=$233;
  _free($234);
  var $235=$pc;
  STACKTOP = __stackBase__;
  return $235;
}
Module["_circle_llr2imp_2d"] = _circle_llr2imp_2d;
function _line_exp_normal_2d($p1, $p2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $norm;
      var $normal;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $call=_malloc(16);
      var $0=$call;
      $normal=$0;
      var $1=$p2_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$p1_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=$p2_addr;
      var $arrayidx2=(($5)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $mul=($sub)*($sub4);
      var $9=$p2_addr;
      var $arrayidx5=(($9+8)|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$p1_addr;
      var $arrayidx6=(($11+8)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($10)-($12);
      var $13=$p2_addr;
      var $arrayidx8=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx8)>>3)];
      var $15=$p1_addr;
      var $arrayidx9=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($14)-($16);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $call12=Math.sqrt($add);
      $norm=$call12;
      var $17=$norm;
      var $cmp=$17 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call13=Math.sqrt(2);
      var $18=$normal;
      var $arrayidx14=(($18)|0);
      HEAPF64[(($arrayidx14)>>3)]=$call13;
      var $call15=Math.sqrt(2);
      var $19=$normal;
      var $arrayidx16=(($19+8)|0);
      HEAPF64[(($arrayidx16)>>3)]=$call15;
      label = 5; break;
    case 4: 
      var $20=$p2_addr;
      var $arrayidx17=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$p1_addr;
      var $arrayidx18=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($23);
      var $sub20=(-$sub19);
      var $24=$norm;
      var $div=($sub20)/($24);
      var $25=$normal;
      var $arrayidx21=(($25)|0);
      HEAPF64[(($arrayidx21)>>3)]=$div;
      var $26=$p2_addr;
      var $arrayidx22=(($26)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $28=$p1_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($27)-($29);
      var $30=$norm;
      var $div25=($sub24)/($30);
      var $31=$normal;
      var $arrayidx26=(($31+8)|0);
      HEAPF64[(($arrayidx26)>>3)]=$div25;
      label = 5; break;
    case 5: 
      var $32=$normal;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp_normal_2d"] = _line_exp_normal_2d;
function _r8mat_solve_2d($a, $b, $det) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $det_addr;
      var $x;
      $a_addr=$a;
      $b_addr=$b;
      $det_addr=$det;
      var $0=$a_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$a_addr;
      var $arrayidx1=(($2+24)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($1)*($3);
      var $4=$a_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$a_addr;
      var $arrayidx3=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $mul4=($5)*($7);
      var $sub=($mul)-($mul4);
      var $8=$det_addr;
      HEAPF64[(($8)>>3)]=$sub;
      var $9=$det_addr;
      var $10=HEAPF64[(($9)>>3)];
      var $cmp=$10 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $call=_malloc(16);
      var $11=$call;
      $x=$11;
      var $12=$a_addr;
      var $arrayidx5=(($12+24)|0);
      var $13=HEAPF64[(($arrayidx5)>>3)];
      var $14=$b_addr;
      var $arrayidx6=(($14)|0);
      var $15=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($13)*($15);
      var $16=$a_addr;
      var $arrayidx8=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $18=$b_addr;
      var $arrayidx9=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx9)>>3)];
      var $mul10=($17)*($19);
      var $sub11=($mul7)-($mul10);
      var $20=$det_addr;
      var $21=HEAPF64[(($20)>>3)];
      var $div=($sub11)/($21);
      var $22=$x;
      var $arrayidx12=(($22)|0);
      HEAPF64[(($arrayidx12)>>3)]=$div;
      var $23=$a_addr;
      var $arrayidx13=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=(-$24);
      var $25=$b_addr;
      var $arrayidx15=(($25)|0);
      var $26=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($sub14)*($26);
      var $27=$a_addr;
      var $arrayidx17=(($27)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $29=$b_addr;
      var $arrayidx18=(($29+8)|0);
      var $30=HEAPF64[(($arrayidx18)>>3)];
      var $mul19=($28)*($30);
      var $add=($mul16)+($mul19);
      var $31=$det_addr;
      var $32=HEAPF64[(($31)>>3)];
      var $div20=($add)/($32);
      var $33=$x;
      var $arrayidx21=(($33+8)|0);
      HEAPF64[(($arrayidx21)>>3)]=$div20;
      var $34=$x;
      $retval=$34;
      label = 5; break;
    case 5: 
      var $35=$retval;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_solve_2d"] = _r8mat_solve_2d;
function _circle_lune_area_2d($r, $pc, $theta1, $theta2) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $theta1_addr;
  var $theta2_addr;
  var $area;
  var $area_sector;
  var $area_triangle;
  $r_addr=$r;
  $pc_addr=$pc;
  $theta1_addr=$theta1;
  $theta2_addr=$theta2;
  var $0=$r_addr;
  var $1=$pc_addr;
  var $2=$theta1_addr;
  var $3=$theta2_addr;
  var $call=_circle_sector_area_2d($0, $1, $2, $3);
  $area_sector=$call;
  var $4=$r_addr;
  var $5=$pc_addr;
  var $6=$theta1_addr;
  var $7=$theta2_addr;
  var $call1=_circle_triangle_area_2d($4, $5, $6, $7);
  $area_triangle=$call1;
  var $8=$area_sector;
  var $9=$area_triangle;
  var $sub=($8)-($9);
  $area=$sub;
  var $10=$area;
  return $10;
}
Module["_circle_lune_area_2d"] = _circle_lune_area_2d;
function _circle_triangle_area_2d($r, $pc, $theta1, $theta2) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $theta1_addr;
  var $theta2_addr;
  var $area;
  $r_addr=$r;
  $pc_addr=$pc;
  $theta1_addr=$theta1;
  $theta2_addr=$theta2;
  var $0=$r_addr;
  var $mul=($0)*(0.5);
  var $1=$r_addr;
  var $mul1=($mul)*($1);
  var $2=$theta2_addr;
  var $3=$theta1_addr;
  var $sub=($2)-($3);
  var $call=Math.sin($sub);
  var $mul2=($mul1)*($call);
  $area=$mul2;
  var $4=$area;
  return $4;
}
Module["_circle_triangle_area_2d"] = _circle_triangle_area_2d;
function _circle_lune_centroid_2d($r, $pc, $theta1, $theta2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $centroid;
      var $d;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      var $0=$theta2_addr;
      var $1=$theta1_addr;
      var $sub=($0)-($1);
      $theta=$sub;
      var $2=$theta;
      var $cmp=$2 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$r_addr;
      $d=$3;
      label = 5; break;
    case 4: 
      var $4=$r_addr;
      var $mul=($4)*(4);
      var $5=$theta;
      var $mul1=($5)*(0.5);
      var $call=Math.sin($mul1);
      var $6=Math.pow($call, 3);
      var $mul2=($mul)*($6);
      var $7=$theta;
      var $8=$theta;
      var $call3=Math.sin($8);
      var $sub4=($7)-($call3);
      var $mul5=($sub4)*(3);
      var $div=($mul2)/($mul5);
      $d=$div;
      label = 5; break;
    case 5: 
      var $call6=_malloc(16);
      var $9=$call6;
      $centroid=$9;
      var $10=$pc_addr;
      var $arrayidx=(($10)|0);
      var $11=HEAPF64[(($arrayidx)>>3)];
      var $12=$d;
      var $13=$theta;
      var $call7=Math.cos($13);
      var $mul8=($12)*($call7);
      var $add=($11)+($mul8);
      var $14=$centroid;
      var $arrayidx9=(($14)|0);
      HEAPF64[(($arrayidx9)>>3)]=$add;
      var $15=$pc_addr;
      var $arrayidx10=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx10)>>3)];
      var $17=$d;
      var $18=$theta;
      var $call11=Math.sin($18);
      var $mul12=($17)*($call11);
      var $add13=($16)+($mul12);
      var $19=$centroid;
      var $arrayidx14=(($19+8)|0);
      HEAPF64[(($arrayidx14)>>3)]=$add13;
      var $20=$centroid;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_lune_centroid_2d"] = _circle_lune_centroid_2d;
function _circle_pppr2imp_3d($p1, $p2, $p3, $r, $pc, $normal) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $r_addr;
      var $pc_addr;
      var $normal_addr;
      var $dist;
      var $dot;
      var $h;
      var $i;
      var $j;
      var $length;
      var $v;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $r_addr=$r;
      $pc_addr=$pc;
      $normal_addr=$normal;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_distance(3, $0, $1);
      $dist=$call;
      var $2=$r_addr;
      var $mul=($2)*(2);
      var $3=$dist;
      var $cmp=$mul < $3;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      $j=0;
      label = 4; break;
    case 4: 
      var $4=$j;
      var $cmp1=(($4)|(0)) < 2;
      if ($cmp1) { label = 5; break; } else { label = 11; break; }
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $5=$i;
      var $cmp3=(($5)|(0)) < 3;
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $6=$i;
      var $7=$p1_addr;
      var $arrayidx=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$i;
      var $10=$p2_addr;
      var $arrayidx5=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $add=($8)+($11);
      var $mul6=($add)*(0.5);
      var $12=$i;
      var $13=$j;
      var $mul7=((($13)*(3))&-1);
      var $add8=((($12)+($mul7))|0);
      var $14=$pc_addr;
      var $arrayidx9=(($14+($add8<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$mul6;
      label = 8; break;
    case 8: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $16=$j;
      var $inc11=((($16)+(1))|0);
      $j=$inc11;
      label = 4; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $17=$r_addr;
      var $18=$dist;
      var $mul13=($18)*(0.5);
      var $add14=($17)+($mul13);
      var $19=$r_addr;
      var $20=$dist;
      var $mul15=($20)*(0.5);
      var $sub=($19)-($mul15);
      var $mul16=($add14)*($sub);
      var $call17=Math.sqrt($mul16);
      $h=$call17;
      var $call18=_malloc(24);
      var $21=$call18;
      $v=$21;
      $i=0;
      label = 13; break;
    case 13: 
      var $22=$i;
      var $cmp20=(($22)|(0)) < 3;
      if ($cmp20) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $23=$i;
      var $24=$p3_addr;
      var $arrayidx22=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx22)>>3)];
      var $26=$i;
      var $27=$p1_addr;
      var $arrayidx23=(($27+($26<<3))|0);
      var $28=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($25)-($28);
      var $29=$i;
      var $30=$v;
      var $arrayidx25=(($30+($29<<3))|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub24;
      label = 15; break;
    case 15: 
      var $31=$i;
      var $inc27=((($31)+(1))|0);
      $i=$inc27;
      label = 13; break;
    case 16: 
      $dot=0;
      $i=0;
      label = 17; break;
    case 17: 
      var $32=$i;
      var $cmp30=(($32)|(0)) < 3;
      if ($cmp30) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $33=$dot;
      var $34=$i;
      var $35=$v;
      var $arrayidx32=(($35+($34<<3))|0);
      var $36=HEAPF64[(($arrayidx32)>>3)];
      var $37=$i;
      var $38=$p2_addr;
      var $arrayidx33=(($38+($37<<3))|0);
      var $39=HEAPF64[(($arrayidx33)>>3)];
      var $40=$i;
      var $41=$p1_addr;
      var $arrayidx34=(($41+($40<<3))|0);
      var $42=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($39)-($42);
      var $mul36=($36)*($sub35);
      var $add37=($33)+($mul36);
      $dot=$add37;
      label = 19; break;
    case 19: 
      var $43=$i;
      var $inc39=((($43)+(1))|0);
      $i=$inc39;
      label = 17; break;
    case 20: 
      var $44=$dot;
      var $45=$dist;
      var $div=($44)/($45);
      $dot=$div;
      $i=0;
      label = 21; break;
    case 21: 
      var $46=$i;
      var $cmp42=(($46)|(0)) < 3;
      if ($cmp42) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $47=$i;
      var $48=$v;
      var $arrayidx44=(($48+($47<<3))|0);
      var $49=HEAPF64[(($arrayidx44)>>3)];
      var $50=$dot;
      var $51=$i;
      var $52=$p2_addr;
      var $arrayidx45=(($52+($51<<3))|0);
      var $53=HEAPF64[(($arrayidx45)>>3)];
      var $54=$i;
      var $55=$p1_addr;
      var $arrayidx46=(($55+($54<<3))|0);
      var $56=HEAPF64[(($arrayidx46)>>3)];
      var $sub47=($53)-($56);
      var $mul48=($50)*($sub47);
      var $57=$dist;
      var $div49=($mul48)/($57);
      var $sub50=($49)-($div49);
      var $58=$i;
      var $59=$v;
      var $arrayidx51=(($59+($58<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$sub50;
      label = 23; break;
    case 23: 
      var $60=$i;
      var $inc53=((($60)+(1))|0);
      $i=$inc53;
      label = 21; break;
    case 24: 
      var $61=$v;
      var $call55=_r8vec_norm(3, $61);
      $length=$call55;
      $i=0;
      label = 25; break;
    case 25: 
      var $62=$i;
      var $cmp57=(($62)|(0)) < 3;
      if ($cmp57) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $63=$i;
      var $64=$v;
      var $arrayidx59=(($64+($63<<3))|0);
      var $65=HEAPF64[(($arrayidx59)>>3)];
      var $66=$length;
      var $div60=($65)/($66);
      var $67=$i;
      var $68=$v;
      var $arrayidx61=(($68+($67<<3))|0);
      HEAPF64[(($arrayidx61)>>3)]=$div60;
      label = 27; break;
    case 27: 
      var $69=$i;
      var $inc63=((($69)+(1))|0);
      $i=$inc63;
      label = 25; break;
    case 28: 
      $i=0;
      label = 29; break;
    case 29: 
      var $70=$i;
      var $cmp66=(($70)|(0)) < 3;
      if ($cmp66) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $71=$i;
      var $72=$p2_addr;
      var $arrayidx68=(($72+($71<<3))|0);
      var $73=HEAPF64[(($arrayidx68)>>3)];
      var $74=$i;
      var $75=$p1_addr;
      var $arrayidx69=(($75+($74<<3))|0);
      var $76=HEAPF64[(($arrayidx69)>>3)];
      var $add70=($73)+($76);
      var $mul71=($add70)*(0.5);
      var $77=$h;
      var $78=$i;
      var $79=$v;
      var $arrayidx72=(($79+($78<<3))|0);
      var $80=HEAPF64[(($arrayidx72)>>3)];
      var $mul73=($77)*($80);
      var $add74=($mul71)+($mul73);
      var $81=$i;
      var $add75=(($81)|0);
      var $82=$pc_addr;
      var $arrayidx76=(($82+($add75<<3))|0);
      HEAPF64[(($arrayidx76)>>3)]=$add74;
      var $83=$i;
      var $84=$p2_addr;
      var $arrayidx77=(($84+($83<<3))|0);
      var $85=HEAPF64[(($arrayidx77)>>3)];
      var $86=$i;
      var $87=$p1_addr;
      var $arrayidx78=(($87+($86<<3))|0);
      var $88=HEAPF64[(($arrayidx78)>>3)];
      var $add79=($85)+($88);
      var $mul80=($add79)*(0.5);
      var $89=$h;
      var $90=$i;
      var $91=$v;
      var $arrayidx81=(($91+($90<<3))|0);
      var $92=HEAPF64[(($arrayidx81)>>3)];
      var $mul82=($89)*($92);
      var $sub83=($mul80)-($mul82);
      var $93=$i;
      var $add84=((($93)+(3))|0);
      var $94=$pc_addr;
      var $arrayidx85=(($94+($add84<<3))|0);
      HEAPF64[(($arrayidx85)>>3)]=$sub83;
      label = 31; break;
    case 31: 
      var $95=$i;
      var $inc87=((($95)+(1))|0);
      $i=$inc87;
      label = 29; break;
    case 32: 
      var $96=$v;
      var $97=$96;
      _free($97);
      var $98=$p1_addr;
      var $99=$p2_addr;
      var $100=$p3_addr;
      var $101=$normal_addr;
      _plane_exp_normal_3d($98, $99, $100, $101);
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_pppr2imp_3d"] = _circle_pppr2imp_3d;
function _r8vec_distance($dim_num, $v1, $v2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $v1_addr;
      var $v2_addr;
      var $i;
      var $value;
      $dim_num_addr=$dim_num;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$v1_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$v2_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=Math.pow($sub, 2);
      var $add=($2)+($9);
      $value=$add;
      label = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $11=$value;
      var $call=Math.sqrt($11);
      $value=$call;
      var $12=$value;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_distance"] = _r8vec_distance;
function _circle_ppr2imp_2d($p1, $p2, $r) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $r_addr;
      var $dist;
      var $h;
      var $i;
      var $j;
      var $pc;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $r_addr=$r;
      var $call=_malloc(32);
      var $0=$call;
      $pc=$0;
      var $1=$p2_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$p1_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=Math.pow($sub, 2);
      var $6=$p2_addr;
      var $arrayidx2=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$p1_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $10=Math.pow($sub4, 2);
      var $add=($5)+($10);
      var $call5=Math.sqrt($add);
      $dist=$call5;
      var $11=$r_addr;
      var $mul=($11)*(2);
      var $12=$dist;
      var $cmp=$mul < $12;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      $j=0;
      label = 4; break;
    case 4: 
      var $13=$j;
      var $cmp6=(($13)|(0)) < 2;
      if ($cmp6) { label = 5; break; } else { label = 11; break; }
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $14=$i;
      var $cmp8=(($14)|(0)) < 2;
      if ($cmp8) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $15=$i;
      var $16=$p1_addr;
      var $arrayidx10=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx10)>>3)];
      var $18=$i;
      var $19=$p2_addr;
      var $arrayidx11=(($19+($18<<3))|0);
      var $20=HEAPF64[(($arrayidx11)>>3)];
      var $add12=($17)+($20);
      var $mul13=($add12)*(0.5);
      var $21=$i;
      var $22=$j;
      var $mul14=($22<<1);
      var $add15=((($21)+($mul14))|0);
      var $23=$pc;
      var $arrayidx16=(($23+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$mul13;
      label = 8; break;
    case 8: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $25=$j;
      var $inc18=((($25)+(1))|0);
      $j=$inc18;
      label = 4; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $26=$r_addr;
      var $27=$dist;
      var $mul20=($27)*(0.5);
      var $add21=($26)+($mul20);
      var $28=$r_addr;
      var $29=$dist;
      var $mul22=($29)*(0.5);
      var $sub23=($28)-($mul22);
      var $mul24=($add21)*($sub23);
      var $call25=Math.sqrt($mul24);
      $h=$call25;
      var $30=$p2_addr;
      var $arrayidx26=(($30)|0);
      var $31=HEAPF64[(($arrayidx26)>>3)];
      var $32=$p1_addr;
      var $arrayidx27=(($32)|0);
      var $33=HEAPF64[(($arrayidx27)>>3)];
      var $add28=($31)+($33);
      var $mul29=($add28)*(0.5);
      var $34=$h;
      var $35=$p2_addr;
      var $arrayidx30=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx30)>>3)];
      var $37=$p1_addr;
      var $arrayidx31=(($37+8)|0);
      var $38=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($36)-($38);
      var $mul33=($34)*($sub32);
      var $39=$dist;
      var $div=($mul33)/($39);
      var $add34=($mul29)+($div);
      var $40=$pc;
      var $arrayidx35=(($40)|0);
      HEAPF64[(($arrayidx35)>>3)]=$add34;
      var $41=$p2_addr;
      var $arrayidx36=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx36)>>3)];
      var $43=$p1_addr;
      var $arrayidx37=(($43+8)|0);
      var $44=HEAPF64[(($arrayidx37)>>3)];
      var $add38=($42)+($44);
      var $mul39=($add38)*(0.5);
      var $45=$h;
      var $46=$p2_addr;
      var $arrayidx40=(($46)|0);
      var $47=HEAPF64[(($arrayidx40)>>3)];
      var $48=$p1_addr;
      var $arrayidx41=(($48)|0);
      var $49=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($47)-($49);
      var $mul43=($45)*($sub42);
      var $50=$dist;
      var $div44=($mul43)/($50);
      var $sub45=($mul39)-($div44);
      var $51=$pc;
      var $arrayidx46=(($51+8)|0);
      HEAPF64[(($arrayidx46)>>3)]=$sub45;
      var $52=$p2_addr;
      var $arrayidx47=(($52)|0);
      var $53=HEAPF64[(($arrayidx47)>>3)];
      var $54=$p1_addr;
      var $arrayidx48=(($54)|0);
      var $55=HEAPF64[(($arrayidx48)>>3)];
      var $add49=($53)+($55);
      var $mul50=($add49)*(0.5);
      var $56=$h;
      var $57=$p2_addr;
      var $arrayidx51=(($57+8)|0);
      var $58=HEAPF64[(($arrayidx51)>>3)];
      var $59=$p1_addr;
      var $arrayidx52=(($59+8)|0);
      var $60=HEAPF64[(($arrayidx52)>>3)];
      var $sub53=($58)-($60);
      var $mul54=($56)*($sub53);
      var $61=$dist;
      var $div55=($mul54)/($61);
      var $sub56=($mul50)-($div55);
      var $62=$pc;
      var $arrayidx57=(($62+16)|0);
      HEAPF64[(($arrayidx57)>>3)]=$sub56;
      var $63=$p2_addr;
      var $arrayidx58=(($63+8)|0);
      var $64=HEAPF64[(($arrayidx58)>>3)];
      var $65=$p1_addr;
      var $arrayidx59=(($65+8)|0);
      var $66=HEAPF64[(($arrayidx59)>>3)];
      var $add60=($64)+($66);
      var $mul61=($add60)*(0.5);
      var $67=$h;
      var $68=$p2_addr;
      var $arrayidx62=(($68)|0);
      var $69=HEAPF64[(($arrayidx62)>>3)];
      var $70=$p1_addr;
      var $arrayidx63=(($70)|0);
      var $71=HEAPF64[(($arrayidx63)>>3)];
      var $sub64=($69)-($71);
      var $mul65=($67)*($sub64);
      var $72=$dist;
      var $div66=($mul65)/($72);
      var $add67=($mul61)+($div66);
      var $73=$pc;
      var $arrayidx68=(($73+24)|0);
      HEAPF64[(($arrayidx68)>>3)]=$add67;
      var $74=$pc;
      return $74;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_ppr2imp_2d"] = _circle_ppr2imp_2d;
function _circle_sector_centroid_2d($r, $pc, $theta1, $theta2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $centroid;
      var $d;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      var $0=$theta2_addr;
      var $1=$theta1_addr;
      var $sub=($0)-($1);
      $theta=$sub;
      var $2=$theta;
      var $cmp=$2 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$r_addr;
      var $mul=($3)*(2);
      var $div=($mul)/(3);
      $d=$div;
      label = 5; break;
    case 4: 
      var $4=$r_addr;
      var $mul1=($4)*(4);
      var $5=$theta;
      var $mul2=($5)*(0.5);
      var $call=Math.sin($mul2);
      var $mul3=($mul1)*($call);
      var $6=$theta;
      var $mul4=($6)*(3);
      var $div5=($mul3)/($mul4);
      $d=$div5;
      label = 5; break;
    case 5: 
      var $call6=_malloc(16);
      var $7=$call6;
      $centroid=$7;
      var $8=$pc_addr;
      var $arrayidx=(($8)|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$d;
      var $11=$theta;
      var $call7=Math.cos($11);
      var $mul8=($10)*($call7);
      var $add=($9)+($mul8);
      var $12=$centroid;
      var $arrayidx9=(($12)|0);
      HEAPF64[(($arrayidx9)>>3)]=$add;
      var $13=$pc_addr;
      var $arrayidx10=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx10)>>3)];
      var $15=$d;
      var $16=$theta;
      var $call11=Math.sin($16);
      var $mul12=($15)*($call11);
      var $add13=($14)+($mul12);
      var $17=$centroid;
      var $arrayidx14=(($17+8)|0);
      HEAPF64[(($arrayidx14)>>3)]=$add13;
      var $18=$centroid;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_sector_centroid_2d"] = _circle_sector_centroid_2d;
function _circle_sector_contains_point_2d($r, $pc, $theta1, $theta2, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $p_addr;
      var $inside;
      var $pi;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $p_addr=$p;
      $pi=3.141592653589793;
      $inside=0;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$pc_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$pc_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$r_addr;
      var $11=$r_addr;
      var $mul=($10)*($11);
      var $cmp=$add <= $mul;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $12=$p_addr;
      var $arrayidx5=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx5)>>3)];
      var $14=$pc_addr;
      var $arrayidx6=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($13)-($15);
      var $16=$p_addr;
      var $arrayidx8=(($16)|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $18=$pc_addr;
      var $arrayidx9=(($18)|0);
      var $19=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($17)-($19);
      var $call=_r8_atan($sub7, $sub10);
      $theta=$call;
      var $20=$theta;
      var $21=$theta1_addr;
      var $sub11=($20)-($21);
      var $22=$pi;
      var $mul12=($22)*(2);
      var $call13=_r8_modp($sub11, $mul12);
      var $23=$theta2_addr;
      var $24=$theta1_addr;
      var $sub14=($23)-($24);
      var $25=$pi;
      var $mul15=($25)*(2);
      var $call16=_r8_modp($sub14, $mul15);
      var $cmp17=$call13 <= $call16;
      if ($cmp17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $inside=1;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $26=$inside;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circle_sector_contains_point_2d"] = _circle_sector_contains_point_2d;
function _circle_sector_print_2d($r, $pc, $theta1, $theta2) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $r_addr;
  var $pc_addr;
  var $theta1_addr;
  var $theta2_addr;
  $r_addr=$r;
  $pc_addr=$pc;
  $theta1_addr=$theta1;
  $theta2_addr=$theta2;
  var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call1=_printf(((16680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $call2=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $0=$r_addr;
  var $call3=_printf(((16352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$0,tempInt));
  var $1=$pc_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$pc_addr;
  var $arrayidx4=(($3+8)|0);
  var $4=HEAPF64[(($arrayidx4)>>3)];
  var $call5=_printf(((16064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$2,HEAPF64[(((tempInt)+(8))>>3)]=$4,tempInt));
  var $5=$theta1_addr;
  var $6=$theta2_addr;
  var $call6=_printf(((15760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$5,HEAPF64[(((tempInt)+(8))>>3)]=$6,tempInt));
  STACKTOP = __stackBase__;
  return;
}
Module["_circle_sector_print_2d"] = _circle_sector_print_2d;
function _plane_exp_normal_3d($p1, $p2, $p3, $pn) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $pn_addr;
      var $norm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pn_addr=$pn;
      var $0=$p2_addr;
      var $arrayidx=(($0+8)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p3_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p1_addr;
      var $arrayidx3=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p2_addr;
      var $arrayidx5=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p1_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p1_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      var $16=$pn_addr;
      var $arrayidx13=(($16)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $17=$p2_addr;
      var $arrayidx14=(($17+16)|0);
      var $18=HEAPF64[(($arrayidx14)>>3)];
      var $19=$p1_addr;
      var $arrayidx15=(($19+16)|0);
      var $20=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($18)-($20);
      var $21=$p3_addr;
      var $arrayidx17=(($21)|0);
      var $22=HEAPF64[(($arrayidx17)>>3)];
      var $23=$p1_addr;
      var $arrayidx18=(($23)|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($22)-($24);
      var $mul20=($sub16)*($sub19);
      var $25=$p2_addr;
      var $arrayidx21=(($25)|0);
      var $26=HEAPF64[(($arrayidx21)>>3)];
      var $27=$p1_addr;
      var $arrayidx22=(($27)|0);
      var $28=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($26)-($28);
      var $29=$p3_addr;
      var $arrayidx24=(($29+16)|0);
      var $30=HEAPF64[(($arrayidx24)>>3)];
      var $31=$p1_addr;
      var $arrayidx25=(($31+16)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($30)-($32);
      var $mul27=($sub23)*($sub26);
      var $sub28=($mul20)-($mul27);
      var $33=$pn_addr;
      var $arrayidx29=(($33+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $34=$p2_addr;
      var $arrayidx30=(($34)|0);
      var $35=HEAPF64[(($arrayidx30)>>3)];
      var $36=$p1_addr;
      var $arrayidx31=(($36)|0);
      var $37=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($35)-($37);
      var $38=$p3_addr;
      var $arrayidx33=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx33)>>3)];
      var $40=$p1_addr;
      var $arrayidx34=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($39)-($41);
      var $mul36=($sub32)*($sub35);
      var $42=$p2_addr;
      var $arrayidx37=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx37)>>3)];
      var $44=$p1_addr;
      var $arrayidx38=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($43)-($45);
      var $46=$p3_addr;
      var $arrayidx40=(($46)|0);
      var $47=HEAPF64[(($arrayidx40)>>3)];
      var $48=$p1_addr;
      var $arrayidx41=(($48)|0);
      var $49=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($47)-($49);
      var $mul43=($sub39)*($sub42);
      var $sub44=($mul36)-($mul43);
      var $50=$pn_addr;
      var $arrayidx45=(($50+16)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      var $51=$pn_addr;
      var $arrayidx46=(($51)|0);
      var $52=HEAPF64[(($arrayidx46)>>3)];
      var $53=Math.pow($52, 2);
      var $54=$pn_addr;
      var $arrayidx47=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx47)>>3)];
      var $56=Math.pow($55, 2);
      var $add=($53)+($56);
      var $57=$pn_addr;
      var $arrayidx48=(($57+16)|0);
      var $58=HEAPF64[(($arrayidx48)>>3)];
      var $59=Math.pow($58, 2);
      var $add49=($add)+($59);
      var $call=Math.sqrt($add49);
      $norm=$call;
      var $60=$norm;
      var $cmp=$60 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $61=HEAP32[((_stderr)>>2)];
      var $call50=_fprintf($61, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $62=HEAP32[((_stderr)>>2)];
      var $call51=_fprintf($62, ((6808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $63=HEAP32[((_stderr)>>2)];
      var $call52=_fprintf($63, ((6736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $64=$pn_addr;
      var $arrayidx53=(($64)|0);
      var $65=HEAPF64[(($arrayidx53)>>3)];
      var $66=$norm;
      var $div=($65)/($66);
      var $67=$pn_addr;
      var $arrayidx54=(($67)|0);
      HEAPF64[(($arrayidx54)>>3)]=$div;
      var $68=$pn_addr;
      var $arrayidx55=(($68+8)|0);
      var $69=HEAPF64[(($arrayidx55)>>3)];
      var $70=$norm;
      var $div56=($69)/($70);
      var $71=$pn_addr;
      var $arrayidx57=(($71+8)|0);
      HEAPF64[(($arrayidx57)>>3)]=$div56;
      var $72=$pn_addr;
      var $arrayidx58=(($72+16)|0);
      var $73=HEAPF64[(($arrayidx58)>>3)];
      var $74=$norm;
      var $div59=($73)/($74);
      var $75=$pn_addr;
      var $arrayidx60=(($75+16)|0);
      HEAPF64[(($arrayidx60)>>3)]=$div59;
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_exp_normal_3d"] = _plane_exp_normal_3d;
function _r8_epsilon() {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r;
      $r=1;
      label = 3; break;
    case 3: 
      var $0=$r;
      var $add=($0)+(1);
      var $cmp=1 < $add;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $1=$r;
      var $div=($1)/(2);
      $r=$div;
      label = 3; break;
    case 5: 
      var $2=$r;
      var $mul=($2)*(2);
      $r=$mul;
      var $3=$r;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_epsilon"] = _r8_epsilon;
function _cone_volume_3d($h, $r) {
  var label = 0;
  var $h_addr;
  var $r_addr;
  var $pi;
  var $volume;
  $h_addr=$h;
  $r_addr=$r;
  $pi=3.141592653589793;
  var $0=$pi;
  var $1=$r_addr;
  var $mul=($0)*($1);
  var $2=$r_addr;
  var $mul1=($mul)*($2);
  var $3=$h_addr;
  var $mul2=($mul1)*($3);
  var $div=($mul2)/(3);
  $volume=$div;
  var $4=$volume;
  return $4;
}
Module["_cone_volume_3d"] = _cone_volume_3d;
function _degrees_to_radians($degrees) {
  var label = 0;
  var $degrees_addr;
  var $value;
  $degrees_addr=$degrees;
  var $0=$degrees_addr;
  var $div=($0)/(180);
  var $mul=($div)*(3.141592653589793);
  $value=$mul;
  var $1=$value;
  return $1;
}
Module["_degrees_to_radians"] = _degrees_to_radians;
function _circle_triple_angles_2d($r1, $r2, $r3, $angle1, $angle2, $angle3) {
  var label = 0;
  var $r1_addr;
  var $r2_addr;
  var $r3_addr;
  var $angle1_addr;
  var $angle2_addr;
  var $angle3_addr;
  $r1_addr=$r1;
  $r2_addr=$r2;
  $r3_addr=$r3;
  $angle1_addr=$angle1;
  $angle2_addr=$angle2;
  $angle3_addr=$angle3;
  var $0=$r1_addr;
  var $1=$r2_addr;
  var $add=($0)+($1);
  var $2=Math.pow($add, 2);
  var $3=$r1_addr;
  var $4=$r3_addr;
  var $add1=($3)+($4);
  var $5=Math.pow($add1, 2);
  var $add2=($2)+($5);
  var $6=$r2_addr;
  var $7=$r3_addr;
  var $add3=($6)+($7);
  var $8=Math.pow($add3, 2);
  var $sub=($add2)-($8);
  var $call=_r8_acos($sub);
  var $9=$r1_addr;
  var $10=$r2_addr;
  var $add4=($9)+($10);
  var $mul=($add4)*(2);
  var $11=$r1_addr;
  var $12=$r3_addr;
  var $add5=($11)+($12);
  var $mul6=($mul)*($add5);
  var $div=($call)/($mul6);
  var $13=$angle1_addr;
  HEAPF64[(($13)>>3)]=$div;
  var $14=$r2_addr;
  var $15=$r3_addr;
  var $add7=($14)+($15);
  var $16=Math.pow($add7, 2);
  var $17=$r2_addr;
  var $18=$r1_addr;
  var $add8=($17)+($18);
  var $19=Math.pow($add8, 2);
  var $add9=($16)+($19);
  var $20=$r3_addr;
  var $21=$r1_addr;
  var $add10=($20)+($21);
  var $22=Math.pow($add10, 2);
  var $sub11=($add9)-($22);
  var $call12=_r8_acos($sub11);
  var $23=$r2_addr;
  var $24=$r3_addr;
  var $add13=($23)+($24);
  var $mul14=($add13)*(2);
  var $25=$r2_addr;
  var $26=$r1_addr;
  var $add15=($25)+($26);
  var $mul16=($mul14)*($add15);
  var $div17=($call12)/($mul16);
  var $27=$angle2_addr;
  HEAPF64[(($27)>>3)]=$div17;
  var $28=$r3_addr;
  var $29=$r1_addr;
  var $add18=($28)+($29);
  var $30=Math.pow($add18, 2);
  var $31=$r3_addr;
  var $32=$r2_addr;
  var $add19=($31)+($32);
  var $33=Math.pow($add19, 2);
  var $add20=($30)+($33);
  var $34=$r1_addr;
  var $35=$r2_addr;
  var $add21=($34)+($35);
  var $36=Math.pow($add21, 2);
  var $sub22=($add20)-($36);
  var $call23=_r8_acos($sub22);
  var $37=$r3_addr;
  var $38=$r1_addr;
  var $add24=($37)+($38);
  var $mul25=($add24)*(2);
  var $39=$r3_addr;
  var $40=$r2_addr;
  var $add26=($39)+($40);
  var $mul27=($mul25)*($add26);
  var $div28=($call23)/($mul27);
  var $41=$angle3_addr;
  HEAPF64[(($41)>>3)]=$div28;
  return;
}
Module["_circle_triple_angles_2d"] = _circle_triple_angles_2d;
function _circles_imp_int_2d($r1, $pc1, $r2, $pc2, $int_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r1_addr;
      var $pc1_addr;
      var $r2_addr;
      var $pc2_addr;
      var $int_num_addr;
      var $p_addr;
      var $distsq;
      var $root;
      var $sc1;
      var $sc2;
      var $t1;
      var $t2;
      var $tol;
      $r1_addr=$r1;
      $pc1_addr=$pc1;
      $r2_addr=$r2;
      $pc2_addr=$pc2;
      $int_num_addr=$int_num;
      $p_addr=$p;
      var $call=_r8_epsilon();
      $tol=$call;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      var $1=$p_addr;
      var $arrayidx1=(($1+8)|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      var $2=$p_addr;
      var $arrayidx2=(($2+16)|0);
      HEAPF64[(($arrayidx2)>>3)]=0;
      var $3=$p_addr;
      var $arrayidx3=(($3+24)|0);
      HEAPF64[(($arrayidx3)>>3)]=0;
      var $4=$pc1_addr;
      var $arrayidx4=(($4)|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $6=$pc2_addr;
      var $arrayidx5=(($6)|0);
      var $7=HEAPF64[(($arrayidx5)>>3)];
      var $sub=($5)-($7);
      var $call6=_r8_abs($sub);
      var $8=$pc1_addr;
      var $arrayidx7=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$pc2_addr;
      var $arrayidx8=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $call10=_r8_abs($sub9);
      var $add=($call6)+($call10);
      var $div=($add)/(2);
      $t1=$div;
      var $12=$pc1_addr;
      var $arrayidx11=(($12)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $call12=_r8_abs($13);
      var $14=$pc2_addr;
      var $arrayidx13=(($14)|0);
      var $15=HEAPF64[(($arrayidx13)>>3)];
      var $call14=_r8_abs($15);
      var $add15=($call12)+($call14);
      var $16=$pc1_addr;
      var $arrayidx16=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx16)>>3)];
      var $call17=_r8_abs($17);
      var $add18=($add15)+($call17);
      var $18=$pc2_addr;
      var $arrayidx19=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx19)>>3)];
      var $call20=_r8_abs($19);
      var $add21=($add18)+($call20);
      var $add22=($add21)+(1);
      var $div23=($add22)/(5);
      $t2=$div23;
      var $20=$t1;
      var $21=$tol;
      var $22=$t2;
      var $mul=($21)*($22);
      var $cmp=$20 <= $mul;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $23=$r1_addr;
      var $24=$r2_addr;
      var $sub24=($23)-($24);
      var $call25=_r8_abs($sub24);
      $t1=$call25;
      var $25=$r1_addr;
      var $call26=_r8_abs($25);
      var $26=$r2_addr;
      var $call27=_r8_abs($26);
      var $add28=($call26)+($call27);
      var $add29=($add28)+(1);
      var $div30=($add29)/(3);
      $t2=$div30;
      var $27=$t1;
      var $28=$tol;
      var $29=$t2;
      var $mul31=($28)*($29);
      var $cmp32=$27 <= $mul31;
      if ($cmp32) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$int_num_addr;
      HEAP32[(($30)>>2)]=3;
      label = 6; break;
    case 5: 
      var $31=$int_num_addr;
      HEAP32[(($31)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 12; break;
    case 7: 
      var $32=$pc1_addr;
      var $arrayidx35=(($32)|0);
      var $33=HEAPF64[(($arrayidx35)>>3)];
      var $34=$pc2_addr;
      var $arrayidx36=(($34)|0);
      var $35=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($33)-($35);
      var $36=$pc1_addr;
      var $arrayidx38=(($36)|0);
      var $37=HEAPF64[(($arrayidx38)>>3)];
      var $38=$pc2_addr;
      var $arrayidx39=(($38)|0);
      var $39=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($37)-($39);
      var $mul41=($sub37)*($sub40);
      var $40=$pc1_addr;
      var $arrayidx42=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx42)>>3)];
      var $42=$pc2_addr;
      var $arrayidx43=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=($41)-($43);
      var $44=$pc1_addr;
      var $arrayidx45=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx45)>>3)];
      var $46=$pc2_addr;
      var $arrayidx46=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx46)>>3)];
      var $sub47=($45)-($47);
      var $mul48=($sub44)*($sub47);
      var $add49=($mul41)+($mul48);
      $distsq=$add49;
      var $48=$r1_addr;
      var $49=$r1_addr;
      var $mul50=($48)*($49);
      var $50=$r2_addr;
      var $51=$r2_addr;
      var $mul51=($50)*($51);
      var $add52=($mul50)+($mul51);
      var $mul53=($add52)*(2);
      var $52=$distsq;
      var $mul54=($mul53)*($52);
      var $53=$distsq;
      var $54=$distsq;
      var $mul55=($53)*($54);
      var $sub56=($mul54)-($mul55);
      var $55=$r1_addr;
      var $56=$r2_addr;
      var $sub57=($55)-($56);
      var $57=$r1_addr;
      var $58=$r2_addr;
      var $sub58=($57)-($58);
      var $mul59=($sub57)*($sub58);
      var $59=$r1_addr;
      var $60=$r2_addr;
      var $add60=($59)+($60);
      var $mul61=($mul59)*($add60);
      var $61=$r1_addr;
      var $62=$r2_addr;
      var $add62=($61)+($62);
      var $mul63=($mul61)*($add62);
      var $sub64=($sub56)-($mul63);
      $root=$sub64;
      var $63=$root;
      var $64=$tol;
      var $sub65=(-$64);
      var $cmp66=$63 < $sub65;
      if ($cmp66) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $65=$int_num_addr;
      HEAP32[(($65)>>2)]=0;
      label = 12; break;
    case 9: 
      var $66=$distsq;
      var $67=$r2_addr;
      var $68=$r2_addr;
      var $mul69=($67)*($68);
      var $69=$r1_addr;
      var $70=$r1_addr;
      var $mul70=($69)*($70);
      var $sub71=($mul69)-($mul70);
      var $sub72=($66)-($sub71);
      var $71=$distsq;
      var $div73=($sub72)/($71);
      $sc1=$div73;
      var $72=$root;
      var $73=$tol;
      var $cmp74=$72 < $73;
      if ($cmp74) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $74=$int_num_addr;
      HEAP32[(($74)>>2)]=1;
      var $75=$pc1_addr;
      var $arrayidx76=(($75)|0);
      var $76=HEAPF64[(($arrayidx76)>>3)];
      var $77=$sc1;
      var $mul77=($77)*(0.5);
      var $78=$pc2_addr;
      var $arrayidx78=(($78)|0);
      var $79=HEAPF64[(($arrayidx78)>>3)];
      var $80=$pc1_addr;
      var $arrayidx79=(($80)|0);
      var $81=HEAPF64[(($arrayidx79)>>3)];
      var $sub80=($79)-($81);
      var $mul81=($mul77)*($sub80);
      var $add82=($76)+($mul81);
      var $82=$p_addr;
      var $arrayidx83=(($82)|0);
      HEAPF64[(($arrayidx83)>>3)]=$add82;
      var $83=$pc1_addr;
      var $arrayidx84=(($83+8)|0);
      var $84=HEAPF64[(($arrayidx84)>>3)];
      var $85=$sc1;
      var $mul85=($85)*(0.5);
      var $86=$pc2_addr;
      var $arrayidx86=(($86+8)|0);
      var $87=HEAPF64[(($arrayidx86)>>3)];
      var $88=$pc1_addr;
      var $arrayidx87=(($88+8)|0);
      var $89=HEAPF64[(($arrayidx87)>>3)];
      var $sub88=($87)-($89);
      var $mul89=($mul85)*($sub88);
      var $add90=($84)+($mul89);
      var $90=$p_addr;
      var $arrayidx91=(($90+8)|0);
      HEAPF64[(($arrayidx91)>>3)]=$add90;
      label = 12; break;
    case 11: 
      var $91=$root;
      var $call93=Math.sqrt($91);
      var $92=$distsq;
      var $div94=($call93)/($92);
      $sc2=$div94;
      var $93=$int_num_addr;
      HEAP32[(($93)>>2)]=2;
      var $94=$pc1_addr;
      var $arrayidx95=(($94)|0);
      var $95=HEAPF64[(($arrayidx95)>>3)];
      var $96=$sc1;
      var $mul96=($96)*(0.5);
      var $97=$pc2_addr;
      var $arrayidx97=(($97)|0);
      var $98=HEAPF64[(($arrayidx97)>>3)];
      var $99=$pc1_addr;
      var $arrayidx98=(($99)|0);
      var $100=HEAPF64[(($arrayidx98)>>3)];
      var $sub99=($98)-($100);
      var $mul100=($mul96)*($sub99);
      var $add101=($95)+($mul100);
      var $101=$sc2;
      var $mul102=($101)*(0.5);
      var $102=$pc2_addr;
      var $arrayidx103=(($102+8)|0);
      var $103=HEAPF64[(($arrayidx103)>>3)];
      var $104=$pc1_addr;
      var $arrayidx104=(($104+8)|0);
      var $105=HEAPF64[(($arrayidx104)>>3)];
      var $sub105=($103)-($105);
      var $mul106=($mul102)*($sub105);
      var $sub107=($add101)-($mul106);
      var $106=$p_addr;
      var $arrayidx108=(($106)|0);
      HEAPF64[(($arrayidx108)>>3)]=$sub107;
      var $107=$pc1_addr;
      var $arrayidx109=(($107+8)|0);
      var $108=HEAPF64[(($arrayidx109)>>3)];
      var $109=$sc1;
      var $mul110=($109)*(0.5);
      var $110=$pc2_addr;
      var $arrayidx111=(($110+8)|0);
      var $111=HEAPF64[(($arrayidx111)>>3)];
      var $112=$pc1_addr;
      var $arrayidx112=(($112+8)|0);
      var $113=HEAPF64[(($arrayidx112)>>3)];
      var $sub113=($111)-($113);
      var $mul114=($mul110)*($sub113);
      var $add115=($108)+($mul114);
      var $114=$sc2;
      var $mul116=($114)*(0.5);
      var $115=$pc2_addr;
      var $arrayidx117=(($115)|0);
      var $116=HEAPF64[(($arrayidx117)>>3)];
      var $117=$pc1_addr;
      var $arrayidx118=(($117)|0);
      var $118=HEAPF64[(($arrayidx118)>>3)];
      var $sub119=($116)-($118);
      var $mul120=($mul116)*($sub119);
      var $add121=($add115)+($mul120);
      var $119=$p_addr;
      var $arrayidx122=(($119+8)|0);
      HEAPF64[(($arrayidx122)>>3)]=$add121;
      var $120=$pc1_addr;
      var $arrayidx123=(($120)|0);
      var $121=HEAPF64[(($arrayidx123)>>3)];
      var $122=$sc1;
      var $mul124=($122)*(0.5);
      var $123=$pc2_addr;
      var $arrayidx125=(($123)|0);
      var $124=HEAPF64[(($arrayidx125)>>3)];
      var $125=$pc1_addr;
      var $arrayidx126=(($125)|0);
      var $126=HEAPF64[(($arrayidx126)>>3)];
      var $sub127=($124)-($126);
      var $mul128=($mul124)*($sub127);
      var $add129=($121)+($mul128);
      var $127=$sc2;
      var $mul130=($127)*(0.5);
      var $128=$pc2_addr;
      var $arrayidx131=(($128+8)|0);
      var $129=HEAPF64[(($arrayidx131)>>3)];
      var $130=$pc1_addr;
      var $arrayidx132=(($130+8)|0);
      var $131=HEAPF64[(($arrayidx132)>>3)];
      var $sub133=($129)-($131);
      var $mul134=($mul130)*($sub133);
      var $add135=($add129)+($mul134);
      var $132=$p_addr;
      var $arrayidx136=(($132+16)|0);
      HEAPF64[(($arrayidx136)>>3)]=$add135;
      var $133=$pc1_addr;
      var $arrayidx137=(($133+8)|0);
      var $134=HEAPF64[(($arrayidx137)>>3)];
      var $135=$sc1;
      var $mul138=($135)*(0.5);
      var $136=$pc2_addr;
      var $arrayidx139=(($136+8)|0);
      var $137=HEAPF64[(($arrayidx139)>>3)];
      var $138=$pc1_addr;
      var $arrayidx140=(($138+8)|0);
      var $139=HEAPF64[(($arrayidx140)>>3)];
      var $sub141=($137)-($139);
      var $mul142=($mul138)*($sub141);
      var $add143=($134)+($mul142);
      var $140=$sc2;
      var $mul144=($140)*(0.5);
      var $141=$pc2_addr;
      var $arrayidx145=(($141)|0);
      var $142=HEAPF64[(($arrayidx145)>>3)];
      var $143=$pc1_addr;
      var $arrayidx146=(($143)|0);
      var $144=HEAPF64[(($arrayidx146)>>3)];
      var $sub147=($142)-($144);
      var $mul148=($mul144)*($sub147);
      var $sub149=($add143)-($mul148);
      var $145=$p_addr;
      var $arrayidx150=(($145+24)|0);
      HEAPF64[(($arrayidx150)>>3)]=$sub149;
      label = 12; break;
    case 12: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_circles_imp_int_2d"] = _circles_imp_int_2d;
function _cone_area_3d($h, $r) {
  var label = 0;
  var $h_addr;
  var $r_addr;
  var $area;
  var $pi;
  $h_addr=$h;
  $r_addr=$r;
  $pi=3.141592653589793;
  var $0=$pi;
  var $1=$r_addr;
  var $mul=($0)*($1);
  var $2=$h_addr;
  var $3=$h_addr;
  var $mul1=($2)*($3);
  var $4=$r_addr;
  var $5=$r_addr;
  var $mul2=($4)*($5);
  var $add=($mul1)+($mul2);
  var $call=Math.sqrt($add);
  var $mul3=($mul)*($call);
  $area=$mul3;
  var $6=$area;
  return $6;
}
Module["_cone_area_3d"] = _cone_area_3d;
function _cone_centroid_3d($r, $pc, $pt) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $pt_addr;
      var $centroid;
      var $dim_num;
      var $i;
      $r_addr=$r;
      $pc_addr=$pc;
      $pt_addr=$pt;
      $dim_num=3;
      var $0=$dim_num;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $centroid=$1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$dim_num;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$i;
      var $5=$pc_addr;
      var $arrayidx=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $mul1=($6)*(0.75);
      var $7=$i;
      var $8=$pt_addr;
      var $arrayidx2=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx2)>>3)];
      var $mul3=($9)*(0.25);
      var $add=($mul1)+($mul3);
      var $10=$i;
      var $11=$centroid;
      var $arrayidx4=(($11+($10<<3))|0);
      HEAPF64[(($arrayidx4)>>3)]=$add;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $13=$centroid;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cone_centroid_3d"] = _cone_centroid_3d;
function _cos_deg($angle) {
  var label = 0;
  var $angle_addr;
  var $angle_rad;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $mul=($0)*(0.017453292519943295);
  $angle_rad=$mul;
  var $1=$angle_rad;
  var $call=Math.cos($1);
  $value=$call;
  var $2=$value;
  return $2;
}
Module["_cos_deg"] = _cos_deg;
function _cot_deg($angle) {
  var label = 0;
  var $angle_addr;
  var $angle_rad;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $mul=($0)*(0.017453292519943295);
  $angle_rad=$mul;
  var $1=$angle_rad;
  var $call=Math.cos($1);
  var $2=$angle_rad;
  var $call1=Math.sin($2);
  var $div=($call)/($call1);
  $value=$div;
  var $3=$value;
  return $3;
}
Module["_cot_deg"] = _cot_deg;
function _cot_rad($angle) {
  var label = 0;
  var $angle_addr;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $call=Math.cos($0);
  var $1=$angle_addr;
  var $call1=Math.sin($1);
  var $div=($call)/($call1);
  $value=$div;
  var $2=$value;
  return $2;
}
Module["_cot_rad"] = _cot_rad;
function _csc_deg($angle) {
  var label = 0;
  var $angle_addr;
  var $angle_rad;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $mul=($0)*(0.017453292519943295);
  $angle_rad=$mul;
  var $1=$angle_rad;
  var $call=Math.sin($1);
  var $div=(1)/($call);
  $value=$div;
  var $2=$value;
  return $2;
}
Module["_csc_deg"] = _csc_deg;
function _conv3d($axis, $theta, $n, $cor3, $cor2) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $axis_addr;
      var $theta_addr;
      var $n_addr;
      var $cor3_addr;
      var $cor2_addr;
      var $j;
      var $stheta;
      $axis_addr=$axis;
      $theta_addr=$theta;
      $n_addr=$n;
      $cor3_addr=$cor3;
      $cor2_addr=$cor2;
      var $0=$theta_addr;
      var $call=_degrees_to_radians($0);
      var $call1=Math.sin($call);
      $stheta=$call1;
      var $1=$axis_addr;
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|(0))==88;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$axis_addr;
      var $conv3=(($2 << 24) >> 24);
      var $cmp4=(($conv3)|(0))==120;
      if ($cmp4) { label = 4; break; } else { label = 9; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $3=$j;
      var $4=$n_addr;
      var $cmp6=(($3)|(0)) < (($4)|(0));
      if ($cmp6) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$j;
      var $mul=($5<<1);
      var $add=((($mul)+(2))|0);
      var $6=$cor3_addr;
      var $arrayidx=(($6+($add<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$stheta;
      var $9=$j;
      var $mul8=($9<<1);
      var $add9=(($mul8)|0);
      var $10=$cor3_addr;
      var $arrayidx10=(($10+($add9<<3))|0);
      var $11=HEAPF64[(($arrayidx10)>>3)];
      var $mul11=($8)*($11);
      var $sub=($7)-($mul11);
      var $12=$j;
      var $mul12=($12<<1);
      var $add13=(($mul12)|0);
      var $13=$cor2_addr;
      var $arrayidx14=(($13+($add13<<3))|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub;
      var $14=$j;
      var $mul15=($14<<1);
      var $add16=((($mul15)+(3))|0);
      var $15=$cor3_addr;
      var $arrayidx17=(($15+($add16<<3))|0);
      var $16=HEAPF64[(($arrayidx17)>>3)];
      var $17=$stheta;
      var $18=$j;
      var $mul18=($18<<1);
      var $add19=(($mul18)|0);
      var $19=$cor3_addr;
      var $arrayidx20=(($19+($add19<<3))|0);
      var $20=HEAPF64[(($arrayidx20)>>3)];
      var $mul21=($17)*($20);
      var $sub22=($16)-($mul21);
      var $21=$j;
      var $mul23=($21<<1);
      var $add24=((($mul23)+(1))|0);
      var $22=$cor2_addr;
      var $arrayidx25=(($22+($add24<<3))|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub22;
      label = 7; break;
    case 7: 
      var $23=$j;
      var $inc=((($23)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 26; break;
    case 9: 
      var $24=$axis_addr;
      var $conv26=(($24 << 24) >> 24);
      var $cmp27=(($conv26)|(0))==89;
      if ($cmp27) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $25=$axis_addr;
      var $conv30=(($25 << 24) >> 24);
      var $cmp31=(($conv30)|(0))==121;
      if ($cmp31) { label = 11; break; } else { label = 16; break; }
    case 11: 
      $j=0;
      label = 12; break;
    case 12: 
      var $26=$j;
      var $27=$n_addr;
      var $cmp35=(($26)|(0)) < (($27)|(0));
      if ($cmp35) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $28=$j;
      var $mul38=($28<<1);
      var $add39=(($mul38)|0);
      var $29=$cor3_addr;
      var $arrayidx40=(($29+($add39<<3))|0);
      var $30=HEAPF64[(($arrayidx40)>>3)];
      var $31=$stheta;
      var $32=$j;
      var $mul41=($32<<1);
      var $add42=((($mul41)+(1))|0);
      var $33=$cor3_addr;
      var $arrayidx43=(($33+($add42<<3))|0);
      var $34=HEAPF64[(($arrayidx43)>>3)];
      var $mul44=($31)*($34);
      var $sub45=($30)-($mul44);
      var $35=$j;
      var $mul46=($35<<1);
      var $add47=(($mul46)|0);
      var $36=$cor2_addr;
      var $arrayidx48=(($36+($add47<<3))|0);
      HEAPF64[(($arrayidx48)>>3)]=$sub45;
      var $37=$j;
      var $mul49=($37<<1);
      var $add50=((($mul49)+(2))|0);
      var $38=$cor3_addr;
      var $arrayidx51=(($38+($add50<<3))|0);
      var $39=HEAPF64[(($arrayidx51)>>3)];
      var $40=$stheta;
      var $41=$j;
      var $mul52=($41<<1);
      var $add53=((($mul52)+(1))|0);
      var $42=$cor3_addr;
      var $arrayidx54=(($42+($add53<<3))|0);
      var $43=HEAPF64[(($arrayidx54)>>3)];
      var $mul55=($40)*($43);
      var $sub56=($39)-($mul55);
      var $44=$j;
      var $mul57=($44<<1);
      var $add58=((($mul57)+(1))|0);
      var $45=$cor2_addr;
      var $arrayidx59=(($45+($add58<<3))|0);
      HEAPF64[(($arrayidx59)>>3)]=$sub56;
      label = 14; break;
    case 14: 
      var $46=$j;
      var $inc61=((($46)+(1))|0);
      $j=$inc61;
      label = 12; break;
    case 15: 
      label = 25; break;
    case 16: 
      var $47=$axis_addr;
      var $conv64=(($47 << 24) >> 24);
      var $cmp65=(($conv64)|(0))==90;
      if ($cmp65) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $48=$axis_addr;
      var $conv68=(($48 << 24) >> 24);
      var $cmp69=(($conv68)|(0))==122;
      if ($cmp69) { label = 18; break; } else { label = 23; break; }
    case 18: 
      $j=0;
      label = 19; break;
    case 19: 
      var $49=$j;
      var $50=$n_addr;
      var $cmp73=(($49)|(0)) < (($50)|(0));
      if ($cmp73) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $51=$j;
      var $mul76=($51<<1);
      var $add77=(($mul76)|0);
      var $52=$cor3_addr;
      var $arrayidx78=(($52+($add77<<3))|0);
      var $53=HEAPF64[(($arrayidx78)>>3)];
      var $54=$stheta;
      var $55=$j;
      var $mul79=($55<<1);
      var $add80=((($mul79)+(2))|0);
      var $56=$cor3_addr;
      var $arrayidx81=(($56+($add80<<3))|0);
      var $57=HEAPF64[(($arrayidx81)>>3)];
      var $mul82=($54)*($57);
      var $sub83=($53)-($mul82);
      var $58=$j;
      var $mul84=($58<<1);
      var $add85=(($mul84)|0);
      var $59=$cor2_addr;
      var $arrayidx86=(($59+($add85<<3))|0);
      HEAPF64[(($arrayidx86)>>3)]=$sub83;
      var $60=$j;
      var $mul87=($60<<1);
      var $add88=((($mul87)+(1))|0);
      var $61=$cor3_addr;
      var $arrayidx89=(($61+($add88<<3))|0);
      var $62=HEAPF64[(($arrayidx89)>>3)];
      var $63=$stheta;
      var $64=$j;
      var $mul90=($64<<1);
      var $add91=((($mul90)+(2))|0);
      var $65=$cor3_addr;
      var $arrayidx92=(($65+($add91<<3))|0);
      var $66=HEAPF64[(($arrayidx92)>>3)];
      var $mul93=($63)*($66);
      var $sub94=($62)-($mul93);
      var $67=$j;
      var $mul95=($67<<1);
      var $add96=((($mul95)+(1))|0);
      var $68=$cor2_addr;
      var $arrayidx97=(($68+($add96<<3))|0);
      HEAPF64[(($arrayidx97)>>3)]=$sub94;
      label = 21; break;
    case 21: 
      var $69=$j;
      var $inc99=((($69)+(1))|0);
      $j=$inc99;
      label = 19; break;
    case 22: 
      label = 24; break;
    case 23: 
      var $call102=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call103=_printf(((15392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $70=$axis_addr;
      var $conv104=(($70 << 24) >> 24);
      var $call105=_printf(((15048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$conv104,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_conv3d"] = _conv3d;
function _cube_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=8;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=12;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=6;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=4;
  return;
}
Module["_cube_size_3d"] = _cube_size_3d;
function _r8_huge() {
  var label = 0;
  var $value;
  $value=1e+30;
  var $0=$value;
  return $0;
}
Module["_r8_huge"] = _r8_huge;
function _r8_min($x, $y) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $y_addr;
      var $value;
      $x_addr=$x;
      $y_addr=$y;
      var $0=$y_addr;
      var $1=$x_addr;
      var $cmp=$0 < $1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$y_addr;
      $value=$2;
      label = 5; break;
    case 4: 
      var $3=$x_addr;
      $value=$3;
      label = 5; break;
    case 5: 
      var $4=$value;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_min"] = _r8_min;
function _r8_max($x, $y) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $y_addr;
      var $value;
      $x_addr=$x;
      $y_addr=$y;
      var $0=$y_addr;
      var $1=$x_addr;
      var $cmp=$0 < $1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$x_addr;
      $value=$2;
      label = 5; break;
    case 4: 
      var $3=$y_addr;
      $value=$3;
      label = 5; break;
    case 5: 
      var $4=$value;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_max"] = _r8_max;
function _i4vec_copy($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$a1_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$i;
      var $6=$a2_addr;
      var $arrayidx1=(($6+($5<<2))|0);
      HEAP32[(($arrayidx1)>>2)]=$4;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_copy"] = _i4vec_copy;
function _cube_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $point_coord_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $a;
      var $i;
      var $j;
      $point_num_addr=$point_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $point_coord_addr=$point_coord;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      var $call=Math.sqrt(0.3333333333333333);
      $a=$call;
      var $0=$face_num_addr;
      var $1=$face_order_addr;
      _i4vec_copy($0, ((6224)|0), $1);
      var $2=$face_order_max_addr;
      var $3=$face_num_addr;
      var $mul=(Math.imul($2,$3)|0);
      var $4=$face_point_addr;
      _i4vec_copy($mul, ((6128)|0), $4);
      var $5=$point_num_addr;
      var $mul1=((($5)*(3))&-1);
      var $6=$point_coord_addr;
      _r8vec_copy($mul1, ((5936)|0), $6);
      $j=0;
      label = 3; break;
    case 3: 
      var $7=$j;
      var $cmp=(($7)|(0)) < 8;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $cmp3=(($8)|(0)) < 3;
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$i;
      var $10=$j;
      var $mul5=((($10)*(3))&-1);
      var $add=((($9)+($mul5))|0);
      var $11=$point_coord_addr;
      var $arrayidx=(($11+($add<<3))|0);
      var $12=HEAPF64[(($arrayidx)>>3)];
      var $13=$a;
      var $mul6=($12)*($13);
      var $14=$i;
      var $15=$j;
      var $mul7=((($15)*(3))&-1);
      var $add8=((($14)+($mul7))|0);
      var $16=$point_coord_addr;
      var $arrayidx9=(($16+($add8<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$mul6;
      label = 7; break;
    case 7: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $18=$j;
      var $inc11=((($18)+(1))|0);
      $j=$inc11;
      label = 3; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cube_shape_3d"] = _cube_shape_3d;
function _cylinder_point_dist_3d($p1, $p2, $r, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $r_addr;
      var $p_addr;
      var $axis=__stackBase__;
      var $axis_length;
      var $distance;
      var $i;
      var $off_axis_component;
      var $p_dot_axis;
      var $p_length;
      var $v1=(__stackBase__)+(24);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $r_addr=$r;
      $p_addr=$p;
      $axis_length=0;
      $distance=0;
      $off_axis_component=0;
      $p_dot_axis=0;
      $p_length=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($axis+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($axis)|0);
      var $call=_r8vec_norm(3, $arraydecay);
      $axis_length=$call;
      var $9=$axis_length;
      var $cmp3=$9 == 0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $call4=_r8_huge();
      var $sub5=(-$call4);
      $distance=$sub5;
      var $10=$distance;
      $retval=$10;
      label = 31; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $11=$i;
      var $cmp7=(($11)|(0)) < 3;
      if ($cmp7) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $12=$i;
      var $arrayidx9=(($axis+($12<<3))|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $14=$axis_length;
      var $div=($13)/($14);
      var $15=$i;
      var $arrayidx10=(($axis+($15<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$div;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $inc12=((($16)+(1))|0);
      $i=$inc12;
      label = 9; break;
    case 12: 
      $p_dot_axis=0;
      $i=0;
      label = 13; break;
    case 13: 
      var $17=$i;
      var $cmp15=(($17)|(0)) < 3;
      if ($cmp15) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $18=$p_dot_axis;
      var $19=$i;
      var $20=$p_addr;
      var $arrayidx17=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$i;
      var $23=$p1_addr;
      var $arrayidx18=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($24);
      var $25=$i;
      var $arrayidx20=(($axis+($25<<3))|0);
      var $26=HEAPF64[(($arrayidx20)>>3)];
      var $mul=($sub19)*($26);
      var $add=($18)+($mul);
      $p_dot_axis=$add;
      label = 15; break;
    case 15: 
      var $27=$i;
      var $inc22=((($27)+(1))|0);
      $i=$inc22;
      label = 13; break;
    case 16: 
      var $28=$p_dot_axis;
      var $cmp24=$28 <= 0;
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $29=$p1_addr;
      var $30=$r_addr;
      var $arraydecay26=(($axis)|0);
      var $31=$p_addr;
      var $call27=_disk_point_dist_3d($29, $30, $arraydecay26, $31);
      $distance=$call27;
      label = 30; break;
    case 18: 
      var $32=$p_dot_axis;
      var $33=$axis_length;
      var $cmp28=$32 <= $33;
      if ($cmp28) { label = 19; break; } else { label = 26; break; }
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $34=$i;
      var $cmp31=(($34)|(0)) < 3;
      if ($cmp31) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $35=$i;
      var $36=$p_addr;
      var $arrayidx33=(($36+($35<<3))|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $38=$i;
      var $39=$p1_addr;
      var $arrayidx34=(($39+($38<<3))|0);
      var $40=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($37)-($40);
      var $41=$i;
      var $arrayidx36=(($v1+($41<<3))|0);
      HEAPF64[(($arrayidx36)>>3)]=$sub35;
      label = 22; break;
    case 22: 
      var $42=$i;
      var $inc38=((($42)+(1))|0);
      $i=$inc38;
      label = 20; break;
    case 23: 
      var $arraydecay40=(($v1)|0);
      var $call41=_r8vec_norm(3, $arraydecay40);
      $p_length=$call41;
      var $43=$p_length;
      var $44=Math.pow($43, 2);
      var $45=$p_dot_axis;
      var $46=Math.pow($45, 2);
      var $sub42=($44)-($46);
      var $call43=Math.sqrt($sub42);
      $off_axis_component=$call43;
      var $47=$off_axis_component;
      var $48=$r_addr;
      var $sub44=($47)-($48);
      var $call45=_r8_abs($sub44);
      $distance=$call45;
      var $49=$off_axis_component;
      var $50=$r_addr;
      var $cmp46=$49 < $50;
      if ($cmp46) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $51=$distance;
      var $52=$axis_length;
      var $53=$p_dot_axis;
      var $sub48=($52)-($53);
      var $call49=_r8_min($51, $sub48);
      $distance=$call49;
      var $54=$distance;
      var $55=$p_dot_axis;
      var $call50=_r8_min($54, $55);
      $distance=$call50;
      label = 25; break;
    case 25: 
      label = 29; break;
    case 26: 
      var $56=$axis_length;
      var $57=$p_dot_axis;
      var $cmp53=$56 < $57;
      if ($cmp53) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $58=$p2_addr;
      var $59=$r_addr;
      var $arraydecay55=(($axis)|0);
      var $60=$p_addr;
      var $call56=_disk_point_dist_3d($58, $59, $arraydecay55, $60);
      $distance=$call56;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $61=$distance;
      $retval=$61;
      label = 31; break;
    case 31: 
      var $62=$retval;
      STACKTOP = __stackBase__;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cylinder_point_dist_3d"] = _cylinder_point_dist_3d;
function _disk_point_dist_3d($pc, $r, $axis, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pc_addr;
      var $r_addr;
      var $axis_addr;
      var $p_addr;
      var $axial_component;
      var $axis_length;
      var $dist;
      var $i;
      var $off_axis_component;
      var $off_axis=__stackBase__;
      var $v=(__stackBase__)+(24);
      $pc_addr=$pc;
      $r_addr=$r;
      $axis_addr=$axis;
      $p_addr=$p;
      var $0=$p_addr;
      var $1=$pc_addr;
      var $call=_r8vec_eq(3, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $dist=0;
      var $2=$dist;
      $retval=$2;
      label = 20; break;
    case 4: 
      var $3=$axis_addr;
      var $call1=_r8vec_norm(3, $3);
      $axis_length=$call1;
      var $4=$axis_length;
      var $cmp=$4 <= 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $call3=_r8_huge();
      var $sub=(-$call3);
      $dist=$sub;
      var $5=$dist;
      $retval=$5;
      label = 20; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $6=$i;
      var $cmp5=(($6)|(0)) < 3;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $7=$i;
      var $8=$p_addr;
      var $arrayidx=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$i;
      var $11=$pc_addr;
      var $arrayidx6=(($11+($10<<3))|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($12);
      var $13=$i;
      var $arrayidx8=(($v+($13<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$sub7;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $arraydecay=(($v)|0);
      var $15=$axis_addr;
      var $call9=_r8vec_dot_product(3, $arraydecay, $15);
      var $16=$axis_length;
      var $div=($call9)/($16);
      $axial_component=$div;
      var $arraydecay10=(($v)|0);
      var $call11=_r8vec_norm(3, $arraydecay10);
      var $17=$r_addr;
      var $cmp12=$call11 <= $17;
      if ($cmp12) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $18=$axial_component;
      var $cmp13=$18 == 0;
      if ($cmp13) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $dist=0;
      var $19=$dist;
      $retval=$19;
      label = 20; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $20=$i;
      var $cmp17=(($20)|(0)) < 3;
      if ($cmp17) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $21=$i;
      var $22=$p_addr;
      var $arrayidx19=(($22+($21<<3))|0);
      var $23=HEAPF64[(($arrayidx19)>>3)];
      var $24=$i;
      var $25=$pc_addr;
      var $arrayidx20=(($25+($24<<3))|0);
      var $26=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($23)-($26);
      var $27=$axial_component;
      var $28=$i;
      var $29=$axis_addr;
      var $arrayidx22=(($29+($28<<3))|0);
      var $30=HEAPF64[(($arrayidx22)>>3)];
      var $mul=($27)*($30);
      var $31=$axis_length;
      var $div23=($mul)/($31);
      var $sub24=($sub21)-($div23);
      var $32=$i;
      var $arrayidx25=(($off_axis+($32<<3))|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub24;
      label = 16; break;
    case 16: 
      var $33=$i;
      var $inc27=((($33)+(1))|0);
      $i=$inc27;
      label = 14; break;
    case 17: 
      var $arraydecay29=(($off_axis)|0);
      var $call30=_r8vec_norm(3, $arraydecay29);
      $off_axis_component=$call30;
      var $34=$off_axis_component;
      var $35=$r_addr;
      var $cmp31=$34 <= $35;
      if ($cmp31) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $36=$axial_component;
      var $call33=_r8_abs($36);
      $dist=$call33;
      var $37=$dist;
      $retval=$37;
      label = 20; break;
    case 19: 
      var $38=$axial_component;
      var $39=Math.pow($38, 2);
      var $40=$off_axis_component;
      var $41=$r_addr;
      var $sub35=($40)-($41);
      var $42=Math.pow($sub35, 2);
      var $add=($39)+($42);
      var $call36=Math.sqrt($add);
      $dist=$call36;
      var $43=$dist;
      $retval=$43;
      label = 20; break;
    case 20: 
      var $44=$retval;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_disk_point_dist_3d"] = _disk_point_dist_3d;
function _cylinder_point_dist_signed_3d($p1, $p2, $r, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $r_addr;
      var $p_addr;
      var $axis=__stackBase__;
      var $axis_length;
      var $distance;
      var $i;
      var $off_axis_component;
      var $p_dot_axis;
      var $p_length;
      var $v1=(__stackBase__)+(24);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $r_addr=$r;
      $p_addr=$p;
      $axis_length=0;
      $distance=0;
      $off_axis_component=0;
      $p_dot_axis=0;
      $p_length=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($axis+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($axis)|0);
      var $call=_r8vec_norm(3, $arraydecay);
      $axis_length=$call;
      var $9=$axis_length;
      var $cmp3=$9 == 0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $call4=_r8_huge();
      var $sub5=(-$call4);
      $distance=$sub5;
      var $10=$distance;
      $retval=$10;
      label = 31; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $11=$i;
      var $cmp7=(($11)|(0)) < 3;
      if ($cmp7) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $12=$i;
      var $arrayidx9=(($axis+($12<<3))|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $14=$axis_length;
      var $div=($13)/($14);
      var $15=$i;
      var $arrayidx10=(($axis+($15<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$div;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $inc12=((($16)+(1))|0);
      $i=$inc12;
      label = 9; break;
    case 12: 
      $p_dot_axis=0;
      $i=0;
      label = 13; break;
    case 13: 
      var $17=$i;
      var $cmp15=(($17)|(0)) < 3;
      if ($cmp15) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $18=$p_dot_axis;
      var $19=$i;
      var $20=$p_addr;
      var $arrayidx17=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$i;
      var $23=$p1_addr;
      var $arrayidx18=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($24);
      var $25=$i;
      var $arrayidx20=(($axis+($25<<3))|0);
      var $26=HEAPF64[(($arrayidx20)>>3)];
      var $mul=($sub19)*($26);
      var $add=($18)+($mul);
      $p_dot_axis=$add;
      label = 15; break;
    case 15: 
      var $27=$i;
      var $inc22=((($27)+(1))|0);
      $i=$inc22;
      label = 13; break;
    case 16: 
      var $28=$p_dot_axis;
      var $cmp24=$28 <= 0;
      if ($cmp24) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $29=$p1_addr;
      var $30=$r_addr;
      var $arraydecay26=(($axis)|0);
      var $31=$p_addr;
      var $call27=_disk_point_dist_3d($29, $30, $arraydecay26, $31);
      $distance=$call27;
      label = 30; break;
    case 18: 
      var $32=$p_dot_axis;
      var $33=$axis_length;
      var $cmp28=$32 <= $33;
      if ($cmp28) { label = 19; break; } else { label = 26; break; }
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $34=$i;
      var $cmp31=(($34)|(0)) < 3;
      if ($cmp31) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $35=$i;
      var $36=$p_addr;
      var $arrayidx33=(($36+($35<<3))|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $38=$i;
      var $39=$p1_addr;
      var $arrayidx34=(($39+($38<<3))|0);
      var $40=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($37)-($40);
      var $41=$i;
      var $arrayidx36=(($v1+($41<<3))|0);
      HEAPF64[(($arrayidx36)>>3)]=$sub35;
      label = 22; break;
    case 22: 
      var $42=$i;
      var $inc38=((($42)+(1))|0);
      $i=$inc38;
      label = 20; break;
    case 23: 
      var $arraydecay40=(($v1)|0);
      var $call41=_r8vec_norm(3, $arraydecay40);
      $p_length=$call41;
      var $43=$p_length;
      var $44=Math.pow($43, 2);
      var $45=$p_dot_axis;
      var $46=Math.pow($45, 2);
      var $sub42=($44)-($46);
      var $call43=Math.sqrt($sub42);
      $off_axis_component=$call43;
      var $47=$off_axis_component;
      var $48=$r_addr;
      var $sub44=($47)-($48);
      $distance=$sub44;
      var $49=$distance;
      var $cmp45=$49 < 0;
      if ($cmp45) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $50=$distance;
      var $51=$p_dot_axis;
      var $52=$axis_length;
      var $sub47=($51)-($52);
      var $call48=_r8_max($50, $sub47);
      $distance=$call48;
      var $53=$distance;
      var $54=$p_dot_axis;
      var $sub49=(-$54);
      var $call50=_r8_max($53, $sub49);
      $distance=$call50;
      label = 25; break;
    case 25: 
      label = 29; break;
    case 26: 
      var $55=$axis_length;
      var $56=$p_dot_axis;
      var $cmp53=$55 < $56;
      if ($cmp53) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $57=$p2_addr;
      var $58=$r_addr;
      var $arraydecay55=(($axis)|0);
      var $59=$p_addr;
      var $call56=_disk_point_dist_3d($57, $58, $arraydecay55, $59);
      $distance=$call56;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $60=$distance;
      $retval=$60;
      label = 31; break;
    case 31: 
      var $61=$retval;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cylinder_point_dist_signed_3d"] = _cylinder_point_dist_signed_3d;
function _cylinder_point_inside_3d($p1, $p2, $r, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $r_addr;
      var $p_addr;
      var $axis=__stackBase__;
      var $axis_length;
      var $i;
      var $inside;
      var $off_axis_component;
      var $p_dot_axis;
      var $p_length;
      var $v1=(__stackBase__)+(24);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $r_addr=$r;
      $p_addr=$p;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($axis+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($axis)|0);
      var $call=_r8vec_norm(3, $arraydecay);
      $axis_length=$call;
      var $9=$axis_length;
      var $cmp3=$9 == 0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $inside=0;
      var $10=$inside;
      $retval=$10;
      label = 28; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $11=$i;
      var $cmp5=(($11)|(0)) < 3;
      if ($cmp5) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $12=$i;
      var $arrayidx7=(($axis+($12<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $14=$axis_length;
      var $div=($13)/($14);
      var $15=$i;
      var $arrayidx8=(($axis+($15<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$div;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $inc10=((($16)+(1))|0);
      $i=$inc10;
      label = 9; break;
    case 12: 
      $p_dot_axis=0;
      $i=0;
      label = 13; break;
    case 13: 
      var $17=$i;
      var $cmp13=(($17)|(0)) < 3;
      if ($cmp13) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $18=$p_dot_axis;
      var $19=$i;
      var $20=$p_addr;
      var $arrayidx15=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$i;
      var $23=$p1_addr;
      var $arrayidx16=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($21)-($24);
      var $25=$i;
      var $arrayidx18=(($axis+($25<<3))|0);
      var $26=HEAPF64[(($arrayidx18)>>3)];
      var $mul=($sub17)*($26);
      var $add=($18)+($mul);
      $p_dot_axis=$add;
      label = 15; break;
    case 15: 
      var $27=$i;
      var $inc20=((($27)+(1))|0);
      $i=$inc20;
      label = 13; break;
    case 16: 
      var $28=$p_dot_axis;
      var $cmp22=$28 < 0;
      if ($cmp22) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $29=$axis_length;
      var $30=$p_dot_axis;
      var $cmp23=$29 < $30;
      if ($cmp23) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $inside=0;
      label = 27; break;
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $31=$i;
      var $cmp26=(($31)|(0)) < 3;
      if ($cmp26) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $32=$i;
      var $33=$p_addr;
      var $arrayidx28=(($33+($32<<3))|0);
      var $34=HEAPF64[(($arrayidx28)>>3)];
      var $35=$i;
      var $36=$p1_addr;
      var $arrayidx29=(($36+($35<<3))|0);
      var $37=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($34)-($37);
      var $38=$i;
      var $arrayidx31=(($v1+($38<<3))|0);
      HEAPF64[(($arrayidx31)>>3)]=$sub30;
      label = 22; break;
    case 22: 
      var $39=$i;
      var $inc33=((($39)+(1))|0);
      $i=$inc33;
      label = 20; break;
    case 23: 
      var $arraydecay35=(($v1)|0);
      var $call36=_r8vec_norm(3, $arraydecay35);
      $p_length=$call36;
      var $40=$p_length;
      var $41=Math.pow($40, 2);
      var $42=$p_dot_axis;
      var $43=Math.pow($42, 2);
      var $sub37=($41)-($43);
      var $call38=Math.sqrt($sub37);
      $off_axis_component=$call38;
      var $44=$off_axis_component;
      var $45=$r_addr;
      var $cmp39=$44 <= $45;
      if ($cmp39) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $inside=1;
      label = 26; break;
    case 25: 
      $inside=0;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $46=$inside;
      $retval=$46;
      label = 28; break;
    case 28: 
      var $47=$retval;
      STACKTOP = __stackBase__;
      return $47;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cylinder_point_inside_3d"] = _cylinder_point_inside_3d;
function _cylinder_point_near_3d($p1, $p2, $r, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $r_addr;
      var $p_addr;
      var $axial_component;
      var $axis=__stackBase__;
      var $axis_length;
      var $distance;
      var $i;
      var $normal;
      var $off_axis=(__stackBase__)+(24);
      var $off_axis_component;
      var $pn;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $r_addr=$r;
      $p_addr=$p;
      var $call=_malloc(24);
      var $0=$call;
      $pn=$0;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$p2_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$p1_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($4)-($7);
      var $8=$i;
      var $arrayidx2=(($axis+($8<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($axis)|0);
      var $call3=_r8vec_norm(3, $arraydecay);
      $axis_length=$call3;
      $i=0;
      label = 7; break;
    case 7: 
      var $10=$i;
      var $cmp5=(($10)|(0)) < 3;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $11=$i;
      var $arrayidx7=(($axis+($11<<3))|0);
      var $12=HEAPF64[(($arrayidx7)>>3)];
      var $13=$axis_length;
      var $div=($12)/($13);
      var $14=$i;
      var $arrayidx8=(($axis+($14<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$div;
      label = 9; break;
    case 9: 
      var $15=$i;
      var $inc10=((($15)+(1))|0);
      $i=$inc10;
      label = 7; break;
    case 10: 
      $axial_component=0;
      $i=0;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $cmp13=(($16)|(0)) < 3;
      if ($cmp13) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $17=$axial_component;
      var $18=$i;
      var $19=$p_addr;
      var $arrayidx15=(($19+($18<<3))|0);
      var $20=HEAPF64[(($arrayidx15)>>3)];
      var $21=$i;
      var $22=$p1_addr;
      var $arrayidx16=(($22+($21<<3))|0);
      var $23=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($20)-($23);
      var $24=$i;
      var $arrayidx18=(($axis+($24<<3))|0);
      var $25=HEAPF64[(($arrayidx18)>>3)];
      var $mul=($sub17)*($25);
      var $add=($17)+($mul);
      $axial_component=$add;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc20=((($26)+(1))|0);
      $i=$inc20;
      label = 11; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $27=$i;
      var $cmp23=(($27)|(0)) < 3;
      if ($cmp23) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $28=$i;
      var $29=$p_addr;
      var $arrayidx25=(($29+($28<<3))|0);
      var $30=HEAPF64[(($arrayidx25)>>3)];
      var $31=$i;
      var $32=$p1_addr;
      var $arrayidx26=(($32+($31<<3))|0);
      var $33=HEAPF64[(($arrayidx26)>>3)];
      var $sub27=($30)-($33);
      var $34=$axial_component;
      var $35=$i;
      var $arrayidx28=(($axis+($35<<3))|0);
      var $36=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($34)*($36);
      var $sub30=($sub27)-($mul29);
      var $37=$i;
      var $arrayidx31=(($off_axis+($37<<3))|0);
      HEAPF64[(($arrayidx31)>>3)]=$sub30;
      label = 17; break;
    case 17: 
      var $38=$i;
      var $inc33=((($38)+(1))|0);
      $i=$inc33;
      label = 15; break;
    case 18: 
      var $arraydecay35=(($off_axis)|0);
      var $call36=_r8vec_norm(3, $arraydecay35);
      $off_axis_component=$call36;
      var $39=$axial_component;
      var $cmp37=$39 <= 0;
      if ($cmp37) { label = 19; break; } else { label = 31; break; }
    case 19: 
      var $40=$off_axis_component;
      var $41=$r_addr;
      var $cmp38=$40 <= $41;
      if ($cmp38) { label = 20; break; } else { label = 25; break; }
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $42=$i;
      var $cmp41=(($42)|(0)) < 3;
      if ($cmp41) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $43=$i;
      var $44=$p1_addr;
      var $arrayidx43=(($44+($43<<3))|0);
      var $45=HEAPF64[(($arrayidx43)>>3)];
      var $46=$i;
      var $arrayidx44=(($off_axis+($46<<3))|0);
      var $47=HEAPF64[(($arrayidx44)>>3)];
      var $add45=($45)+($47);
      var $48=$i;
      var $49=$pn;
      var $arrayidx46=(($49+($48<<3))|0);
      HEAPF64[(($arrayidx46)>>3)]=$add45;
      label = 23; break;
    case 23: 
      var $50=$i;
      var $inc48=((($50)+(1))|0);
      $i=$inc48;
      label = 21; break;
    case 24: 
      label = 30; break;
    case 25: 
      $i=0;
      label = 26; break;
    case 26: 
      var $51=$i;
      var $cmp51=(($51)|(0)) < 3;
      if ($cmp51) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $52=$i;
      var $53=$p1_addr;
      var $arrayidx53=(($53+($52<<3))|0);
      var $54=HEAPF64[(($arrayidx53)>>3)];
      var $55=$r_addr;
      var $56=$off_axis_component;
      var $div54=($55)/($56);
      var $57=$i;
      var $arrayidx55=(($off_axis+($57<<3))|0);
      var $58=HEAPF64[(($arrayidx55)>>3)];
      var $mul56=($div54)*($58);
      var $add57=($54)+($mul56);
      var $59=$i;
      var $60=$pn;
      var $arrayidx58=(($60+($59<<3))|0);
      HEAPF64[(($arrayidx58)>>3)]=$add57;
      label = 28; break;
    case 28: 
      var $61=$i;
      var $inc60=((($61)+(1))|0);
      $i=$inc60;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 73; break;
    case 31: 
      var $62=$axial_component;
      var $63=$axis_length;
      var $cmp63=$62 <= $63;
      if ($cmp63) { label = 32; break; } else { label = 58; break; }
    case 32: 
      var $64=$off_axis_component;
      var $cmp65=$64 == 0;
      if ($cmp65) { label = 33; break; } else { label = 38; break; }
    case 33: 
      var $arraydecay67=(($axis)|0);
      var $call68=_r8vec_any_normal(3, $arraydecay67);
      $normal=$call68;
      $i=0;
      label = 34; break;
    case 34: 
      var $65=$i;
      var $cmp70=(($65)|(0)) < 3;
      if ($cmp70) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $66=$i;
      var $67=$p_addr;
      var $arrayidx72=(($67+($66<<3))|0);
      var $68=HEAPF64[(($arrayidx72)>>3)];
      var $69=$r_addr;
      var $70=$i;
      var $71=$normal;
      var $arrayidx73=(($71+($70<<3))|0);
      var $72=HEAPF64[(($arrayidx73)>>3)];
      var $mul74=($69)*($72);
      var $add75=($68)+($mul74);
      var $73=$i;
      var $74=$pn;
      var $arrayidx76=(($74+($73<<3))|0);
      HEAPF64[(($arrayidx76)>>3)]=$add75;
      label = 36; break;
    case 36: 
      var $75=$i;
      var $inc78=((($75)+(1))|0);
      $i=$inc78;
      label = 34; break;
    case 37: 
      var $76=$normal;
      var $77=$76;
      _free($77);
      label = 57; break;
    case 38: 
      var $78=$off_axis_component;
      var $79=$r_addr;
      var $sub81=($78)-($79);
      var $call82=_r8_abs($sub81);
      $distance=$call82;
      $i=0;
      label = 39; break;
    case 39: 
      var $80=$i;
      var $cmp84=(($80)|(0)) < 3;
      if ($cmp84) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $81=$i;
      var $82=$p1_addr;
      var $arrayidx86=(($82+($81<<3))|0);
      var $83=HEAPF64[(($arrayidx86)>>3)];
      var $84=$axial_component;
      var $85=$i;
      var $arrayidx87=(($axis+($85<<3))|0);
      var $86=HEAPF64[(($arrayidx87)>>3)];
      var $mul88=($84)*($86);
      var $add89=($83)+($mul88);
      var $87=$r_addr;
      var $88=$off_axis_component;
      var $div90=($87)/($88);
      var $89=$i;
      var $arrayidx91=(($off_axis+($89<<3))|0);
      var $90=HEAPF64[(($arrayidx91)>>3)];
      var $mul92=($div90)*($90);
      var $add93=($add89)+($mul92);
      var $91=$i;
      var $92=$pn;
      var $arrayidx94=(($92+($91<<3))|0);
      HEAPF64[(($arrayidx94)>>3)]=$add93;
      label = 41; break;
    case 41: 
      var $93=$i;
      var $inc96=((($93)+(1))|0);
      $i=$inc96;
      label = 39; break;
    case 42: 
      var $94=$off_axis_component;
      var $95=$r_addr;
      var $cmp98=$94 < $95;
      if ($cmp98) { label = 43; break; } else { label = 56; break; }
    case 43: 
      var $96=$axis_length;
      var $97=$axial_component;
      var $sub100=($96)-($97);
      var $98=$distance;
      var $cmp101=$sub100 < $98;
      if ($cmp101) { label = 44; break; } else { label = 49; break; }
    case 44: 
      var $99=$axis_length;
      var $100=$axial_component;
      var $sub103=($99)-($100);
      $distance=$sub103;
      $i=0;
      label = 45; break;
    case 45: 
      var $101=$i;
      var $cmp105=(($101)|(0)) < 3;
      if ($cmp105) { label = 46; break; } else { label = 48; break; }
    case 46: 
      var $102=$i;
      var $103=$p2_addr;
      var $arrayidx107=(($103+($102<<3))|0);
      var $104=HEAPF64[(($arrayidx107)>>3)];
      var $105=$i;
      var $arrayidx108=(($off_axis+($105<<3))|0);
      var $106=HEAPF64[(($arrayidx108)>>3)];
      var $add109=($104)+($106);
      var $107=$i;
      var $108=$pn;
      var $arrayidx110=(($108+($107<<3))|0);
      HEAPF64[(($arrayidx110)>>3)]=$add109;
      label = 47; break;
    case 47: 
      var $109=$i;
      var $inc112=((($109)+(1))|0);
      $i=$inc112;
      label = 45; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $110=$axial_component;
      var $111=$distance;
      var $cmp115=$110 < $111;
      if ($cmp115) { label = 50; break; } else { label = 55; break; }
    case 50: 
      var $112=$axial_component;
      $distance=$112;
      $i=0;
      label = 51; break;
    case 51: 
      var $113=$i;
      var $cmp118=(($113)|(0)) < 3;
      if ($cmp118) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $114=$i;
      var $115=$p1_addr;
      var $arrayidx120=(($115+($114<<3))|0);
      var $116=HEAPF64[(($arrayidx120)>>3)];
      var $117=$i;
      var $arrayidx121=(($off_axis+($117<<3))|0);
      var $118=HEAPF64[(($arrayidx121)>>3)];
      var $add122=($116)+($118);
      var $119=$i;
      var $120=$pn;
      var $arrayidx123=(($120+($119<<3))|0);
      HEAPF64[(($arrayidx123)>>3)]=$add122;
      label = 53; break;
    case 53: 
      var $121=$i;
      var $inc125=((($121)+(1))|0);
      $i=$inc125;
      label = 51; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 72; break;
    case 58: 
      var $122=$axis_length;
      var $123=$axial_component;
      var $cmp131=$122 < $123;
      if ($cmp131) { label = 59; break; } else { label = 71; break; }
    case 59: 
      var $124=$off_axis_component;
      var $125=$r_addr;
      var $cmp133=$124 <= $125;
      if ($cmp133) { label = 60; break; } else { label = 65; break; }
    case 60: 
      $i=0;
      label = 61; break;
    case 61: 
      var $126=$i;
      var $cmp136=(($126)|(0)) < 3;
      if ($cmp136) { label = 62; break; } else { label = 64; break; }
    case 62: 
      var $127=$i;
      var $128=$p2_addr;
      var $arrayidx138=(($128+($127<<3))|0);
      var $129=HEAPF64[(($arrayidx138)>>3)];
      var $130=$i;
      var $arrayidx139=(($off_axis+($130<<3))|0);
      var $131=HEAPF64[(($arrayidx139)>>3)];
      var $add140=($129)+($131);
      var $132=$i;
      var $133=$pn;
      var $arrayidx141=(($133+($132<<3))|0);
      HEAPF64[(($arrayidx141)>>3)]=$add140;
      label = 63; break;
    case 63: 
      var $134=$i;
      var $inc143=((($134)+(1))|0);
      $i=$inc143;
      label = 61; break;
    case 64: 
      label = 70; break;
    case 65: 
      $i=0;
      label = 66; break;
    case 66: 
      var $135=$i;
      var $cmp147=(($135)|(0)) < 3;
      if ($cmp147) { label = 67; break; } else { label = 69; break; }
    case 67: 
      var $136=$i;
      var $137=$p2_addr;
      var $arrayidx149=(($137+($136<<3))|0);
      var $138=HEAPF64[(($arrayidx149)>>3)];
      var $139=$r_addr;
      var $140=$off_axis_component;
      var $div150=($139)/($140);
      var $141=$i;
      var $arrayidx151=(($off_axis+($141<<3))|0);
      var $142=HEAPF64[(($arrayidx151)>>3)];
      var $mul152=($div150)*($142);
      var $add153=($138)+($mul152);
      var $143=$i;
      var $144=$pn;
      var $arrayidx154=(($144+($143<<3))|0);
      HEAPF64[(($arrayidx154)>>3)]=$add153;
      label = 68; break;
    case 68: 
      var $145=$i;
      var $inc156=((($145)+(1))|0);
      $i=$inc156;
      label = 66; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $146=$pn;
      STACKTOP = __stackBase__;
      return $146;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cylinder_point_near_3d"] = _cylinder_point_near_3d;
function _r8vec_any_normal($dim_num, $v1) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_num_addr;
      var $v1_addr;
      var $i;
      var $j;
      var $k;
      var $v2;
      var $vj;
      var $vk;
      $dim_num_addr=$dim_num;
      $v1_addr=$v1;
      var $0=$dim_num_addr;
      var $cmp=(($0)|(0)) < 2;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((13816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((13784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $4=$dim_num_addr;
      var $mul=($4<<3);
      var $call3=_malloc($mul);
      var $5=$call3;
      $v2=$5;
      var $6=$dim_num_addr;
      var $7=$v1_addr;
      var $call4=_r8vec_norm($6, $7);
      var $cmp5=$call4 == 0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$dim_num_addr;
      var $9=$v2;
      _r8vec_zero($8, $9);
      var $10=$v2;
      var $arrayidx=(($10)|0);
      HEAPF64[(($arrayidx)>>3)]=1;
      var $11=$v2;
      $retval=$11;
      label = 18; break;
    case 6: 
      $j=-1;
      $vj=0;
      $k=-1;
      $vk=0;
      $i=0;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $13=$dim_num_addr;
      var $cmp8=(($12)|(0)) < (($13)|(0));
      if ($cmp8) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $14=$vk;
      var $call9=_r8_abs($14);
      var $15=$i;
      var $16=$v1_addr;
      var $arrayidx10=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx10)>>3)];
      var $call11=_r8_abs($17);
      var $cmp12=$call9 < $call11;
      if ($cmp12) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $18=$k;
      var $cmp13=(($18)|(0))==-1;
      if ($cmp13) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $19=$vj;
      var $call15=_r8_abs($19);
      var $20=$i;
      var $21=$v1_addr;
      var $arrayidx16=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx16)>>3)];
      var $call17=_r8_abs($22);
      var $cmp18=$call15 < $call17;
      if ($cmp18) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $23=$j;
      var $cmp20=(($23)|(0))==-1;
      if ($cmp20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $24=$j;
      $k=$24;
      var $25=$vj;
      $vk=$25;
      var $26=$i;
      $j=$26;
      var $27=$i;
      var $28=$v1_addr;
      var $arrayidx22=(($28+($27<<3))|0);
      var $29=HEAPF64[(($arrayidx22)>>3)];
      $vj=$29;
      label = 14; break;
    case 13: 
      var $30=$i;
      $k=$30;
      var $31=$i;
      var $32=$v1_addr;
      var $arrayidx23=(($32+($31<<3))|0);
      var $33=HEAPF64[(($arrayidx23)>>3)];
      $vk=$33;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 17: 
      var $35=$dim_num_addr;
      var $36=$v2;
      _r8vec_zero($35, $36);
      var $37=$vk;
      var $sub=(-$37);
      var $38=$vk;
      var $39=$vk;
      var $mul26=($38)*($39);
      var $40=$vj;
      var $41=$vj;
      var $mul27=($40)*($41);
      var $add=($mul26)+($mul27);
      var $call28=Math.sqrt($add);
      var $div=($sub)/($call28);
      var $42=$j;
      var $43=$v2;
      var $arrayidx29=(($43+($42<<3))|0);
      HEAPF64[(($arrayidx29)>>3)]=$div;
      var $44=$vj;
      var $45=$vk;
      var $46=$vk;
      var $mul30=($45)*($46);
      var $47=$vj;
      var $48=$vj;
      var $mul31=($47)*($48);
      var $add32=($mul30)+($mul31);
      var $call33=Math.sqrt($add32);
      var $div34=($44)/($call33);
      var $49=$k;
      var $50=$v2;
      var $arrayidx35=(($50+($49<<3))|0);
      HEAPF64[(($arrayidx35)>>3)]=$div34;
      var $51=$v2;
      $retval=$51;
      label = 18; break;
    case 18: 
      var $52=$retval;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_any_normal"] = _r8vec_any_normal;
function _dge_det($n, $a, $pivot) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $pivot_addr;
      var $det;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $pivot_addr=$pivot;
      $det=1;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$det;
      var $3=$i;
      var $4=$i;
      var $5=$n_addr;
      var $mul=(Math.imul($4,$5)|0);
      var $add=((($3)+($mul))|0);
      var $6=$a_addr;
      var $arrayidx=(($6+($add<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $mul1=($2)*($7);
      $det=$mul1;
      var $8=$i;
      var $9=$pivot_addr;
      var $arrayidx2=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx2)>>2)];
      var $11=$i;
      var $add3=((($11)+(1))|0);
      var $cmp4=(($10)|(0))!=(($add3)|(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$det;
      var $sub=(-$12);
      $det=$sub;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $14=$det;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
Module["_dge_det"] = _dge_det;
function _cylinder_sample_3d($p1, $p2, $r, $n, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $r_addr;
      var $n_addr;
      var $seed_addr;
      var $axis=__stackBase__;
      var $axis_length;
      var $i;
      var $j;
      var $p;
      var $pi;
      var $radius;
      var $theta;
      var $v2=(__stackBase__)+(24);
      var $v3=(__stackBase__)+(48);
      var $z;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $r_addr=$r;
      $n_addr=$n;
      $seed_addr=$seed;
      $pi=3.141592653589793;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($axis+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($axis)|0);
      var $call=_r8vec_norm(3, $arraydecay);
      $axis_length=$call;
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp4=(($9)|(0)) < 3;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $arrayidx6=(($axis+($10<<3))|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $12=$axis_length;
      var $div=($11)/($12);
      var $13=$i;
      var $arrayidx7=(($axis+($13<<3))|0);
      HEAPF64[(($arrayidx7)>>3)]=$div;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $inc9=((($14)+(1))|0);
      $i=$inc9;
      label = 7; break;
    case 10: 
      var $15=$p1_addr;
      var $arraydecay11=(($axis)|0);
      var $arraydecay12=(($v2)|0);
      var $arraydecay13=(($v3)|0);
      _plane_normal_basis_3d($15, $arraydecay11, $arraydecay12, $arraydecay13);
      var $16=$n_addr;
      var $mul=((($16)*(3))&-1);
      var $mul14=($mul<<3);
      var $call15=_malloc($mul14);
      var $17=$call15;
      $p=$17;
      $j=0;
      label = 11; break;
    case 11: 
      var $18=$j;
      var $19=$n_addr;
      var $cmp17=(($18)|(0)) < (($19)|(0));
      if ($cmp17) { label = 12; break; } else { label = 18; break; }
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $20=$i;
      var $cmp20=(($20)|(0)) < 3;
      if ($cmp20) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $21=$r_addr;
      var $22=$seed_addr;
      var $call22=_r8_uniform_01($22);
      var $call23=Math.sqrt($call22);
      var $mul24=($21)*($call23);
      $radius=$mul24;
      var $23=$pi;
      var $mul25=($23)*(2);
      var $24=$seed_addr;
      var $call26=_r8_uniform_01($24);
      var $mul27=($mul25)*($call26);
      $theta=$mul27;
      var $25=$axis_length;
      var $26=$seed_addr;
      var $call28=_r8_uniform_01($26);
      var $mul29=($25)*($call28);
      $z=$mul29;
      var $27=$i;
      var $28=$p1_addr;
      var $arrayidx30=(($28+($27<<3))|0);
      var $29=HEAPF64[(($arrayidx30)>>3)];
      var $30=$z;
      var $31=$i;
      var $arrayidx31=(($axis+($31<<3))|0);
      var $32=HEAPF64[(($arrayidx31)>>3)];
      var $mul32=($30)*($32);
      var $add=($29)+($mul32);
      var $33=$radius;
      var $34=$theta;
      var $call33=Math.cos($34);
      var $mul34=($33)*($call33);
      var $35=$i;
      var $arrayidx35=(($v2+($35<<3))|0);
      var $36=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($mul34)*($36);
      var $add37=($add)+($mul36);
      var $37=$radius;
      var $38=$theta;
      var $call38=Math.sin($38);
      var $mul39=($37)*($call38);
      var $39=$i;
      var $arrayidx40=(($v3+($39<<3))|0);
      var $40=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($mul39)*($40);
      var $add42=($add37)+($mul41);
      var $41=$i;
      var $42=$j;
      var $mul43=((($42)*(3))&-1);
      var $add44=((($41)+($mul43))|0);
      var $43=$p;
      var $arrayidx45=(($43+($add44<<3))|0);
      HEAPF64[(($arrayidx45)>>3)]=$add42;
      label = 15; break;
    case 15: 
      var $44=$i;
      var $inc47=((($44)+(1))|0);
      $i=$inc47;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $45=$j;
      var $inc50=((($45)+(1))|0);
      $j=$inc50;
      label = 11; break;
    case 18: 
      var $46=$p;
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
Module["_cylinder_sample_3d"] = _cylinder_sample_3d;
function _cylinder_volume_3d($p1, $p2, $r) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $r_addr;
  var $h;
  var $pi;
  var $volume;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $r_addr=$r;
  $pi=3.141592653589793;
  var $0=$p1_addr;
  var $1=$p2_addr;
  var $call=_r8vec_distance(3, $0, $1);
  $h=$call;
  var $2=$pi;
  var $3=$r_addr;
  var $mul=($2)*($3);
  var $4=$r_addr;
  var $mul1=($mul)*($4);
  var $5=$h;
  var $mul2=($mul1)*($5);
  $volume=$mul2;
  var $6=$volume;
  return $6;
}
Module["_cylinder_volume_3d"] = _cylinder_volume_3d;
function _dge_fa($n, $a, $pivot) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a_addr;
      var $pivot_addr;
      var $i;
      var $ii;
      var $info;
      var $j;
      var $k;
      var $l;
      var $t;
      $n_addr=$n;
      $a_addr=$a;
      $pivot_addr=$pivot;
      $info=0;
      $k=1;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $1=$n_addr;
      var $sub=((($1)-(1))|0);
      var $cmp=(($0)|(0)) <= (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 30; break; }
    case 4: 
      var $2=$k;
      $l=$2;
      var $3=$k;
      var $add=((($3)+(1))|0);
      $i=$add;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp2=(($4)|(0)) <= (($5)|(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$l;
      var $sub4=((($6)-(1))|0);
      var $7=$k;
      var $sub5=((($7)-(1))|0);
      var $8=$n_addr;
      var $mul=(Math.imul($sub5,$8)|0);
      var $add6=((($sub4)+($mul))|0);
      var $9=$a_addr;
      var $arrayidx=(($9+($add6<<3))|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $call=_r8_abs($10);
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      var $12=$k;
      var $sub8=((($12)-(1))|0);
      var $13=$n_addr;
      var $mul9=(Math.imul($sub8,$13)|0);
      var $add10=((($sub7)+($mul9))|0);
      var $14=$a_addr;
      var $arrayidx11=(($14+($add10<<3))|0);
      var $15=HEAPF64[(($arrayidx11)>>3)];
      var $call12=_r8_abs($15);
      var $cmp13=$call < $call12;
      if ($cmp13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$i;
      $l=$16;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $18=$l;
      var $19=$k;
      var $sub14=((($19)-(1))|0);
      var $20=$pivot_addr;
      var $arrayidx15=(($20+($sub14<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$18;
      var $21=$l;
      var $sub16=((($21)-(1))|0);
      var $22=$k;
      var $sub17=((($22)-(1))|0);
      var $23=$n_addr;
      var $mul18=(Math.imul($sub17,$23)|0);
      var $add19=((($sub16)+($mul18))|0);
      var $24=$a_addr;
      var $arrayidx20=(($24+($add19<<3))|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $cmp21=$25 == 0;
      if ($cmp21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $26=$k;
      $info=$26;
      var $27=HEAP32[((_stderr)>>2)];
      var $call23=_fprintf($27, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $28=HEAP32[((_stderr)>>2)];
      var $call24=_fprintf($28, ((14648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $29=HEAP32[((_stderr)>>2)];
      var $30=$info;
      var $call25=_fprintf($29, ((14224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$30,tempInt));
      var $31=$info;
      $retval=$31;
      label = 33; break;
    case 12: 
      var $32=$l;
      var $33=$k;
      var $cmp27=(($32)|(0))!=(($33)|(0));
      if ($cmp27) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $34=$l;
      var $sub29=((($34)-(1))|0);
      var $35=$k;
      var $sub30=((($35)-(1))|0);
      var $36=$n_addr;
      var $mul31=(Math.imul($sub30,$36)|0);
      var $add32=((($sub29)+($mul31))|0);
      var $37=$a_addr;
      var $arrayidx33=(($37+($add32<<3))|0);
      var $38=HEAPF64[(($arrayidx33)>>3)];
      $t=$38;
      var $39=$k;
      var $sub34=((($39)-(1))|0);
      var $40=$k;
      var $sub35=((($40)-(1))|0);
      var $41=$n_addr;
      var $mul36=(Math.imul($sub35,$41)|0);
      var $add37=((($sub34)+($mul36))|0);
      var $42=$a_addr;
      var $arrayidx38=(($42+($add37<<3))|0);
      var $43=HEAPF64[(($arrayidx38)>>3)];
      var $44=$l;
      var $sub39=((($44)-(1))|0);
      var $45=$k;
      var $sub40=((($45)-(1))|0);
      var $46=$n_addr;
      var $mul41=(Math.imul($sub40,$46)|0);
      var $add42=((($sub39)+($mul41))|0);
      var $47=$a_addr;
      var $arrayidx43=(($47+($add42<<3))|0);
      HEAPF64[(($arrayidx43)>>3)]=$43;
      var $48=$t;
      var $49=$k;
      var $sub44=((($49)-(1))|0);
      var $50=$k;
      var $sub45=((($50)-(1))|0);
      var $51=$n_addr;
      var $mul46=(Math.imul($sub45,$51)|0);
      var $add47=((($sub44)+($mul46))|0);
      var $52=$a_addr;
      var $arrayidx48=(($52+($add47<<3))|0);
      HEAPF64[(($arrayidx48)>>3)]=$48;
      label = 14; break;
    case 14: 
      var $53=$k;
      var $add50=((($53)+(1))|0);
      $j=$add50;
      label = 15; break;
    case 15: 
      var $54=$j;
      var $55=$n_addr;
      var $cmp52=(($54)|(0)) <= (($55)|(0));
      if ($cmp52) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $56=$j;
      var $sub54=((($56)-(1))|0);
      var $57=$k;
      var $sub55=((($57)-(1))|0);
      var $58=$n_addr;
      var $mul56=(Math.imul($sub55,$58)|0);
      var $add57=((($sub54)+($mul56))|0);
      var $59=$a_addr;
      var $arrayidx58=(($59+($add57<<3))|0);
      var $60=HEAPF64[(($arrayidx58)>>3)];
      var $sub59=(-$60);
      var $61=$k;
      var $sub60=((($61)-(1))|0);
      var $62=$k;
      var $sub61=((($62)-(1))|0);
      var $63=$n_addr;
      var $mul62=(Math.imul($sub61,$63)|0);
      var $add63=((($sub60)+($mul62))|0);
      var $64=$a_addr;
      var $arrayidx64=(($64+($add63<<3))|0);
      var $65=HEAPF64[(($arrayidx64)>>3)];
      var $div=($sub59)/($65);
      var $66=$j;
      var $sub65=((($66)-(1))|0);
      var $67=$k;
      var $sub66=((($67)-(1))|0);
      var $68=$n_addr;
      var $mul67=(Math.imul($sub66,$68)|0);
      var $add68=((($sub65)+($mul67))|0);
      var $69=$a_addr;
      var $arrayidx69=(($69+($add68<<3))|0);
      HEAPF64[(($arrayidx69)>>3)]=$div;
      label = 17; break;
    case 17: 
      var $70=$j;
      var $inc71=((($70)+(1))|0);
      $j=$inc71;
      label = 15; break;
    case 18: 
      var $71=$k;
      var $add73=((($71)+(1))|0);
      $j=$add73;
      label = 19; break;
    case 19: 
      var $72=$j;
      var $73=$n_addr;
      var $cmp75=(($72)|(0)) <= (($73)|(0));
      if ($cmp75) { label = 20; break; } else { label = 28; break; }
    case 20: 
      var $74=$l;
      var $75=$k;
      var $cmp77=(($74)|(0))!=(($75)|(0));
      if ($cmp77) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $76=$l;
      var $sub79=((($76)-(1))|0);
      var $77=$j;
      var $sub80=((($77)-(1))|0);
      var $78=$n_addr;
      var $mul81=(Math.imul($sub80,$78)|0);
      var $add82=((($sub79)+($mul81))|0);
      var $79=$a_addr;
      var $arrayidx83=(($79+($add82<<3))|0);
      var $80=HEAPF64[(($arrayidx83)>>3)];
      $t=$80;
      var $81=$k;
      var $sub84=((($81)-(1))|0);
      var $82=$j;
      var $sub85=((($82)-(1))|0);
      var $83=$n_addr;
      var $mul86=(Math.imul($sub85,$83)|0);
      var $add87=((($sub84)+($mul86))|0);
      var $84=$a_addr;
      var $arrayidx88=(($84+($add87<<3))|0);
      var $85=HEAPF64[(($arrayidx88)>>3)];
      var $86=$l;
      var $sub89=((($86)-(1))|0);
      var $87=$j;
      var $sub90=((($87)-(1))|0);
      var $88=$n_addr;
      var $mul91=(Math.imul($sub90,$88)|0);
      var $add92=((($sub89)+($mul91))|0);
      var $89=$a_addr;
      var $arrayidx93=(($89+($add92<<3))|0);
      HEAPF64[(($arrayidx93)>>3)]=$85;
      var $90=$t;
      var $91=$k;
      var $sub94=((($91)-(1))|0);
      var $92=$j;
      var $sub95=((($92)-(1))|0);
      var $93=$n_addr;
      var $mul96=(Math.imul($sub95,$93)|0);
      var $add97=((($sub94)+($mul96))|0);
      var $94=$a_addr;
      var $arrayidx98=(($94+($add97<<3))|0);
      HEAPF64[(($arrayidx98)>>3)]=$90;
      label = 22; break;
    case 22: 
      var $95=$k;
      $ii=$95;
      label = 23; break;
    case 23: 
      var $96=$ii;
      var $97=$n_addr;
      var $cmp101=(($96)|(0)) < (($97)|(0));
      if ($cmp101) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $98=$ii;
      var $99=$j;
      var $sub103=((($99)-(1))|0);
      var $100=$n_addr;
      var $mul104=(Math.imul($sub103,$100)|0);
      var $add105=((($98)+($mul104))|0);
      var $101=$a_addr;
      var $arrayidx106=(($101+($add105<<3))|0);
      var $102=HEAPF64[(($arrayidx106)>>3)];
      var $103=$ii;
      var $104=$k;
      var $sub107=((($104)-(1))|0);
      var $105=$n_addr;
      var $mul108=(Math.imul($sub107,$105)|0);
      var $add109=((($103)+($mul108))|0);
      var $106=$a_addr;
      var $arrayidx110=(($106+($add109<<3))|0);
      var $107=HEAPF64[(($arrayidx110)>>3)];
      var $108=$k;
      var $sub111=((($108)-(1))|0);
      var $109=$j;
      var $sub112=((($109)-(1))|0);
      var $110=$n_addr;
      var $mul113=(Math.imul($sub112,$110)|0);
      var $add114=((($sub111)+($mul113))|0);
      var $111=$a_addr;
      var $arrayidx115=(($111+($add114<<3))|0);
      var $112=HEAPF64[(($arrayidx115)>>3)];
      var $mul116=($107)*($112);
      var $add117=($102)+($mul116);
      var $113=$ii;
      var $114=$j;
      var $sub118=((($114)-(1))|0);
      var $115=$n_addr;
      var $mul119=(Math.imul($sub118,$115)|0);
      var $add120=((($113)+($mul119))|0);
      var $116=$a_addr;
      var $arrayidx121=(($116+($add120<<3))|0);
      HEAPF64[(($arrayidx121)>>3)]=$add117;
      label = 25; break;
    case 25: 
      var $117=$ii;
      var $inc123=((($117)+(1))|0);
      $ii=$inc123;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $118=$j;
      var $inc126=((($118)+(1))|0);
      $j=$inc126;
      label = 19; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $119=$k;
      var $inc129=((($119)+(1))|0);
      $k=$inc129;
      label = 3; break;
    case 30: 
      var $120=$n_addr;
      var $121=$n_addr;
      var $sub131=((($121)-(1))|0);
      var $122=$pivot_addr;
      var $arrayidx132=(($122+($sub131<<2))|0);
      HEAP32[(($arrayidx132)>>2)]=$120;
      var $123=$n_addr;
      var $sub133=((($123)-(1))|0);
      var $124=$n_addr;
      var $sub134=((($124)-(1))|0);
      var $125=$n_addr;
      var $mul135=(Math.imul($sub134,$125)|0);
      var $add136=((($sub133)+($mul135))|0);
      var $126=$a_addr;
      var $arrayidx137=(($126+($add136<<3))|0);
      var $127=HEAPF64[(($arrayidx137)>>3)];
      var $cmp138=$127 == 0;
      if ($cmp138) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $128=$n_addr;
      $info=$128;
      var $129=HEAP32[((_stderr)>>2)];
      var $call140=_fprintf($129, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $130=HEAP32[((_stderr)>>2)];
      var $call141=_fprintf($130, ((14648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $131=HEAP32[((_stderr)>>2)];
      var $132=$info;
      var $call142=_fprintf($131, ((14224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$132,tempInt));
      label = 32; break;
    case 32: 
      var $133=$info;
      $retval=$133;
      label = 33; break;
    case 33: 
      var $134=$retval;
      STACKTOP = __stackBase__;
      return $134;
    default: assert(0, "bad label: " + label);
  }
}
Module["_dge_fa"] = _dge_fa;
function _dge_sl($n, $a, $pivot, $b, $job) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $pivot_addr;
      var $b_addr;
      var $job_addr;
      var $i;
      var $k;
      var $l;
      var $t;
      $n_addr=$n;
      $a_addr=$a;
      $pivot_addr=$pivot;
      $b_addr=$b;
      $job_addr=$job;
      var $0=$job_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 22; break; }
    case 3: 
      $k=1;
      label = 4; break;
    case 4: 
      var $1=$k;
      var $2=$n_addr;
      var $sub=((($2)-(1))|0);
      var $cmp1=(($1)|(0)) <= (($sub)|(0));
      if ($cmp1) { label = 5; break; } else { label = 13; break; }
    case 5: 
      var $3=$k;
      var $sub2=((($3)-(1))|0);
      var $4=$pivot_addr;
      var $arrayidx=(($4+($sub2<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $l=$5;
      var $6=$l;
      var $7=$k;
      var $cmp3=(($6)|(0))!=(($7)|(0));
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $8=$l;
      var $sub5=((($8)-(1))|0);
      var $9=$b_addr;
      var $arrayidx6=(($9+($sub5<<3))|0);
      var $10=HEAPF64[(($arrayidx6)>>3)];
      $t=$10;
      var $11=$k;
      var $sub7=((($11)-(1))|0);
      var $12=$b_addr;
      var $arrayidx8=(($12+($sub7<<3))|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$l;
      var $sub9=((($14)-(1))|0);
      var $15=$b_addr;
      var $arrayidx10=(($15+($sub9<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$13;
      var $16=$t;
      var $17=$k;
      var $sub11=((($17)-(1))|0);
      var $18=$b_addr;
      var $arrayidx12=(($18+($sub11<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$16;
      label = 7; break;
    case 7: 
      var $19=$k;
      var $add=((($19)+(1))|0);
      $i=$add;
      label = 8; break;
    case 8: 
      var $20=$i;
      var $21=$n_addr;
      var $cmp14=(($20)|(0)) <= (($21)|(0));
      if ($cmp14) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $22=$i;
      var $sub16=((($22)-(1))|0);
      var $23=$b_addr;
      var $arrayidx17=(($23+($sub16<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $25=$i;
      var $sub18=((($25)-(1))|0);
      var $26=$k;
      var $sub19=((($26)-(1))|0);
      var $27=$n_addr;
      var $mul=(Math.imul($sub19,$27)|0);
      var $add20=((($sub18)+($mul))|0);
      var $28=$a_addr;
      var $arrayidx21=(($28+($add20<<3))|0);
      var $29=HEAPF64[(($arrayidx21)>>3)];
      var $30=$k;
      var $sub22=((($30)-(1))|0);
      var $31=$b_addr;
      var $arrayidx23=(($31+($sub22<<3))|0);
      var $32=HEAPF64[(($arrayidx23)>>3)];
      var $mul24=($29)*($32);
      var $add25=($24)+($mul24);
      var $33=$i;
      var $sub26=((($33)-(1))|0);
      var $34=$b_addr;
      var $arrayidx27=(($34+($sub26<<3))|0);
      HEAPF64[(($arrayidx27)>>3)]=$add25;
      label = 10; break;
    case 10: 
      var $35=$i;
      var $inc=((($35)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$k;
      var $inc29=((($36)+(1))|0);
      $k=$inc29;
      label = 4; break;
    case 13: 
      var $37=$n_addr;
      $k=$37;
      label = 14; break;
    case 14: 
      var $38=$k;
      var $cmp32=1 <= (($38)|(0));
      if ($cmp32) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $39=$k;
      var $sub34=((($39)-(1))|0);
      var $40=$b_addr;
      var $arrayidx35=(($40+($sub34<<3))|0);
      var $41=HEAPF64[(($arrayidx35)>>3)];
      var $42=$k;
      var $sub36=((($42)-(1))|0);
      var $43=$k;
      var $sub37=((($43)-(1))|0);
      var $44=$n_addr;
      var $mul38=(Math.imul($sub37,$44)|0);
      var $add39=((($sub36)+($mul38))|0);
      var $45=$a_addr;
      var $arrayidx40=(($45+($add39<<3))|0);
      var $46=HEAPF64[(($arrayidx40)>>3)];
      var $div=($41)/($46);
      var $47=$k;
      var $sub41=((($47)-(1))|0);
      var $48=$b_addr;
      var $arrayidx42=(($48+($sub41<<3))|0);
      HEAPF64[(($arrayidx42)>>3)]=$div;
      $i=1;
      label = 16; break;
    case 16: 
      var $49=$i;
      var $50=$k;
      var $sub44=((($50)-(1))|0);
      var $cmp45=(($49)|(0)) <= (($sub44)|(0));
      if ($cmp45) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $51=$i;
      var $sub47=((($51)-(1))|0);
      var $52=$b_addr;
      var $arrayidx48=(($52+($sub47<<3))|0);
      var $53=HEAPF64[(($arrayidx48)>>3)];
      var $54=$i;
      var $sub49=((($54)-(1))|0);
      var $55=$k;
      var $sub50=((($55)-(1))|0);
      var $56=$n_addr;
      var $mul51=(Math.imul($sub50,$56)|0);
      var $add52=((($sub49)+($mul51))|0);
      var $57=$a_addr;
      var $arrayidx53=(($57+($add52<<3))|0);
      var $58=HEAPF64[(($arrayidx53)>>3)];
      var $59=$k;
      var $sub54=((($59)-(1))|0);
      var $60=$b_addr;
      var $arrayidx55=(($60+($sub54<<3))|0);
      var $61=HEAPF64[(($arrayidx55)>>3)];
      var $mul56=($58)*($61);
      var $sub57=($53)-($mul56);
      var $62=$i;
      var $sub58=((($62)-(1))|0);
      var $63=$b_addr;
      var $arrayidx59=(($63+($sub58<<3))|0);
      HEAPF64[(($arrayidx59)>>3)]=$sub57;
      label = 18; break;
    case 18: 
      var $64=$i;
      var $inc61=((($64)+(1))|0);
      $i=$inc61;
      label = 16; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $65=$k;
      var $dec=((($65)-(1))|0);
      $k=$dec;
      label = 14; break;
    case 21: 
      label = 41; break;
    case 22: 
      $k=1;
      label = 23; break;
    case 23: 
      var $66=$k;
      var $67=$n_addr;
      var $cmp66=(($66)|(0)) <= (($67)|(0));
      if ($cmp66) { label = 24; break; } else { label = 30; break; }
    case 24: 
      $t=0;
      $i=1;
      label = 25; break;
    case 25: 
      var $68=$i;
      var $69=$k;
      var $sub69=((($69)-(1))|0);
      var $cmp70=(($68)|(0)) <= (($sub69)|(0));
      if ($cmp70) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $70=$t;
      var $71=$i;
      var $sub72=((($71)-(1))|0);
      var $72=$b_addr;
      var $arrayidx73=(($72+($sub72<<3))|0);
      var $73=HEAPF64[(($arrayidx73)>>3)];
      var $74=$i;
      var $sub74=((($74)-(1))|0);
      var $75=$k;
      var $sub75=((($75)-(1))|0);
      var $76=$n_addr;
      var $mul76=(Math.imul($sub75,$76)|0);
      var $add77=((($sub74)+($mul76))|0);
      var $77=$a_addr;
      var $arrayidx78=(($77+($add77<<3))|0);
      var $78=HEAPF64[(($arrayidx78)>>3)];
      var $mul79=($73)*($78);
      var $add80=($70)+($mul79);
      $t=$add80;
      label = 27; break;
    case 27: 
      var $79=$i;
      var $inc82=((($79)+(1))|0);
      $i=$inc82;
      label = 25; break;
    case 28: 
      var $80=$k;
      var $sub84=((($80)-(1))|0);
      var $81=$b_addr;
      var $arrayidx85=(($81+($sub84<<3))|0);
      var $82=HEAPF64[(($arrayidx85)>>3)];
      var $83=$t;
      var $sub86=($82)-($83);
      var $84=$k;
      var $sub87=((($84)-(1))|0);
      var $85=$k;
      var $sub88=((($85)-(1))|0);
      var $86=$n_addr;
      var $mul89=(Math.imul($sub88,$86)|0);
      var $add90=((($sub87)+($mul89))|0);
      var $87=$a_addr;
      var $arrayidx91=(($87+($add90<<3))|0);
      var $88=HEAPF64[(($arrayidx91)>>3)];
      var $div92=($sub86)/($88);
      var $89=$k;
      var $sub93=((($89)-(1))|0);
      var $90=$b_addr;
      var $arrayidx94=(($90+($sub93<<3))|0);
      HEAPF64[(($arrayidx94)>>3)]=$div92;
      label = 29; break;
    case 29: 
      var $91=$k;
      var $inc96=((($91)+(1))|0);
      $k=$inc96;
      label = 23; break;
    case 30: 
      var $92=$n_addr;
      var $sub98=((($92)-(1))|0);
      $k=$sub98;
      label = 31; break;
    case 31: 
      var $93=$k;
      var $cmp100=1 <= (($93)|(0));
      if ($cmp100) { label = 32; break; } else { label = 40; break; }
    case 32: 
      $t=0;
      var $94=$k;
      var $add102=((($94)+(1))|0);
      $i=$add102;
      label = 33; break;
    case 33: 
      var $95=$i;
      var $96=$n_addr;
      var $cmp104=(($95)|(0)) <= (($96)|(0));
      if ($cmp104) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $97=$t;
      var $98=$i;
      var $sub106=((($98)-(1))|0);
      var $99=$b_addr;
      var $arrayidx107=(($99+($sub106<<3))|0);
      var $100=HEAPF64[(($arrayidx107)>>3)];
      var $101=$i;
      var $sub108=((($101)-(1))|0);
      var $102=$k;
      var $sub109=((($102)-(1))|0);
      var $103=$n_addr;
      var $mul110=(Math.imul($sub109,$103)|0);
      var $add111=((($sub108)+($mul110))|0);
      var $104=$a_addr;
      var $arrayidx112=(($104+($add111<<3))|0);
      var $105=HEAPF64[(($arrayidx112)>>3)];
      var $mul113=($100)*($105);
      var $add114=($97)+($mul113);
      $t=$add114;
      label = 35; break;
    case 35: 
      var $106=$i;
      var $inc116=((($106)+(1))|0);
      $i=$inc116;
      label = 33; break;
    case 36: 
      var $107=$k;
      var $sub118=((($107)-(1))|0);
      var $108=$b_addr;
      var $arrayidx119=(($108+($sub118<<3))|0);
      var $109=HEAPF64[(($arrayidx119)>>3)];
      var $110=$t;
      var $add120=($109)+($110);
      var $111=$k;
      var $sub121=((($111)-(1))|0);
      var $112=$b_addr;
      var $arrayidx122=(($112+($sub121<<3))|0);
      HEAPF64[(($arrayidx122)>>3)]=$add120;
      var $113=$k;
      var $sub123=((($113)-(1))|0);
      var $114=$pivot_addr;
      var $arrayidx124=(($114+($sub123<<2))|0);
      var $115=HEAP32[(($arrayidx124)>>2)];
      $l=$115;
      var $116=$l;
      var $117=$k;
      var $cmp125=(($116)|(0))!=(($117)|(0));
      if ($cmp125) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $118=$l;
      var $sub127=((($118)-(1))|0);
      var $119=$b_addr;
      var $arrayidx128=(($119+($sub127<<3))|0);
      var $120=HEAPF64[(($arrayidx128)>>3)];
      $t=$120;
      var $121=$k;
      var $sub129=((($121)-(1))|0);
      var $122=$b_addr;
      var $arrayidx130=(($122+($sub129<<3))|0);
      var $123=HEAPF64[(($arrayidx130)>>3)];
      var $124=$l;
      var $sub131=((($124)-(1))|0);
      var $125=$b_addr;
      var $arrayidx132=(($125+($sub131<<3))|0);
      HEAPF64[(($arrayidx132)>>3)]=$123;
      var $126=$t;
      var $127=$k;
      var $sub133=((($127)-(1))|0);
      var $128=$b_addr;
      var $arrayidx134=(($128+($sub133<<3))|0);
      HEAPF64[(($arrayidx134)>>3)]=$126;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $129=$k;
      var $dec137=((($129)-(1))|0);
      $k=$dec137;
      label = 31; break;
    case 40: 
      label = 41; break;
    case 41: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_dge_sl"] = _dge_sl;
function _direction_pert_3d($sigma, $vbase, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $sigma_addr;
      var $vbase_addr;
      var $seed_addr;
      var $dphi;
      var $p=__stackBase__;
      var $phi;
      var $pi;
      var $psi;
      var $theta;
      var $vdot;
      var $vran;
      var $x;
      $sigma_addr=$sigma;
      $vbase_addr=$vbase;
      $seed_addr=$seed;
      $pi=3.141592653589793;
      var $call=_malloc(24);
      var $0=$call;
      $vran=$0;
      var $1=$sigma_addr;
      var $cmp=1 <= $1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$vbase_addr;
      var $3=$vran;
      _r8vec_copy(3, $2, $3);
      label = 8; break;
    case 4: 
      var $4=$sigma_addr;
      var $cmp1=$4 <= 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$seed_addr;
      var $call3=_r8_uniform_01($5);
      $vdot=$call3;
      var $6=$vdot;
      var $mul=($6)*(2);
      var $sub=($mul)-(1);
      $vdot=$sub;
      var $7=$vdot;
      var $call4=Math.acos($7);
      $phi=$call4;
      var $8=$seed_addr;
      var $call5=_r8_uniform_01($8);
      $theta=$call5;
      var $9=$pi;
      var $mul6=($9)*(2);
      var $10=$theta;
      var $mul7=($mul6)*($10);
      $theta=$mul7;
      var $11=$theta;
      var $call8=Math.cos($11);
      var $12=$phi;
      var $call9=Math.sin($12);
      var $mul10=($call8)*($call9);
      var $13=$vran;
      var $arrayidx=(($13)|0);
      HEAPF64[(($arrayidx)>>3)]=$mul10;
      var $14=$theta;
      var $call11=Math.sin($14);
      var $15=$phi;
      var $call12=Math.sin($15);
      var $mul13=($call11)*($call12);
      var $16=$vran;
      var $arrayidx14=(($16+8)|0);
      HEAPF64[(($arrayidx14)>>3)]=$mul13;
      var $17=$phi;
      var $call15=Math.cos($17);
      var $18=$vran;
      var $arrayidx16=(($18+16)|0);
      HEAPF64[(($arrayidx16)>>3)]=$call15;
      label = 7; break;
    case 6: 
      var $19=$vbase_addr;
      var $arrayidx18=(($19+16)|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $call19=Math.acos($20);
      $phi=$call19;
      var $21=$vbase_addr;
      var $arrayidx20=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx20)>>3)];
      var $23=$vbase_addr;
      var $arrayidx21=(($23)|0);
      var $24=HEAPF64[(($arrayidx21)>>3)];
      var $call22=Math.atan2($22, $24);
      $theta=$call22;
      var $25=$seed_addr;
      var $call23=_r8_uniform_01($25);
      $x=$call23;
      var $26=$sigma_addr;
      var $sub24=(1)-($26);
      var $27=$x;
      var $call25=Math.log($27);
      var $mul26=($sub24)*($call25);
      var $call27=Math.exp($mul26);
      $x=$call27;
      var $28=$x;
      var $mul28=($28)*(2);
      var $sub29=($mul28)-(1);
      $vdot=$sub29;
      var $29=$vdot;
      var $call30=Math.acos($29);
      $dphi=$call30;
      var $30=$theta;
      var $call31=Math.cos($30);
      var $31=$phi;
      var $32=$dphi;
      var $add=($31)+($32);
      var $call32=Math.sin($add);
      var $mul33=($call31)*($call32);
      var $arrayidx34=(($p)|0);
      HEAPF64[(($arrayidx34)>>3)]=$mul33;
      var $33=$theta;
      var $call35=Math.sin($33);
      var $34=$phi;
      var $35=$dphi;
      var $add36=($34)+($35);
      var $call37=Math.sin($add36);
      var $mul38=($call35)*($call37);
      var $arrayidx39=(($p+8)|0);
      HEAPF64[(($arrayidx39)>>3)]=$mul38;
      var $36=$phi;
      var $37=$dphi;
      var $add40=($36)+($37);
      var $call41=Math.cos($add40);
      var $arrayidx42=(($p+16)|0);
      HEAPF64[(($arrayidx42)>>3)]=$call41;
      var $38=$seed_addr;
      var $call43=_r8_uniform_01($38);
      $psi=$call43;
      var $39=$pi;
      var $mul44=($39)*(2);
      var $40=$psi;
      var $mul45=($mul44)*($40);
      $psi=$mul45;
      var $arraydecay=(($p)|0);
      var $41=$vbase_addr;
      var $42=$psi;
      var $43=$vran;
      _vector_rotate_3d($arraydecay, $41, $42, $43);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $44=$vran;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_direction_pert_3d"] = _direction_pert_3d;
function _vector_rotate_3d($p1, $pa, $angle, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $pa_addr;
      var $angle_addr;
      var $p2_addr;
      var $axis_norm;
      var $dot;
      var $normn;
      var $pn=__stackBase__;
      var $pn2;
      var $pp=(__stackBase__)+(24);
      var $pr=(__stackBase__)+(48);
      $p1_addr=$p1;
      $pa_addr=$pa;
      $angle_addr=$angle;
      $p2_addr=$p2;
      var $0=$pa_addr;
      var $call=_r8vec_norm(3, $0);
      $axis_norm=$call;
      var $1=$axis_norm;
      var $cmp=$1 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$p1_addr;
      var $3=$p2_addr;
      _r8vec_copy(3, $2, $3);
      label = 7; break;
    case 4: 
      var $4=$p1_addr;
      var $5=$pa_addr;
      var $call1=_r8vec_dot_product(3, $4, $5);
      var $6=$axis_norm;
      var $div=($call1)/($6);
      $dot=$div;
      var $7=$dot;
      var $8=$pa_addr;
      var $arrayidx=(($8)|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $mul=($7)*($9);
      var $10=$axis_norm;
      var $div2=($mul)/($10);
      var $arrayidx3=(($pp)|0);
      HEAPF64[(($arrayidx3)>>3)]=$div2;
      var $11=$dot;
      var $12=$pa_addr;
      var $arrayidx4=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $mul5=($11)*($13);
      var $14=$axis_norm;
      var $div6=($mul5)/($14);
      var $arrayidx7=(($pp+8)|0);
      HEAPF64[(($arrayidx7)>>3)]=$div6;
      var $15=$dot;
      var $16=$pa_addr;
      var $arrayidx8=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $mul9=($15)*($17);
      var $18=$axis_norm;
      var $div10=($mul9)/($18);
      var $arrayidx11=(($pp+16)|0);
      HEAPF64[(($arrayidx11)>>3)]=$div10;
      var $19=$p1_addr;
      var $arrayidx12=(($19)|0);
      var $20=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($pp)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $sub=($20)-($21);
      var $arrayidx14=(($pn)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub;
      var $22=$p1_addr;
      var $arrayidx15=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx15)>>3)];
      var $arrayidx16=(($pp+8)|0);
      var $24=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($23)-($24);
      var $arrayidx18=(($pn+8)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $25=$p1_addr;
      var $arrayidx19=(($25+16)|0);
      var $26=HEAPF64[(($arrayidx19)>>3)];
      var $arrayidx20=(($pp+16)|0);
      var $27=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($26)-($27);
      var $arrayidx22=(($pn+16)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $arraydecay=(($pn)|0);
      var $call23=_r8vec_norm(3, $arraydecay);
      $normn=$call23;
      var $28=$normn;
      var $cmp24=$28 == 0;
      if ($cmp24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arraydecay26=(($pp)|0);
      var $29=$p2_addr;
      _r8vec_copy(3, $arraydecay26, $29);
      label = 7; break;
    case 6: 
      var $arraydecay28=(($pn)|0);
      _vector_unit_nd(3, $arraydecay28);
      var $30=$pa_addr;
      var $arraydecay29=(($pn)|0);
      var $call30=_r8vec_cross_product_3d($30, $arraydecay29);
      $pn2=$call30;
      var $31=$pn2;
      _vector_unit_nd(3, $31);
      var $32=$normn;
      var $33=$angle_addr;
      var $call31=Math.cos($33);
      var $arrayidx32=(($pn)|0);
      var $34=HEAPF64[(($arrayidx32)>>3)];
      var $mul33=($call31)*($34);
      var $35=$angle_addr;
      var $call34=Math.sin($35);
      var $36=$pn2;
      var $arrayidx35=(($36)|0);
      var $37=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($call34)*($37);
      var $add=($mul33)+($mul36);
      var $mul37=($32)*($add);
      var $arrayidx38=(($pr)|0);
      HEAPF64[(($arrayidx38)>>3)]=$mul37;
      var $38=$normn;
      var $39=$angle_addr;
      var $call39=Math.cos($39);
      var $arrayidx40=(($pn+8)|0);
      var $40=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($call39)*($40);
      var $41=$angle_addr;
      var $call42=Math.sin($41);
      var $42=$pn2;
      var $arrayidx43=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx43)>>3)];
      var $mul44=($call42)*($43);
      var $add45=($mul41)+($mul44);
      var $mul46=($38)*($add45);
      var $arrayidx47=(($pr+8)|0);
      HEAPF64[(($arrayidx47)>>3)]=$mul46;
      var $44=$normn;
      var $45=$angle_addr;
      var $call48=Math.cos($45);
      var $arrayidx49=(($pn+16)|0);
      var $46=HEAPF64[(($arrayidx49)>>3)];
      var $mul50=($call48)*($46);
      var $47=$angle_addr;
      var $call51=Math.sin($47);
      var $48=$pn2;
      var $arrayidx52=(($48+16)|0);
      var $49=HEAPF64[(($arrayidx52)>>3)];
      var $mul53=($call51)*($49);
      var $add54=($mul50)+($mul53);
      var $mul55=($44)*($add54);
      var $arrayidx56=(($pr+16)|0);
      HEAPF64[(($arrayidx56)>>3)]=$mul55;
      var $50=$pn2;
      var $51=$50;
      _free($51);
      var $arrayidx57=(($pp)|0);
      var $52=HEAPF64[(($arrayidx57)>>3)];
      var $arrayidx58=(($pr)|0);
      var $53=HEAPF64[(($arrayidx58)>>3)];
      var $add59=($52)+($53);
      var $54=$p2_addr;
      var $arrayidx60=(($54)|0);
      HEAPF64[(($arrayidx60)>>3)]=$add59;
      var $arrayidx61=(($pp+8)|0);
      var $55=HEAPF64[(($arrayidx61)>>3)];
      var $arrayidx62=(($pr+8)|0);
      var $56=HEAPF64[(($arrayidx62)>>3)];
      var $add63=($55)+($56);
      var $57=$p2_addr;
      var $arrayidx64=(($57+8)|0);
      HEAPF64[(($arrayidx64)>>3)]=$add63;
      var $arrayidx65=(($pp+16)|0);
      var $58=HEAPF64[(($arrayidx65)>>3)];
      var $arrayidx66=(($pr+16)|0);
      var $59=HEAPF64[(($arrayidx66)>>3)];
      var $add67=($58)+($59);
      var $60=$p2_addr;
      var $arrayidx68=(($60+16)|0);
      HEAPF64[(($arrayidx68)>>3)]=$add67;
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_vector_rotate_3d"] = _vector_rotate_3d;
function _direction_uniform_2d($seed) {
  var label = 0;
  var $seed_addr;
  var $pi;
  var $theta;
  var $vran;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$seed_addr;
  var $call=_r8_uniform_01($0);
  $theta=$call;
  var $1=$pi;
  var $mul=($1)*(2);
  var $2=$theta;
  var $mul1=($mul)*($2);
  $theta=$mul1;
  var $call2=_malloc(16);
  var $3=$call2;
  $vran=$3;
  var $4=$theta;
  var $call3=Math.cos($4);
  var $5=$vran;
  var $arrayidx=(($5)|0);
  HEAPF64[(($arrayidx)>>3)]=$call3;
  var $6=$theta;
  var $call4=Math.sin($6);
  var $7=$vran;
  var $arrayidx5=(($7+8)|0);
  HEAPF64[(($arrayidx5)>>3)]=$call4;
  var $8=$vran;
  return $8;
}
Module["_direction_uniform_2d"] = _direction_uniform_2d;
function _direction_uniform_3d($seed) {
  var label = 0;
  var $seed_addr;
  var $phi;
  var $pi;
  var $theta;
  var $vdot;
  var $vran;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$seed_addr;
  var $call=_r8_uniform_01($0);
  $vdot=$call;
  var $1=$vdot;
  var $mul=($1)*(2);
  var $sub=($mul)-(1);
  $vdot=$sub;
  var $2=$vdot;
  var $call1=Math.acos($2);
  $phi=$call1;
  var $3=$seed_addr;
  var $call2=_r8_uniform_01($3);
  $theta=$call2;
  var $4=$pi;
  var $mul3=($4)*(2);
  var $5=$theta;
  var $mul4=($mul3)*($5);
  $theta=$mul4;
  var $call5=_malloc(24);
  var $6=$call5;
  $vran=$6;
  var $7=$theta;
  var $call6=Math.cos($7);
  var $8=$phi;
  var $call7=Math.sin($8);
  var $mul8=($call6)*($call7);
  var $9=$vran;
  var $arrayidx=(($9)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul8;
  var $10=$theta;
  var $call9=Math.sin($10);
  var $11=$phi;
  var $call10=Math.sin($11);
  var $mul11=($call9)*($call10);
  var $12=$vran;
  var $arrayidx12=(($12+8)|0);
  HEAPF64[(($arrayidx12)>>3)]=$mul11;
  var $13=$phi;
  var $call13=Math.cos($13);
  var $14=$vran;
  var $arrayidx14=(($14+16)|0);
  HEAPF64[(($arrayidx14)>>3)]=$call13;
  var $15=$vran;
  return $15;
}
Module["_direction_uniform_3d"] = _direction_uniform_3d;
function _direction_uniform_nd($dim_num, $seed) {
  var label = 0;
  var $dim_num_addr;
  var $seed_addr;
  var $a;
  $dim_num_addr=$dim_num;
  $seed_addr=$seed;
  var $0=$dim_num_addr;
  var $1=$seed_addr;
  var $call=_r8vec_normal_01_new($0, $1);
  $a=$call;
  var $2=$dim_num_addr;
  var $3=$a;
  _vector_unit_nd($2, $3);
  var $4=$a;
  return $4;
}
Module["_direction_uniform_nd"] = _direction_uniform_nd;
function _dodec_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=20;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=30;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=12;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=5;
  return;
}
Module["_dodec_size_3d"] = _dodec_size_3d;
function _dms_to_radians($degrees, $minutes, $seconds) {
  var label = 0;
  var $degrees_addr;
  var $minutes_addr;
  var $seconds_addr;
  var $angle;
  var $pi;
  var $radians;
  $degrees_addr=$degrees;
  $minutes_addr=$minutes;
  $seconds_addr=$seconds;
  $pi=3.141592653589793;
  var $0=$degrees_addr;
  var $conv=(($0)|(0));
  var $1=$minutes_addr;
  var $conv1=(($1)|(0));
  var $2=$seconds_addr;
  var $conv2=(($2)|(0));
  var $div=($conv2)/(60);
  var $add=($conv1)+($div);
  var $div3=($add)/(60);
  var $add4=($conv)+($div3);
  $angle=$add4;
  var $3=$angle;
  var $div5=($3)/(180);
  var $4=$pi;
  var $mul=($div5)*($4);
  $radians=$mul;
  var $5=$radians;
  return $5;
}
Module["_dms_to_radians"] = _dms_to_radians;
function _r8vec_normal_01_new($n, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $seed_addr;
      var $i;
      var $m;
      var $r;
      var $x;
      var $x_hi;
      var $x_lo;
      $n_addr=$n;
      $seed_addr=$seed;
      var $0=$n_addr;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $x=$1;
      var $2=$n_addr;
      var $cmp=(($2)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[((4768)>>2)]=0;
      HEAP32[((4760)>>2)]=0;
      HEAPF64[((4752)>>3)]=0;
      $retval=0;
      label = 27; break;
    case 4: 
      var $3=$n_addr;
      var $cmp1=(($3)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 27; break;
    case 6: 
      label = 7; break;
    case 7: 
      $x_lo=1;
      var $4=$n_addr;
      $x_hi=$4;
      var $5=HEAP32[((4760)>>2)];
      var $cmp4=(($5)|(0))==1;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $6=HEAPF64[((4752)>>3)];
      var $7=$x;
      var $arrayidx=(($7)|0);
      HEAPF64[(($arrayidx)>>3)]=$6;
      HEAP32[((4760)>>2)]=0;
      $x_lo=2;
      label = 9; break;
    case 9: 
      var $8=$x_hi;
      var $9=$x_lo;
      var $sub=((($8)-($9))|0);
      var $add=((($sub)+(1))|0);
      var $cmp7=(($add)|(0))==0;
      if ($cmp7) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 26; break;
    case 11: 
      var $10=$x_hi;
      var $11=$x_lo;
      var $sub10=((($10)-($11))|0);
      var $add11=((($sub10)+(1))|0);
      var $cmp12=(($add11)|(0))==1;
      if ($cmp12) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $12=$seed_addr;
      var $call14=_r8vec_uniform_01_new(2, $12);
      $r=$call14;
      var $13=$r;
      var $arrayidx15=(($13)|0);
      var $14=HEAPF64[(($arrayidx15)>>3)];
      var $call16=Math.log($14);
      var $mul17=($call16)*(-2);
      var $call18=Math.sqrt($mul17);
      var $15=$r;
      var $arrayidx19=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx19)>>3)];
      var $mul20=($16)*(6.283185307179586);
      var $call21=Math.cos($mul20);
      var $mul22=($call18)*($call21);
      var $17=$x_hi;
      var $sub23=((($17)-(1))|0);
      var $18=$x;
      var $arrayidx24=(($18+($sub23<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$mul22;
      var $19=$r;
      var $arrayidx25=(($19)|0);
      var $20=HEAPF64[(($arrayidx25)>>3)];
      var $call26=Math.log($20);
      var $mul27=($call26)*(-2);
      var $call28=Math.sqrt($mul27);
      var $21=$r;
      var $arrayidx29=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx29)>>3)];
      var $mul30=($22)*(6.283185307179586);
      var $call31=Math.sin($mul30);
      var $mul32=($call28)*($call31);
      HEAPF64[((4752)>>3)]=$mul32;
      HEAP32[((4760)>>2)]=1;
      var $23=HEAP32[((4768)>>2)];
      var $add33=((($23)+(2))|0);
      HEAP32[((4768)>>2)]=$add33;
      var $24=$r;
      var $25=$24;
      _free($25);
      label = 25; break;
    case 13: 
      var $26=$x_hi;
      var $27=$x_lo;
      var $sub35=((($26)-($27))|0);
      var $add36=((($sub35)+(1))|0);
      var $rem=((((($add36)|(0)))%(2))&-1);
      var $cmp37=(($rem)|(0))==0;
      if ($cmp37) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $28=$x_hi;
      var $29=$x_lo;
      var $sub39=((($28)-($29))|0);
      var $add40=((($sub39)+(1))|0);
      var $div=((((($add40)|(0)))/(2))&-1);
      $m=$div;
      var $30=$m;
      var $mul41=($30<<1);
      var $31=$seed_addr;
      var $call42=_r8vec_uniform_01_new($mul41, $31);
      $r=$call42;
      $i=0;
      label = 15; break;
    case 15: 
      var $32=$i;
      var $33=$m;
      var $mul43=($33<<1);
      var $sub44=((($mul43)-(2))|0);
      var $cmp45=(($32)|(0)) <= (($sub44)|(0));
      if ($cmp45) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $34=$i;
      var $35=$r;
      var $arrayidx46=(($35+($34<<3))|0);
      var $36=HEAPF64[(($arrayidx46)>>3)];
      var $call47=Math.log($36);
      var $mul48=($call47)*(-2);
      var $call49=Math.sqrt($mul48);
      var $37=$i;
      var $add50=((($37)+(1))|0);
      var $38=$r;
      var $arrayidx51=(($38+($add50<<3))|0);
      var $39=HEAPF64[(($arrayidx51)>>3)];
      var $mul52=($39)*(6.283185307179586);
      var $call53=Math.cos($mul52);
      var $mul54=($call49)*($call53);
      var $40=$x_lo;
      var $41=$i;
      var $add55=((($40)+($41))|0);
      var $sub56=((($add55)-(1))|0);
      var $42=$x;
      var $arrayidx57=(($42+($sub56<<3))|0);
      HEAPF64[(($arrayidx57)>>3)]=$mul54;
      var $43=$i;
      var $44=$r;
      var $arrayidx58=(($44+($43<<3))|0);
      var $45=HEAPF64[(($arrayidx58)>>3)];
      var $call59=Math.log($45);
      var $mul60=($call59)*(-2);
      var $call61=Math.sqrt($mul60);
      var $46=$i;
      var $add62=((($46)+(1))|0);
      var $47=$r;
      var $arrayidx63=(($47+($add62<<3))|0);
      var $48=HEAPF64[(($arrayidx63)>>3)];
      var $mul64=($48)*(6.283185307179586);
      var $call65=Math.sin($mul64);
      var $mul66=($call61)*($call65);
      var $49=$x_lo;
      var $50=$i;
      var $add67=((($49)+($50))|0);
      var $51=$x;
      var $arrayidx68=(($51+($add67<<3))|0);
      HEAPF64[(($arrayidx68)>>3)]=$mul66;
      label = 17; break;
    case 17: 
      var $52=$i;
      var $add69=((($52)+(2))|0);
      $i=$add69;
      label = 15; break;
    case 18: 
      var $53=HEAP32[((4768)>>2)];
      var $54=$x_hi;
      var $add70=((($53)+($54))|0);
      var $55=$x_lo;
      var $sub71=((($add70)-($55))|0);
      var $add72=((($sub71)+(1))|0);
      HEAP32[((4768)>>2)]=$add72;
      var $56=$r;
      var $57=$56;
      _free($57);
      label = 24; break;
    case 19: 
      var $58=$x_hi;
      var $sub74=((($58)-(1))|0);
      $x_hi=$sub74;
      var $59=$x_hi;
      var $60=$x_lo;
      var $sub75=((($59)-($60))|0);
      var $add76=((($sub75)+(1))|0);
      var $div77=((((($add76)|(0)))/(2))&-1);
      var $add78=((($div77)+(1))|0);
      $m=$add78;
      var $61=$m;
      var $mul79=($61<<1);
      var $62=$seed_addr;
      var $call80=_r8vec_uniform_01_new($mul79, $62);
      $r=$call80;
      $i=0;
      label = 20; break;
    case 20: 
      var $63=$i;
      var $64=$m;
      var $mul82=($64<<1);
      var $sub83=((($mul82)-(4))|0);
      var $cmp84=(($63)|(0)) <= (($sub83)|(0));
      if ($cmp84) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $65=$i;
      var $66=$r;
      var $arrayidx86=(($66+($65<<3))|0);
      var $67=HEAPF64[(($arrayidx86)>>3)];
      var $call87=Math.log($67);
      var $mul88=($call87)*(-2);
      var $call89=Math.sqrt($mul88);
      var $68=$i;
      var $add90=((($68)+(1))|0);
      var $69=$r;
      var $arrayidx91=(($69+($add90<<3))|0);
      var $70=HEAPF64[(($arrayidx91)>>3)];
      var $mul92=($70)*(6.283185307179586);
      var $call93=Math.cos($mul92);
      var $mul94=($call89)*($call93);
      var $71=$x_lo;
      var $72=$i;
      var $add95=((($71)+($72))|0);
      var $sub96=((($add95)-(1))|0);
      var $73=$x;
      var $arrayidx97=(($73+($sub96<<3))|0);
      HEAPF64[(($arrayidx97)>>3)]=$mul94;
      var $74=$i;
      var $75=$r;
      var $arrayidx98=(($75+($74<<3))|0);
      var $76=HEAPF64[(($arrayidx98)>>3)];
      var $call99=Math.log($76);
      var $mul100=($call99)*(-2);
      var $call101=Math.sqrt($mul100);
      var $77=$i;
      var $add102=((($77)+(1))|0);
      var $78=$r;
      var $arrayidx103=(($78+($add102<<3))|0);
      var $79=HEAPF64[(($arrayidx103)>>3)];
      var $mul104=($79)*(6.283185307179586);
      var $call105=Math.sin($mul104);
      var $mul106=($call101)*($call105);
      var $80=$x_lo;
      var $81=$i;
      var $add107=((($80)+($81))|0);
      var $82=$x;
      var $arrayidx108=(($82+($add107<<3))|0);
      HEAPF64[(($arrayidx108)>>3)]=$mul106;
      label = 22; break;
    case 22: 
      var $83=$i;
      var $add110=((($83)+(2))|0);
      $i=$add110;
      label = 20; break;
    case 23: 
      var $84=$m;
      var $mul112=($84<<1);
      var $sub113=((($mul112)-(2))|0);
      $i=$sub113;
      var $85=$i;
      var $86=$r;
      var $arrayidx114=(($86+($85<<3))|0);
      var $87=HEAPF64[(($arrayidx114)>>3)];
      var $call115=Math.log($87);
      var $mul116=($call115)*(-2);
      var $call117=Math.sqrt($mul116);
      var $88=$i;
      var $add118=((($88)+(1))|0);
      var $89=$r;
      var $arrayidx119=(($89+($add118<<3))|0);
      var $90=HEAPF64[(($arrayidx119)>>3)];
      var $mul120=($90)*(6.283185307179586);
      var $call121=Math.cos($mul120);
      var $mul122=($call117)*($call121);
      var $91=$x_lo;
      var $92=$i;
      var $add123=((($91)+($92))|0);
      var $sub124=((($add123)-(1))|0);
      var $93=$x;
      var $arrayidx125=(($93+($sub124<<3))|0);
      HEAPF64[(($arrayidx125)>>3)]=$mul122;
      var $94=$i;
      var $95=$r;
      var $arrayidx126=(($95+($94<<3))|0);
      var $96=HEAPF64[(($arrayidx126)>>3)];
      var $call127=Math.log($96);
      var $mul128=($call127)*(-2);
      var $call129=Math.sqrt($mul128);
      var $97=$i;
      var $add130=((($97)+(1))|0);
      var $98=$r;
      var $arrayidx131=(($98+($add130<<3))|0);
      var $99=HEAPF64[(($arrayidx131)>>3)];
      var $mul132=($99)*(6.283185307179586);
      var $call133=Math.sin($mul132);
      var $mul134=($call129)*($call133);
      HEAPF64[((4752)>>3)]=$mul134;
      HEAP32[((4760)>>2)]=1;
      var $100=HEAP32[((4768)>>2)];
      var $101=$x_hi;
      var $add135=((($100)+($101))|0);
      var $102=$x_lo;
      var $sub136=((($add135)-($102))|0);
      var $add137=((($sub136)+(2))|0);
      HEAP32[((4768)>>2)]=$add137;
      var $103=$r;
      var $104=$103;
      _free($104);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $105=$x;
      $retval=$105;
      label = 27; break;
    case 27: 
      var $106=$retval;
      return $106;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_normal_01_new"] = _r8vec_normal_01_new;
function _vector_unit_nd($dim_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $p_addr;
      var $i;
      var $norm;
      $dim_num_addr=$dim_num;
      $p_addr=$p;
      var $0=$dim_num_addr;
      var $1=$p_addr;
      var $call=_r8vec_norm($0, $1);
      $norm=$call;
      var $2=$norm;
      var $cmp=$2 != 0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $3=$i;
      var $4=$dim_num_addr;
      var $cmp1=(($3)|(0)) < (($4)|(0));
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $5=$i;
      var $6=$p_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$norm;
      var $div=($7)/($8);
      var $9=$i;
      var $10=$p_addr;
      var $arrayidx2=(($10+($9<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$div;
      label = 6; break;
    case 6: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_vector_unit_nd"] = _vector_unit_nd;
function _dodec_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 480)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $point_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  var $point_coord_addr;
  var $face_order_addr;
  var $face_point_addr;
  var $point_coord_save=__stackBase__;
  $point_num_addr=$point_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  $point_coord_addr=$point_coord;
  $face_order_addr=$face_order;
  $face_point_addr=$face_point;
  var $call=Math.sqrt(3);
  var $div=(1)/($call);
  var $arrayidx=(($point_coord_save)|0);
  HEAPF64[(($arrayidx)>>3)]=$div;
  var $call1=Math.sqrt(3);
  var $div2=(1)/($call1);
  var $arrayidx3=(($point_coord_save+8)|0);
  HEAPF64[(($arrayidx3)>>3)]=$div2;
  var $call4=Math.sqrt(3);
  var $div5=(1)/($call4);
  var $arrayidx6=(($point_coord_save+16)|0);
  HEAPF64[(($arrayidx6)>>3)]=$div5;
  var $call7=Math.sqrt(3);
  var $div8=(1)/($call7);
  var $arrayidx9=(($point_coord_save+24)|0);
  HEAPF64[(($arrayidx9)>>3)]=$div8;
  var $call10=Math.sqrt(3);
  var $div11=(1)/($call10);
  var $arrayidx12=(($point_coord_save+32)|0);
  HEAPF64[(($arrayidx12)>>3)]=$div11;
  var $call13=Math.sqrt(3);
  var $div14=(-1)/($call13);
  var $arrayidx15=(($point_coord_save+40)|0);
  HEAPF64[(($arrayidx15)>>3)]=$div14;
  var $call16=Math.sqrt(3);
  var $div17=(1)/($call16);
  var $arrayidx18=(($point_coord_save+48)|0);
  HEAPF64[(($arrayidx18)>>3)]=$div17;
  var $call19=Math.sqrt(3);
  var $div20=(-1)/($call19);
  var $arrayidx21=(($point_coord_save+56)|0);
  HEAPF64[(($arrayidx21)>>3)]=$div20;
  var $call22=Math.sqrt(3);
  var $div23=(1)/($call22);
  var $arrayidx24=(($point_coord_save+64)|0);
  HEAPF64[(($arrayidx24)>>3)]=$div23;
  var $call25=Math.sqrt(3);
  var $div26=(1)/($call25);
  var $arrayidx27=(($point_coord_save+72)|0);
  HEAPF64[(($arrayidx27)>>3)]=$div26;
  var $call28=Math.sqrt(3);
  var $div29=(-1)/($call28);
  var $arrayidx30=(($point_coord_save+80)|0);
  HEAPF64[(($arrayidx30)>>3)]=$div29;
  var $call31=Math.sqrt(3);
  var $div32=(-1)/($call31);
  var $arrayidx33=(($point_coord_save+88)|0);
  HEAPF64[(($arrayidx33)>>3)]=$div32;
  var $call34=Math.sqrt(3);
  var $div35=(-1)/($call34);
  var $arrayidx36=(($point_coord_save+96)|0);
  HEAPF64[(($arrayidx36)>>3)]=$div35;
  var $call37=Math.sqrt(3);
  var $div38=(1)/($call37);
  var $arrayidx39=(($point_coord_save+104)|0);
  HEAPF64[(($arrayidx39)>>3)]=$div38;
  var $call40=Math.sqrt(3);
  var $div41=(1)/($call40);
  var $arrayidx42=(($point_coord_save+112)|0);
  HEAPF64[(($arrayidx42)>>3)]=$div41;
  var $call43=Math.sqrt(3);
  var $div44=(-1)/($call43);
  var $arrayidx45=(($point_coord_save+120)|0);
  HEAPF64[(($arrayidx45)>>3)]=$div44;
  var $call46=Math.sqrt(3);
  var $div47=(1)/($call46);
  var $arrayidx48=(($point_coord_save+128)|0);
  HEAPF64[(($arrayidx48)>>3)]=$div47;
  var $call49=Math.sqrt(3);
  var $div50=(-1)/($call49);
  var $arrayidx51=(($point_coord_save+136)|0);
  HEAPF64[(($arrayidx51)>>3)]=$div50;
  var $call52=Math.sqrt(3);
  var $div53=(-1)/($call52);
  var $arrayidx54=(($point_coord_save+144)|0);
  HEAPF64[(($arrayidx54)>>3)]=$div53;
  var $call55=Math.sqrt(3);
  var $div56=(-1)/($call55);
  var $arrayidx57=(($point_coord_save+152)|0);
  HEAPF64[(($arrayidx57)>>3)]=$div56;
  var $call58=Math.sqrt(3);
  var $div59=(1)/($call58);
  var $arrayidx60=(($point_coord_save+160)|0);
  HEAPF64[(($arrayidx60)>>3)]=$div59;
  var $call61=Math.sqrt(3);
  var $div62=(-1)/($call61);
  var $arrayidx63=(($point_coord_save+168)|0);
  HEAPF64[(($arrayidx63)>>3)]=$div62;
  var $call64=Math.sqrt(3);
  var $div65=(-1)/($call64);
  var $arrayidx66=(($point_coord_save+176)|0);
  HEAPF64[(($arrayidx66)>>3)]=$div65;
  var $call67=Math.sqrt(3);
  var $div68=(-1)/($call67);
  var $arrayidx69=(($point_coord_save+184)|0);
  HEAPF64[(($arrayidx69)>>3)]=$div68;
  var $call70=Math.sqrt(5);
  var $sub=($call70)-(1);
  var $call71=Math.sqrt(3);
  var $mul=($call71)*(2);
  var $div72=($sub)/($mul);
  var $arrayidx73=(($point_coord_save+192)|0);
  HEAPF64[(($arrayidx73)>>3)]=$div72;
  var $call74=Math.sqrt(5);
  var $add=($call74)+(1);
  var $call75=Math.sqrt(3);
  var $mul76=($call75)*(2);
  var $div77=($add)/($mul76);
  var $arrayidx78=(($point_coord_save+200)|0);
  HEAPF64[(($arrayidx78)>>3)]=$div77;
  var $arrayidx79=(($point_coord_save+208)|0);
  HEAPF64[(($arrayidx79)>>3)]=0;
  var $call80=Math.sqrt(5);
  var $sub81=($call80)-(1);
  var $sub82=(-$sub81);
  var $call83=Math.sqrt(3);
  var $mul84=($call83)*(2);
  var $div85=($sub82)/($mul84);
  var $arrayidx86=(($point_coord_save+216)|0);
  HEAPF64[(($arrayidx86)>>3)]=$div85;
  var $call87=Math.sqrt(5);
  var $add88=($call87)+(1);
  var $call89=Math.sqrt(3);
  var $mul90=($call89)*(2);
  var $div91=($add88)/($mul90);
  var $arrayidx92=(($point_coord_save+224)|0);
  HEAPF64[(($arrayidx92)>>3)]=$div91;
  var $arrayidx93=(($point_coord_save+232)|0);
  HEAPF64[(($arrayidx93)>>3)]=0;
  var $call94=Math.sqrt(5);
  var $sub95=($call94)-(1);
  var $call96=Math.sqrt(3);
  var $mul97=($call96)*(2);
  var $div98=($sub95)/($mul97);
  var $arrayidx99=(($point_coord_save+240)|0);
  HEAPF64[(($arrayidx99)>>3)]=$div98;
  var $call100=Math.sqrt(5);
  var $add101=($call100)+(1);
  var $sub102=(-$add101);
  var $call103=Math.sqrt(3);
  var $mul104=($call103)*(2);
  var $div105=($sub102)/($mul104);
  var $arrayidx106=(($point_coord_save+248)|0);
  HEAPF64[(($arrayidx106)>>3)]=$div105;
  var $arrayidx107=(($point_coord_save+256)|0);
  HEAPF64[(($arrayidx107)>>3)]=0;
  var $call108=Math.sqrt(5);
  var $sub109=($call108)-(1);
  var $sub110=(-$sub109);
  var $call111=Math.sqrt(3);
  var $mul112=($call111)*(2);
  var $div113=($sub110)/($mul112);
  var $arrayidx114=(($point_coord_save+264)|0);
  HEAPF64[(($arrayidx114)>>3)]=$div113;
  var $call115=Math.sqrt(5);
  var $add116=($call115)+(1);
  var $sub117=(-$add116);
  var $call118=Math.sqrt(3);
  var $mul119=($call118)*(2);
  var $div120=($sub117)/($mul119);
  var $arrayidx121=(($point_coord_save+272)|0);
  HEAPF64[(($arrayidx121)>>3)]=$div120;
  var $arrayidx122=(($point_coord_save+280)|0);
  HEAPF64[(($arrayidx122)>>3)]=0;
  var $call123=Math.sqrt(5);
  var $add124=($call123)+(1);
  var $call125=Math.sqrt(3);
  var $mul126=($call125)*(2);
  var $div127=($add124)/($mul126);
  var $arrayidx128=(($point_coord_save+288)|0);
  HEAPF64[(($arrayidx128)>>3)]=$div127;
  var $arrayidx129=(($point_coord_save+296)|0);
  HEAPF64[(($arrayidx129)>>3)]=0;
  var $call130=Math.sqrt(5);
  var $sub131=($call130)-(1);
  var $call132=Math.sqrt(3);
  var $mul133=($call132)*(2);
  var $div134=($sub131)/($mul133);
  var $arrayidx135=(($point_coord_save+304)|0);
  HEAPF64[(($arrayidx135)>>3)]=$div134;
  var $call136=Math.sqrt(5);
  var $add137=($call136)+(1);
  var $call138=Math.sqrt(3);
  var $mul139=($call138)*(2);
  var $div140=($add137)/($mul139);
  var $arrayidx141=(($point_coord_save+312)|0);
  HEAPF64[(($arrayidx141)>>3)]=$div140;
  var $arrayidx142=(($point_coord_save+320)|0);
  HEAPF64[(($arrayidx142)>>3)]=0;
  var $call143=Math.sqrt(5);
  var $sub144=($call143)-(1);
  var $sub145=(-$sub144);
  var $call146=Math.sqrt(3);
  var $mul147=($call146)*(2);
  var $div148=($sub145)/($mul147);
  var $arrayidx149=(($point_coord_save+328)|0);
  HEAPF64[(($arrayidx149)>>3)]=$div148;
  var $call150=Math.sqrt(5);
  var $add151=($call150)+(1);
  var $sub152=(-$add151);
  var $call153=Math.sqrt(3);
  var $mul154=($call153)*(2);
  var $div155=($sub152)/($mul154);
  var $arrayidx156=(($point_coord_save+336)|0);
  HEAPF64[(($arrayidx156)>>3)]=$div155;
  var $arrayidx157=(($point_coord_save+344)|0);
  HEAPF64[(($arrayidx157)>>3)]=0;
  var $call158=Math.sqrt(5);
  var $sub159=($call158)-(1);
  var $call160=Math.sqrt(3);
  var $mul161=($call160)*(2);
  var $div162=($sub159)/($mul161);
  var $arrayidx163=(($point_coord_save+352)|0);
  HEAPF64[(($arrayidx163)>>3)]=$div162;
  var $call164=Math.sqrt(5);
  var $add165=($call164)+(1);
  var $sub166=(-$add165);
  var $call167=Math.sqrt(3);
  var $mul168=($call167)*(2);
  var $div169=($sub166)/($mul168);
  var $arrayidx170=(($point_coord_save+360)|0);
  HEAPF64[(($arrayidx170)>>3)]=$div169;
  var $arrayidx171=(($point_coord_save+368)|0);
  HEAPF64[(($arrayidx171)>>3)]=0;
  var $call172=Math.sqrt(5);
  var $sub173=($call172)-(1);
  var $sub174=(-$sub173);
  var $call175=Math.sqrt(3);
  var $mul176=($call175)*(2);
  var $div177=($sub174)/($mul176);
  var $arrayidx178=(($point_coord_save+376)|0);
  HEAPF64[(($arrayidx178)>>3)]=$div177;
  var $arrayidx179=(($point_coord_save+384)|0);
  HEAPF64[(($arrayidx179)>>3)]=0;
  var $call180=Math.sqrt(5);
  var $sub181=($call180)-(1);
  var $call182=Math.sqrt(3);
  var $mul183=($call182)*(2);
  var $div184=($sub181)/($mul183);
  var $arrayidx185=(($point_coord_save+392)|0);
  HEAPF64[(($arrayidx185)>>3)]=$div184;
  var $call186=Math.sqrt(5);
  var $add187=($call186)+(1);
  var $call188=Math.sqrt(3);
  var $mul189=($call188)*(2);
  var $div190=($add187)/($mul189);
  var $arrayidx191=(($point_coord_save+400)|0);
  HEAPF64[(($arrayidx191)>>3)]=$div190;
  var $arrayidx192=(($point_coord_save+408)|0);
  HEAPF64[(($arrayidx192)>>3)]=0;
  var $call193=Math.sqrt(5);
  var $sub194=($call193)-(1);
  var $sub195=(-$sub194);
  var $call196=Math.sqrt(3);
  var $mul197=($call196)*(2);
  var $div198=($sub195)/($mul197);
  var $arrayidx199=(($point_coord_save+416)|0);
  HEAPF64[(($arrayidx199)>>3)]=$div198;
  var $call200=Math.sqrt(5);
  var $add201=($call200)+(1);
  var $call202=Math.sqrt(3);
  var $mul203=($call202)*(2);
  var $div204=($add201)/($mul203);
  var $arrayidx205=(($point_coord_save+424)|0);
  HEAPF64[(($arrayidx205)>>3)]=$div204;
  var $arrayidx206=(($point_coord_save+432)|0);
  HEAPF64[(($arrayidx206)>>3)]=0;
  var $call207=Math.sqrt(5);
  var $sub208=($call207)-(1);
  var $call209=Math.sqrt(3);
  var $mul210=($call209)*(2);
  var $div211=($sub208)/($mul210);
  var $arrayidx212=(($point_coord_save+440)|0);
  HEAPF64[(($arrayidx212)>>3)]=$div211;
  var $call213=Math.sqrt(5);
  var $add214=($call213)+(1);
  var $sub215=(-$add214);
  var $call216=Math.sqrt(3);
  var $mul217=($call216)*(2);
  var $div218=($sub215)/($mul217);
  var $arrayidx219=(($point_coord_save+448)|0);
  HEAPF64[(($arrayidx219)>>3)]=$div218;
  var $arrayidx220=(($point_coord_save+456)|0);
  HEAPF64[(($arrayidx220)>>3)]=0;
  var $call221=Math.sqrt(5);
  var $sub222=($call221)-(1);
  var $sub223=(-$sub222);
  var $call224=Math.sqrt(3);
  var $mul225=($call224)*(2);
  var $div226=($sub223)/($mul225);
  var $arrayidx227=(($point_coord_save+464)|0);
  HEAPF64[(($arrayidx227)>>3)]=$div226;
  var $call228=Math.sqrt(5);
  var $add229=($call228)+(1);
  var $sub230=(-$add229);
  var $call231=Math.sqrt(3);
  var $mul232=($call231)*(2);
  var $div233=($sub230)/($mul232);
  var $arrayidx234=(($point_coord_save+472)|0);
  HEAPF64[(($arrayidx234)>>3)]=$div233;
  var $0=$face_num_addr;
  var $1=$face_order_addr;
  _i4vec_copy($0, ((5888)|0), $1);
  var $2=$face_order_max_addr;
  var $3=$face_num_addr;
  var $mul235=(Math.imul($2,$3)|0);
  var $4=$face_point_addr;
  _i4vec_copy($mul235, ((5648)|0), $4);
  var $5=$point_num_addr;
  var $mul236=((($5)*(3))&-1);
  var $arraydecay=(($point_coord_save)|0);
  var $6=$point_coord_addr;
  _r8vec_copy($mul236, $arraydecay, $6);
  STACKTOP = __stackBase__;
  return;
}
Module["_dodec_shape_3d"] = _dodec_shape_3d;
function _i4_max($i1, $i2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i1_addr;
      var $i2_addr;
      var $value;
      $i1_addr=$i1;
      $i2_addr=$i2;
      var $0=$i2_addr;
      var $1=$i1_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$i1_addr;
      $value=$2;
      label = 5; break;
    case 4: 
      var $3=$i2_addr;
      $value=$3;
      label = 5; break;
    case 5: 
      var $4=$value;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_max"] = _i4_max;
function _ellipse_area_2d($r1, $r2) {
  var label = 0;
  var $r1_addr;
  var $r2_addr;
  var $area;
  var $pi;
  $r1_addr=$r1;
  $r2_addr=$r2;
  $pi=3.141592653589793;
  var $0=$pi;
  var $1=$r1_addr;
  var $mul=($0)*($1);
  var $2=$r2_addr;
  var $mul1=($mul)*($2);
  $area=$mul1;
  var $3=$area;
  return $3;
}
Module["_ellipse_area_2d"] = _ellipse_area_2d;
function _i4col_find_item($m, $n, $table, $item, $row, $col) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $table_addr;
      var $item_addr;
      var $row_addr;
      var $col_addr;
      var $i;
      var $j;
      $m_addr=$m;
      $n_addr=$n;
      $table_addr=$table;
      $item_addr=$item;
      $row_addr=$row;
      $col_addr=$col;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$m_addr;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $4=$i;
      var $5=$j;
      var $6=$m_addr;
      var $mul=(Math.imul($5,$6)|0);
      var $add=((($4)+($mul))|0);
      var $7=$table_addr;
      var $arrayidx=(($7+($add<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $9=$item_addr;
      var $cmp4=(($8)|(0))==(($9)|(0));
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$i;
      var $add5=((($10)+(1))|0);
      var $11=$row_addr;
      HEAP32[(($11)>>2)]=$add5;
      var $12=$j;
      var $add6=((($12)+(1))|0);
      var $13=$col_addr;
      HEAP32[(($13)>>2)]=$add6;
      label = 13; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $15=$j;
      var $inc8=((($15)+(1))|0);
      $j=$inc8;
      label = 3; break;
    case 12: 
      var $16=$row_addr;
      HEAP32[(($16)>>2)]=-1;
      var $17=$col_addr;
      HEAP32[(($17)>>2)]=-1;
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4col_find_item"] = _i4col_find_item;
function _i4col_find_pair_wrap($m, $n, $a, $item1, $item2, $row, $col) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $item1_addr;
      var $item2_addr;
      var $row_addr;
      var $col_addr;
      var $i;
      var $i2;
      var $j;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $item1_addr=$item1;
      $item2_addr=$item2;
      $row_addr=$row;
      $col_addr=$col;
      $j=1;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      $i=1;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$m_addr;
      var $cmp2=(($2)|(0)) <= (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $4=$i;
      var $sub=((($4)-(1))|0);
      var $5=$j;
      var $sub4=((($5)-(1))|0);
      var $6=$m_addr;
      var $mul=(Math.imul($sub4,$6)|0);
      var $add=((($sub)+($mul))|0);
      var $7=$a_addr;
      var $arrayidx=(($7+($add<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      var $9=$item1_addr;
      var $cmp5=(($8)|(0))==(($9)|(0));
      if ($cmp5) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $10=$i;
      var $add6=((($10)+(1))|0);
      $i2=$add6;
      var $11=$m_addr;
      var $12=$i2;
      var $cmp7=(($11)|(0)) < (($12)|(0));
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $i2=1;
      label = 9; break;
    case 9: 
      var $13=$i2;
      var $sub9=((($13)-(1))|0);
      var $14=$j;
      var $sub10=((($14)-(1))|0);
      var $15=$m_addr;
      var $mul11=(Math.imul($sub10,$15)|0);
      var $add12=((($sub9)+($mul11))|0);
      var $16=$a_addr;
      var $arrayidx13=(($16+($add12<<2))|0);
      var $17=HEAP32[(($arrayidx13)>>2)];
      var $18=$item2_addr;
      var $cmp14=(($17)|(0))==(($18)|(0));
      if ($cmp14) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$i;
      var $20=$row_addr;
      HEAP32[(($20)>>2)]=$19;
      var $21=$j;
      var $22=$col_addr;
      HEAP32[(($22)>>2)]=$21;
      label = 17; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $24=$j;
      var $inc19=((($24)+(1))|0);
      $j=$inc19;
      label = 3; break;
    case 16: 
      var $25=$row_addr;
      HEAP32[(($25)>>2)]=-1;
      var $26=$col_addr;
      HEAP32[(($26)>>2)]=-1;
      label = 17; break;
    case 17: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4col_find_pair_wrap"] = _i4col_find_pair_wrap;
function _dual_size_3d($point_num, $edge_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point, $point_num2, $edge_num2, $face_num2, $face_order_max2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_num_addr;
      var $edge_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $point_coord_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $point_num2_addr;
      var $edge_num2_addr;
      var $face_num2_addr;
      var $face_order_max2_addr;
      var $i;
      var $face;
      var $face_order2;
      var $face2;
      $point_num_addr=$point_num;
      $edge_num_addr=$edge_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $point_coord_addr=$point_coord;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      $point_num2_addr=$point_num2;
      $edge_num2_addr=$edge_num2;
      $face_num2_addr=$face_num2;
      $face_order_max2_addr=$face_order_max2;
      var $0=$face_num_addr;
      var $1=$point_num2_addr;
      HEAP32[(($1)>>2)]=$0;
      var $2=$edge_num_addr;
      var $3=$edge_num2_addr;
      HEAP32[(($3)>>2)]=$2;
      var $4=$point_num_addr;
      var $5=$face_num2_addr;
      HEAP32[(($5)>>2)]=$4;
      var $6=$face_num2_addr;
      var $7=HEAP32[(($6)>>2)];
      var $mul=($7<<2);
      var $call=_malloc($mul);
      var $8=$call;
      $face_order2=$8;
      $i=0;
      label = 3; break;
    case 3: 
      var $9=$i;
      var $10=$face_num2_addr;
      var $11=HEAP32[(($10)>>2)];
      var $cmp=(($9)|(0)) < (($11)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $12=$i;
      var $13=$face_order2;
      var $arrayidx=(($13+($12<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 5; break;
    case 5: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $face=0;
      label = 7; break;
    case 7: 
      var $15=$face;
      var $16=$face_num_addr;
      var $cmp2=(($15)|(0)) < (($16)|(0));
      if ($cmp2) { label = 8; break; } else { label = 14; break; }
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $18=$face;
      var $19=$face_order_addr;
      var $arrayidx5=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx5)>>2)];
      var $cmp6=(($17)|(0)) < (($20)|(0));
      if ($cmp6) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $21=$i;
      var $22=$face;
      var $23=$face_order_max_addr;
      var $mul8=(Math.imul($22,$23)|0);
      var $add=((($21)+($mul8))|0);
      var $24=$face_point_addr;
      var $arrayidx9=(($24+($add<<2))|0);
      var $25=HEAP32[(($arrayidx9)>>2)];
      $face2=$25;
      var $26=$face2;
      var $sub=((($26)-(1))|0);
      var $27=$face_order2;
      var $arrayidx10=(($27+($sub<<2))|0);
      var $28=HEAP32[(($arrayidx10)>>2)];
      var $add11=((($28)+(1))|0);
      var $29=$face2;
      var $sub12=((($29)-(1))|0);
      var $30=$face_order2;
      var $arrayidx13=(($30+($sub12<<2))|0);
      HEAP32[(($arrayidx13)>>2)]=$add11;
      label = 11; break;
    case 11: 
      var $31=$i;
      var $inc15=((($31)+(1))|0);
      $i=$inc15;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $32=$face;
      var $inc18=((($32)+(1))|0);
      $face=$inc18;
      label = 7; break;
    case 14: 
      var $33=$face_order_max2_addr;
      HEAP32[(($33)>>2)]=0;
      $i=0;
      label = 15; break;
    case 15: 
      var $34=$i;
      var $35=$face_num2_addr;
      var $36=HEAP32[(($35)>>2)];
      var $cmp21=(($34)|(0)) < (($36)|(0));
      if ($cmp21) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $37=$face_order_max2_addr;
      var $38=HEAP32[(($37)>>2)];
      var $39=$i;
      var $40=$face_order2;
      var $arrayidx23=(($40+($39<<2))|0);
      var $41=HEAP32[(($arrayidx23)>>2)];
      var $call24=_i4_max($38, $41);
      var $42=$face_order_max2_addr;
      HEAP32[(($42)>>2)]=$call24;
      label = 17; break;
    case 17: 
      var $43=$i;
      var $inc26=((($43)+(1))|0);
      $i=$inc26;
      label = 15; break;
    case 18: 
      var $44=$face_order2;
      var $45=$44;
      _free($45);
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_dual_size_3d"] = _dual_size_3d;
function _ellipse_point_dist_2d($r1, $r2, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r1_addr;
      var $r2_addr;
      var $p_addr;
      var $dist;
      var $i;
      var $pn;
      $r1_addr=$r1;
      $r2_addr=$r2;
      $p_addr=$p;
      var $0=$r1_addr;
      var $1=$r2_addr;
      var $2=$p_addr;
      var $call=_ellipse_point_near_2d($0, $1, $2);
      $pn=$call;
      $dist=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $cmp=(($3)|(0)) < 2;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$dist;
      var $5=$i;
      var $6=$p_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$pn;
      var $arrayidx1=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($7)-($10);
      var $11=Math.pow($sub, 2);
      var $add=($4)+($11);
      $dist=$add;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $13=$dist;
      var $call2=Math.sqrt($13);
      $dist=$call2;
      var $14=$pn;
      var $15=$14;
      _free($15);
      var $16=$dist;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_ellipse_point_dist_2d"] = _ellipse_point_dist_2d;
function _dual_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point, $point_num2, $face_num2, $face_order_max2, $point_coord2, $face_order2, $face_point2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $point_coord_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $point_num2_addr;
      var $face_num2_addr;
      var $face_order_max2_addr;
      var $point_coord2_addr;
      var $face_order2_addr;
      var $face_point2_addr;
      var $col=__stackBase__;
      var $face;
      var $i;
      var $inext;
      var $iprev;
      var $istop;
      var $j;
      var $k;
      var $norm;
      var $row=(__stackBase__)+(8);
      var $x;
      var $y;
      var $z;
      $point_num_addr=$point_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $point_coord_addr=$point_coord;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      $point_num2_addr=$point_num2;
      $face_num2_addr=$face_num2;
      $face_order_max2_addr=$face_order_max2;
      $point_coord2_addr=$point_coord2;
      $face_order2_addr=$face_order2;
      $face_point2_addr=$face_point2;
      $face=0;
      label = 3; break;
    case 3: 
      var $0=$face;
      var $1=$face_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $x=0;
      $y=0;
      $z=0;
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $3=$face;
      var $4=$face_order_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $cmp2=(($2)|(0)) < (($5)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$j;
      var $7=$face;
      var $8=$face_order_max_addr;
      var $mul=(Math.imul($7,$8)|0);
      var $add=((($6)+($mul))|0);
      var $9=$face_point_addr;
      var $arrayidx4=(($9+($add<<2))|0);
      var $10=HEAP32[(($arrayidx4)>>2)];
      $k=$10;
      var $11=$x;
      var $12=$k;
      var $sub=((($12)-(1))|0);
      var $mul5=((($sub)*(3))&-1);
      var $add6=(($mul5)|0);
      var $13=$point_coord_addr;
      var $arrayidx7=(($13+($add6<<3))|0);
      var $14=HEAPF64[(($arrayidx7)>>3)];
      var $add8=($11)+($14);
      $x=$add8;
      var $15=$y;
      var $16=$k;
      var $sub9=((($16)-(1))|0);
      var $mul10=((($sub9)*(3))&-1);
      var $add11=((($mul10)+(1))|0);
      var $17=$point_coord_addr;
      var $arrayidx12=(($17+($add11<<3))|0);
      var $18=HEAPF64[(($arrayidx12)>>3)];
      var $add13=($15)+($18);
      $y=$add13;
      var $19=$z;
      var $20=$k;
      var $sub14=((($20)-(1))|0);
      var $mul15=((($sub14)*(3))&-1);
      var $add16=((($mul15)+(2))|0);
      var $21=$point_coord_addr;
      var $arrayidx17=(($21+($add16<<3))|0);
      var $22=HEAPF64[(($arrayidx17)>>3)];
      var $add18=($19)+($22);
      $z=$add18;
      label = 7; break;
    case 7: 
      var $23=$j;
      var $inc=((($23)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $24=$x;
      var $25=$x;
      var $mul19=($24)*($25);
      var $26=$y;
      var $27=$y;
      var $mul20=($26)*($27);
      var $add21=($mul19)+($mul20);
      var $28=$z;
      var $29=$z;
      var $mul22=($28)*($29);
      var $add23=($add21)+($mul22);
      var $call=Math.sqrt($add23);
      $norm=$call;
      var $30=$x;
      var $31=$norm;
      var $div=($30)/($31);
      var $32=$face;
      var $33=$face_order_max2_addr;
      var $mul24=(Math.imul($32,$33)|0);
      var $add25=(($mul24)|0);
      var $34=$point_coord2_addr;
      var $arrayidx26=(($34+($add25<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$div;
      var $35=$y;
      var $36=$norm;
      var $div27=($35)/($36);
      var $37=$face;
      var $38=$face_order_max2_addr;
      var $mul28=(Math.imul($37,$38)|0);
      var $add29=((($mul28)+(1))|0);
      var $39=$point_coord2_addr;
      var $arrayidx30=(($39+($add29<<3))|0);
      HEAPF64[(($arrayidx30)>>3)]=$div27;
      var $40=$z;
      var $41=$norm;
      var $div31=($40)/($41);
      var $42=$face;
      var $43=$face_order_max2_addr;
      var $mul32=(Math.imul($42,$43)|0);
      var $add33=((($mul32)+(2))|0);
      var $44=$point_coord2_addr;
      var $arrayidx34=(($44+($add33<<3))|0);
      HEAPF64[(($arrayidx34)>>3)]=$div31;
      label = 9; break;
    case 9: 
      var $45=$face;
      var $inc36=((($45)+(1))|0);
      $face=$inc36;
      label = 3; break;
    case 10: 
      $face=1;
      label = 11; break;
    case 11: 
      var $46=$face;
      var $47=$face_num2_addr;
      var $cmp39=(($46)|(0)) <= (($47)|(0));
      if ($cmp39) { label = 12; break; } else { label = 26; break; }
    case 12: 
      var $48=$face;
      var $sub41=((($48)-(1))|0);
      var $49=$face_order2_addr;
      var $arrayidx42=(($49+($sub41<<2))|0);
      HEAP32[(($arrayidx42)>>2)]=0;
      var $50=$face_order_max_addr;
      var $51=$face_num_addr;
      var $52=$face_point_addr;
      var $53=$face;
      _i4col_find_item($50, $51, $52, $53, $row, $col);
      var $54=HEAP32[(($row)>>2)];
      var $cmp43=(($54)|(0)) <= 0;
      if ($cmp43) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $55=HEAP32[((_stderr)>>2)];
      var $call44=_fprintf($55, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $56=HEAP32[((_stderr)>>2)];
      var $call45=_fprintf($56, ((13976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $57=HEAP32[((_stderr)>>2)];
      var $58=$face;
      var $call46=_fprintf($57, ((13608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$58,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 14: 
      var $59=HEAP32[(($row)>>2)];
      var $add47=((($59)+(1))|0);
      $i=$add47;
      var $60=HEAP32[(($col)>>2)];
      var $sub48=((($60)-(1))|0);
      var $61=$face_order_addr;
      var $arrayidx49=(($61+($sub48<<2))|0);
      var $62=HEAP32[(($arrayidx49)>>2)];
      var $63=$i;
      var $cmp50=(($62)|(0)) < (($63)|(0));
      if ($cmp50) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $i=1;
      label = 16; break;
    case 16: 
      var $64=$i;
      var $sub53=((($64)-(1))|0);
      var $65=HEAP32[(($col)>>2)];
      var $sub54=((($65)-(1))|0);
      var $66=$face_order_max_addr;
      var $mul55=(Math.imul($sub54,$66)|0);
      var $add56=((($sub53)+($mul55))|0);
      var $67=$face_point_addr;
      var $arrayidx57=(($67+($add56<<2))|0);
      var $68=HEAP32[(($arrayidx57)>>2)];
      $istop=$68;
      label = 17; break;
    case 17: 
      var $69=HEAP32[(($row)>>2)];
      var $sub59=((($69)-(1))|0);
      $i=$sub59;
      var $70=$i;
      var $cmp60=(($70)|(0)) < 1;
      if ($cmp60) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $71=$i;
      var $72=HEAP32[(($col)>>2)];
      var $sub62=((($72)-(1))|0);
      var $73=$face_order_addr;
      var $arrayidx63=(($73+($sub62<<2))|0);
      var $74=HEAP32[(($arrayidx63)>>2)];
      var $add64=((($71)+($74))|0);
      $i=$add64;
      label = 19; break;
    case 19: 
      var $75=$i;
      var $sub66=((($75)-(1))|0);
      var $76=HEAP32[(($col)>>2)];
      var $sub67=((($76)-(1))|0);
      var $77=$face_order_max_addr;
      var $mul68=(Math.imul($sub67,$77)|0);
      var $add69=((($sub66)+($mul68))|0);
      var $78=$face_point_addr;
      var $arrayidx70=(($78+($add69<<2))|0);
      var $79=HEAP32[(($arrayidx70)>>2)];
      $inext=$79;
      var $80=$face;
      var $sub71=((($80)-(1))|0);
      var $81=$face_order2_addr;
      var $arrayidx72=(($81+($sub71<<2))|0);
      var $82=HEAP32[(($arrayidx72)>>2)];
      var $add73=((($82)+(1))|0);
      var $83=$face;
      var $sub74=((($83)-(1))|0);
      var $84=$face_order2_addr;
      var $arrayidx75=(($84+($sub74<<2))|0);
      HEAP32[(($arrayidx75)>>2)]=$add73;
      var $85=HEAP32[(($col)>>2)];
      var $86=$face;
      var $sub76=((($86)-(1))|0);
      var $87=$face_order2_addr;
      var $arrayidx77=(($87+($sub76<<2))|0);
      var $88=HEAP32[(($arrayidx77)>>2)];
      var $sub78=((($88)-(1))|0);
      var $89=$face;
      var $sub79=((($89)-(1))|0);
      var $90=$face_order_max2_addr;
      var $mul80=(Math.imul($sub79,$90)|0);
      var $add81=((($sub78)+($mul80))|0);
      var $91=$face_point2_addr;
      var $arrayidx82=(($91+($add81<<2))|0);
      HEAP32[(($arrayidx82)>>2)]=$85;
      var $92=$inext;
      var $93=$istop;
      var $cmp83=(($92)|(0))==(($93)|(0));
      if ($cmp83) { label = 20; break; } else { label = 21; break; }
    case 20: 
      label = 24; break;
    case 21: 
      var $94=$inext;
      $iprev=$94;
      var $95=$face_order_max_addr;
      var $96=$face_num_addr;
      var $97=$face_point_addr;
      var $98=$face;
      var $99=$iprev;
      _i4col_find_pair_wrap($95, $96, $97, $98, $99, $row, $col);
      var $100=HEAP32[(($row)>>2)];
      var $cmp86=(($100)|(0)) <= 0;
      if ($cmp86) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $101=HEAP32[((_stderr)>>2)];
      var $call88=_fprintf($101, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $102=HEAP32[((_stderr)>>2)];
      var $call89=_fprintf($102, ((13976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $103=HEAP32[((_stderr)>>2)];
      var $104=$iprev;
      var $call90=_fprintf($103, ((13144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$104,tempInt));
      var $105=HEAP32[((_stderr)>>2)];
      var $106=$face;
      var $call91=_fprintf($105, ((12800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$106,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 23: 
      label = 17; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $107=$face;
      var $inc95=((($107)+(1))|0);
      $face=$inc95;
      label = 11; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_dual_shape_3d"] = _dual_shape_3d;
function _glob2loc_3d($cospitch, $cosroll, $cosyaw, $sinpitch, $sinroll, $sinyaw, $globas, $glopts, $locpts) {
  var label = 0;
  var $cospitch_addr;
  var $cosroll_addr;
  var $cosyaw_addr;
  var $sinpitch_addr;
  var $sinroll_addr;
  var $sinyaw_addr;
  var $globas_addr;
  var $glopts_addr;
  var $locpts_addr;
  $cospitch_addr=$cospitch;
  $cosroll_addr=$cosroll;
  $cosyaw_addr=$cosyaw;
  $sinpitch_addr=$sinpitch;
  $sinroll_addr=$sinroll;
  $sinyaw_addr=$sinyaw;
  $globas_addr=$globas;
  $glopts_addr=$glopts;
  $locpts_addr=$locpts;
  var $0=$cosyaw_addr;
  var $1=$cospitch_addr;
  var $mul=($0)*($1);
  var $2=$glopts_addr;
  var $arrayidx=(($2)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$globas_addr;
  var $arrayidx1=(($4)|0);
  var $5=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($3)-($5);
  var $mul2=($mul)*($sub);
  var $6=$sinyaw_addr;
  var $7=$cospitch_addr;
  var $mul3=($6)*($7);
  var $8=$glopts_addr;
  var $arrayidx4=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $10=$globas_addr;
  var $arrayidx5=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $sub6=($9)-($11);
  var $mul7=($mul3)*($sub6);
  var $add=($mul2)+($mul7);
  var $12=$sinpitch_addr;
  var $13=$glopts_addr;
  var $arrayidx8=(($13+16)|0);
  var $14=HEAPF64[(($arrayidx8)>>3)];
  var $15=$globas_addr;
  var $arrayidx9=(($15+16)|0);
  var $16=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($14)-($16);
  var $mul11=($12)*($sub10);
  var $sub12=($add)-($mul11);
  var $17=$locpts_addr;
  var $arrayidx13=(($17)|0);
  HEAPF64[(($arrayidx13)>>3)]=$sub12;
  var $18=$cosyaw_addr;
  var $19=$sinpitch_addr;
  var $mul14=($18)*($19);
  var $20=$sinroll_addr;
  var $mul15=($mul14)*($20);
  var $21=$sinyaw_addr;
  var $22=$cosroll_addr;
  var $mul16=($21)*($22);
  var $sub17=($mul15)-($mul16);
  var $23=$glopts_addr;
  var $arrayidx18=(($23)|0);
  var $24=HEAPF64[(($arrayidx18)>>3)];
  var $25=$globas_addr;
  var $arrayidx19=(($25)|0);
  var $26=HEAPF64[(($arrayidx19)>>3)];
  var $sub20=($24)-($26);
  var $mul21=($sub17)*($sub20);
  var $27=$sinyaw_addr;
  var $28=$sinpitch_addr;
  var $mul22=($27)*($28);
  var $29=$sinroll_addr;
  var $mul23=($mul22)*($29);
  var $30=$cosyaw_addr;
  var $31=$cosroll_addr;
  var $mul24=($30)*($31);
  var $add25=($mul23)+($mul24);
  var $32=$glopts_addr;
  var $arrayidx26=(($32+8)|0);
  var $33=HEAPF64[(($arrayidx26)>>3)];
  var $34=$globas_addr;
  var $arrayidx27=(($34+8)|0);
  var $35=HEAPF64[(($arrayidx27)>>3)];
  var $sub28=($33)-($35);
  var $mul29=($add25)*($sub28);
  var $add30=($mul21)+($mul29);
  var $36=$cospitch_addr;
  var $37=$sinroll_addr;
  var $mul31=($36)*($37);
  var $38=$glopts_addr;
  var $arrayidx32=(($38+16)|0);
  var $39=HEAPF64[(($arrayidx32)>>3)];
  var $40=$globas_addr;
  var $arrayidx33=(($40+16)|0);
  var $41=HEAPF64[(($arrayidx33)>>3)];
  var $sub34=($39)-($41);
  var $mul35=($mul31)*($sub34);
  var $add36=($add30)+($mul35);
  var $42=$locpts_addr;
  var $arrayidx37=(($42+8)|0);
  HEAPF64[(($arrayidx37)>>3)]=$add36;
  var $43=$cosyaw_addr;
  var $44=$sinpitch_addr;
  var $mul38=($43)*($44);
  var $45=$cosroll_addr;
  var $mul39=($mul38)*($45);
  var $46=$sinyaw_addr;
  var $47=$sinroll_addr;
  var $mul40=($46)*($47);
  var $add41=($mul39)+($mul40);
  var $48=$glopts_addr;
  var $arrayidx42=(($48)|0);
  var $49=HEAPF64[(($arrayidx42)>>3)];
  var $50=$globas_addr;
  var $arrayidx43=(($50)|0);
  var $51=HEAPF64[(($arrayidx43)>>3)];
  var $sub44=($49)-($51);
  var $mul45=($add41)*($sub44);
  var $52=$sinyaw_addr;
  var $53=$sinpitch_addr;
  var $mul46=($52)*($53);
  var $54=$cosroll_addr;
  var $mul47=($mul46)*($54);
  var $55=$cosyaw_addr;
  var $56=$sinroll_addr;
  var $mul48=($55)*($56);
  var $sub49=($mul47)-($mul48);
  var $57=$glopts_addr;
  var $arrayidx50=(($57+8)|0);
  var $58=HEAPF64[(($arrayidx50)>>3)];
  var $59=$globas_addr;
  var $arrayidx51=(($59+8)|0);
  var $60=HEAPF64[(($arrayidx51)>>3)];
  var $sub52=($58)-($60);
  var $mul53=($sub49)*($sub52);
  var $add54=($mul45)+($mul53);
  var $61=$cospitch_addr;
  var $62=$cosroll_addr;
  var $mul55=($61)*($62);
  var $63=$glopts_addr;
  var $arrayidx56=(($63+16)|0);
  var $64=HEAPF64[(($arrayidx56)>>3)];
  var $65=$globas_addr;
  var $arrayidx57=(($65+16)|0);
  var $66=HEAPF64[(($arrayidx57)>>3)];
  var $sub58=($64)-($66);
  var $mul59=($mul55)*($sub58);
  var $add60=($add54)+($mul59);
  var $67=$locpts_addr;
  var $arrayidx61=(($67+16)|0);
  HEAPF64[(($arrayidx61)>>3)]=$add60;
  return;
}
Module["_glob2loc_3d"] = _glob2loc_3d;
function _halfplane_contains_point_2d($pa, $pb, $p) {
  var label = 0;
  var $pa_addr;
  var $pb_addr;
  var $p_addr;
  var $area_signed;
  $pa_addr=$pa;
  $pb_addr=$pb;
  $p_addr=$p;
  var $0=$pa_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$pb_addr;
  var $arrayidx1=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $4=$p_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $sub=($3)-($5);
  var $mul=($1)*($sub);
  var $6=$pb_addr;
  var $arrayidx3=(($6)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $8=$p_addr;
  var $arrayidx4=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $10=$pa_addr;
  var $arrayidx5=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $sub6=($9)-($11);
  var $mul7=($7)*($sub6);
  var $add=($mul)+($mul7);
  var $12=$p_addr;
  var $arrayidx8=(($12)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$pa_addr;
  var $arrayidx9=(($14+8)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $16=$pb_addr;
  var $arrayidx10=(($16+8)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $sub11=($15)-($17);
  var $mul12=($13)*($sub11);
  var $add13=($add)+($mul12);
  var $mul14=($add13)*(0.5);
  $area_signed=$mul14;
  var $18=$area_signed;
  var $cmp=0 <= $18;
  var $conv=(($cmp)&(1));
  return $conv;
}
Module["_halfplane_contains_point_2d"] = _halfplane_contains_point_2d;
function _ellipse_point_near_2d($r1, $r2, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r1_addr;
      var $r2_addr;
      var $p_addr;
      var $ct;
      var $f;
      var $fp;
      var $iteration;
      var $iteration_max;
      var $pi;
      var $pn;
      var $st;
      var $t;
      var $x;
      var $y;
      $r1_addr=$r1;
      $r2_addr=$r2;
      $p_addr=$p;
      $iteration_max=100;
      $pi=3.141592653589793;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $call=_r8_abs($1);
      $x=$call;
      var $2=$p_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $call2=_r8_abs($3);
      $y=$call2;
      var $4=$y;
      var $cmp=$4 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $5=$r1_addr;
      var $6=$r1_addr;
      var $mul=($5)*($6);
      var $7=$r2_addr;
      var $8=$r2_addr;
      var $mul3=($7)*($8);
      var $sub=($mul)-($mul3);
      var $9=$r1_addr;
      var $10=$x;
      var $mul4=($9)*($10);
      var $cmp5=$sub <= $mul4;
      if ($cmp5) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $t=0;
      label = 20; break;
    case 5: 
      var $11=$x;
      var $cmp6=$11 == 0;
      if ($cmp6) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$r2_addr;
      var $13=$r2_addr;
      var $mul8=($12)*($13);
      var $14=$r1_addr;
      var $15=$r1_addr;
      var $mul9=($14)*($15);
      var $sub10=($mul8)-($mul9);
      var $16=$r2_addr;
      var $17=$y;
      var $mul11=($16)*($17);
      var $cmp12=$sub10 <= $mul11;
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$pi;
      var $div=($18)/(2);
      $t=$div;
      label = 19; break;
    case 8: 
      var $19=$y;
      var $cmp15=$19 == 0;
      if ($cmp15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $call17=_r8_epsilon();
      var $call18=Math.sqrt($call17);
      var $20=$r2_addr;
      var $call19=_r8_abs($20);
      var $mul20=($call18)*($call19);
      $y=$mul20;
      label = 10; break;
    case 10: 
      var $21=$x;
      var $cmp21=$21 == 0;
      if ($cmp21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $call23=_r8_epsilon();
      var $call24=Math.sqrt($call23);
      var $22=$r1_addr;
      var $call25=_r8_abs($22);
      var $mul26=($call24)*($call25);
      $x=$mul26;
      label = 12; break;
    case 12: 
      var $23=$y;
      var $24=$x;
      var $call28=Math.atan2($23, $24);
      $t=$call28;
      $iteration=0;
      label = 13; break;
    case 13: 
      var $25=$t;
      var $call29=Math.cos($25);
      $ct=$call29;
      var $26=$t;
      var $call30=Math.sin($26);
      $st=$call30;
      var $27=$x;
      var $28=$r1_addr;
      var $call31=_r8_abs($28);
      var $29=$ct;
      var $mul32=($call31)*($29);
      var $sub33=($27)-($mul32);
      var $30=$r1_addr;
      var $call34=_r8_abs($30);
      var $mul35=($sub33)*($call34);
      var $31=$st;
      var $mul36=($mul35)*($31);
      var $32=$y;
      var $33=$r2_addr;
      var $call37=_r8_abs($33);
      var $34=$st;
      var $mul38=($call37)*($34);
      var $sub39=($32)-($mul38);
      var $35=$r2_addr;
      var $call40=_r8_abs($35);
      var $mul41=($sub39)*($call40);
      var $36=$ct;
      var $mul42=($mul41)*($36);
      var $sub43=($mul36)-($mul42);
      $f=$sub43;
      var $37=$f;
      var $call44=_r8_abs($37);
      var $call45=_r8_epsilon();
      var $mul46=($call45)*(100);
      var $cmp47=$call44 <= $mul46;
      if ($cmp47) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 18; break;
    case 15: 
      var $38=$iteration_max;
      var $39=$iteration;
      var $cmp50=(($38)|(0)) <= (($39)|(0));
      if ($cmp50) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $40=HEAP32[((_stderr)>>2)];
      var $call52=_fprintf($40, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $41=HEAP32[((_stderr)>>2)];
      var $call53=_fprintf($41, ((12424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $42=HEAP32[((_stderr)>>2)];
      var $call54=_fprintf($42, ((12112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $43=HEAP32[((_stderr)>>2)];
      var $44=$t;
      var $call55=_fprintf($43, ((11928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$44,tempInt));
      var $45=HEAP32[((_stderr)>>2)];
      var $46=$f;
      var $call56=_fprintf($45, ((11512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$46,tempInt));
      label = 18; break;
    case 17: 
      var $47=$iteration;
      var $add=((($47)+(1))|0);
      $iteration=$add;
      var $48=$r1_addr;
      var $49=$r1_addr;
      var $mul58=($48)*($49);
      var $50=$st;
      var $mul59=($mul58)*($50);
      var $51=$st;
      var $mul60=($mul59)*($51);
      var $52=$r2_addr;
      var $53=$r2_addr;
      var $mul61=($52)*($53);
      var $54=$ct;
      var $mul62=($mul61)*($54);
      var $55=$ct;
      var $mul63=($mul62)*($55);
      var $add64=($mul60)+($mul63);
      var $56=$x;
      var $57=$r1_addr;
      var $call65=_r8_abs($57);
      var $58=$ct;
      var $mul66=($call65)*($58);
      var $sub67=($56)-($mul66);
      var $59=$r1_addr;
      var $call68=_r8_abs($59);
      var $mul69=($sub67)*($call68);
      var $60=$ct;
      var $mul70=($mul69)*($60);
      var $add71=($add64)+($mul70);
      var $61=$y;
      var $62=$r2_addr;
      var $call72=_r8_abs($62);
      var $63=$st;
      var $mul73=($call72)*($63);
      var $sub74=($61)-($mul73);
      var $64=$r2_addr;
      var $call75=_r8_abs($64);
      var $mul76=($sub74)*($call75);
      var $65=$st;
      var $mul77=($mul76)*($65);
      var $add78=($add71)+($mul77);
      $fp=$add78;
      var $66=$t;
      var $67=$f;
      var $68=$fp;
      var $div79=($67)/($68);
      var $sub80=($66)-($div79);
      $t=$sub80;
      label = 13; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $call83=_malloc(16);
      var $69=$call83;
      $pn=$69;
      var $70=$r1_addr;
      var $call84=_r8_abs($70);
      var $71=$t;
      var $call85=Math.cos($71);
      var $mul86=($call84)*($call85);
      var $72=$pn;
      var $arrayidx87=(($72)|0);
      HEAPF64[(($arrayidx87)>>3)]=$mul86;
      var $73=$r2_addr;
      var $call88=_r8_abs($73);
      var $74=$t;
      var $call89=Math.sin($74);
      var $mul90=($call88)*($call89);
      var $75=$pn;
      var $arrayidx91=(($75+8)|0);
      HEAPF64[(($arrayidx91)>>3)]=$mul90;
      var $76=$p_addr;
      var $arrayidx92=(($76)|0);
      var $77=HEAPF64[(($arrayidx92)>>3)];
      var $call93=_r8_sign($77);
      var $78=$pn;
      var $arrayidx94=(($78)|0);
      var $79=HEAPF64[(($arrayidx94)>>3)];
      var $mul95=($call93)*($79);
      var $80=$pn;
      var $arrayidx96=(($80)|0);
      HEAPF64[(($arrayidx96)>>3)]=$mul95;
      var $81=$p_addr;
      var $arrayidx97=(($81+8)|0);
      var $82=HEAPF64[(($arrayidx97)>>3)];
      var $call98=_r8_sign($82);
      var $83=$pn;
      var $arrayidx99=(($83+8)|0);
      var $84=HEAPF64[(($arrayidx99)>>3)];
      var $mul100=($call98)*($84);
      var $85=$pn;
      var $arrayidx101=(($85+8)|0);
      HEAPF64[(($arrayidx101)>>3)]=$mul100;
      var $86=$pn;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }
}
Module["_ellipse_point_near_2d"] = _ellipse_point_near_2d;
function _ellipse_points_2d($pc, $r1, $r2, $psi, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pc_addr;
      var $r1_addr;
      var $r2_addr;
      var $psi_addr;
      var $n_addr;
      var $p_addr;
      var $i;
      var $pi;
      var $theta;
      $pc_addr=$pc;
      $r1_addr=$r1;
      $r2_addr=$r2;
      $psi_addr=$psi;
      $n_addr=$n;
      $p_addr=$p;
      $pi=3.141592653589793;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$pi;
      var $mul=($2)*(2);
      var $3=$i;
      var $conv=(($3)|(0));
      var $mul1=($mul)*($conv);
      var $4=$n_addr;
      var $conv2=(($4)|(0));
      var $div=($mul1)/($conv2);
      $theta=$div;
      var $5=$pc_addr;
      var $arrayidx=(($5)|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$r1_addr;
      var $8=$psi_addr;
      var $call=Math.cos($8);
      var $mul3=($7)*($call);
      var $9=$theta;
      var $call4=Math.cos($9);
      var $mul5=($mul3)*($call4);
      var $add=($6)+($mul5);
      var $10=$r2_addr;
      var $11=$psi_addr;
      var $call6=Math.sin($11);
      var $mul7=($10)*($call6);
      var $12=$theta;
      var $call8=Math.sin($12);
      var $mul9=($mul7)*($call8);
      var $sub=($add)-($mul9);
      var $13=$i;
      var $mul10=($13<<1);
      var $add11=(($mul10)|0);
      var $14=$p_addr;
      var $arrayidx12=(($14+($add11<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$sub;
      var $15=$pc_addr;
      var $arrayidx13=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx13)>>3)];
      var $17=$r1_addr;
      var $18=$psi_addr;
      var $call14=Math.sin($18);
      var $mul15=($17)*($call14);
      var $19=$theta;
      var $call16=Math.cos($19);
      var $mul17=($mul15)*($call16);
      var $add18=($16)+($mul17);
      var $20=$r2_addr;
      var $21=$psi_addr;
      var $call19=Math.cos($21);
      var $mul20=($20)*($call19);
      var $22=$theta;
      var $call21=Math.sin($22);
      var $mul22=($mul20)*($call21);
      var $add23=($add18)+($mul22);
      var $23=$i;
      var $mul24=($23<<1);
      var $add25=((($mul24)+(1))|0);
      var $24=$p_addr;
      var $arrayidx26=(($24+($add25<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$add23;
      label = 5; break;
    case 5: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_ellipse_points_2d"] = _ellipse_points_2d;
function _ellipse_points_arc_2d($pc, $r1, $r2, $psi, $theta1, $theta2, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pc_addr;
      var $r1_addr;
      var $r2_addr;
      var $psi_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $n_addr;
      var $p_addr;
      var $i;
      var $pi;
      var $theta;
      var $theta3;
      $pc_addr=$pc;
      $r1_addr=$r1;
      $r2_addr=$r2;
      $psi_addr=$psi;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $n_addr=$n;
      $p_addr=$p;
      $pi=3.141592653589793;
      var $0=$theta1_addr;
      var $1=$theta2_addr;
      var $2=$theta1_addr;
      var $sub=($1)-($2);
      var $3=$pi;
      var $mul=($3)*(2);
      var $call=_r8_modp($sub, $mul);
      var $add=($0)+($call);
      $theta3=$add;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp=(($4)|(0)) < (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $6=$n_addr;
      var $cmp1=1 < (($6)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$n_addr;
      var $8=$i;
      var $sub2=((($7)-($8))|0);
      var $sub3=((($sub2)-(1))|0);
      var $conv=(($sub3)|(0));
      var $9=$theta1_addr;
      var $mul4=($conv)*($9);
      var $10=$i;
      var $conv5=(($10)|(0));
      var $11=$theta3;
      var $mul6=($conv5)*($11);
      var $add7=($mul4)+($mul6);
      var $12=$n_addr;
      var $sub8=((($12)-(1))|0);
      var $conv9=(($sub8)|(0));
      var $div=($add7)/($conv9);
      $theta=$div;
      label = 7; break;
    case 6: 
      var $13=$theta1_addr;
      var $14=$theta3;
      var $add10=($13)+($14);
      var $mul11=($add10)*(0.5);
      $theta=$mul11;
      label = 7; break;
    case 7: 
      var $15=$pc_addr;
      var $arrayidx=(($15)|0);
      var $16=HEAPF64[(($arrayidx)>>3)];
      var $17=$r1_addr;
      var $18=$psi_addr;
      var $call12=Math.cos($18);
      var $mul13=($17)*($call12);
      var $19=$theta;
      var $call14=Math.cos($19);
      var $mul15=($mul13)*($call14);
      var $add16=($16)+($mul15);
      var $20=$r2_addr;
      var $21=$psi_addr;
      var $call17=Math.sin($21);
      var $mul18=($20)*($call17);
      var $22=$theta;
      var $call19=Math.sin($22);
      var $mul20=($mul18)*($call19);
      var $sub21=($add16)-($mul20);
      var $23=$i;
      var $mul22=($23<<1);
      var $add23=(($mul22)|0);
      var $24=$p_addr;
      var $arrayidx24=(($24+($add23<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$sub21;
      var $25=$pc_addr;
      var $arrayidx25=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx25)>>3)];
      var $27=$r1_addr;
      var $28=$psi_addr;
      var $call26=Math.sin($28);
      var $mul27=($27)*($call26);
      var $29=$theta;
      var $call28=Math.cos($29);
      var $mul29=($mul27)*($call28);
      var $add30=($26)+($mul29);
      var $30=$r2_addr;
      var $31=$psi_addr;
      var $call31=Math.cos($31);
      var $mul32=($30)*($call31);
      var $32=$theta;
      var $call33=Math.sin($32);
      var $mul34=($mul32)*($call33);
      var $add35=($add30)+($mul34);
      var $33=$i;
      var $mul36=($33<<1);
      var $add37=((($mul36)+(1))|0);
      var $34=$p_addr;
      var $arrayidx38=(($34+($add37<<3))|0);
      HEAPF64[(($arrayidx38)>>3)]=$add35;
      label = 8; break;
    case 8: 
      var $35=$i;
      var $inc=((($35)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_ellipse_points_arc_2d"] = _ellipse_points_arc_2d;
function _enorm0_nd($dim_num, $x, $y) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $x_addr;
      var $y_addr;
      var $i;
      var $value;
      $dim_num_addr=$dim_num;
      $x_addr=$x;
      $y_addr=$y;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$x_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$y_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=$i;
      var $10=$x_addr;
      var $arrayidx2=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx2)>>3)];
      var $12=$i;
      var $13=$y_addr;
      var $arrayidx3=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($11)-($14);
      var $mul=($sub)*($sub4);
      var $add=($2)+($mul);
      $value=$add;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $16=$value;
      var $call=Math.sqrt($16);
      $value=$call;
      var $17=$value;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
Module["_enorm0_nd"] = _enorm0_nd;
function _get_seed() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $clock=__stackBase__;
      var $i4_huge;
      var $ihour;
      var $imin;
      var $isec;
      var $seed;
      var $lt;
      var $tloc=(__stackBase__)+(8);
      $i4_huge=2147483647;
      var $call=_time($tloc);
      HEAP32[(($clock)>>2)]=$call;
      var $call1=_localtime($clock);
      $lt=$call1;
      var $0=$lt;
      var $tm_hour=(($0+8)|0);
      var $1=HEAP32[(($tm_hour)>>2)];
      $ihour=$1;
      var $2=$ihour;
      var $cmp=12 < (($2)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ihour;
      var $sub=((($3)-(12))|0);
      $ihour=$sub;
      label = 4; break;
    case 4: 
      var $4=$ihour;
      var $sub2=((($4)-(1))|0);
      $ihour=$sub2;
      var $5=$lt;
      var $tm_min=(($5+4)|0);
      var $6=HEAP32[(($tm_min)>>2)];
      $imin=$6;
      var $7=$lt;
      var $tm_sec=(($7)|0);
      var $8=HEAP32[(($tm_sec)>>2)];
      $isec=$8;
      var $9=$isec;
      var $10=$imin;
      var $11=$ihour;
      var $mul=((($11)*(60))&-1);
      var $add=((($10)+($mul))|0);
      var $mul3=((($add)*(60))&-1);
      var $add4=((($9)+($mul3))|0);
      $seed=$add4;
      var $12=$seed;
      var $add5=((($12)+(1))|0);
      $seed=$add5;
      var $13=$seed;
      var $conv=(($13)|(0));
      var $14=$i4_huge;
      var $conv6=(($14)|(0));
      var $mul7=($conv)*($conv6);
      var $div=($mul7)/(43200);
      var $conv8=(($div)&-1);
      $seed=$conv8;
      var $15=$seed;
      var $cmp9=(($15)|(0))==0;
      if ($cmp9) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $seed=1;
      label = 6; break;
    case 6: 
      var $16=$seed;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_get_seed"] = _get_seed;
function _halfspace_imp_triangle_int_3d($a, $b, $c, $d, $t, $p) {
  var label = 0;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  var $t_addr;
  var $p_addr;
  var $dist1;
  var $dist2;
  var $dist3;
  var $int_num;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  $t_addr=$t;
  $p_addr=$p;
  var $0=$a_addr;
  var $1=$t_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $mul=($0)*($2);
  var $3=$b_addr;
  var $4=$t_addr;
  var $arrayidx1=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx1)>>3)];
  var $mul2=($3)*($5);
  var $add=($mul)+($mul2);
  var $6=$c_addr;
  var $7=$t_addr;
  var $arrayidx3=(($7+16)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($6)*($8);
  var $add5=($add)+($mul4);
  var $9=$d_addr;
  var $add6=($add5)+($9);
  $dist1=$add6;
  var $10=$a_addr;
  var $11=$t_addr;
  var $arrayidx7=(($11+24)|0);
  var $12=HEAPF64[(($arrayidx7)>>3)];
  var $mul8=($10)*($12);
  var $13=$b_addr;
  var $14=$t_addr;
  var $arrayidx9=(($14+32)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $mul10=($13)*($15);
  var $add11=($mul8)+($mul10);
  var $16=$c_addr;
  var $17=$t_addr;
  var $arrayidx12=(($17+40)|0);
  var $18=HEAPF64[(($arrayidx12)>>3)];
  var $mul13=($16)*($18);
  var $add14=($add11)+($mul13);
  var $19=$d_addr;
  var $add15=($add14)+($19);
  $dist2=$add15;
  var $20=$a_addr;
  var $21=$t_addr;
  var $arrayidx16=(($21+48)|0);
  var $22=HEAPF64[(($arrayidx16)>>3)];
  var $mul17=($20)*($22);
  var $23=$b_addr;
  var $24=$t_addr;
  var $arrayidx18=(($24+56)|0);
  var $25=HEAPF64[(($arrayidx18)>>3)];
  var $mul19=($23)*($25);
  var $add20=($mul17)+($mul19);
  var $26=$c_addr;
  var $27=$t_addr;
  var $arrayidx21=(($27+64)|0);
  var $28=HEAPF64[(($arrayidx21)>>3)];
  var $mul22=($26)*($28);
  var $add23=($add20)+($mul22);
  var $29=$d_addr;
  var $add24=($add23)+($29);
  $dist3=$add24;
  var $30=$dist1;
  var $31=$dist2;
  var $32=$dist3;
  var $33=$t_addr;
  var $34=$p_addr;
  var $call=_halfspace_triangle_int_3d($30, $31, $32, $33, $34);
  $int_num=$call;
  var $35=$int_num;
  return $35;
}
Module["_halfspace_imp_triangle_int_3d"] = _halfspace_imp_triangle_int_3d;
function _i4_dedekind_factor($p, $q) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $q_addr;
      var $s;
      $p_addr=$p;
      $q_addr=$q;
      var $0=$p_addr;
      var $1=$q_addr;
      var $rem=((((($0)|(0)))%((($1)|(0))))&-1);
      var $cmp=(($rem)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $s=0;
      label = 5; break;
    case 4: 
      var $2=$p_addr;
      var $conv=(($2)|(0));
      var $3=$q_addr;
      var $conv1=(($3)|(0));
      var $div=($conv)/($conv1);
      var $4=$p_addr;
      var $5=$q_addr;
      var $div2=((((($4)|(0)))/((($5)|(0))))&-1);
      var $conv3=(($div2)|(0));
      var $sub=($div)-($conv3);
      var $sub4=($sub)-(0.5);
      $s=$sub4;
      label = 5; break;
    case 5: 
      var $6=$s;
      return $6;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_dedekind_factor"] = _i4_dedekind_factor;
function _i4_factorial2($n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $value;
      $n_addr=$n;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 8; break;
    case 4: 
      $value=1;
      label = 5; break;
    case 5: 
      var $1=$n_addr;
      var $cmp1=1 < (($1)|(0));
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $2=$value;
      var $3=$n_addr;
      var $mul=(Math.imul($2,$3)|0);
      $value=$mul;
      var $4=$n_addr;
      var $sub=((($4)-(2))|0);
      $n_addr=$sub;
      label = 5; break;
    case 7: 
      var $5=$value;
      $retval=$5;
      label = 8; break;
    case 8: 
      var $6=$retval;
      return $6;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_factorial2"] = _i4_factorial2;
function _halfspace_triangle_int_3d($dist1, $dist2, $dist3, $t, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dist1_addr;
      var $dist2_addr;
      var $dist3_addr;
      var $t_addr;
      var $p_addr;
      var $int_num;
      $dist1_addr=$dist1;
      $dist2_addr=$dist2;
      $dist3_addr=$dist3;
      $t_addr=$t;
      $p_addr=$p;
      $int_num=0;
      var $0=$dist1_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$t_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$int_num;
      var $mul=((($3)*(3))&-1);
      var $add=(($mul)|0);
      var $4=$p_addr;
      var $arrayidx1=(($4+($add<<3))|0);
      HEAPF64[(($arrayidx1)>>3)]=$2;
      var $5=$t_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$int_num;
      var $mul3=((($7)*(3))&-1);
      var $add4=((($mul3)+(1))|0);
      var $8=$p_addr;
      var $arrayidx5=(($8+($add4<<3))|0);
      HEAPF64[(($arrayidx5)>>3)]=$6;
      var $9=$t_addr;
      var $arrayidx6=(($9+16)|0);
      var $10=HEAPF64[(($arrayidx6)>>3)];
      var $11=$int_num;
      var $mul7=((($11)*(3))&-1);
      var $add8=((($mul7)+(2))|0);
      var $12=$p_addr;
      var $arrayidx9=(($12+($add8<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$10;
      var $13=$int_num;
      var $add10=((($13)+(1))|0);
      $int_num=$add10;
      label = 4; break;
    case 4: 
      var $14=$dist1_addr;
      var $15=$dist2_addr;
      var $mul11=($14)*($15);
      var $cmp12=$mul11 < 0;
      if ($cmp12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$dist1_addr;
      var $17=$t_addr;
      var $arrayidx14=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx14)>>3)];
      var $mul15=($16)*($18);
      var $19=$dist2_addr;
      var $20=$t_addr;
      var $arrayidx16=(($20)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $mul17=($19)*($21);
      var $sub=($mul15)-($mul17);
      var $22=$dist1_addr;
      var $23=$dist2_addr;
      var $sub18=($22)-($23);
      var $div=($sub)/($sub18);
      var $24=$int_num;
      var $mul19=((($24)*(3))&-1);
      var $add20=(($mul19)|0);
      var $25=$p_addr;
      var $arrayidx21=(($25+($add20<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$div;
      var $26=$dist1_addr;
      var $27=$t_addr;
      var $arrayidx22=(($27+32)|0);
      var $28=HEAPF64[(($arrayidx22)>>3)];
      var $mul23=($26)*($28);
      var $29=$dist2_addr;
      var $30=$t_addr;
      var $arrayidx24=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $mul25=($29)*($31);
      var $sub26=($mul23)-($mul25);
      var $32=$dist1_addr;
      var $33=$dist2_addr;
      var $sub27=($32)-($33);
      var $div28=($sub26)/($sub27);
      var $34=$int_num;
      var $mul29=((($34)*(3))&-1);
      var $add30=((($mul29)+(1))|0);
      var $35=$p_addr;
      var $arrayidx31=(($35+($add30<<3))|0);
      HEAPF64[(($arrayidx31)>>3)]=$div28;
      var $36=$dist1_addr;
      var $37=$t_addr;
      var $arrayidx32=(($37+40)|0);
      var $38=HEAPF64[(($arrayidx32)>>3)];
      var $mul33=($36)*($38);
      var $39=$dist2_addr;
      var $40=$t_addr;
      var $arrayidx34=(($40+16)|0);
      var $41=HEAPF64[(($arrayidx34)>>3)];
      var $mul35=($39)*($41);
      var $sub36=($mul33)-($mul35);
      var $42=$dist1_addr;
      var $43=$dist2_addr;
      var $sub37=($42)-($43);
      var $div38=($sub36)/($sub37);
      var $44=$int_num;
      var $mul39=((($44)*(3))&-1);
      var $add40=((($mul39)+(2))|0);
      var $45=$p_addr;
      var $arrayidx41=(($45+($add40<<3))|0);
      HEAPF64[(($arrayidx41)>>3)]=$div38;
      var $46=$int_num;
      var $add42=((($46)+(1))|0);
      $int_num=$add42;
      label = 6; break;
    case 6: 
      var $47=$dist2_addr;
      var $cmp44=$47 <= 0;
      if ($cmp44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $48=$t_addr;
      var $arrayidx46=(($48+24)|0);
      var $49=HEAPF64[(($arrayidx46)>>3)];
      var $50=$int_num;
      var $mul47=((($50)*(3))&-1);
      var $add48=(($mul47)|0);
      var $51=$p_addr;
      var $arrayidx49=(($51+($add48<<3))|0);
      HEAPF64[(($arrayidx49)>>3)]=$49;
      var $52=$t_addr;
      var $arrayidx50=(($52+32)|0);
      var $53=HEAPF64[(($arrayidx50)>>3)];
      var $54=$int_num;
      var $mul51=((($54)*(3))&-1);
      var $add52=((($mul51)+(1))|0);
      var $55=$p_addr;
      var $arrayidx53=(($55+($add52<<3))|0);
      HEAPF64[(($arrayidx53)>>3)]=$53;
      var $56=$t_addr;
      var $arrayidx54=(($56+40)|0);
      var $57=HEAPF64[(($arrayidx54)>>3)];
      var $58=$int_num;
      var $mul55=((($58)*(3))&-1);
      var $add56=((($mul55)+(2))|0);
      var $59=$p_addr;
      var $arrayidx57=(($59+($add56<<3))|0);
      HEAPF64[(($arrayidx57)>>3)]=$57;
      var $60=$int_num;
      var $add58=((($60)+(1))|0);
      $int_num=$add58;
      label = 8; break;
    case 8: 
      var $61=$dist2_addr;
      var $62=$dist3_addr;
      var $mul60=($61)*($62);
      var $cmp61=$mul60 < 0;
      if ($cmp61) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $63=$dist2_addr;
      var $64=$t_addr;
      var $arrayidx63=(($64+48)|0);
      var $65=HEAPF64[(($arrayidx63)>>3)];
      var $mul64=($63)*($65);
      var $66=$dist3_addr;
      var $67=$t_addr;
      var $arrayidx65=(($67+24)|0);
      var $68=HEAPF64[(($arrayidx65)>>3)];
      var $mul66=($66)*($68);
      var $sub67=($mul64)-($mul66);
      var $69=$dist2_addr;
      var $70=$dist3_addr;
      var $sub68=($69)-($70);
      var $div69=($sub67)/($sub68);
      var $71=$int_num;
      var $mul70=((($71)*(3))&-1);
      var $add71=(($mul70)|0);
      var $72=$p_addr;
      var $arrayidx72=(($72+($add71<<3))|0);
      HEAPF64[(($arrayidx72)>>3)]=$div69;
      var $73=$dist2_addr;
      var $74=$t_addr;
      var $arrayidx73=(($74+56)|0);
      var $75=HEAPF64[(($arrayidx73)>>3)];
      var $mul74=($73)*($75);
      var $76=$dist3_addr;
      var $77=$t_addr;
      var $arrayidx75=(($77+32)|0);
      var $78=HEAPF64[(($arrayidx75)>>3)];
      var $mul76=($76)*($78);
      var $sub77=($mul74)-($mul76);
      var $79=$dist2_addr;
      var $80=$dist3_addr;
      var $sub78=($79)-($80);
      var $div79=($sub77)/($sub78);
      var $81=$int_num;
      var $mul80=((($81)*(3))&-1);
      var $add81=((($mul80)+(1))|0);
      var $82=$p_addr;
      var $arrayidx82=(($82+($add81<<3))|0);
      HEAPF64[(($arrayidx82)>>3)]=$div79;
      var $83=$dist2_addr;
      var $84=$t_addr;
      var $arrayidx83=(($84+64)|0);
      var $85=HEAPF64[(($arrayidx83)>>3)];
      var $mul84=($83)*($85);
      var $86=$dist3_addr;
      var $87=$t_addr;
      var $arrayidx85=(($87+16)|0);
      var $88=HEAPF64[(($arrayidx85)>>3)];
      var $mul86=($86)*($88);
      var $sub87=($mul84)-($mul86);
      var $89=$dist2_addr;
      var $90=$dist3_addr;
      var $sub88=($89)-($90);
      var $div89=($sub87)/($sub88);
      var $91=$int_num;
      var $mul90=((($91)*(3))&-1);
      var $add91=((($mul90)+(2))|0);
      var $92=$p_addr;
      var $arrayidx92=(($92+($add91<<3))|0);
      HEAPF64[(($arrayidx92)>>3)]=$div89;
      var $93=$int_num;
      var $add93=((($93)+(1))|0);
      $int_num=$add93;
      label = 10; break;
    case 10: 
      var $94=$dist3_addr;
      var $cmp95=$94 <= 0;
      if ($cmp95) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $95=$t_addr;
      var $arrayidx97=(($95+48)|0);
      var $96=HEAPF64[(($arrayidx97)>>3)];
      var $97=$int_num;
      var $mul98=((($97)*(3))&-1);
      var $add99=(($mul98)|0);
      var $98=$p_addr;
      var $arrayidx100=(($98+($add99<<3))|0);
      HEAPF64[(($arrayidx100)>>3)]=$96;
      var $99=$t_addr;
      var $arrayidx101=(($99+56)|0);
      var $100=HEAPF64[(($arrayidx101)>>3)];
      var $101=$int_num;
      var $mul102=((($101)*(3))&-1);
      var $add103=((($mul102)+(1))|0);
      var $102=$p_addr;
      var $arrayidx104=(($102+($add103<<3))|0);
      HEAPF64[(($arrayidx104)>>3)]=$100;
      var $103=$t_addr;
      var $arrayidx105=(($103+64)|0);
      var $104=HEAPF64[(($arrayidx105)>>3)];
      var $105=$int_num;
      var $mul106=((($105)*(3))&-1);
      var $add107=((($mul106)+(2))|0);
      var $106=$p_addr;
      var $arrayidx108=(($106+($add107<<3))|0);
      HEAPF64[(($arrayidx108)>>3)]=$104;
      var $107=$int_num;
      var $add109=((($107)+(1))|0);
      $int_num=$add109;
      label = 12; break;
    case 12: 
      var $108=$dist3_addr;
      var $109=$dist1_addr;
      var $mul111=($108)*($109);
      var $cmp112=$mul111 < 0;
      if ($cmp112) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $110=$dist3_addr;
      var $111=$t_addr;
      var $arrayidx114=(($111)|0);
      var $112=HEAPF64[(($arrayidx114)>>3)];
      var $mul115=($110)*($112);
      var $113=$dist1_addr;
      var $114=$t_addr;
      var $arrayidx116=(($114+48)|0);
      var $115=HEAPF64[(($arrayidx116)>>3)];
      var $mul117=($113)*($115);
      var $sub118=($mul115)-($mul117);
      var $116=$dist3_addr;
      var $117=$dist1_addr;
      var $sub119=($116)-($117);
      var $div120=($sub118)/($sub119);
      var $118=$int_num;
      var $mul121=((($118)*(3))&-1);
      var $add122=(($mul121)|0);
      var $119=$p_addr;
      var $arrayidx123=(($119+($add122<<3))|0);
      HEAPF64[(($arrayidx123)>>3)]=$div120;
      var $120=$dist3_addr;
      var $121=$t_addr;
      var $arrayidx124=(($121+8)|0);
      var $122=HEAPF64[(($arrayidx124)>>3)];
      var $mul125=($120)*($122);
      var $123=$dist1_addr;
      var $124=$t_addr;
      var $arrayidx126=(($124+56)|0);
      var $125=HEAPF64[(($arrayidx126)>>3)];
      var $mul127=($123)*($125);
      var $sub128=($mul125)-($mul127);
      var $126=$dist3_addr;
      var $127=$dist1_addr;
      var $sub129=($126)-($127);
      var $div130=($sub128)/($sub129);
      var $128=$int_num;
      var $mul131=((($128)*(3))&-1);
      var $add132=((($mul131)+(1))|0);
      var $129=$p_addr;
      var $arrayidx133=(($129+($add132<<3))|0);
      HEAPF64[(($arrayidx133)>>3)]=$div130;
      var $130=$dist3_addr;
      var $131=$t_addr;
      var $arrayidx134=(($131+16)|0);
      var $132=HEAPF64[(($arrayidx134)>>3)];
      var $mul135=($130)*($132);
      var $133=$dist1_addr;
      var $134=$t_addr;
      var $arrayidx136=(($134+64)|0);
      var $135=HEAPF64[(($arrayidx136)>>3)];
      var $mul137=($133)*($135);
      var $sub138=($mul135)-($mul137);
      var $136=$dist3_addr;
      var $137=$dist1_addr;
      var $sub139=($136)-($137);
      var $div140=($sub138)/($sub139);
      var $138=$int_num;
      var $mul141=((($138)*(3))&-1);
      var $add142=((($mul141)+(2))|0);
      var $139=$p_addr;
      var $arrayidx143=(($139+($add142<<3))|0);
      HEAPF64[(($arrayidx143)>>3)]=$div140;
      var $140=$int_num;
      var $add144=((($140)+(1))|0);
      $int_num=$add144;
      label = 14; break;
    case 14: 
      var $141=$int_num;
      return $141;
    default: assert(0, "bad label: " + label);
  }
}
Module["_halfspace_triangle_int_3d"] = _halfspace_triangle_int_3d;
function _hexagon_contains_point_2d($v, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $v_addr;
      var $p_addr;
      var $i;
      var $j;
      $v_addr=$v;
      $p_addr=$p;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 6;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$i;
      var $add=((($1)+(1))|0);
      var $rem=((((($add)|(0)))%(6))&-1);
      $j=$rem;
      var $2=$i;
      var $mul=($2<<1);
      var $add1=(($mul)|0);
      var $3=$v_addr;
      var $arrayidx=(($3+($add1<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$j;
      var $mul2=($5<<1);
      var $add3=((($mul2)+(1))|0);
      var $6=$v_addr;
      var $arrayidx4=(($6+($add3<<3))|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $8=$p_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $sub=($7)-($9);
      var $mul6=($4)*($sub);
      var $10=$j;
      var $mul7=($10<<1);
      var $add8=(($mul7)|0);
      var $11=$v_addr;
      var $arrayidx9=(($11+($add8<<3))|0);
      var $12=HEAPF64[(($arrayidx9)>>3)];
      var $13=$p_addr;
      var $arrayidx10=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx10)>>3)];
      var $15=$i;
      var $mul11=($15<<1);
      var $add12=((($mul11)+(1))|0);
      var $16=$v_addr;
      var $arrayidx13=(($16+($add12<<3))|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($14)-($17);
      var $mul15=($12)*($sub14);
      var $add16=($mul6)+($mul15);
      var $18=$p_addr;
      var $arrayidx17=(($18)|0);
      var $19=HEAPF64[(($arrayidx17)>>3)];
      var $20=$i;
      var $mul18=($20<<1);
      var $add19=((($mul18)+(1))|0);
      var $21=$v_addr;
      var $arrayidx20=(($21+($add19<<3))|0);
      var $22=HEAPF64[(($arrayidx20)>>3)];
      var $23=$j;
      var $mul21=($23<<1);
      var $add22=((($mul21)+(1))|0);
      var $24=$v_addr;
      var $arrayidx23=(($24+($add22<<3))|0);
      var $25=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($22)-($25);
      var $mul25=($19)*($sub24);
      var $add26=($add16)+($mul25);
      var $cmp27=$add26 < 0;
      if ($cmp27) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $27=$retval;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_hexagon_contains_point_2d"] = _hexagon_contains_point_2d;
function _hexagon_vertices_2d($h) {
  var label = 0;
  var $h_addr;
  $h_addr=$h;
  var $0=$h_addr;
  var $arrayidx=(($0)|0);
  HEAPF64[(($arrayidx)>>3)]=1;
  var $1=$h_addr;
  var $arrayidx1=(($1+16)|0);
  HEAPF64[(($arrayidx1)>>3)]=0.5;
  var $2=$h_addr;
  var $arrayidx2=(($2+32)|0);
  HEAPF64[(($arrayidx2)>>3)]=-0.5;
  var $3=$h_addr;
  var $arrayidx3=(($3+48)|0);
  HEAPF64[(($arrayidx3)>>3)]=-1;
  var $4=$h_addr;
  var $arrayidx4=(($4+64)|0);
  HEAPF64[(($arrayidx4)>>3)]=-0.5;
  var $5=$h_addr;
  var $arrayidx5=(($5+80)|0);
  HEAPF64[(($arrayidx5)>>3)]=0.5;
  var $6=$h_addr;
  var $arrayidx6=(($6+8)|0);
  HEAPF64[(($arrayidx6)>>3)]=0;
  var $7=$h_addr;
  var $arrayidx7=(($7+24)|0);
  HEAPF64[(($arrayidx7)>>3)]=0.8660254037844386;
  var $8=$h_addr;
  var $arrayidx8=(($8+40)|0);
  HEAPF64[(($arrayidx8)>>3)]=0.8660254037844386;
  var $9=$h_addr;
  var $arrayidx9=(($9+56)|0);
  HEAPF64[(($arrayidx9)>>3)]=0;
  var $10=$h_addr;
  var $arrayidx10=(($10+72)|0);
  HEAPF64[(($arrayidx10)>>3)]=-0.8660254037844386;
  var $11=$h_addr;
  var $arrayidx11=(($11+88)|0);
  HEAPF64[(($arrayidx11)>>3)]=-0.8660254037844386;
  return;
}
Module["_hexagon_vertices_2d"] = _hexagon_vertices_2d;
function _halfspace_norm_triangle_int_3d($pp, $pn, $t, $p) {
  var label = 0;
  var $pp_addr;
  var $pn_addr;
  var $t_addr;
  var $p_addr;
  var $dist1;
  var $dist2;
  var $dist3;
  var $int_num;
  $pp_addr=$pp;
  $pn_addr=$pn;
  $t_addr=$t;
  $p_addr=$p;
  var $0=$pn_addr;
  var $1=$t_addr;
  var $add_ptr=(($1)|0);
  var $call=_r8vec_dot_product(3, $0, $add_ptr);
  $dist1=$call;
  var $2=$pn_addr;
  var $3=$t_addr;
  var $add_ptr1=(($3+24)|0);
  var $call2=_r8vec_dot_product(3, $2, $add_ptr1);
  $dist2=$call2;
  var $4=$pn_addr;
  var $5=$t_addr;
  var $add_ptr3=(($5+48)|0);
  var $call4=_r8vec_dot_product(3, $4, $add_ptr3);
  $dist3=$call4;
  var $6=$dist1;
  var $7=$dist2;
  var $8=$dist3;
  var $9=$t_addr;
  var $10=$p_addr;
  var $call5=_halfspace_triangle_int_3d($6, $7, $8, $9, $10);
  $int_num=$call5;
  var $11=$int_num;
  return $11;
}
Module["_halfspace_norm_triangle_int_3d"] = _halfspace_norm_triangle_int_3d;
function _haversine($a) {
  var label = 0;
  var $a_addr;
  $a_addr=$a;
  var $0=$a_addr;
  var $call=Math.cos($0);
  var $sub=(1)-($call);
  var $div=($sub)/(2);
  return $div;
}
Module["_haversine"] = _haversine;
function _helix_shape_3d($a, $n, $r, $theta1, $theta2, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $n_addr;
      var $r_addr;
      var $theta1_addr;
      var $theta2_addr;
      var $p_addr;
      var $i;
      var $theta;
      $a_addr=$a;
      $n_addr=$n;
      $r_addr=$r;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $p_addr=$p;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $2=$n_addr;
      var $cmp1=(($2)|(0))==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$theta1_addr;
      var $4=$theta2_addr;
      var $add=($3)+($4);
      var $mul=($add)*(0.5);
      $theta=$mul;
      label = 7; break;
    case 6: 
      var $5=$n_addr;
      var $6=$i;
      var $sub=((($5)-($6))|0);
      var $conv=(($sub)|(0));
      var $7=$theta1_addr;
      var $mul2=($conv)*($7);
      var $8=$i;
      var $sub3=((($8)-(1))|0);
      var $conv4=(($sub3)|(0));
      var $9=$theta2_addr;
      var $mul5=($conv4)*($9);
      var $add6=($mul2)+($mul5);
      var $10=$n_addr;
      var $sub7=((($10)-(1))|0);
      var $conv8=(($sub7)|(0));
      var $div=($add6)/($conv8);
      $theta=$div;
      label = 7; break;
    case 7: 
      var $11=$r_addr;
      var $12=$theta;
      var $call=Math.cos($12);
      var $mul9=($11)*($call);
      var $13=$i;
      var $mul10=((($13)*(3))&-1);
      var $add11=(($mul10)|0);
      var $14=$p_addr;
      var $arrayidx=(($14+($add11<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=$mul9;
      var $15=$r_addr;
      var $16=$theta;
      var $call12=Math.sin($16);
      var $mul13=($15)*($call12);
      var $17=$i;
      var $mul14=((($17)*(3))&-1);
      var $add15=((($mul14)+(1))|0);
      var $18=$p_addr;
      var $arrayidx16=(($18+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$mul13;
      var $19=$a_addr;
      var $20=$theta;
      var $mul17=($19)*($20);
      var $21=$i;
      var $mul18=((($21)*(3))&-1);
      var $add19=((($mul18)+(2))|0);
      var $22=$p_addr;
      var $arrayidx20=(($22+($add19<<3))|0);
      HEAPF64[(($arrayidx20)>>3)]=$mul17;
      label = 8; break;
    case 8: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_helix_shape_3d"] = _helix_shape_3d;
function _hexagon_area_2d($r) {
  var label = 0;
  var $r_addr;
  var $value;
  $r_addr=$r;
  var $0=$r_addr;
  var $1=$r_addr;
  var $mul=($0)*($1);
  var $call=_hexagon_unit_area_2d();
  var $mul1=($mul)*($call);
  $value=$mul1;
  var $2=$value;
  return $2;
}
Module["_hexagon_area_2d"] = _hexagon_area_2d;
function _hexagon_shape_2d($angle, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $angle_addr;
      var $p_addr;
      $angle_addr=$angle;
      $p_addr=$p;
      var $0=$angle_addr;
      var $call=_r8_modp($0, 360);
      $angle_addr=$call;
      var $1=$angle_addr;
      var $cmp=0 <= $1;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $2=$angle_addr;
      var $cmp1=$2 <= 60;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $call2=Math.sqrt(3);
      var $3=$angle_addr;
      var $call3=_tan_deg($3);
      var $call4=Math.sqrt(3);
      var $add=($call3)+($call4);
      var $div=($call2)/($add);
      var $4=$p_addr;
      var $arrayidx=(($4)|0);
      HEAPF64[(($arrayidx)>>3)]=$div;
      var $5=$angle_addr;
      var $call5=_tan_deg($5);
      var $6=$p_addr;
      var $arrayidx6=(($6)|0);
      var $7=HEAPF64[(($arrayidx6)>>3)];
      var $mul=($call5)*($7);
      var $8=$p_addr;
      var $arrayidx7=(($8+8)|0);
      HEAPF64[(($arrayidx7)>>3)]=$mul;
      label = 20; break;
    case 5: 
      var $9=$angle_addr;
      var $cmp8=$9 <= 120;
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $call10=Math.sqrt(3);
      var $div11=($call10)/(2);
      var $10=$p_addr;
      var $arrayidx12=(($10+8)|0);
      HEAPF64[(($arrayidx12)>>3)]=$div11;
      var $11=$angle_addr;
      var $call13=_cot_deg($11);
      var $12=$p_addr;
      var $arrayidx14=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx14)>>3)];
      var $mul15=($call13)*($13);
      var $14=$p_addr;
      var $arrayidx16=(($14)|0);
      HEAPF64[(($arrayidx16)>>3)]=$mul15;
      label = 19; break;
    case 7: 
      var $15=$angle_addr;
      var $cmp18=$15 <= 180;
      if ($cmp18) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $call20=Math.sqrt(3);
      var $16=$angle_addr;
      var $call21=_tan_deg($16);
      var $call22=Math.sqrt(3);
      var $sub=($call21)-($call22);
      var $div23=($call20)/($sub);
      var $17=$p_addr;
      var $arrayidx24=(($17)|0);
      HEAPF64[(($arrayidx24)>>3)]=$div23;
      var $18=$angle_addr;
      var $call25=_tan_deg($18);
      var $19=$p_addr;
      var $arrayidx26=(($19)|0);
      var $20=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($call25)*($20);
      var $21=$p_addr;
      var $arrayidx28=(($21+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$mul27;
      label = 18; break;
    case 9: 
      var $22=$angle_addr;
      var $cmp30=$22 <= 240;
      if ($cmp30) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $call32=Math.sqrt(3);
      var $sub33=(-$call32);
      var $23=$angle_addr;
      var $call34=_tan_deg($23);
      var $call35=Math.sqrt(3);
      var $add36=($call34)+($call35);
      var $div37=($sub33)/($add36);
      var $24=$p_addr;
      var $arrayidx38=(($24)|0);
      HEAPF64[(($arrayidx38)>>3)]=$div37;
      var $25=$angle_addr;
      var $call39=_tan_deg($25);
      var $26=$p_addr;
      var $arrayidx40=(($26)|0);
      var $27=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($call39)*($27);
      var $28=$p_addr;
      var $arrayidx42=(($28+8)|0);
      HEAPF64[(($arrayidx42)>>3)]=$mul41;
      label = 17; break;
    case 11: 
      var $29=$angle_addr;
      var $cmp44=$29 <= 300;
      if ($cmp44) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $call46=Math.sqrt(3);
      var $sub47=(-$call46);
      var $div48=($sub47)/(2);
      var $30=$p_addr;
      var $arrayidx49=(($30+8)|0);
      HEAPF64[(($arrayidx49)>>3)]=$div48;
      var $31=$angle_addr;
      var $call50=_cot_deg($31);
      var $32=$p_addr;
      var $arrayidx51=(($32+8)|0);
      var $33=HEAPF64[(($arrayidx51)>>3)];
      var $mul52=($call50)*($33);
      var $34=$p_addr;
      var $arrayidx53=(($34)|0);
      HEAPF64[(($arrayidx53)>>3)]=$mul52;
      label = 16; break;
    case 13: 
      var $35=$angle_addr;
      var $cmp55=$35 <= 360;
      if ($cmp55) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $call57=Math.sqrt(3);
      var $sub58=(-$call57);
      var $36=$angle_addr;
      var $call59=_tan_deg($36);
      var $call60=Math.sqrt(3);
      var $sub61=($call59)-($call60);
      var $div62=($sub58)/($sub61);
      var $37=$p_addr;
      var $arrayidx63=(($37)|0);
      HEAPF64[(($arrayidx63)>>3)]=$div62;
      var $38=$angle_addr;
      var $call64=_tan_deg($38);
      var $39=$p_addr;
      var $arrayidx65=(($39)|0);
      var $40=HEAPF64[(($arrayidx65)>>3)];
      var $mul66=($call64)*($40);
      var $41=$p_addr;
      var $arrayidx67=(($41+8)|0);
      HEAPF64[(($arrayidx67)>>3)]=$mul66;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_hexagon_shape_2d"] = _hexagon_shape_2d;
function _tan_deg($angle) {
  var label = 0;
  var $angle_addr;
  var $angle_rad;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $mul=($0)*(0.017453292519943295);
  $angle_rad=$mul;
  var $1=$angle_rad;
  var $call=Math.sin($1);
  var $2=$angle_rad;
  var $call1=Math.cos($2);
  var $div=($call)/($call1);
  $value=$div;
  var $3=$value;
  return $3;
}
Module["_tan_deg"] = _tan_deg;
function _hexagon_unit_area_2d() {
  var label = 0;
  var $value;
  var $call=Math.sqrt(3);
  var $mul=($call)*(3);
  var $div=($mul)/(2);
  $value=$div;
  var $0=$value;
  return $0;
}
Module["_hexagon_unit_area_2d"] = _hexagon_unit_area_2d;
function _i4_dedekind_sum($p, $q) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $q_addr;
      var $i;
      var $s;
      $p_addr=$p;
      $q_addr=$q;
      $s=0;
      $i=1;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$q_addr;
      var $cmp=(($0)|(0)) <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$s;
      var $3=$i;
      var $4=$q_addr;
      var $call=_i4_dedekind_factor($3, $4);
      var $5=$p_addr;
      var $6=$i;
      var $mul=(Math.imul($5,$6)|0);
      var $7=$q_addr;
      var $call1=_i4_dedekind_factor($mul, $7);
      var $mul2=($call)*($call1);
      var $add=($2)+($mul2);
      $s=$add;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $9=$s;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_dedekind_sum"] = _i4_dedekind_sum;
function _i4_swap($i, $j) {
  var label = 0;
  var $i_addr;
  var $j_addr;
  var $k;
  $i_addr=$i;
  $j_addr=$j;
  var $0=$i_addr;
  var $1=HEAP32[(($0)>>2)];
  $k=$1;
  var $2=$j_addr;
  var $3=HEAP32[(($2)>>2)];
  var $4=$i_addr;
  HEAP32[(($4)>>2)]=$3;
  var $5=$k;
  var $6=$j_addr;
  HEAP32[(($6)>>2)]=$5;
  return;
}
Module["_i4_swap"] = _i4_swap;
function _i4_min($i1, $i2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i1_addr;
      var $i2_addr;
      var $value;
      $i1_addr=$i1;
      $i2_addr=$i2;
      var $0=$i1_addr;
      var $1=$i2_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$i1_addr;
      $value=$2;
      label = 5; break;
    case 4: 
      var $3=$i2_addr;
      $value=$3;
      label = 5; break;
    case 5: 
      var $4=$value;
      return $4;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_min"] = _i4_min;
function _i4_sign($i) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $value;
      $i_addr=$i;
      var $0=$i_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $value=-1;
      label = 5; break;
    case 4: 
      $value=1;
      label = 5; break;
    case 5: 
      var $1=$value;
      return $1;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_sign"] = _i4_sign;
function _sort_heap_external($n, $indx, $i, $j, $isgn) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $indx_addr;
      var $i_addr;
      var $j_addr;
      var $isgn_addr;
      $n_addr=$n;
      $indx_addr=$indx;
      $i_addr=$i;
      $j_addr=$j;
      $isgn_addr=$isgn;
      var $0=$indx_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[((2408)>>2)]=0;
      HEAP32[((2400)>>2)]=0;
      var $2=$n_addr;
      var $div=((((($2)|(0)))/(2))&-1);
      HEAP32[((2392)>>2)]=$div;
      var $3=HEAP32[((2392)>>2)];
      HEAP32[((2384)>>2)]=$3;
      var $4=$n_addr;
      HEAP32[((2376)>>2)]=$4;
      label = 21; break;
    case 4: 
      var $5=$indx_addr;
      var $6=HEAP32[(($5)>>2)];
      var $cmp1=(($6)|(0)) < 0;
      if ($cmp1) { label = 5; break; } else { label = 17; break; }
    case 5: 
      var $7=$indx_addr;
      var $8=HEAP32[(($7)>>2)];
      var $cmp3=(($8)|(0))==-2;
      if ($cmp3) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $9=$isgn_addr;
      var $cmp5=(($9)|(0)) < 0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=HEAP32[((2408)>>2)];
      var $add=((($10)+(1))|0);
      HEAP32[((2408)>>2)]=$add;
      label = 8; break;
    case 8: 
      var $11=HEAP32[((2384)>>2)];
      HEAP32[((2400)>>2)]=$11;
      var $12=HEAP32[((2408)>>2)];
      HEAP32[((2384)>>2)]=$12;
      var $13=$indx_addr;
      HEAP32[(($13)>>2)]=-1;
      var $14=HEAP32[((2408)>>2)];
      var $15=$i_addr;
      HEAP32[(($15)>>2)]=$14;
      var $16=HEAP32[((2400)>>2)];
      var $17=$j_addr;
      HEAP32[(($17)>>2)]=$16;
      label = 34; break;
    case 9: 
      var $18=$isgn_addr;
      var $cmp8=0 < (($18)|(0));
      if ($cmp8) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $19=$indx_addr;
      HEAP32[(($19)>>2)]=2;
      var $20=HEAP32[((2408)>>2)];
      var $21=$i_addr;
      HEAP32[(($21)>>2)]=$20;
      var $22=HEAP32[((2400)>>2)];
      var $23=$j_addr;
      HEAP32[(($23)>>2)]=$22;
      label = 34; break;
    case 11: 
      var $24=HEAP32[((2392)>>2)];
      var $cmp11=(($24)|(0)) <= 1;
      if ($cmp11) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $25=HEAP32[((2376)>>2)];
      var $cmp13=(($25)|(0))==1;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      HEAP32[((2408)>>2)]=0;
      HEAP32[((2400)>>2)]=0;
      var $26=$indx_addr;
      HEAP32[(($26)>>2)]=0;
      label = 15; break;
    case 14: 
      var $27=HEAP32[((2376)>>2)];
      HEAP32[((2408)>>2)]=$27;
      HEAP32[((2400)>>2)]=1;
      var $28=HEAP32[((2376)>>2)];
      var $sub=((($28)-(1))|0);
      HEAP32[((2376)>>2)]=$sub;
      var $29=$indx_addr;
      HEAP32[(($29)>>2)]=1;
      label = 15; break;
    case 15: 
      var $30=HEAP32[((2408)>>2)];
      var $31=$i_addr;
      HEAP32[(($31)>>2)]=$30;
      var $32=HEAP32[((2400)>>2)];
      var $33=$j_addr;
      HEAP32[(($33)>>2)]=$32;
      label = 34; break;
    case 16: 
      var $34=HEAP32[((2392)>>2)];
      var $sub18=((($34)-(1))|0);
      HEAP32[((2392)>>2)]=$sub18;
      var $35=HEAP32[((2392)>>2)];
      HEAP32[((2384)>>2)]=$35;
      label = 20; break;
    case 17: 
      var $36=$indx_addr;
      var $37=HEAP32[(($36)>>2)];
      var $cmp20=(($37)|(0))==1;
      if ($cmp20) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $38=HEAP32[((2392)>>2)];
      HEAP32[((2384)>>2)]=$38;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $39=HEAP32[((2384)>>2)];
      var $mul=($39<<1);
      HEAP32[((2408)>>2)]=$mul;
      var $40=HEAP32[((2408)>>2)];
      var $41=HEAP32[((2376)>>2)];
      var $cmp25=(($40)|(0))==(($41)|(0));
      if ($cmp25) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $42=HEAP32[((2384)>>2)];
      HEAP32[((2400)>>2)]=$42;
      var $43=HEAP32[((2408)>>2)];
      HEAP32[((2384)>>2)]=$43;
      var $44=$indx_addr;
      HEAP32[(($44)>>2)]=-1;
      var $45=HEAP32[((2408)>>2)];
      var $46=$i_addr;
      HEAP32[(($46)>>2)]=$45;
      var $47=HEAP32[((2400)>>2)];
      var $48=$j_addr;
      HEAP32[(($48)>>2)]=$47;
      label = 34; break;
    case 24: 
      var $49=HEAP32[((2408)>>2)];
      var $50=HEAP32[((2376)>>2)];
      var $cmp28=(($49)|(0)) <= (($50)|(0));
      if ($cmp28) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $51=HEAP32[((2408)>>2)];
      var $add30=((($51)+(1))|0);
      HEAP32[((2400)>>2)]=$add30;
      var $52=$indx_addr;
      HEAP32[(($52)>>2)]=-2;
      var $53=HEAP32[((2408)>>2)];
      var $54=$i_addr;
      HEAP32[(($54)>>2)]=$53;
      var $55=HEAP32[((2400)>>2)];
      var $56=$j_addr;
      HEAP32[(($56)>>2)]=$55;
      label = 34; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $57=HEAP32[((2392)>>2)];
      var $cmp33=(($57)|(0)) <= 1;
      if ($cmp33) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 30; break;
    case 29: 
      var $58=HEAP32[((2392)>>2)];
      var $sub36=((($58)-(1))|0);
      HEAP32[((2392)>>2)]=$sub36;
      var $59=HEAP32[((2392)>>2)];
      HEAP32[((2384)>>2)]=$59;
      label = 22; break;
    case 30: 
      var $60=HEAP32[((2376)>>2)];
      var $cmp37=(($60)|(0))==1;
      if ($cmp37) { label = 31; break; } else { label = 32; break; }
    case 31: 
      HEAP32[((2408)>>2)]=0;
      HEAP32[((2400)>>2)]=0;
      var $61=$indx_addr;
      HEAP32[(($61)>>2)]=0;
      var $62=HEAP32[((2408)>>2)];
      var $63=$i_addr;
      HEAP32[(($63)>>2)]=$62;
      var $64=HEAP32[((2400)>>2)];
      var $65=$j_addr;
      HEAP32[(($65)>>2)]=$64;
      label = 33; break;
    case 32: 
      var $66=HEAP32[((2376)>>2)];
      HEAP32[((2408)>>2)]=$66;
      HEAP32[((2400)>>2)]=1;
      var $67=HEAP32[((2376)>>2)];
      var $sub40=((($67)-(1))|0);
      HEAP32[((2376)>>2)]=$sub40;
      var $68=$indx_addr;
      HEAP32[(($68)>>2)]=1;
      var $69=HEAP32[((2408)>>2)];
      var $70=$i_addr;
      HEAP32[(($70)>>2)]=$69;
      var $71=HEAP32[((2400)>>2)];
      var $72=$j_addr;
      HEAP32[(($72)>>2)]=$71;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sort_heap_external"] = _sort_heap_external;
function _i4_gcd($i, $j) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $i_addr;
      var $j_addr;
      var $p;
      var $q;
      var $r;
      $i_addr=$i;
      $j_addr=$j;
      var $0=$i_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$j_addr;
      var $call=Math.abs($1);
      var $call1=_i4_max(1, $call);
      $q=$call1;
      var $2=$q;
      $retval=$2;
      label = 12; break;
    case 4: 
      var $3=$j_addr;
      var $cmp2=(($3)|(0))==0;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$i_addr;
      var $call4=Math.abs($4);
      var $call5=_i4_max(1, $call4);
      $q=$call5;
      var $5=$q;
      $retval=$5;
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$i_addr;
      var $call7=Math.abs($6);
      var $7=$j_addr;
      var $call8=Math.abs($7);
      var $call9=_i4_max($call7, $call8);
      $p=$call9;
      var $8=$i_addr;
      var $call10=Math.abs($8);
      var $9=$j_addr;
      var $call11=Math.abs($9);
      var $call12=_i4_min($call10, $call11);
      $q=$call12;
      label = 8; break;
    case 8: 
      var $10=$p;
      var $11=$q;
      var $rem=((((($10)|(0)))%((($11)|(0))))&-1);
      $r=$rem;
      var $12=$r;
      var $cmp13=(($12)|(0))==0;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $13=$q;
      $p=$13;
      var $14=$r;
      $q=$14;
      label = 8; break;
    case 11: 
      var $15=$q;
      $retval=$15;
      label = 12; break;
    case 12: 
      var $16=$retval;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_gcd"] = _i4_gcd;
function _i4_lcm($i, $j) {
  var label = 0;
  var $i_addr;
  var $j_addr;
  var $value;
  $i_addr=$i;
  $j_addr=$j;
  var $0=$i_addr;
  var $1=$j_addr;
  var $2=$i_addr;
  var $3=$j_addr;
  var $call=_i4_gcd($2, $3);
  var $div=((((($1)|(0)))/((($call)|(0))))&-1);
  var $mul=(Math.imul($0,$div)|0);
  var $call1=Math.abs($mul);
  $value=$call1;
  var $4=$value;
  return $4;
}
Module["_i4_lcm"] = _i4_lcm;
function _r4_nint($x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $s;
      var $value;
      $x_addr=$x;
      var $0=$x_addr;
      var $conv=$0;
      var $cmp=$conv < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $s=-1;
      label = 5; break;
    case 4: 
      $s=1;
      label = 5; break;
    case 5: 
      var $1=$s;
      var $2=$x_addr;
      var $conv2=$2;
      var $call=Math.abs($conv2);
      var $add=($call)+(0.5);
      var $conv3=(($add)&-1);
      var $mul=(Math.imul($1,$conv3)|0);
      $value=$mul;
      var $3=$value;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r4_nint"] = _r4_nint;
function _i4_wrap($ival, $ilo, $ihi) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ival_addr;
      var $ilo_addr;
      var $ihi_addr;
      var $jhi;
      var $jlo;
      var $value;
      var $wide;
      $ival_addr=$ival;
      $ilo_addr=$ilo;
      $ihi_addr=$ihi;
      var $0=$ilo_addr;
      var $1=$ihi_addr;
      var $call=_i4_min($0, $1);
      $jlo=$call;
      var $2=$ilo_addr;
      var $3=$ihi_addr;
      var $call1=_i4_max($2, $3);
      $jhi=$call1;
      var $4=$jhi;
      var $add=((($4)+(1))|0);
      var $5=$jlo;
      var $sub=((($add)-($5))|0);
      $wide=$sub;
      var $6=$wide;
      var $cmp=(($6)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$jlo;
      $value=$7;
      label = 5; break;
    case 4: 
      var $8=$jlo;
      var $9=$ival_addr;
      var $10=$jlo;
      var $sub2=((($9)-($10))|0);
      var $11=$wide;
      var $call3=_i4_modp($sub2, $11);
      var $add4=((($8)+($call3))|0);
      $value=$add4;
      label = 5; break;
    case 5: 
      var $12=$value;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_wrap"] = _i4_wrap;
function _i4col_sort_a($m, $n, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $i=__stackBase__;
      var $indx=(__stackBase__)+(8);
      var $isgn;
      var $j=(__stackBase__)+(16);
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      HEAP32[(($i)>>2)]=0;
      HEAP32[(($indx)>>2)]=0;
      $isgn=0;
      HEAP32[(($j)>>2)]=0;
      label = 3; break;
    case 3: 
      var $0=$n_addr;
      var $1=$isgn;
      _sort_heap_external($0, $indx, $i, $j, $1);
      var $2=HEAP32[(($indx)>>2)];
      var $cmp=0 < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$m_addr;
      var $4=$n_addr;
      var $5=$a_addr;
      var $6=HEAP32[(($i)>>2)];
      var $7=HEAP32[(($j)>>2)];
      _i4col_swap($3, $4, $5, $6, $7);
      label = 11; break;
    case 5: 
      var $8=HEAP32[(($indx)>>2)];
      var $cmp1=(($8)|(0)) < 0;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$m_addr;
      var $10=$n_addr;
      var $11=$a_addr;
      var $12=HEAP32[(($i)>>2)];
      var $13=HEAP32[(($j)>>2)];
      var $call=_i4col_compare($9, $10, $11, $12, $13);
      $isgn=$call;
      label = 10; break;
    case 7: 
      var $14=HEAP32[(($indx)>>2)];
      var $cmp4=(($14)|(0))==0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 3; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4col_sort_a"] = _i4col_sort_a;
function _i4_modp($i, $j) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $i_addr;
      var $j_addr;
      var $value;
      $i_addr=$i;
      $j_addr=$j;
      var $0=$j_addr;
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((11088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $4=$j_addr;
      var $call2=_fprintf($3, ((11000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$i_addr;
      var $6=$j_addr;
      var $rem=((((($5)|(0)))%((($6)|(0))))&-1);
      $value=$rem;
      var $7=$value;
      var $cmp3=(($7)|(0)) < 0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$value;
      var $9=$j_addr;
      var $call5=Math.abs($9);
      var $add=((($8)+($call5))|0);
      $value=$add;
      label = 6; break;
    case 6: 
      var $10=$value;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_modp"] = _i4_modp;
function _i4_uniform($a, $b, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $seed_addr;
      var $k;
      var $r;
      var $value;
      $a_addr=$a;
      $b_addr=$b;
      $seed_addr=$seed;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($3, ((10952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($4, ((10840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$seed_addr;
      var $6=HEAP32[(($5)>>2)];
      var $div=((((($6)|(0)))/(127773))&-1);
      $k=$div;
      var $7=$seed_addr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$k;
      var $mul=((($9)*(127773))&-1);
      var $sub=((($8)-($mul))|0);
      var $mul3=((($sub)*(16807))&-1);
      var $10=$k;
      var $mul4=((($10)*(2836))&-1);
      var $sub5=((($mul3)-($mul4))|0);
      var $11=$seed_addr;
      HEAP32[(($11)>>2)]=$sub5;
      var $12=$seed_addr;
      var $13=HEAP32[(($12)>>2)];
      var $cmp6=(($13)|(0)) < 0;
      if ($cmp6) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$seed_addr;
      var $15=HEAP32[(($14)>>2)];
      var $add=((($15)+(2147483647))|0);
      var $16=$seed_addr;
      HEAP32[(($16)>>2)]=$add;
      label = 6; break;
    case 6: 
      var $17=$seed_addr;
      var $18=HEAP32[(($17)>>2)];
      var $conv=(($18)|(0));
      var $conv9=$conv;
      var $mul10=($conv9)*(4.656612875e-10);
      var $conv11=$mul10;
      $r=$conv11;
      var $19=$r;
      var $conv12=$19;
      var $sub13=(1)-($conv12);
      var $20=$a_addr;
      var $21=$b_addr;
      var $call14=_i4_min($20, $21);
      var $conv15=(($call14)|(0));
      var $conv16=$conv15;
      var $sub17=($conv16)-(0.5);
      var $mul18=($sub13)*($sub17);
      var $22=$r;
      var $conv19=$22;
      var $23=$a_addr;
      var $24=$b_addr;
      var $call20=_i4_max($23, $24);
      var $conv21=(($call20)|(0));
      var $conv22=$conv21;
      var $add23=($conv22)+(0.5);
      var $mul24=($conv19)*($add23);
      var $add25=($mul18)+($mul24);
      var $conv26=$add25;
      $r=$conv26;
      var $25=$r;
      var $call27=_r4_nint($25);
      $value=$call27;
      var $26=$value;
      var $27=$a_addr;
      var $28=$b_addr;
      var $call28=_i4_min($27, $28);
      var $call29=_i4_max($26, $call28);
      $value=$call29;
      var $29=$value;
      var $30=$a_addr;
      var $31=$b_addr;
      var $call30=_i4_max($30, $31);
      var $call31=_i4_min($29, $call30);
      $value=$call31;
      var $32=$value;
      STACKTOP = __stackBase__;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4_uniform"] = _i4_uniform;
function _i4col_compare($m, $n, $a, $i, $j) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $i_addr;
      var $j_addr;
      var $k;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $i_addr=$i;
      $j_addr=$j;
      var $0=$i_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((10736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $4=$i_addr;
      var $call2=_fprintf($3, ((10672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$n_addr;
      var $6=$i_addr;
      var $cmp3=(($5)|(0)) < (($6)|(0));
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($7, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($8, ((10736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $10=$n_addr;
      var $11=$i_addr;
      var $call7=_fprintf($9, ((10600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(8))>>2)]=$11,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      var $12=$j_addr;
      var $cmp9=(($12)|(0)) < 1;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $13=HEAP32[((_stderr)>>2)];
      var $call11=_fprintf($13, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $14=HEAP32[((_stderr)>>2)];
      var $call12=_fprintf($14, ((10736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $15=HEAP32[((_stderr)>>2)];
      var $16=$j_addr;
      var $call13=_fprintf($15, ((10536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 8: 
      var $17=$n_addr;
      var $18=$j_addr;
      var $cmp15=(($17)|(0)) < (($18)|(0));
      if ($cmp15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=HEAP32[((_stderr)>>2)];
      var $call17=_fprintf($19, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=HEAP32[((_stderr)>>2)];
      var $call18=_fprintf($20, ((10736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAP32[((_stderr)>>2)];
      var $22=$n_addr;
      var $23=$j_addr;
      var $call19=_fprintf($21, ((10472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$22,HEAP32[(((tempInt)+(8))>>2)]=$23,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 10: 
      var $24=$i_addr;
      var $25=$j_addr;
      var $cmp21=(($24)|(0))==(($25)|(0));
      if ($cmp21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 21; break;
    case 12: 
      $k=1;
      label = 13; break;
    case 13: 
      var $26=$k;
      var $27=$m_addr;
      var $cmp24=(($26)|(0)) <= (($27)|(0));
      if ($cmp24) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $28=$k;
      var $sub=((($28)-(1))|0);
      var $29=$i_addr;
      var $sub25=((($29)-(1))|0);
      var $30=$m_addr;
      var $mul=(Math.imul($sub25,$30)|0);
      var $add=((($sub)+($mul))|0);
      var $31=$a_addr;
      var $arrayidx=(($31+($add<<2))|0);
      var $32=HEAP32[(($arrayidx)>>2)];
      var $33=$k;
      var $sub26=((($33)-(1))|0);
      var $34=$j_addr;
      var $sub27=((($34)-(1))|0);
      var $35=$m_addr;
      var $mul28=(Math.imul($sub27,$35)|0);
      var $add29=((($sub26)+($mul28))|0);
      var $36=$a_addr;
      var $arrayidx30=(($36+($add29<<2))|0);
      var $37=HEAP32[(($arrayidx30)>>2)];
      var $cmp31=(($32)|(0)) < (($37)|(0));
      if ($cmp31) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=-1;
      label = 21; break;
    case 16: 
      var $38=$k;
      var $sub33=((($38)-(1))|0);
      var $39=$j_addr;
      var $sub34=((($39)-(1))|0);
      var $40=$m_addr;
      var $mul35=(Math.imul($sub34,$40)|0);
      var $add36=((($sub33)+($mul35))|0);
      var $41=$a_addr;
      var $arrayidx37=(($41+($add36<<2))|0);
      var $42=HEAP32[(($arrayidx37)>>2)];
      var $43=$k;
      var $sub38=((($43)-(1))|0);
      var $44=$i_addr;
      var $sub39=((($44)-(1))|0);
      var $45=$m_addr;
      var $mul40=(Math.imul($sub39,$45)|0);
      var $add41=((($sub38)+($mul40))|0);
      var $46=$a_addr;
      var $arrayidx42=(($46+($add41<<2))|0);
      var $47=HEAP32[(($arrayidx42)>>2)];
      var $cmp43=(($42)|(0)) < (($47)|(0));
      if ($cmp43) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=1;
      label = 21; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $48=$k;
      var $add47=((($48)+(1))|0);
      $k=$add47;
      label = 13; break;
    case 20: 
      $retval=0;
      label = 21; break;
    case 21: 
      var $49=$retval;
      STACKTOP = __stackBase__;
      return $49;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4col_compare"] = _i4col_compare;
function _i4col_sorted_unique_count($m, $n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $i;
      var $j1;
      var $j2;
      var $unique_num;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $unique_num=0;
      var $1=$unique_num;
      $retval=$1;
      label = 15; break;
    case 4: 
      $unique_num=1;
      $j1=0;
      $j2=1;
      label = 5; break;
    case 5: 
      var $2=$j2;
      var $3=$n_addr;
      var $cmp1=(($2)|(0)) < (($3)|(0));
      if ($cmp1) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $4=$i;
      var $5=$m_addr;
      var $cmp3=(($4)|(0)) < (($5)|(0));
      if ($cmp3) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $6=$i;
      var $7=$j1;
      var $8=$m_addr;
      var $mul=(Math.imul($7,$8)|0);
      var $add=((($6)+($mul))|0);
      var $9=$a_addr;
      var $arrayidx=(($9+($add<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $11=$i;
      var $12=$j2;
      var $13=$m_addr;
      var $mul5=(Math.imul($12,$13)|0);
      var $add6=((($11)+($mul5))|0);
      var $14=$a_addr;
      var $arrayidx7=(($14+($add6<<2))|0);
      var $15=HEAP32[(($arrayidx7)>>2)];
      var $cmp8=(($10)|(0))!=(($15)|(0));
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$unique_num;
      var $add10=((($16)+(1))|0);
      $unique_num=$add10;
      var $17=$j2;
      $j1=$17;
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $19=$j2;
      var $inc13=((($19)+(1))|0);
      $j2=$inc13;
      label = 5; break;
    case 14: 
      var $20=$unique_num;
      $retval=$20;
      label = 15; break;
    case 15: 
      var $21=$retval;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4col_sorted_unique_count"] = _i4col_sorted_unique_count;
function _i4mat_print($m, $n, $a, $title) {
  var label = 0;
  var $m_addr;
  var $n_addr;
  var $a_addr;
  var $title_addr;
  $m_addr=$m;
  $n_addr=$n;
  $a_addr=$a;
  $title_addr=$title;
  var $0=$m_addr;
  var $1=$n_addr;
  var $2=$a_addr;
  var $3=$m_addr;
  var $4=$n_addr;
  var $5=$title_addr;
  _i4mat_print_some($0, $1, $2, 1, 1, $3, $4, $5);
  return;
}
Module["_i4mat_print"] = _i4mat_print;
function _i4mat_print_some($m, $n, $a, $ilo, $jlo, $ihi, $jhi, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $ilo_addr;
      var $jlo_addr;
      var $ihi_addr;
      var $jhi_addr;
      var $title_addr;
      var $i;
      var $i2hi;
      var $i2lo;
      var $j;
      var $j2hi;
      var $j2lo;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $ilo_addr=$ilo;
      $jlo_addr=$jlo;
      $ihi_addr=$ihi;
      $jhi_addr=$jhi;
      $title_addr=$title;
      var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $0=$title_addr;
      var $call1=_printf(((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$0,tempInt));
      var $1=$jlo_addr;
      $j2lo=$1;
      label = 3; break;
    case 3: 
      var $2=$j2lo;
      var $3=$jhi_addr;
      var $cmp=(($2)|(0)) <= (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $4=$j2lo;
      var $add=((($4)+(10))|0);
      var $sub=((($add)-(1))|0);
      $j2hi=$sub;
      var $5=$j2hi;
      var $6=$n_addr;
      var $call2=_i4_min($5, $6);
      $j2hi=$call2;
      var $7=$j2hi;
      var $8=$jhi_addr;
      var $call3=_i4_min($7, $8);
      $j2hi=$call3;
      var $call4=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call5=_printf(((10272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=$j2lo;
      $j=$9;
      label = 5; break;
    case 5: 
      var $10=$j;
      var $11=$j2hi;
      var $cmp7=(($10)|(0)) <= (($11)|(0));
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$j;
      var $call9=_printf(((10184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$12,tempInt));
      label = 7; break;
    case 7: 
      var $13=$j;
      var $inc=((($13)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $call10=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call11=_printf(((10096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call12=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $14=$ilo_addr;
      var $call13=_i4_max($14, 1);
      $i2lo=$call13;
      var $15=$ihi_addr;
      var $16=$m_addr;
      var $call14=_i4_min($15, $16);
      $i2hi=$call14;
      var $17=$i2lo;
      $i=$17;
      label = 9; break;
    case 9: 
      var $18=$i;
      var $19=$i2hi;
      var $cmp16=(($18)|(0)) <= (($19)|(0));
      if ($cmp16) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $20=$i;
      var $call18=_printf(((10064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$20,tempInt));
      var $21=$j2lo;
      $j=$21;
      label = 11; break;
    case 11: 
      var $22=$j;
      var $23=$j2hi;
      var $cmp20=(($22)|(0)) <= (($23)|(0));
      if ($cmp20) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $24=$i;
      var $sub22=((($24)-(1))|0);
      var $25=$j;
      var $sub23=((($25)-(1))|0);
      var $26=$m_addr;
      var $mul=(Math.imul($sub23,$26)|0);
      var $add24=((($sub22)+($mul))|0);
      var $27=$a_addr;
      var $arrayidx=(($27+($add24<<2))|0);
      var $28=HEAP32[(($arrayidx)>>2)];
      var $call25=_printf(((10184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$28,tempInt));
      label = 13; break;
    case 13: 
      var $29=$j;
      var $inc27=((($29)+(1))|0);
      $j=$inc27;
      label = 11; break;
    case 14: 
      var $call29=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $30=$i;
      var $inc31=((($30)+(1))|0);
      $i=$inc31;
      label = 9; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $31=$j2lo;
      var $add34=((($31)+(10))|0);
      $j2lo=$add34;
      label = 3; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4mat_print_some"] = _i4mat_print_some;
function _i4mat_transpose_print($m, $n, $a, $title) {
  var label = 0;
  var $m_addr;
  var $n_addr;
  var $a_addr;
  var $title_addr;
  $m_addr=$m;
  $n_addr=$n;
  $a_addr=$a;
  $title_addr=$title;
  var $0=$m_addr;
  var $1=$n_addr;
  var $2=$a_addr;
  var $3=$m_addr;
  var $4=$n_addr;
  var $5=$title_addr;
  _i4mat_transpose_print_some($0, $1, $2, 1, 1, $3, $4, $5);
  return;
}
Module["_i4mat_transpose_print"] = _i4mat_transpose_print;
function _i4mat_transpose_print_some($m, $n, $a, $ilo, $jlo, $ihi, $jhi, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $ilo_addr;
      var $jlo_addr;
      var $ihi_addr;
      var $jhi_addr;
      var $title_addr;
      var $i;
      var $i2hi;
      var $i2lo;
      var $j;
      var $j2hi;
      var $j2lo;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $ilo_addr=$ilo;
      $jlo_addr=$jlo;
      $ihi_addr=$ihi;
      $jhi_addr=$jhi;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=$ilo_addr;
      $i2lo=$3;
      label = 3; break;
    case 3: 
      var $4=$i2lo;
      var $5=$ihi_addr;
      var $cmp=(($4)|(0)) <= (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $6=$i2lo;
      var $add=((($6)+(10))|0);
      var $sub=((($add)-(1))|0);
      $i2hi=$sub;
      var $7=$i2hi;
      var $8=$m_addr;
      var $call2=_i4_min($7, $8);
      $i2hi=$call2;
      var $9=$i2hi;
      var $10=$ihi_addr;
      var $call3=_i4_min($9, $10);
      $i2hi=$call3;
      var $11=HEAP32[((_stdout)>>2)];
      var $call4=_fprintf($11, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $12=HEAP32[((_stdout)>>2)];
      var $call5=_fprintf($12, ((10040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $13=$i2lo;
      $i=$13;
      label = 5; break;
    case 5: 
      var $14=$i;
      var $15=$i2hi;
      var $cmp7=(($14)|(0)) <= (($15)|(0));
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $16=HEAP32[((_stdout)>>2)];
      var $17=$i;
      var $call9=_fprintf($16, ((9984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$17,tempInt));
      label = 7; break;
    case 7: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $19=HEAP32[((_stdout)>>2)];
      var $call10=_fprintf($19, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=HEAP32[((_stdout)>>2)];
      var $call11=_fprintf($20, ((9952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAP32[((_stdout)>>2)];
      var $call12=_fprintf($21, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $22=$jlo_addr;
      var $call13=_i4_max($22, 1);
      $j2lo=$call13;
      var $23=$jhi_addr;
      var $24=$n_addr;
      var $call14=_i4_min($23, $24);
      $j2hi=$call14;
      var $25=$j2lo;
      $j=$25;
      label = 9; break;
    case 9: 
      var $26=$j;
      var $27=$j2hi;
      var $cmp16=(($26)|(0)) <= (($27)|(0));
      if ($cmp16) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $28=HEAP32[((_stdout)>>2)];
      var $29=$j;
      var $call18=_fprintf($28, ((9928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$29,tempInt));
      var $30=$i2lo;
      $i=$30;
      label = 11; break;
    case 11: 
      var $31=$i;
      var $32=$i2hi;
      var $cmp20=(($31)|(0)) <= (($32)|(0));
      if ($cmp20) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $33=HEAP32[((_stdout)>>2)];
      var $34=$i;
      var $sub22=((($34)-(1))|0);
      var $35=$j;
      var $sub23=((($35)-(1))|0);
      var $36=$m_addr;
      var $mul=(Math.imul($sub23,$36)|0);
      var $add24=((($sub22)+($mul))|0);
      var $37=$a_addr;
      var $arrayidx=(($37+($add24<<2))|0);
      var $38=HEAP32[(($arrayidx)>>2)];
      var $call25=_fprintf($33, ((9984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$38,tempInt));
      label = 13; break;
    case 13: 
      var $39=$i;
      var $inc27=((($39)+(1))|0);
      $i=$inc27;
      label = 11; break;
    case 14: 
      var $40=HEAP32[((_stdout)>>2)];
      var $call29=_fprintf($40, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $41=$j;
      var $inc31=((($41)+(1))|0);
      $j=$inc31;
      label = 9; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $42=$i2lo;
      var $add34=((($42)+(10))|0);
      $i2lo=$add34;
      label = 3; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4mat_transpose_print_some"] = _i4mat_transpose_print_some;
function _i4row_sort_a($m, $n, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $i=__stackBase__;
      var $indx=(__stackBase__)+(8);
      var $isgn;
      var $j=(__stackBase__)+(16);
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      HEAP32[(($i)>>2)]=0;
      HEAP32[(($indx)>>2)]=0;
      $isgn=0;
      HEAP32[(($j)>>2)]=0;
      label = 3; break;
    case 3: 
      var $0=$m_addr;
      var $1=$isgn;
      _sort_heap_external($0, $indx, $i, $j, $1);
      var $2=HEAP32[(($indx)>>2)];
      var $cmp=0 < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$m_addr;
      var $4=$n_addr;
      var $5=$a_addr;
      var $6=HEAP32[(($i)>>2)];
      var $7=HEAP32[(($j)>>2)];
      _i4row_swap($3, $4, $5, $6, $7);
      label = 11; break;
    case 5: 
      var $8=HEAP32[(($indx)>>2)];
      var $cmp1=(($8)|(0)) < 0;
      if ($cmp1) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $9=$m_addr;
      var $10=$n_addr;
      var $11=$a_addr;
      var $12=HEAP32[(($i)>>2)];
      var $13=HEAP32[(($j)>>2)];
      var $call=_i4row_compare($9, $10, $11, $12, $13);
      $isgn=$call;
      label = 10; break;
    case 7: 
      var $14=HEAP32[(($indx)>>2)];
      var $cmp4=(($14)|(0))==0;
      if ($cmp4) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 3; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4row_sort_a"] = _i4row_sort_a;
function _i4col_swap($m, $n, $a, $icol1, $icol2) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $icol1_addr;
      var $icol2_addr;
      var $i;
      var $t;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $icol1_addr=$icol1;
      $icol2_addr=$icol2;
      var $0=$icol1_addr;
      var $sub=((($0)-(1))|0);
      var $cmp=(($sub)|(0)) < 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$n_addr;
      var $sub1=((($1)-(1))|0);
      var $2=$icol1_addr;
      var $sub2=((($2)-(1))|0);
      var $cmp3=(($sub1)|(0)) < (($sub2)|(0));
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($4, ((10416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($5, ((10360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 5: 
      var $6=$icol2_addr;
      var $sub6=((($6)-(1))|0);
      var $cmp7=(($sub6)|(0)) < 0;
      if ($cmp7) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $7=$n_addr;
      var $sub9=((($7)-(1))|0);
      var $8=$icol2_addr;
      var $sub10=((($8)-(1))|0);
      var $cmp11=(($sub9)|(0)) < (($sub10)|(0));
      if ($cmp11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=HEAP32[((_stderr)>>2)];
      var $call13=_fprintf($9, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $call14=_fprintf($10, ((10416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=HEAP32[((_stderr)>>2)];
      var $call15=_fprintf($11, ((10296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 8: 
      var $12=$icol1_addr;
      var $13=$icol2_addr;
      var $cmp17=(($12)|(0))==(($13)|(0));
      if ($cmp17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 15; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $14=$i;
      var $15=$m_addr;
      var $cmp20=(($14)|(0)) < (($15)|(0));
      if ($cmp20) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $16=$i;
      var $17=$icol1_addr;
      var $sub21=((($17)-(1))|0);
      var $18=$m_addr;
      var $mul=(Math.imul($sub21,$18)|0);
      var $add=((($16)+($mul))|0);
      var $19=$a_addr;
      var $arrayidx=(($19+($add<<2))|0);
      var $20=HEAP32[(($arrayidx)>>2)];
      $t=$20;
      var $21=$i;
      var $22=$icol2_addr;
      var $sub22=((($22)-(1))|0);
      var $23=$m_addr;
      var $mul23=(Math.imul($sub22,$23)|0);
      var $add24=((($21)+($mul23))|0);
      var $24=$a_addr;
      var $arrayidx25=(($24+($add24<<2))|0);
      var $25=HEAP32[(($arrayidx25)>>2)];
      var $26=$i;
      var $27=$icol1_addr;
      var $sub26=((($27)-(1))|0);
      var $28=$m_addr;
      var $mul27=(Math.imul($sub26,$28)|0);
      var $add28=((($26)+($mul27))|0);
      var $29=$a_addr;
      var $arrayidx29=(($29+($add28<<2))|0);
      HEAP32[(($arrayidx29)>>2)]=$25;
      var $30=$t;
      var $31=$i;
      var $32=$icol2_addr;
      var $sub30=((($32)-(1))|0);
      var $33=$m_addr;
      var $mul31=(Math.imul($sub30,$33)|0);
      var $add32=((($31)+($mul31))|0);
      var $34=$a_addr;
      var $arrayidx33=(($34+($add32<<2))|0);
      HEAP32[(($arrayidx33)>>2)]=$30;
      label = 13; break;
    case 13: 
      var $35=$i;
      var $inc=((($35)+(1))|0);
      $i=$inc;
      label = 11; break;
    case 14: 
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4col_swap"] = _i4col_swap;
function _i4row_compare($m, $n, $a, $i, $j) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $i_addr;
      var $j_addr;
      var $k;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $i_addr=$i;
      $j_addr=$j;
      var $0=$i_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((9880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((9832)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$i_addr;
      var $call3=_fprintf($4, ((9768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$m_addr;
      var $7=$i_addr;
      var $cmp4=(($6)|(0)) < (($7)|(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($8, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $call7=_fprintf($9, ((9880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($10, ((9688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=HEAP32[((_stderr)>>2)];
      var $12=$i_addr;
      var $call9=_fprintf($11, ((9768)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$12,tempInt));
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$m_addr;
      var $call10=_fprintf($13, ((9592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      label = 7; break;
    case 7: 
      var $15=$j_addr;
      var $cmp12=(($15)|(0)) < 1;
      if ($cmp12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $16=HEAP32[((_stderr)>>2)];
      var $call14=_fprintf($16, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $17=HEAP32[((_stderr)>>2)];
      var $call15=_fprintf($17, ((9880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $18=HEAP32[((_stderr)>>2)];
      var $call16=_fprintf($18, ((9504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $19=HEAP32[((_stderr)>>2)];
      var $20=$j_addr;
      var $call17=_fprintf($19, ((9440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$20,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 9: 
      var $21=$m_addr;
      var $22=$j_addr;
      var $cmp19=(($21)|(0)) < (($22)|(0));
      if ($cmp19) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $23=HEAP32[((_stderr)>>2)];
      var $call21=_fprintf($23, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $24=HEAP32[((_stderr)>>2)];
      var $call22=_fprintf($24, ((9880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $25=HEAP32[((_stderr)>>2)];
      var $call23=_fprintf($25, ((9336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=HEAP32[((_stderr)>>2)];
      var $27=$j_addr;
      var $call24=_fprintf($26, ((9440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$27,tempInt));
      var $28=HEAP32[((_stderr)>>2)];
      var $29=$m_addr;
      var $call25=_fprintf($28, ((9592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$29,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 11: 
      label = 12; break;
    case 12: 
      var $30=$i_addr;
      var $31=$j_addr;
      var $cmp28=(($30)|(0))==(($31)|(0));
      if ($cmp28) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 24; break;
    case 14: 
      $k=0;
      label = 15; break;
    case 15: 
      var $32=$k;
      var $33=$n_addr;
      var $cmp31=(($32)|(0)) < (($33)|(0));
      if ($cmp31) { label = 16; break; } else { label = 23; break; }
    case 16: 
      var $34=$i_addr;
      var $sub=((($34)-(1))|0);
      var $35=$k;
      var $36=$m_addr;
      var $mul=(Math.imul($35,$36)|0);
      var $add=((($sub)+($mul))|0);
      var $37=$a_addr;
      var $arrayidx=(($37+($add<<2))|0);
      var $38=HEAP32[(($arrayidx)>>2)];
      var $39=$j_addr;
      var $sub32=((($39)-(1))|0);
      var $40=$k;
      var $41=$m_addr;
      var $mul33=(Math.imul($40,$41)|0);
      var $add34=((($sub32)+($mul33))|0);
      var $42=$a_addr;
      var $arrayidx35=(($42+($add34<<2))|0);
      var $43=HEAP32[(($arrayidx35)>>2)];
      var $cmp36=(($38)|(0)) < (($43)|(0));
      if ($cmp36) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $retval=-1;
      label = 24; break;
    case 18: 
      var $44=$j_addr;
      var $sub39=((($44)-(1))|0);
      var $45=$k;
      var $46=$m_addr;
      var $mul40=(Math.imul($45,$46)|0);
      var $add41=((($sub39)+($mul40))|0);
      var $47=$a_addr;
      var $arrayidx42=(($47+($add41<<2))|0);
      var $48=HEAP32[(($arrayidx42)>>2)];
      var $49=$i_addr;
      var $sub43=((($49)-(1))|0);
      var $50=$k;
      var $51=$m_addr;
      var $mul44=(Math.imul($50,$51)|0);
      var $add45=((($sub43)+($mul44))|0);
      var $52=$a_addr;
      var $arrayidx46=(($52+($add45<<2))|0);
      var $53=HEAP32[(($arrayidx46)>>2)];
      var $cmp47=(($48)|(0)) < (($53)|(0));
      if ($cmp47) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $retval=1;
      label = 24; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $54=$k;
      var $inc=((($54)+(1))|0);
      $k=$inc;
      label = 15; break;
    case 23: 
      $retval=0;
      label = 24; break;
    case 24: 
      var $55=$retval;
      STACKTOP = __stackBase__;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4row_compare"] = _i4row_compare;
function _i4row_swap($m, $n, $a, $irow1, $irow2) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $irow1_addr;
      var $irow2_addr;
      var $j;
      var $t;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $irow1_addr=$irow1;
      $irow2_addr=$irow2;
      var $0=$irow1_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $1=$m_addr;
      var $sub=((($1)-(1))|0);
      var $add=((($sub)+(1))|0);
      var $2=$irow1_addr;
      var $cmp1=(($add)|(0)) < (($2)|(0));
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($4, ((9240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($5, ((9176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 5: 
      var $6=$irow2_addr;
      var $cmp4=(($6)|(0)) < 1;
      if ($cmp4) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $7=$m_addr;
      var $sub6=((($7)-(1))|0);
      var $add7=((($sub6)+(1))|0);
      var $8=$irow2_addr;
      var $cmp8=(($add7)|(0)) < (($8)|(0));
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=HEAP32[((_stderr)>>2)];
      var $call10=_fprintf($9, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $call11=_fprintf($10, ((9240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=HEAP32[((_stderr)>>2)];
      var $call12=_fprintf($11, ((9128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 8: 
      var $12=$irow1_addr;
      var $13=$irow2_addr;
      var $cmp14=(($12)|(0))==(($13)|(0));
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 15; break;
    case 10: 
      $j=0;
      label = 11; break;
    case 11: 
      var $14=$j;
      var $15=$n_addr;
      var $cmp17=(($14)|(0)) < (($15)|(0));
      if ($cmp17) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $16=$irow1_addr;
      var $sub18=((($16)-(1))|0);
      var $17=$j;
      var $18=$m_addr;
      var $mul=(Math.imul($17,$18)|0);
      var $add19=((($sub18)+($mul))|0);
      var $19=$a_addr;
      var $arrayidx=(($19+($add19<<2))|0);
      var $20=HEAP32[(($arrayidx)>>2)];
      $t=$20;
      var $21=$irow2_addr;
      var $sub20=((($21)-(1))|0);
      var $22=$j;
      var $23=$m_addr;
      var $mul21=(Math.imul($22,$23)|0);
      var $add22=((($sub20)+($mul21))|0);
      var $24=$a_addr;
      var $arrayidx23=(($24+($add22<<2))|0);
      var $25=HEAP32[(($arrayidx23)>>2)];
      var $26=$irow1_addr;
      var $sub24=((($26)-(1))|0);
      var $27=$j;
      var $28=$m_addr;
      var $mul25=(Math.imul($27,$28)|0);
      var $add26=((($sub24)+($mul25))|0);
      var $29=$a_addr;
      var $arrayidx27=(($29+($add26<<2))|0);
      HEAP32[(($arrayidx27)>>2)]=$25;
      var $30=$t;
      var $31=$irow2_addr;
      var $sub28=((($31)-(1))|0);
      var $32=$j;
      var $33=$m_addr;
      var $mul29=(Math.imul($32,$33)|0);
      var $add30=((($sub28)+($mul29))|0);
      var $34=$a_addr;
      var $arrayidx31=(($34+($add30<<2))|0);
      HEAP32[(($arrayidx31)>>2)]=$30;
      label = 13; break;
    case 13: 
      var $35=$j;
      var $inc=((($35)+(1))|0);
      $j=$inc;
      label = 11; break;
    case 14: 
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4row_swap"] = _i4row_swap;
function _i4vec_heap_d($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      var $ifree;
      var $key;
      var $m;
      $n_addr=$n;
      $a_addr=$a;
      var $0=$n_addr;
      var $div=((((($0)|(0)))/(2))&-1);
      var $sub=((($div)-(1))|0);
      $i=$sub;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=0 <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $2=$i;
      var $3=$a_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $key=$4;
      var $5=$i;
      $ifree=$5;
      label = 5; break;
    case 5: 
      var $6=$ifree;
      var $mul=($6<<1);
      var $add=((($mul)+(1))|0);
      $m=$add;
      var $7=$n_addr;
      var $8=$m;
      var $cmp2=(($7)|(0)) <= (($8)|(0));
      if ($cmp2) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 16; break;
    case 7: 
      var $9=$m;
      var $add3=((($9)+(1))|0);
      var $10=$n_addr;
      var $cmp4=(($add3)|(0)) < (($10)|(0));
      if ($cmp4) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $11=$m;
      var $12=$a_addr;
      var $arrayidx6=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx6)>>2)];
      var $14=$m;
      var $add7=((($14)+(1))|0);
      var $15=$a_addr;
      var $arrayidx8=(($15+($add7<<2))|0);
      var $16=HEAP32[(($arrayidx8)>>2)];
      var $cmp9=(($13)|(0)) < (($16)|(0));
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$m;
      var $add11=((($17)+(1))|0);
      $m=$add11;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $18=$key;
      var $19=$m;
      var $20=$a_addr;
      var $arrayidx13=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx13)>>2)];
      var $cmp14=(($18)|(0)) < (($21)|(0));
      if ($cmp14) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $22=$m;
      var $23=$a_addr;
      var $arrayidx16=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx16)>>2)];
      var $25=$ifree;
      var $26=$a_addr;
      var $arrayidx17=(($26+($25<<2))|0);
      HEAP32[(($arrayidx17)>>2)]=$24;
      var $27=$m;
      $ifree=$27;
      label = 14; break;
    case 13: 
      label = 16; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 5; break;
    case 16: 
      var $28=$key;
      var $29=$ifree;
      var $30=$a_addr;
      var $arrayidx21=(($30+($29<<2))|0);
      HEAP32[(($arrayidx21)>>2)]=$28;
      label = 17; break;
    case 17: 
      var $31=$i;
      var $dec=((($31)-(1))|0);
      $i=$dec;
      label = 3; break;
    case 18: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_heap_d"] = _i4vec_heap_d;
function _i4vec_product($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      var $product;
      $n_addr=$n;
      $a_addr=$a;
      $product=1;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$product;
      var $3=$i;
      var $4=$a_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $mul=(Math.imul($2,$5)|0);
      $product=$mul;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $7=$product;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_product"] = _i4vec_product;
function _i4vec_reverse($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      var $j;
      $n_addr=$n;
      $a_addr=$a;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $div=((((($1)|(0)))/(2))&-1);
      var $cmp=(($0)|(0)) < (($div)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$a_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $j=$4;
      var $5=$n_addr;
      var $sub=((($5)-(1))|0);
      var $6=$i;
      var $sub1=((($sub)-($6))|0);
      var $7=$a_addr;
      var $arrayidx2=(($7+($sub1<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $9=$i;
      var $10=$a_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=$8;
      var $11=$j;
      var $12=$n_addr;
      var $sub4=((($12)-(1))|0);
      var $13=$i;
      var $sub5=((($sub4)-($13))|0);
      var $14=$a_addr;
      var $arrayidx6=(($14+($sub5<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$11;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_reverse"] = _i4vec_reverse;
function _i4vec_sorted_unique($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a_addr;
      var $i;
      var $unique_num;
      $n_addr=$n;
      $a_addr=$a;
      $unique_num=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$unique_num;
      $retval=$1;
      label = 11; break;
    case 4: 
      $unique_num=1;
      $i=1;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp1=(($2)|(0)) < (($3)|(0));
      if ($cmp1) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $4=$i;
      var $5=$a_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $7=$unique_num;
      var $sub=((($7)-(1))|0);
      var $8=$a_addr;
      var $arrayidx2=(($8+($sub<<2))|0);
      var $9=HEAP32[(($arrayidx2)>>2)];
      var $cmp3=(($6)|(0))!=(($9)|(0));
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$unique_num;
      var $add=((($10)+(1))|0);
      $unique_num=$add;
      var $11=$i;
      var $12=$a_addr;
      var $arrayidx5=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx5)>>2)];
      var $14=$unique_num;
      var $sub6=((($14)-(1))|0);
      var $15=$a_addr;
      var $arrayidx7=(($15+($sub6<<2))|0);
      HEAP32[(($arrayidx7)>>2)]=$13;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $17=$unique_num;
      $retval=$17;
      label = 11; break;
    case 11: 
      var $18=$retval;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_sorted_unique"] = _i4vec_sorted_unique;
function _i4vec_zero($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$a_addr;
      var $arrayidx=(($3+($2<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $inc=((($4)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_zero"] = _i4vec_zero;
function _i4vec2_compare($n, $a1, $a2, $i, $j) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i_addr;
      var $j_addr;
      var $isgn;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i_addr=$i;
      $j_addr=$j;
      $isgn=0;
      var $0=$i_addr;
      var $sub=((($0)-(1))|0);
      var $1=$a1_addr;
      var $arrayidx=(($1+($sub<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      var $3=$j_addr;
      var $sub1=((($3)-(1))|0);
      var $4=$a1_addr;
      var $arrayidx2=(($4+($sub1<<2))|0);
      var $5=HEAP32[(($arrayidx2)>>2)];
      var $cmp=(($2)|(0)) < (($5)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $isgn=-1;
      label = 18; break;
    case 4: 
      var $6=$i_addr;
      var $sub3=((($6)-(1))|0);
      var $7=$a1_addr;
      var $arrayidx4=(($7+($sub3<<2))|0);
      var $8=HEAP32[(($arrayidx4)>>2)];
      var $9=$j_addr;
      var $sub5=((($9)-(1))|0);
      var $10=$a1_addr;
      var $arrayidx6=(($10+($sub5<<2))|0);
      var $11=HEAP32[(($arrayidx6)>>2)];
      var $cmp7=(($8)|(0))==(($11)|(0));
      if ($cmp7) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $12=$i_addr;
      var $sub9=((($12)-(1))|0);
      var $13=$a2_addr;
      var $arrayidx10=(($13+($sub9<<2))|0);
      var $14=HEAP32[(($arrayidx10)>>2)];
      var $15=$j_addr;
      var $sub11=((($15)-(1))|0);
      var $16=$a2_addr;
      var $arrayidx12=(($16+($sub11<<2))|0);
      var $17=HEAP32[(($arrayidx12)>>2)];
      var $cmp13=(($14)|(0)) < (($17)|(0));
      if ($cmp13) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $isgn=-1;
      label = 13; break;
    case 7: 
      var $18=$i_addr;
      var $sub16=((($18)-(1))|0);
      var $19=$a2_addr;
      var $arrayidx17=(($19+($sub16<<2))|0);
      var $20=HEAP32[(($arrayidx17)>>2)];
      var $21=$j_addr;
      var $sub18=((($21)-(1))|0);
      var $22=$a2_addr;
      var $arrayidx19=(($22+($sub18<<2))|0);
      var $23=HEAP32[(($arrayidx19)>>2)];
      var $cmp20=(($20)|(0)) < (($23)|(0));
      if ($cmp20) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $isgn=0;
      label = 12; break;
    case 9: 
      var $24=$j_addr;
      var $sub23=((($24)-(1))|0);
      var $25=$a2_addr;
      var $arrayidx24=(($25+($sub23<<2))|0);
      var $26=HEAP32[(($arrayidx24)>>2)];
      var $27=$i_addr;
      var $sub25=((($27)-(1))|0);
      var $28=$a2_addr;
      var $arrayidx26=(($28+($sub25<<2))|0);
      var $29=HEAP32[(($arrayidx26)>>2)];
      var $cmp27=(($26)|(0)) < (($29)|(0));
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $isgn=1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 17; break;
    case 14: 
      var $30=$j_addr;
      var $sub32=((($30)-(1))|0);
      var $31=$a1_addr;
      var $arrayidx33=(($31+($sub32<<2))|0);
      var $32=HEAP32[(($arrayidx33)>>2)];
      var $33=$i_addr;
      var $sub34=((($33)-(1))|0);
      var $34=$a1_addr;
      var $arrayidx35=(($34+($sub34<<2))|0);
      var $35=HEAP32[(($arrayidx35)>>2)];
      var $cmp36=(($32)|(0)) < (($35)|(0));
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $isgn=1;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $36=$isgn;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec2_compare"] = _i4vec2_compare;
function _i4vec_indicator_new($n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a;
      var $i;
      $n_addr=$n;
      var $0=$n_addr;
      var $mul=($0<<2);
      var $call=_malloc($mul);
      var $1=$call;
      $a=$1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$i;
      var $add=((($4)+(1))|0);
      var $5=$i;
      var $6=$a;
      var $arrayidx=(($6+($5<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$add;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $8=$a;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_indicator_new"] = _i4vec_indicator_new;
function _i4vec_lcm($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $i;
      var $lcm;
      $n_addr=$n;
      $v_addr=$v;
      $lcm=1;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$i;
      var $3=$v_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $cmp1=(($4)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $lcm=0;
      label = 8; break;
    case 6: 
      var $5=$lcm;
      var $6=$i;
      var $7=$v_addr;
      var $arrayidx2=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $call=_i4_lcm($5, $8);
      $lcm=$call;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $10=$lcm;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_lcm"] = _i4vec_lcm;
function _i4vec_print($n, $a, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $title_addr;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp=(($4)|(0)) < (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=HEAP32[((_stdout)>>2)];
      var $7=$i;
      var $8=$i;
      var $9=$a_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $call3=_fprintf($6, ((9056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$10,tempInt));
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_print"] = _i4vec_print;
function _i4vec_sort_heap_a($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $n1;
      var $temp;
      $n_addr=$n;
      $a_addr=$a;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 9; break;
    case 4: 
      var $1=$n_addr;
      var $2=$a_addr;
      _i4vec_heap_d($1, $2);
      var $3=$a_addr;
      var $arrayidx=(($3)|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $temp=$4;
      var $5=$n_addr;
      var $sub=((($5)-(1))|0);
      var $6=$a_addr;
      var $arrayidx1=(($6+($sub<<2))|0);
      var $7=HEAP32[(($arrayidx1)>>2)];
      var $8=$a_addr;
      var $arrayidx2=(($8)|0);
      HEAP32[(($arrayidx2)>>2)]=$7;
      var $9=$temp;
      var $10=$n_addr;
      var $sub3=((($10)-(1))|0);
      var $11=$a_addr;
      var $arrayidx4=(($11+($sub3<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$9;
      var $12=$n_addr;
      var $sub5=((($12)-(1))|0);
      $n1=$sub5;
      label = 5; break;
    case 5: 
      var $13=$n1;
      var $cmp6=2 <= (($13)|(0));
      if ($cmp6) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $14=$n1;
      var $15=$a_addr;
      _i4vec_heap_d($14, $15);
      var $16=$a_addr;
      var $arrayidx7=(($16)|0);
      var $17=HEAP32[(($arrayidx7)>>2)];
      $temp=$17;
      var $18=$n1;
      var $sub8=((($18)-(1))|0);
      var $19=$a_addr;
      var $arrayidx9=(($19+($sub8<<2))|0);
      var $20=HEAP32[(($arrayidx9)>>2)];
      var $21=$a_addr;
      var $arrayidx10=(($21)|0);
      HEAP32[(($arrayidx10)>>2)]=$20;
      var $22=$temp;
      var $23=$n1;
      var $sub11=((($23)-(1))|0);
      var $24=$a_addr;
      var $arrayidx12=(($24+($sub11<<2))|0);
      HEAP32[(($arrayidx12)>>2)]=$22;
      label = 7; break;
    case 7: 
      var $25=$n1;
      var $dec=((($25)-(1))|0);
      $n1=$dec;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_sort_heap_a"] = _i4vec_sort_heap_a;
function _i4vec2_sort_a($n, $a1, $a2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i=__stackBase__;
      var $indx=(__stackBase__)+(8);
      var $isgn;
      var $j=(__stackBase__)+(16);
      var $temp;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      HEAP32[(($i)>>2)]=0;
      HEAP32[(($indx)>>2)]=0;
      $isgn=0;
      HEAP32[(($j)>>2)]=0;
      label = 3; break;
    case 3: 
      var $0=$n_addr;
      var $1=$isgn;
      _sort_heap_external($0, $indx, $i, $j, $1);
      var $2=HEAP32[(($indx)>>2)];
      var $cmp=0 < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=HEAP32[(($i)>>2)];
      var $sub=((($3)-(1))|0);
      var $4=$a1_addr;
      var $arrayidx=(($4+($sub<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $temp=$5;
      var $6=HEAP32[(($j)>>2)];
      var $sub1=((($6)-(1))|0);
      var $7=$a1_addr;
      var $arrayidx2=(($7+($sub1<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $9=HEAP32[(($i)>>2)];
      var $sub3=((($9)-(1))|0);
      var $10=$a1_addr;
      var $arrayidx4=(($10+($sub3<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$8;
      var $11=$temp;
      var $12=HEAP32[(($j)>>2)];
      var $sub5=((($12)-(1))|0);
      var $13=$a1_addr;
      var $arrayidx6=(($13+($sub5<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$11;
      var $14=HEAP32[(($i)>>2)];
      var $sub7=((($14)-(1))|0);
      var $15=$a2_addr;
      var $arrayidx8=(($15+($sub7<<2))|0);
      var $16=HEAP32[(($arrayidx8)>>2)];
      $temp=$16;
      var $17=HEAP32[(($j)>>2)];
      var $sub9=((($17)-(1))|0);
      var $18=$a2_addr;
      var $arrayidx10=(($18+($sub9<<2))|0);
      var $19=HEAP32[(($arrayidx10)>>2)];
      var $20=HEAP32[(($i)>>2)];
      var $sub11=((($20)-(1))|0);
      var $21=$a2_addr;
      var $arrayidx12=(($21+($sub11<<2))|0);
      HEAP32[(($arrayidx12)>>2)]=$19;
      var $22=$temp;
      var $23=HEAP32[(($j)>>2)];
      var $sub13=((($23)-(1))|0);
      var $24=$a2_addr;
      var $arrayidx14=(($24+($sub13<<2))|0);
      HEAP32[(($arrayidx14)>>2)]=$22;
      label = 11; break;
    case 5: 
      var $25=HEAP32[(($indx)>>2)];
      var $cmp15=(($25)|(0)) < 0;
      if ($cmp15) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$n_addr;
      var $27=$a1_addr;
      var $28=$a2_addr;
      var $29=HEAP32[(($i)>>2)];
      var $30=HEAP32[(($j)>>2)];
      var $call=_i4vec2_compare($26, $27, $28, $29, $30);
      $isgn=$call;
      label = 10; break;
    case 7: 
      var $31=HEAP32[(($indx)>>2)];
      var $cmp18=(($31)|(0))==0;
      if ($cmp18) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 12; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 3; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec2_sort_a"] = _i4vec2_sort_a;
function _i4vec_uniform_new($n, $a, $b, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $b_addr;
      var $seed_addr;
      var $i;
      var $k;
      var $r;
      var $value;
      var $x;
      $n_addr=$n;
      $a_addr=$a;
      $b_addr=$b;
      $seed_addr=$seed;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($3, ((8968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($4, ((10840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$n_addr;
      var $mul=($5<<2);
      var $call3=_malloc($mul);
      var $6=$call3;
      $x=$6;
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $9=$seed_addr;
      var $10=HEAP32[(($9)>>2)];
      var $div=((((($10)|(0)))/(127773))&-1);
      $k=$div;
      var $11=$seed_addr;
      var $12=HEAP32[(($11)>>2)];
      var $13=$k;
      var $mul5=((($13)*(127773))&-1);
      var $sub=((($12)-($mul5))|0);
      var $mul6=((($sub)*(16807))&-1);
      var $14=$k;
      var $mul7=((($14)*(2836))&-1);
      var $sub8=((($mul6)-($mul7))|0);
      var $15=$seed_addr;
      HEAP32[(($15)>>2)]=$sub8;
      var $16=$seed_addr;
      var $17=HEAP32[(($16)>>2)];
      var $cmp9=(($17)|(0)) < 0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$seed_addr;
      var $19=HEAP32[(($18)>>2)];
      var $add=((($19)+(2147483647))|0);
      var $20=$seed_addr;
      HEAP32[(($20)>>2)]=$add;
      label = 8; break;
    case 8: 
      var $21=$seed_addr;
      var $22=HEAP32[(($21)>>2)];
      var $conv=(($22)|(0));
      var $conv12=$conv;
      var $mul13=($conv12)*(4.656612875e-10);
      var $conv14=$mul13;
      $r=$conv14;
      var $23=$r;
      var $conv15=$23;
      var $sub16=(1)-($conv15);
      var $24=$a_addr;
      var $25=$b_addr;
      var $call17=_i4_min($24, $25);
      var $conv18=(($call17)|(0));
      var $conv19=$conv18;
      var $sub20=($conv19)-(0.5);
      var $mul21=($sub16)*($sub20);
      var $26=$r;
      var $conv22=$26;
      var $27=$a_addr;
      var $28=$b_addr;
      var $call23=_i4_max($27, $28);
      var $conv24=(($call23)|(0));
      var $conv25=$conv24;
      var $add26=($conv25)+(0.5);
      var $mul27=($conv22)*($add26);
      var $add28=($mul21)+($mul27);
      var $conv29=$add28;
      $r=$conv29;
      var $29=$r;
      var $call30=_r4_nint($29);
      $value=$call30;
      var $30=$value;
      var $31=$a_addr;
      var $32=$b_addr;
      var $call31=_i4_min($31, $32);
      var $call32=_i4_max($30, $call31);
      $value=$call32;
      var $33=$value;
      var $34=$a_addr;
      var $35=$b_addr;
      var $call33=_i4_max($34, $35);
      var $call34=_i4_min($33, $call33);
      $value=$call34;
      var $36=$value;
      var $37=$i;
      var $38=$x;
      var $arrayidx=(($38+($37<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$36;
      label = 9; break;
    case 9: 
      var $39=$i;
      var $inc=((($39)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $40=$x;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec_uniform_new"] = _i4vec_uniform_new;
function _icos_size($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=12;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=30;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=20;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=3;
  return;
}
Module["_icos_size"] = _icos_size;
function _i4vec2_sorted_unique($n, $a1, $a2, $unique_num) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $unique_num_addr;
      var $itest;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $unique_num_addr=$unique_num;
      var $0=$unique_num_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$n_addr;
      var $cmp=(($1)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 12; break;
    case 4: 
      var $2=$unique_num_addr;
      HEAP32[(($2)>>2)]=1;
      $itest=1;
      label = 5; break;
    case 5: 
      var $3=$itest;
      var $4=$n_addr;
      var $cmp1=(($3)|(0)) < (($4)|(0));
      if ($cmp1) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $5=$itest;
      var $6=$a1_addr;
      var $arrayidx=(($6+($5<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $8=$unique_num_addr;
      var $9=HEAP32[(($8)>>2)];
      var $sub=((($9)-(1))|0);
      var $10=$a1_addr;
      var $arrayidx2=(($10+($sub<<2))|0);
      var $11=HEAP32[(($arrayidx2)>>2)];
      var $cmp3=(($7)|(0))!=(($11)|(0));
      if ($cmp3) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $12=$itest;
      var $13=$a2_addr;
      var $arrayidx4=(($13+($12<<2))|0);
      var $14=HEAP32[(($arrayidx4)>>2)];
      var $15=$unique_num_addr;
      var $16=HEAP32[(($15)>>2)];
      var $sub5=((($16)-(1))|0);
      var $17=$a2_addr;
      var $arrayidx6=(($17+($sub5<<2))|0);
      var $18=HEAP32[(($arrayidx6)>>2)];
      var $cmp7=(($14)|(0))!=(($18)|(0));
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $19=$itest;
      var $20=$a1_addr;
      var $arrayidx9=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx9)>>2)];
      var $22=$unique_num_addr;
      var $23=HEAP32[(($22)>>2)];
      var $24=$a1_addr;
      var $arrayidx10=(($24+($23<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$21;
      var $25=$itest;
      var $26=$a2_addr;
      var $arrayidx11=(($26+($25<<2))|0);
      var $27=HEAP32[(($arrayidx11)>>2)];
      var $28=$unique_num_addr;
      var $29=HEAP32[(($28)>>2)];
      var $30=$a2_addr;
      var $arrayidx12=(($30+($29<<2))|0);
      HEAP32[(($arrayidx12)>>2)]=$27;
      var $31=$unique_num_addr;
      var $32=HEAP32[(($31)>>2)];
      var $add=((($32)+(1))|0);
      var $33=$unique_num_addr;
      HEAP32[(($33)>>2)]=$add;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$itest;
      var $inc=((($34)+(1))|0);
      $itest=$inc;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_i4vec2_sorted_unique"] = _i4vec2_sorted_unique;
function _icos_shape($point_num, $edge_num, $face_num, $face_order_max, $point_coord, $edge_point, $face_order, $face_point) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_num_addr;
      var $edge_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $point_coord_addr;
      var $edge_point_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $phi;
      var $i;
      var $j;
      var $point_coord_save=__stackBase__;
      $point_num_addr=$point_num;
      $edge_num_addr=$edge_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $point_coord_addr=$point_coord;
      $edge_point_addr=$edge_point;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      var $call=Math.sqrt(5);
      var $add=($call)+(1);
      var $mul=($add)*(0.5);
      $phi=$mul;
      var $0=$phi;
      var $1=$phi;
      var $2=$phi;
      var $mul1=($1)*($2);
      var $add2=($mul1)+(1);
      var $call3=Math.sqrt($add2);
      var $div=($0)/($call3);
      var $arrayidx=(($point_coord_save)|0);
      HEAPF64[(($arrayidx)>>3)]=$div;
      var $3=$phi;
      var $4=$phi;
      var $mul4=($3)*($4);
      var $add5=($mul4)+(1);
      var $call6=Math.sqrt($add5);
      var $div7=(1)/($call6);
      var $arrayidx8=(($point_coord_save+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$div7;
      var $arrayidx9=(($point_coord_save+16)|0);
      HEAPF64[(($arrayidx9)>>3)]=0;
      var $5=$phi;
      var $6=$phi;
      var $7=$phi;
      var $mul10=($6)*($7);
      var $add11=($mul10)+(1);
      var $call12=Math.sqrt($add11);
      var $div13=($5)/($call12);
      var $arrayidx14=(($point_coord_save+24)|0);
      HEAPF64[(($arrayidx14)>>3)]=$div13;
      var $8=$phi;
      var $9=$phi;
      var $mul15=($8)*($9);
      var $add16=($mul15)+(1);
      var $call17=Math.sqrt($add16);
      var $div18=(-1)/($call17);
      var $arrayidx19=(($point_coord_save+32)|0);
      HEAPF64[(($arrayidx19)>>3)]=$div18;
      var $arrayidx20=(($point_coord_save+40)|0);
      HEAPF64[(($arrayidx20)>>3)]=0;
      var $10=$phi;
      var $11=$phi;
      var $mul21=($10)*($11);
      var $add22=($mul21)+(1);
      var $call23=Math.sqrt($add22);
      var $div24=(1)/($call23);
      var $arrayidx25=(($point_coord_save+48)|0);
      HEAPF64[(($arrayidx25)>>3)]=$div24;
      var $arrayidx26=(($point_coord_save+56)|0);
      HEAPF64[(($arrayidx26)>>3)]=0;
      var $12=$phi;
      var $13=$phi;
      var $14=$phi;
      var $mul27=($13)*($14);
      var $add28=($mul27)+(1);
      var $call29=Math.sqrt($add28);
      var $div30=($12)/($call29);
      var $arrayidx31=(($point_coord_save+64)|0);
      HEAPF64[(($arrayidx31)>>3)]=$div30;
      var $15=$phi;
      var $16=$phi;
      var $mul32=($15)*($16);
      var $add33=($mul32)+(1);
      var $call34=Math.sqrt($add33);
      var $div35=(1)/($call34);
      var $arrayidx36=(($point_coord_save+72)|0);
      HEAPF64[(($arrayidx36)>>3)]=$div35;
      var $arrayidx37=(($point_coord_save+80)|0);
      HEAPF64[(($arrayidx37)>>3)]=0;
      var $17=$phi;
      var $sub=(-$17);
      var $18=$phi;
      var $19=$phi;
      var $mul38=($18)*($19);
      var $add39=($mul38)+(1);
      var $call40=Math.sqrt($add39);
      var $div41=($sub)/($call40);
      var $arrayidx42=(($point_coord_save+88)|0);
      HEAPF64[(($arrayidx42)>>3)]=$div41;
      var $arrayidx43=(($point_coord_save+96)|0);
      HEAPF64[(($arrayidx43)>>3)]=0;
      var $20=$phi;
      var $21=$phi;
      var $22=$phi;
      var $mul44=($21)*($22);
      var $add45=($mul44)+(1);
      var $call46=Math.sqrt($add45);
      var $div47=($20)/($call46);
      var $arrayidx48=(($point_coord_save+104)|0);
      HEAPF64[(($arrayidx48)>>3)]=$div47;
      var $23=$phi;
      var $24=$phi;
      var $mul49=($23)*($24);
      var $add50=($mul49)+(1);
      var $call51=Math.sqrt($add50);
      var $div52=(1)/($call51);
      var $arrayidx53=(($point_coord_save+112)|0);
      HEAPF64[(($arrayidx53)>>3)]=$div52;
      var $arrayidx54=(($point_coord_save+120)|0);
      HEAPF64[(($arrayidx54)>>3)]=0;
      var $25=$phi;
      var $26=$phi;
      var $27=$phi;
      var $mul55=($26)*($27);
      var $add56=($mul55)+(1);
      var $call57=Math.sqrt($add56);
      var $div58=($25)/($call57);
      var $arrayidx59=(($point_coord_save+128)|0);
      HEAPF64[(($arrayidx59)>>3)]=$div58;
      var $28=$phi;
      var $29=$phi;
      var $mul60=($28)*($29);
      var $add61=($mul60)+(1);
      var $call62=Math.sqrt($add61);
      var $div63=(-1)/($call62);
      var $arrayidx64=(($point_coord_save+136)|0);
      HEAPF64[(($arrayidx64)>>3)]=$div63;
      var $arrayidx65=(($point_coord_save+144)|0);
      HEAPF64[(($arrayidx65)>>3)]=0;
      var $30=$phi;
      var $sub66=(-$30);
      var $31=$phi;
      var $32=$phi;
      var $mul67=($31)*($32);
      var $add68=($mul67)+(1);
      var $call69=Math.sqrt($add68);
      var $div70=($sub66)/($call69);
      var $arrayidx71=(($point_coord_save+152)|0);
      HEAPF64[(($arrayidx71)>>3)]=$div70;
      var $33=$phi;
      var $34=$phi;
      var $mul72=($33)*($34);
      var $add73=($mul72)+(1);
      var $call74=Math.sqrt($add73);
      var $div75=(1)/($call74);
      var $arrayidx76=(($point_coord_save+160)|0);
      HEAPF64[(($arrayidx76)>>3)]=$div75;
      var $arrayidx77=(($point_coord_save+168)|0);
      HEAPF64[(($arrayidx77)>>3)]=0;
      var $35=$phi;
      var $sub78=(-$35);
      var $36=$phi;
      var $37=$phi;
      var $mul79=($36)*($37);
      var $add80=($mul79)+(1);
      var $call81=Math.sqrt($add80);
      var $div82=($sub78)/($call81);
      var $arrayidx83=(($point_coord_save+176)|0);
      HEAPF64[(($arrayidx83)>>3)]=$div82;
      var $38=$phi;
      var $39=$phi;
      var $mul84=($38)*($39);
      var $add85=($mul84)+(1);
      var $call86=Math.sqrt($add85);
      var $div87=(-1)/($call86);
      var $arrayidx88=(($point_coord_save+184)|0);
      HEAPF64[(($arrayidx88)>>3)]=$div87;
      var $40=$phi;
      var $41=$phi;
      var $mul89=($40)*($41);
      var $add90=($mul89)+(1);
      var $call91=Math.sqrt($add90);
      var $div92=(-1)/($call91);
      var $arrayidx93=(($point_coord_save+192)|0);
      HEAPF64[(($arrayidx93)>>3)]=$div92;
      var $arrayidx94=(($point_coord_save+200)|0);
      HEAPF64[(($arrayidx94)>>3)]=0;
      var $42=$phi;
      var $43=$phi;
      var $44=$phi;
      var $mul95=($43)*($44);
      var $add96=($mul95)+(1);
      var $call97=Math.sqrt($add96);
      var $div98=($42)/($call97);
      var $arrayidx99=(($point_coord_save+208)|0);
      HEAPF64[(($arrayidx99)>>3)]=$div98;
      var $45=$phi;
      var $46=$phi;
      var $mul100=($45)*($46);
      var $add101=($mul100)+(1);
      var $call102=Math.sqrt($add101);
      var $div103=(-1)/($call102);
      var $arrayidx104=(($point_coord_save+216)|0);
      HEAPF64[(($arrayidx104)>>3)]=$div103;
      var $arrayidx105=(($point_coord_save+224)|0);
      HEAPF64[(($arrayidx105)>>3)]=0;
      var $47=$phi;
      var $sub106=(-$47);
      var $48=$phi;
      var $49=$phi;
      var $mul107=($48)*($49);
      var $add108=($mul107)+(1);
      var $call109=Math.sqrt($add108);
      var $div110=($sub106)/($call109);
      var $arrayidx111=(($point_coord_save+232)|0);
      HEAPF64[(($arrayidx111)>>3)]=$div110;
      var $50=$phi;
      var $sub112=(-$50);
      var $51=$phi;
      var $52=$phi;
      var $mul113=($51)*($52);
      var $add114=($mul113)+(1);
      var $call115=Math.sqrt($add114);
      var $div116=($sub112)/($call115);
      var $arrayidx117=(($point_coord_save+240)|0);
      HEAPF64[(($arrayidx117)>>3)]=$div116;
      var $53=$phi;
      var $54=$phi;
      var $mul118=($53)*($54);
      var $add119=($mul118)+(1);
      var $call120=Math.sqrt($add119);
      var $div121=(1)/($call120);
      var $arrayidx122=(($point_coord_save+248)|0);
      HEAPF64[(($arrayidx122)>>3)]=$div121;
      var $arrayidx123=(($point_coord_save+256)|0);
      HEAPF64[(($arrayidx123)>>3)]=0;
      var $55=$phi;
      var $sub124=(-$55);
      var $56=$phi;
      var $57=$phi;
      var $mul125=($56)*($57);
      var $add126=($mul125)+(1);
      var $call127=Math.sqrt($add126);
      var $div128=($sub124)/($call127);
      var $arrayidx129=(($point_coord_save+264)|0);
      HEAPF64[(($arrayidx129)>>3)]=$div128;
      var $58=$phi;
      var $59=$phi;
      var $mul130=($58)*($59);
      var $add131=($mul130)+(1);
      var $call132=Math.sqrt($add131);
      var $div133=(-1)/($call132);
      var $arrayidx134=(($point_coord_save+272)|0);
      HEAPF64[(($arrayidx134)>>3)]=$div133;
      var $arrayidx135=(($point_coord_save+280)|0);
      HEAPF64[(($arrayidx135)>>3)]=0;
      var $60=$point_num_addr;
      var $mul136=((($60)*(3))&-1);
      var $arraydecay=(($point_coord_save)|0);
      var $61=$point_coord_addr;
      _r8vec_copy($mul136, $arraydecay, $61);
      var $62=$edge_num_addr;
      var $mul137=($62<<1);
      var $63=$edge_point_addr;
      _i4vec_copy($mul137, ((5408)|0), $63);
      var $64=$face_num_addr;
      var $65=$face_order_addr;
      _i4vec_copy($64, ((5328)|0), $65);
      var $66=$face_order_max_addr;
      var $67=$face_num_addr;
      var $mul138=(Math.imul($66,$67)|0);
      var $68=$face_point_addr;
      _i4vec_copy($mul138, ((5088)|0), $68);
      $j=0;
      label = 3; break;
    case 3: 
      var $69=$j;
      var $70=$edge_num_addr;
      var $cmp=(($69)|(0)) < (($70)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $71=$i;
      var $cmp140=(($71)|(0)) < 2;
      if ($cmp140) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $72=$i;
      var $73=$j;
      var $mul142=($73<<1);
      var $add143=((($72)+($mul142))|0);
      var $74=$edge_point_addr;
      var $arrayidx144=(($74+($add143<<2))|0);
      var $75=HEAP32[(($arrayidx144)>>2)];
      var $sub145=((($75)-(1))|0);
      var $76=$i;
      var $77=$j;
      var $mul146=($77<<1);
      var $add147=((($76)+($mul146))|0);
      var $78=$edge_point_addr;
      var $arrayidx148=(($78+($add147<<2))|0);
      HEAP32[(($arrayidx148)>>2)]=$sub145;
      label = 7; break;
    case 7: 
      var $79=$i;
      var $inc=((($79)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $80=$j;
      var $inc150=((($80)+(1))|0);
      $j=$inc150;
      label = 3; break;
    case 10: 
      $j=0;
      label = 11; break;
    case 11: 
      var $81=$j;
      var $82=$face_num_addr;
      var $cmp153=(($81)|(0)) < (($82)|(0));
      if ($cmp153) { label = 12; break; } else { label = 18; break; }
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $83=$i;
      var $84=$face_order_max_addr;
      var $cmp156=(($83)|(0)) < (($84)|(0));
      if ($cmp156) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $85=$i;
      var $86=$j;
      var $87=$face_order_max_addr;
      var $mul158=(Math.imul($86,$87)|0);
      var $add159=((($85)+($mul158))|0);
      var $88=$face_point_addr;
      var $arrayidx160=(($88+($add159<<2))|0);
      var $89=HEAP32[(($arrayidx160)>>2)];
      var $sub161=((($89)-(1))|0);
      var $90=$i;
      var $91=$j;
      var $92=$face_order_max_addr;
      var $mul162=(Math.imul($91,$92)|0);
      var $add163=((($90)+($mul162))|0);
      var $93=$face_point_addr;
      var $arrayidx164=(($93+($add163<<2))|0);
      HEAP32[(($arrayidx164)>>2)]=$sub161;
      label = 15; break;
    case 15: 
      var $94=$i;
      var $inc166=((($94)+(1))|0);
      $i=$inc166;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $95=$j;
      var $inc169=((($95)+(1))|0);
      $j=$inc169;
      label = 11; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_icos_shape"] = _icos_shape;
function _line_exp_is_degenerate_nd($dim_num, $p1, $p2) {
  var label = 0;
  var $dim_num_addr;
  var $p1_addr;
  var $p2_addr;
  var $value;
  $dim_num_addr=$dim_num;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$dim_num_addr;
  var $1=$p1_addr;
  var $2=$p2_addr;
  var $call=_r8vec_eq($0, $1, $2);
  $value=$call;
  var $3=$value;
  return $3;
}
Module["_line_exp_is_degenerate_nd"] = _line_exp_is_degenerate_nd;
function _line_exp_perp_2d($p1, $p2, $p3, $flag) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $flag_addr;
      var $bot;
      var $p4;
      var $t;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $flag_addr=$flag;
      var $call=_malloc(16);
      var $0=$call;
      $p4=$0;
      var $1=$flag_addr;
      HEAP32[(($1)>>2)]=0;
      var $2=$p2_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$p1_addr;
      var $arrayidx1=(($4)|0);
      var $5=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($5);
      var $6=Math.pow($sub, 2);
      var $7=$p2_addr;
      var $arrayidx2=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx2)>>3)];
      var $9=$p1_addr;
      var $arrayidx3=(($9+8)|0);
      var $10=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($8)-($10);
      var $11=Math.pow($sub4, 2);
      var $add=($6)+($11);
      $bot=$add;
      var $12=$bot;
      var $cmp=$12 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$flag_addr;
      HEAP32[(($13)>>2)]=1;
      var $call5=_r8_huge();
      var $14=$p4;
      var $arrayidx6=(($14)|0);
      HEAPF64[(($arrayidx6)>>3)]=$call5;
      var $call7=_r8_huge();
      var $15=$p4;
      var $arrayidx8=(($15+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$call7;
      var $16=$p4;
      $retval=$16;
      label = 5; break;
    case 4: 
      var $17=$p1_addr;
      var $arrayidx9=(($17)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $19=$p3_addr;
      var $arrayidx10=(($19)|0);
      var $20=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($18)-($20);
      var $21=$p1_addr;
      var $arrayidx12=(($21)|0);
      var $22=HEAPF64[(($arrayidx12)>>3)];
      var $23=$p2_addr;
      var $arrayidx13=(($23)|0);
      var $24=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($22)-($24);
      var $mul=($sub11)*($sub14);
      var $25=$p1_addr;
      var $arrayidx15=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx15)>>3)];
      var $27=$p3_addr;
      var $arrayidx16=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($26)-($28);
      var $29=$p1_addr;
      var $arrayidx18=(($29+8)|0);
      var $30=HEAPF64[(($arrayidx18)>>3)];
      var $31=$p2_addr;
      var $arrayidx19=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($30)-($32);
      var $mul21=($sub17)*($sub20);
      var $add22=($mul)+($mul21);
      var $33=$bot;
      var $div=($add22)/($33);
      $t=$div;
      var $34=$p1_addr;
      var $arrayidx23=(($34)|0);
      var $35=HEAPF64[(($arrayidx23)>>3)];
      var $36=$t;
      var $37=$p2_addr;
      var $arrayidx24=(($37)|0);
      var $38=HEAPF64[(($arrayidx24)>>3)];
      var $39=$p1_addr;
      var $arrayidx25=(($39)|0);
      var $40=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($38)-($40);
      var $mul27=($36)*($sub26);
      var $add28=($35)+($mul27);
      var $41=$p4;
      var $arrayidx29=(($41)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $42=$p1_addr;
      var $arrayidx30=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx30)>>3)];
      var $44=$t;
      var $45=$p2_addr;
      var $arrayidx31=(($45+8)|0);
      var $46=HEAPF64[(($arrayidx31)>>3)];
      var $47=$p1_addr;
      var $arrayidx32=(($47+8)|0);
      var $48=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($46)-($48);
      var $mul34=($44)*($sub33);
      var $add35=($43)+($mul34);
      var $49=$p4;
      var $arrayidx36=(($49+8)|0);
      HEAPF64[(($arrayidx36)>>3)]=$add35;
      var $50=$p4;
      $retval=$50;
      label = 5; break;
    case 5: 
      var $51=$retval;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp_perp_2d"] = _line_exp_perp_2d;
function _line_exp_point_dist_2d($p1, $p2, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $bot;
      var $dist;
      var $dot;
      var $t;
      var $pn=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p2_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      $bot=$add;
      var $10=$bot;
      var $cmp=$10 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$p1_addr;
      var $arrayidx5=(($11)|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $arrayidx6=(($pn)|0);
      HEAPF64[(($arrayidx6)>>3)]=$12;
      var $13=$p1_addr;
      var $arrayidx7=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx7)>>3)];
      var $arrayidx8=(($pn+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$14;
      label = 5; break;
    case 4: 
      var $15=$p_addr;
      var $arrayidx9=(($15)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$p1_addr;
      var $arrayidx10=(($17)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($16)-($18);
      var $19=$p2_addr;
      var $arrayidx12=(($19)|0);
      var $20=HEAPF64[(($arrayidx12)>>3)];
      var $21=$p1_addr;
      var $arrayidx13=(($21)|0);
      var $22=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($20)-($22);
      var $mul=($sub11)*($sub14);
      var $23=$p_addr;
      var $arrayidx15=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx15)>>3)];
      var $25=$p1_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($24)-($26);
      var $27=$p2_addr;
      var $arrayidx18=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx18)>>3)];
      var $29=$p1_addr;
      var $arrayidx19=(($29+8)|0);
      var $30=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($28)-($30);
      var $mul21=($sub17)*($sub20);
      var $add22=($mul)+($mul21);
      $dot=$add22;
      var $31=$dot;
      var $32=$bot;
      var $div=($31)/($32);
      $t=$div;
      var $33=$p1_addr;
      var $arrayidx23=(($33)|0);
      var $34=HEAPF64[(($arrayidx23)>>3)];
      var $35=$t;
      var $36=$p2_addr;
      var $arrayidx24=(($36)|0);
      var $37=HEAPF64[(($arrayidx24)>>3)];
      var $38=$p1_addr;
      var $arrayidx25=(($38)|0);
      var $39=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($37)-($39);
      var $mul27=($35)*($sub26);
      var $add28=($34)+($mul27);
      var $arrayidx29=(($pn)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $40=$p1_addr;
      var $arrayidx30=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx30)>>3)];
      var $42=$t;
      var $43=$p2_addr;
      var $arrayidx31=(($43+8)|0);
      var $44=HEAPF64[(($arrayidx31)>>3)];
      var $45=$p1_addr;
      var $arrayidx32=(($45+8)|0);
      var $46=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($44)-($46);
      var $mul34=($42)*($sub33);
      var $add35=($41)+($mul34);
      var $arrayidx36=(($pn+8)|0);
      HEAPF64[(($arrayidx36)>>3)]=$add35;
      label = 5; break;
    case 5: 
      var $47=$p_addr;
      var $arrayidx37=(($47)|0);
      var $48=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($pn)|0);
      var $49=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($48)-($49);
      var $50=Math.pow($sub39, 2);
      var $51=$p_addr;
      var $arrayidx40=(($51+8)|0);
      var $52=HEAPF64[(($arrayidx40)>>3)];
      var $arrayidx41=(($pn+8)|0);
      var $53=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($52)-($53);
      var $54=Math.pow($sub42, 2);
      var $add43=($50)+($54);
      var $call=Math.sqrt($add43);
      $dist=$call;
      var $55=$dist;
      STACKTOP = __stackBase__;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp_point_dist_2d"] = _line_exp_point_dist_2d;
function _line_exp_point_dist_3d($p1, $p2, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $bot;
      var $dist;
      var $t;
      var $pn=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p2_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$p2_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$p1_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $add8=($add)+($14);
      $bot=$add8;
      var $15=$bot;
      var $cmp=$15 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$p1_addr;
      var $arraydecay=(($pn)|0);
      _r8vec_copy(3, $16, $arraydecay);
      label = 5; break;
    case 4: 
      var $17=$p_addr;
      var $arrayidx9=(($17)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $19=$p1_addr;
      var $arrayidx10=(($19)|0);
      var $20=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($18)-($20);
      var $21=$p2_addr;
      var $arrayidx12=(($21)|0);
      var $22=HEAPF64[(($arrayidx12)>>3)];
      var $23=$p1_addr;
      var $arrayidx13=(($23)|0);
      var $24=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($22)-($24);
      var $mul=($sub11)*($sub14);
      var $25=$p_addr;
      var $arrayidx15=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx15)>>3)];
      var $27=$p1_addr;
      var $arrayidx16=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($26)-($28);
      var $29=$p2_addr;
      var $arrayidx18=(($29+8)|0);
      var $30=HEAPF64[(($arrayidx18)>>3)];
      var $31=$p1_addr;
      var $arrayidx19=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($30)-($32);
      var $mul21=($sub17)*($sub20);
      var $add22=($mul)+($mul21);
      var $33=$p_addr;
      var $arrayidx23=(($33+16)|0);
      var $34=HEAPF64[(($arrayidx23)>>3)];
      var $35=$p1_addr;
      var $arrayidx24=(($35+16)|0);
      var $36=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($34)-($36);
      var $37=$p2_addr;
      var $arrayidx26=(($37+16)|0);
      var $38=HEAPF64[(($arrayidx26)>>3)];
      var $39=$p1_addr;
      var $arrayidx27=(($39+16)|0);
      var $40=HEAPF64[(($arrayidx27)>>3)];
      var $sub28=($38)-($40);
      var $mul29=($sub25)*($sub28);
      var $add30=($add22)+($mul29);
      var $41=$bot;
      var $div=($add30)/($41);
      $t=$div;
      var $42=$p1_addr;
      var $arrayidx31=(($42)|0);
      var $43=HEAPF64[(($arrayidx31)>>3)];
      var $44=$t;
      var $45=$p2_addr;
      var $arrayidx32=(($45)|0);
      var $46=HEAPF64[(($arrayidx32)>>3)];
      var $47=$p1_addr;
      var $arrayidx33=(($47)|0);
      var $48=HEAPF64[(($arrayidx33)>>3)];
      var $sub34=($46)-($48);
      var $mul35=($44)*($sub34);
      var $add36=($43)+($mul35);
      var $arrayidx37=(($pn)|0);
      HEAPF64[(($arrayidx37)>>3)]=$add36;
      var $49=$p1_addr;
      var $arrayidx38=(($49+8)|0);
      var $50=HEAPF64[(($arrayidx38)>>3)];
      var $51=$t;
      var $52=$p2_addr;
      var $arrayidx39=(($52+8)|0);
      var $53=HEAPF64[(($arrayidx39)>>3)];
      var $54=$p1_addr;
      var $arrayidx40=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx40)>>3)];
      var $sub41=($53)-($55);
      var $mul42=($51)*($sub41);
      var $add43=($50)+($mul42);
      var $arrayidx44=(($pn+8)|0);
      HEAPF64[(($arrayidx44)>>3)]=$add43;
      var $56=$p1_addr;
      var $arrayidx45=(($56+16)|0);
      var $57=HEAPF64[(($arrayidx45)>>3)];
      var $58=$t;
      var $59=$p2_addr;
      var $arrayidx46=(($59+16)|0);
      var $60=HEAPF64[(($arrayidx46)>>3)];
      var $61=$p1_addr;
      var $arrayidx47=(($61+16)|0);
      var $62=HEAPF64[(($arrayidx47)>>3)];
      var $sub48=($60)-($62);
      var $mul49=($58)*($sub48);
      var $add50=($57)+($mul49);
      var $arrayidx51=(($pn+16)|0);
      HEAPF64[(($arrayidx51)>>3)]=$add50;
      label = 5; break;
    case 5: 
      var $63=$p_addr;
      var $arrayidx52=(($63)|0);
      var $64=HEAPF64[(($arrayidx52)>>3)];
      var $arrayidx53=(($pn)|0);
      var $65=HEAPF64[(($arrayidx53)>>3)];
      var $sub54=($64)-($65);
      var $66=Math.pow($sub54, 2);
      var $67=$p_addr;
      var $arrayidx55=(($67+8)|0);
      var $68=HEAPF64[(($arrayidx55)>>3)];
      var $arrayidx56=(($pn+8)|0);
      var $69=HEAPF64[(($arrayidx56)>>3)];
      var $sub57=($68)-($69);
      var $70=Math.pow($sub57, 2);
      var $add58=($66)+($70);
      var $71=$p_addr;
      var $arrayidx59=(($71+16)|0);
      var $72=HEAPF64[(($arrayidx59)>>3)];
      var $arrayidx60=(($pn+16)|0);
      var $73=HEAPF64[(($arrayidx60)>>3)];
      var $sub61=($72)-($73);
      var $74=Math.pow($sub61, 2);
      var $add62=($add58)+($74);
      var $call=Math.sqrt($add62);
      $dist=$call;
      var $75=$dist;
      STACKTOP = __stackBase__;
      return $75;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp_point_dist_3d"] = _line_exp_point_dist_3d;
function _line_imp_is_degenerate_2d($a, $b, $c) {
  var label = 0;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $value;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$a_addr;
  var $1=$a_addr;
  var $mul=($0)*($1);
  var $2=$b_addr;
  var $3=$b_addr;
  var $mul1=($2)*($3);
  var $add=($mul)+($mul1);
  var $cmp=$add == 0;
  var $conv=(($cmp)&(1));
  $value=$conv;
  var $4=$value;
  return $4;
}
Module["_line_imp_is_degenerate_2d"] = _line_imp_is_degenerate_2d;
function _line_exp_point_dist_signed_2d($p1, $p2, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $p1_addr;
  var $p2_addr;
  var $p_addr;
  var $a=__stackBase__;
  var $b=(__stackBase__)+(8);
  var $c=(__stackBase__)+(16);
  var $dist_signed;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p_addr=$p;
  var $0=$p1_addr;
  var $1=$p2_addr;
  _line_exp2imp_2d($0, $1, $a, $b, $c);
  var $2=HEAPF64[(($a)>>3)];
  var $3=$p_addr;
  var $arrayidx=(($3)|0);
  var $4=HEAPF64[(($arrayidx)>>3)];
  var $mul=($2)*($4);
  var $5=HEAPF64[(($b)>>3)];
  var $6=$p_addr;
  var $arrayidx1=(($6+8)|0);
  var $7=HEAPF64[(($arrayidx1)>>3)];
  var $mul2=($5)*($7);
  var $add=($mul)+($mul2);
  var $8=HEAPF64[(($c)>>3)];
  var $add3=($add)+($8);
  var $9=HEAPF64[(($a)>>3)];
  var $10=HEAPF64[(($a)>>3)];
  var $mul4=($9)*($10);
  var $11=HEAPF64[(($b)>>3)];
  var $12=HEAPF64[(($b)>>3)];
  var $mul5=($11)*($12);
  var $add6=($mul4)+($mul5);
  var $call=Math.sqrt($add6);
  var $div=($add3)/($call);
  $dist_signed=$div;
  var $13=$dist_signed;
  STACKTOP = __stackBase__;
  return $13;
}
Module["_line_exp_point_dist_signed_2d"] = _line_exp_point_dist_signed_2d;
function _line_exp2par_2d($p1, $p2, $f, $g, $x0, $y0) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $f_addr;
      var $g_addr;
      var $x0_addr;
      var $y0_addr;
      var $norm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $f_addr=$f;
      $g_addr=$g;
      $x0_addr=$x0;
      $y0_addr=$y0;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$x0_addr;
      HEAPF64[(($2)>>3)]=$1;
      var $3=$p1_addr;
      var $arrayidx1=(($3+8)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $5=$y0_addr;
      HEAPF64[(($5)>>3)]=$4;
      var $6=$p2_addr;
      var $arrayidx2=(($6)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$p1_addr;
      var $arrayidx3=(($8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub=($7)-($9);
      var $10=$p2_addr;
      var $arrayidx4=(($10)|0);
      var $11=HEAPF64[(($arrayidx4)>>3)];
      var $12=$p1_addr;
      var $arrayidx5=(($12)|0);
      var $13=HEAPF64[(($arrayidx5)>>3)];
      var $sub6=($11)-($13);
      var $mul=($sub)*($sub6);
      var $14=$p2_addr;
      var $arrayidx7=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $16=$p1_addr;
      var $arrayidx8=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($15)-($17);
      var $18=$p2_addr;
      var $arrayidx10=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx10)>>3)];
      var $20=$p1_addr;
      var $arrayidx11=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($19)-($21);
      var $mul13=($sub9)*($sub12);
      var $add=($mul)+($mul13);
      var $call=Math.sqrt($add);
      $norm=$call;
      var $22=$norm;
      var $cmp=$22 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$f_addr;
      HEAPF64[(($23)>>3)]=0;
      var $24=$g_addr;
      HEAPF64[(($24)>>3)]=0;
      label = 5; break;
    case 4: 
      var $25=$p2_addr;
      var $arrayidx14=(($25)|0);
      var $26=HEAPF64[(($arrayidx14)>>3)];
      var $27=$p1_addr;
      var $arrayidx15=(($27)|0);
      var $28=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($26)-($28);
      var $29=$norm;
      var $div=($sub16)/($29);
      var $30=$f_addr;
      HEAPF64[(($30)>>3)]=$div;
      var $31=$p2_addr;
      var $arrayidx17=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx17)>>3)];
      var $33=$p1_addr;
      var $arrayidx18=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($32)-($34);
      var $35=$norm;
      var $div20=($sub19)/($35);
      var $36=$g_addr;
      HEAPF64[(($36)>>3)]=$div20;
      label = 5; break;
    case 5: 
      var $37=$f_addr;
      var $38=HEAPF64[(($37)>>3)];
      var $cmp21=$38 < 0;
      if ($cmp21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $39=$f_addr;
      var $40=HEAPF64[(($39)>>3)];
      var $sub23=(-$40);
      var $41=$f_addr;
      HEAPF64[(($41)>>3)]=$sub23;
      var $42=$g_addr;
      var $43=HEAPF64[(($42)>>3)];
      var $sub24=(-$43);
      var $44=$g_addr;
      HEAPF64[(($44)>>3)]=$sub24;
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp2par_2d"] = _line_exp2par_2d;
function _line_exp2par_3d($p1, $p2, $f, $g, $h, $x0, $y0, $z0) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $f_addr;
      var $g_addr;
      var $h_addr;
      var $x0_addr;
      var $y0_addr;
      var $z0_addr;
      var $norm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $f_addr=$f;
      $g_addr=$g;
      $h_addr=$h;
      $x0_addr=$x0;
      $y0_addr=$y0;
      $z0_addr=$z0;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$f_addr;
      HEAPF64[(($4)>>3)]=$sub;
      var $5=$p2_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=$g_addr;
      HEAPF64[(($9)>>3)]=$sub4;
      var $10=$p2_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$p1_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=$h_addr;
      HEAPF64[(($14)>>3)]=$sub7;
      var $15=$f_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $17=Math.pow($16, 2);
      var $18=$g_addr;
      var $19=HEAPF64[(($18)>>3)];
      var $20=Math.pow($19, 2);
      var $add=($17)+($20);
      var $21=$h_addr;
      var $22=HEAPF64[(($21)>>3)];
      var $23=Math.pow($22, 2);
      var $add8=($add)+($23);
      var $call=Math.sqrt($add8);
      $norm=$call;
      var $24=$norm;
      var $cmp=$24 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=$f_addr;
      HEAPF64[(($25)>>3)]=0;
      var $26=$g_addr;
      HEAPF64[(($26)>>3)]=0;
      var $27=$h_addr;
      HEAPF64[(($27)>>3)]=0;
      label = 5; break;
    case 4: 
      var $28=$f_addr;
      var $29=HEAPF64[(($28)>>3)];
      var $30=$norm;
      var $div=($29)/($30);
      var $31=$f_addr;
      HEAPF64[(($31)>>3)]=$div;
      var $32=$g_addr;
      var $33=HEAPF64[(($32)>>3)];
      var $34=$norm;
      var $div9=($33)/($34);
      var $35=$g_addr;
      HEAPF64[(($35)>>3)]=$div9;
      var $36=$h_addr;
      var $37=HEAPF64[(($36)>>3)];
      var $38=$norm;
      var $div10=($37)/($38);
      var $39=$h_addr;
      HEAPF64[(($39)>>3)]=$div10;
      label = 5; break;
    case 5: 
      var $40=$f_addr;
      var $41=HEAPF64[(($40)>>3)];
      var $cmp11=$41 < 0;
      if ($cmp11) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $42=$f_addr;
      var $43=HEAPF64[(($42)>>3)];
      var $sub13=(-$43);
      var $44=$f_addr;
      HEAPF64[(($44)>>3)]=$sub13;
      var $45=$g_addr;
      var $46=HEAPF64[(($45)>>3)];
      var $sub14=(-$46);
      var $47=$g_addr;
      HEAPF64[(($47)>>3)]=$sub14;
      var $48=$h_addr;
      var $49=HEAPF64[(($48)>>3)];
      var $sub15=(-$49);
      var $50=$h_addr;
      HEAPF64[(($50)>>3)]=$sub15;
      label = 7; break;
    case 7: 
      var $51=$p1_addr;
      var $arrayidx17=(($51)|0);
      var $52=HEAPF64[(($arrayidx17)>>3)];
      var $53=$x0_addr;
      HEAPF64[(($53)>>3)]=$52;
      var $54=$p1_addr;
      var $arrayidx18=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx18)>>3)];
      var $56=$y0_addr;
      HEAPF64[(($56)>>3)]=$55;
      var $57=$p1_addr;
      var $arrayidx19=(($57+16)|0);
      var $58=HEAPF64[(($arrayidx19)>>3)];
      var $59=$z0_addr;
      HEAPF64[(($59)>>3)]=$58;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp2par_3d"] = _line_exp2par_3d;
function _line_exp2imp_2d($p1, $p2, $a, $b, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((8680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((8656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $6=$p1_addr;
      var $arrayidx=(($6)|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$p1_addr;
      var $arrayidx4=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx4)>>3)];
      var $call5=_fprintf($5, ((8624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$7,HEAPF64[(((tempInt)+(8))>>3)]=$9,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $11=$p2_addr;
      var $arrayidx6=(($11)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$p2_addr;
      var $arrayidx7=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx7)>>3)];
      var $call8=_fprintf($10, ((8576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$12,HEAPF64[(((tempInt)+(8))>>3)]=$14,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $15=$p2_addr;
      var $arrayidx9=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$p1_addr;
      var $arrayidx10=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $sub=($16)-($18);
      var $19=$a_addr;
      HEAPF64[(($19)>>3)]=$sub;
      var $20=$p1_addr;
      var $arrayidx11=(($20)|0);
      var $21=HEAPF64[(($arrayidx11)>>3)];
      var $22=$p2_addr;
      var $arrayidx12=(($22)|0);
      var $23=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($21)-($23);
      var $24=$b_addr;
      HEAPF64[(($24)>>3)]=$sub13;
      var $25=$p2_addr;
      var $arrayidx14=(($25)|0);
      var $26=HEAPF64[(($arrayidx14)>>3)];
      var $27=$p1_addr;
      var $arrayidx15=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx15)>>3)];
      var $mul=($26)*($28);
      var $29=$p1_addr;
      var $arrayidx16=(($29)|0);
      var $30=HEAPF64[(($arrayidx16)>>3)];
      var $31=$p2_addr;
      var $arrayidx17=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx17)>>3)];
      var $mul18=($30)*($32);
      var $sub19=($mul)-($mul18);
      var $33=$c_addr;
      HEAPF64[(($33)>>3)]=$sub19;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp2imp_2d"] = _line_exp2imp_2d;
function _line_exp_point_near_2d($p1, $p2, $p, $pn, $dist, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $t_addr;
      var $bot;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $t_addr=$t;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p2_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      $bot=$add;
      var $10=$bot;
      var $cmp=$10 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($11, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $12=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($12, ((8872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $13=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($13, ((8816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $14=$p1_addr;
      var $arrayidx7=(($14)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $16=$p_addr;
      var $arrayidx8=(($16)|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($15)-($17);
      var $18=$p1_addr;
      var $arrayidx10=(($18)|0);
      var $19=HEAPF64[(($arrayidx10)>>3)];
      var $20=$p2_addr;
      var $arrayidx11=(($20)|0);
      var $21=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($19)-($21);
      var $mul=($sub9)*($sub12);
      var $22=$p1_addr;
      var $arrayidx13=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx13)>>3)];
      var $24=$p_addr;
      var $arrayidx14=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($23)-($25);
      var $26=$p1_addr;
      var $arrayidx16=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx16)>>3)];
      var $28=$p2_addr;
      var $arrayidx17=(($28+8)|0);
      var $29=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($27)-($29);
      var $mul19=($sub15)*($sub18);
      var $add20=($mul)+($mul19);
      var $30=$bot;
      var $div=($add20)/($30);
      var $31=$t_addr;
      HEAPF64[(($31)>>3)]=$div;
      var $32=$p1_addr;
      var $arrayidx21=(($32)|0);
      var $33=HEAPF64[(($arrayidx21)>>3)];
      var $34=$t_addr;
      var $35=HEAPF64[(($34)>>3)];
      var $36=$p2_addr;
      var $arrayidx22=(($36)|0);
      var $37=HEAPF64[(($arrayidx22)>>3)];
      var $38=$p1_addr;
      var $arrayidx23=(($38)|0);
      var $39=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($37)-($39);
      var $mul25=($35)*($sub24);
      var $add26=($33)+($mul25);
      var $40=$pn_addr;
      var $arrayidx27=(($40)|0);
      HEAPF64[(($arrayidx27)>>3)]=$add26;
      var $41=$p1_addr;
      var $arrayidx28=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx28)>>3)];
      var $43=$t_addr;
      var $44=HEAPF64[(($43)>>3)];
      var $45=$p2_addr;
      var $arrayidx29=(($45+8)|0);
      var $46=HEAPF64[(($arrayidx29)>>3)];
      var $47=$p1_addr;
      var $arrayidx30=(($47+8)|0);
      var $48=HEAPF64[(($arrayidx30)>>3)];
      var $sub31=($46)-($48);
      var $mul32=($44)*($sub31);
      var $add33=($42)+($mul32);
      var $49=$pn_addr;
      var $arrayidx34=(($49+8)|0);
      HEAPF64[(($arrayidx34)>>3)]=$add33;
      var $50=$p_addr;
      var $arrayidx35=(($50)|0);
      var $51=HEAPF64[(($arrayidx35)>>3)];
      var $52=$pn_addr;
      var $arrayidx36=(($52)|0);
      var $53=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($51)-($53);
      var $54=Math.pow($sub37, 2);
      var $55=$p_addr;
      var $arrayidx38=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx38)>>3)];
      var $57=$pn_addr;
      var $arrayidx39=(($57+8)|0);
      var $58=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($56)-($58);
      var $59=Math.pow($sub40, 2);
      var $add41=($54)+($59);
      var $call42=Math.sqrt($add41);
      var $60=$dist_addr;
      HEAPF64[(($60)>>3)]=$call42;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp_point_near_2d"] = _line_exp_point_near_2d;
function _line_exp_point_near_3d($p1, $p2, $p, $pn, $dist, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $t_addr;
      var $bot;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $t_addr=$t;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p2_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$p2_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$p1_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $add8=($add)+($14);
      $bot=$add8;
      var $15=$bot;
      var $cmp=$15 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($16, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $17=HEAP32[((_stderr)>>2)];
      var $call9=_fprintf($17, ((8752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $18=HEAP32[((_stderr)>>2)];
      var $call10=_fprintf($18, ((8816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $19=$p1_addr;
      var $arrayidx11=(($19)|0);
      var $20=HEAPF64[(($arrayidx11)>>3)];
      var $21=$p_addr;
      var $arrayidx12=(($21)|0);
      var $22=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($20)-($22);
      var $23=$p1_addr;
      var $arrayidx14=(($23)|0);
      var $24=HEAPF64[(($arrayidx14)>>3)];
      var $25=$p2_addr;
      var $arrayidx15=(($25)|0);
      var $26=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($24)-($26);
      var $mul=($sub13)*($sub16);
      var $27=$p1_addr;
      var $arrayidx17=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $29=$p_addr;
      var $arrayidx18=(($29+8)|0);
      var $30=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($28)-($30);
      var $31=$p1_addr;
      var $arrayidx20=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx20)>>3)];
      var $33=$p2_addr;
      var $arrayidx21=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($32)-($34);
      var $mul23=($sub19)*($sub22);
      var $add24=($mul)+($mul23);
      var $35=$p1_addr;
      var $arrayidx25=(($35+16)|0);
      var $36=HEAPF64[(($arrayidx25)>>3)];
      var $37=$p_addr;
      var $arrayidx26=(($37+16)|0);
      var $38=HEAPF64[(($arrayidx26)>>3)];
      var $sub27=($36)-($38);
      var $39=$p1_addr;
      var $arrayidx28=(($39+16)|0);
      var $40=HEAPF64[(($arrayidx28)>>3)];
      var $41=$p2_addr;
      var $arrayidx29=(($41+16)|0);
      var $42=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($40)-($42);
      var $mul31=($sub27)*($sub30);
      var $add32=($add24)+($mul31);
      var $43=$bot;
      var $div=($add32)/($43);
      var $44=$t_addr;
      HEAPF64[(($44)>>3)]=$div;
      var $45=$p1_addr;
      var $arrayidx33=(($45)|0);
      var $46=HEAPF64[(($arrayidx33)>>3)];
      var $47=$t_addr;
      var $48=HEAPF64[(($47)>>3)];
      var $49=$p2_addr;
      var $arrayidx34=(($49)|0);
      var $50=HEAPF64[(($arrayidx34)>>3)];
      var $51=$p1_addr;
      var $arrayidx35=(($51)|0);
      var $52=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($50)-($52);
      var $mul37=($48)*($sub36);
      var $add38=($46)+($mul37);
      var $53=$pn_addr;
      var $arrayidx39=(($53)|0);
      HEAPF64[(($arrayidx39)>>3)]=$add38;
      var $54=$p1_addr;
      var $arrayidx40=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx40)>>3)];
      var $56=$t_addr;
      var $57=HEAPF64[(($56)>>3)];
      var $58=$p2_addr;
      var $arrayidx41=(($58+8)|0);
      var $59=HEAPF64[(($arrayidx41)>>3)];
      var $60=$p1_addr;
      var $arrayidx42=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx42)>>3)];
      var $sub43=($59)-($61);
      var $mul44=($57)*($sub43);
      var $add45=($55)+($mul44);
      var $62=$pn_addr;
      var $arrayidx46=(($62+8)|0);
      HEAPF64[(($arrayidx46)>>3)]=$add45;
      var $63=$p1_addr;
      var $arrayidx47=(($63+16)|0);
      var $64=HEAPF64[(($arrayidx47)>>3)];
      var $65=$t_addr;
      var $66=HEAPF64[(($65)>>3)];
      var $67=$p2_addr;
      var $arrayidx48=(($67+16)|0);
      var $68=HEAPF64[(($arrayidx48)>>3)];
      var $69=$p1_addr;
      var $arrayidx49=(($69+16)|0);
      var $70=HEAPF64[(($arrayidx49)>>3)];
      var $sub50=($68)-($70);
      var $mul51=($66)*($sub50);
      var $add52=($64)+($mul51);
      var $71=$pn_addr;
      var $arrayidx53=(($71+16)|0);
      HEAPF64[(($arrayidx53)>>3)]=$add52;
      var $72=$p_addr;
      var $arrayidx54=(($72)|0);
      var $73=HEAPF64[(($arrayidx54)>>3)];
      var $74=$pn_addr;
      var $arrayidx55=(($74)|0);
      var $75=HEAPF64[(($arrayidx55)>>3)];
      var $sub56=($73)-($75);
      var $76=Math.pow($sub56, 2);
      var $77=$p_addr;
      var $arrayidx57=(($77+8)|0);
      var $78=HEAPF64[(($arrayidx57)>>3)];
      var $79=$pn_addr;
      var $arrayidx58=(($79+8)|0);
      var $80=HEAPF64[(($arrayidx58)>>3)];
      var $sub59=($78)-($80);
      var $81=Math.pow($sub59, 2);
      var $add60=($76)+($81);
      var $82=$p_addr;
      var $arrayidx61=(($82+16)|0);
      var $83=HEAPF64[(($arrayidx61)>>3)];
      var $84=$pn_addr;
      var $arrayidx62=(($84+16)|0);
      var $85=HEAPF64[(($arrayidx62)>>3)];
      var $sub63=($83)-($85);
      var $86=Math.pow($sub63, 2);
      var $add64=($add60)+($86);
      var $call65=Math.sqrt($add64);
      var $87=$dist_addr;
      HEAPF64[(($87)>>3)]=$call65;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_exp_point_near_3d"] = _line_exp_point_near_3d;
function _line_imp_point_dist_2d($a, $b, $c, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $p_addr;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $p_addr=$p;
      var $0=$a_addr;
      var $1=$a_addr;
      var $mul=($0)*($1);
      var $2=$b_addr;
      var $3=$b_addr;
      var $mul1=($2)*($3);
      var $add=($mul)+($mul1);
      var $cmp=$add == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($4, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($5, ((8504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($6, ((8440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $7=$a_addr;
      var $8=$p_addr;
      var $arrayidx=(($8)|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $mul4=($7)*($9);
      var $10=$b_addr;
      var $11=$p_addr;
      var $arrayidx5=(($11+8)|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $mul6=($10)*($12);
      var $add7=($mul4)+($mul6);
      var $13=$c_addr;
      var $add8=($add7)+($13);
      var $call9=_r8_abs($add8);
      var $14=$a_addr;
      var $15=$a_addr;
      var $mul10=($14)*($15);
      var $16=$b_addr;
      var $17=$b_addr;
      var $mul11=($16)*($17);
      var $add12=($mul10)+($mul11);
      var $call13=Math.sqrt($add12);
      var $div=($call9)/($call13);
      STACKTOP = __stackBase__;
      return $div;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_imp_point_dist_2d"] = _line_imp_point_dist_2d;
function _line_imp_point_dist_signed_2d($a, $b, $c, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $p_addr;
      var $dist;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $p_addr=$p;
      var $0=$a_addr;
      var $1=$a_addr;
      var $mul=($0)*($1);
      var $2=$b_addr;
      var $3=$b_addr;
      var $mul1=($2)*($3);
      var $add=($mul)+($mul1);
      var $cmp=$add == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($4, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($5, ((8376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($6, ((8440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $7=$c_addr;
      var $call4=_r8_sign($7);
      var $sub=(-$call4);
      var $8=$a_addr;
      var $9=$p_addr;
      var $arrayidx=(($9)|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $mul5=($8)*($10);
      var $11=$b_addr;
      var $12=$p_addr;
      var $arrayidx6=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($11)*($13);
      var $add8=($mul5)+($mul7);
      var $14=$c_addr;
      var $add9=($add8)+($14);
      var $mul10=($sub)*($add9);
      var $15=$a_addr;
      var $16=$a_addr;
      var $mul11=($15)*($16);
      var $17=$b_addr;
      var $18=$b_addr;
      var $mul12=($17)*($18);
      var $add13=($mul11)+($mul12);
      var $call14=Math.sqrt($add13);
      var $div=($mul10)/($call14);
      $dist=$div;
      var $19=$dist;
      STACKTOP = __stackBase__;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_imp_point_dist_signed_2d"] = _line_imp_point_dist_signed_2d;
function _line_imp2exp_2d($a, $b, $c, $p1, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $p1_addr;
      var $p2_addr;
      var $normsq;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$a_addr;
      var $1=$b_addr;
      var $2=$c_addr;
      var $call=_line_imp_is_degenerate_2d($0, $1, $2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($4, ((8280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($5, ((8200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$a_addr;
      var $7=$a_addr;
      var $mul=($6)*($7);
      var $8=$b_addr;
      var $9=$b_addr;
      var $mul4=($8)*($9);
      var $add=($mul)+($mul4);
      $normsq=$add;
      var $10=$a_addr;
      var $sub=(-$10);
      var $11=$c_addr;
      var $mul5=($sub)*($11);
      var $12=$normsq;
      var $div=($mul5)/($12);
      var $13=$p1_addr;
      var $arrayidx=(($13)|0);
      HEAPF64[(($arrayidx)>>3)]=$div;
      var $14=$b_addr;
      var $sub6=(-$14);
      var $15=$c_addr;
      var $mul7=($sub6)*($15);
      var $16=$normsq;
      var $div8=($mul7)/($16);
      var $17=$p1_addr;
      var $arrayidx9=(($17+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$div8;
      var $18=$b_addr;
      var $call10=_r8_abs($18);
      var $19=$a_addr;
      var $call11=_r8_abs($19);
      var $cmp=$call10 < $call11;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$a_addr;
      var $21=$b_addr;
      var $22=$a_addr;
      var $div13=($21)/($22);
      var $sub14=($20)-($div13);
      var $sub15=(-$sub14);
      var $23=$c_addr;
      var $mul16=($sub15)*($23);
      var $24=$normsq;
      var $div17=($mul16)/($24);
      var $25=$p2_addr;
      var $arrayidx18=(($25)|0);
      HEAPF64[(($arrayidx18)>>3)]=$div17;
      var $26=$b_addr;
      var $add19=($26)+(1);
      var $sub20=(-$add19);
      var $27=$c_addr;
      var $mul21=($sub20)*($27);
      var $28=$normsq;
      var $div22=($mul21)/($28);
      var $29=$p2_addr;
      var $arrayidx23=(($29+8)|0);
      HEAPF64[(($arrayidx23)>>3)]=$div22;
      label = 7; break;
    case 6: 
      var $30=$a_addr;
      var $add24=($30)+(1);
      var $sub25=(-$add24);
      var $31=$c_addr;
      var $mul26=($sub25)*($31);
      var $32=$normsq;
      var $div27=($mul26)/($32);
      var $33=$p2_addr;
      var $arrayidx28=(($33)|0);
      HEAPF64[(($arrayidx28)>>3)]=$div27;
      var $34=$b_addr;
      var $35=$a_addr;
      var $36=$b_addr;
      var $div29=($35)/($36);
      var $sub30=($34)-($div29);
      var $sub31=(-$sub30);
      var $37=$c_addr;
      var $mul32=($sub31)*($37);
      var $38=$normsq;
      var $div33=($mul32)/($38);
      var $39=$p2_addr;
      var $arrayidx34=(($39+8)|0);
      HEAPF64[(($arrayidx34)>>3)]=$div33;
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_imp2exp_2d"] = _line_imp2exp_2d;
function _line_par2imp_2d($f, $g, $x0, $y0, $a, $b, $c) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $x0_addr;
  var $y0_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $f_addr=$f;
  $g_addr=$g;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$g_addr;
  var $sub=(-$0);
  var $1=$a_addr;
  HEAPF64[(($1)>>3)]=$sub;
  var $2=$f_addr;
  var $3=$b_addr;
  HEAPF64[(($3)>>3)]=$2;
  var $4=$g_addr;
  var $5=$x0_addr;
  var $mul=($4)*($5);
  var $6=$f_addr;
  var $7=$y0_addr;
  var $mul1=($6)*($7);
  var $sub2=($mul)-($mul1);
  var $8=$c_addr;
  HEAPF64[(($8)>>3)]=$sub2;
  return;
}
Module["_line_par2imp_2d"] = _line_par2imp_2d;
function _line_par2exp_2d($f, $g, $x0, $y0, $p1, $p2) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $x0_addr;
  var $y0_addr;
  var $p1_addr;
  var $p2_addr;
  $f_addr=$f;
  $g_addr=$g;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$x0_addr;
  var $1=$p1_addr;
  var $arrayidx=(($1)|0);
  HEAPF64[(($arrayidx)>>3)]=$0;
  var $2=$y0_addr;
  var $3=$p1_addr;
  var $arrayidx1=(($3+8)|0);
  HEAPF64[(($arrayidx1)>>3)]=$2;
  var $4=$p1_addr;
  var $arrayidx2=(($4)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$f_addr;
  var $add=($5)+($6);
  var $7=$p2_addr;
  var $arrayidx3=(($7)|0);
  HEAPF64[(($arrayidx3)>>3)]=$add;
  var $8=$p1_addr;
  var $arrayidx4=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $10=$g_addr;
  var $add5=($9)+($10);
  var $11=$p2_addr;
  var $arrayidx6=(($11+8)|0);
  HEAPF64[(($arrayidx6)>>3)]=$add5;
  return;
}
Module["_line_par2exp_2d"] = _line_par2exp_2d;
function _line_par2exp_3d($f, $g, $h, $x0, $y0, $z0, $p1, $p2) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $h_addr;
  var $x0_addr;
  var $y0_addr;
  var $z0_addr;
  var $p1_addr;
  var $p2_addr;
  $f_addr=$f;
  $g_addr=$g;
  $h_addr=$h;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $z0_addr=$z0;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$x0_addr;
  var $1=$p1_addr;
  var $arrayidx=(($1)|0);
  HEAPF64[(($arrayidx)>>3)]=$0;
  var $2=$y0_addr;
  var $3=$p1_addr;
  var $arrayidx1=(($3+8)|0);
  HEAPF64[(($arrayidx1)>>3)]=$2;
  var $4=$z0_addr;
  var $5=$p1_addr;
  var $arrayidx2=(($5+16)|0);
  HEAPF64[(($arrayidx2)>>3)]=$4;
  var $6=$p1_addr;
  var $arrayidx3=(($6)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $8=$f_addr;
  var $add=($7)+($8);
  var $9=$p2_addr;
  var $arrayidx4=(($9)|0);
  HEAPF64[(($arrayidx4)>>3)]=$add;
  var $10=$p1_addr;
  var $arrayidx5=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $12=$g_addr;
  var $add6=($11)+($12);
  var $13=$p2_addr;
  var $arrayidx7=(($13+8)|0);
  HEAPF64[(($arrayidx7)>>3)]=$add6;
  var $14=$p1_addr;
  var $arrayidx8=(($14+16)|0);
  var $15=HEAPF64[(($arrayidx8)>>3)];
  var $16=$h_addr;
  var $add9=($15)+($16);
  var $17=$p2_addr;
  var $arrayidx10=(($17+16)|0);
  HEAPF64[(($arrayidx10)>>3)]=$add9;
  return;
}
Module["_line_par2exp_3d"] = _line_par2exp_3d;
function _line_par_point_dist_2d($f, $g, $x0, $y0, $p) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $x0_addr;
  var $y0_addr;
  var $p_addr;
  var $dx;
  var $dy;
  var $value;
  $f_addr=$f;
  $g_addr=$g;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $p_addr=$p;
  var $0=$g_addr;
  var $1=$g_addr;
  var $mul=($0)*($1);
  var $2=$p_addr;
  var $arrayidx=(($2)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$x0_addr;
  var $sub=($3)-($4);
  var $mul1=($mul)*($sub);
  var $5=$f_addr;
  var $6=$g_addr;
  var $mul2=($5)*($6);
  var $7=$p_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $9=$y0_addr;
  var $sub4=($8)-($9);
  var $mul5=($mul2)*($sub4);
  var $sub6=($mul1)-($mul5);
  $dx=$sub6;
  var $10=$f_addr;
  var $sub7=(-$10);
  var $11=$g_addr;
  var $mul8=($sub7)*($11);
  var $12=$p_addr;
  var $arrayidx9=(($12)|0);
  var $13=HEAPF64[(($arrayidx9)>>3)];
  var $14=$x0_addr;
  var $sub10=($13)-($14);
  var $mul11=($mul8)*($sub10);
  var $15=$f_addr;
  var $16=$f_addr;
  var $mul12=($15)*($16);
  var $17=$p_addr;
  var $arrayidx13=(($17+8)|0);
  var $18=HEAPF64[(($arrayidx13)>>3)];
  var $19=$y0_addr;
  var $sub14=($18)-($19);
  var $mul15=($mul12)*($sub14);
  var $add=($mul11)+($mul15);
  $dy=$add;
  var $20=$dx;
  var $21=$dx;
  var $mul16=($20)*($21);
  var $22=$dy;
  var $23=$dy;
  var $mul17=($22)*($23);
  var $add18=($mul16)+($mul17);
  var $call=Math.sqrt($add18);
  var $24=$f_addr;
  var $25=$f_addr;
  var $mul19=($24)*($25);
  var $26=$g_addr;
  var $27=$g_addr;
  var $mul20=($26)*($27);
  var $add21=($mul19)+($mul20);
  var $div=($call)/($add21);
  $value=$div;
  var $28=$value;
  return $28;
}
Module["_line_par_point_dist_2d"] = _line_par_point_dist_2d;
function _line_par_point_dist_3d($f, $g, $h, $x0, $y0, $z0, $p) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $h_addr;
  var $x0_addr;
  var $y0_addr;
  var $z0_addr;
  var $p_addr;
  var $dx;
  var $dy;
  var $dz;
  var $value;
  $f_addr=$f;
  $g_addr=$g;
  $h_addr=$h;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $z0_addr=$z0;
  $p_addr=$p;
  var $0=$g_addr;
  var $1=$f_addr;
  var $2=$p_addr;
  var $arrayidx=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$y0_addr;
  var $sub=($3)-($4);
  var $mul=($1)*($sub);
  var $5=$g_addr;
  var $6=$p_addr;
  var $arrayidx1=(($6)|0);
  var $7=HEAPF64[(($arrayidx1)>>3)];
  var $8=$x0_addr;
  var $sub2=($7)-($8);
  var $mul3=($5)*($sub2);
  var $sub4=($mul)-($mul3);
  var $mul5=($0)*($sub4);
  var $9=$h_addr;
  var $10=$f_addr;
  var $11=$p_addr;
  var $arrayidx6=(($11+16)|0);
  var $12=HEAPF64[(($arrayidx6)>>3)];
  var $13=$z0_addr;
  var $sub7=($12)-($13);
  var $mul8=($10)*($sub7);
  var $14=$h_addr;
  var $15=$p_addr;
  var $arrayidx9=(($15)|0);
  var $16=HEAPF64[(($arrayidx9)>>3)];
  var $17=$x0_addr;
  var $sub10=($16)-($17);
  var $mul11=($14)*($sub10);
  var $sub12=($mul8)-($mul11);
  var $mul13=($9)*($sub12);
  var $add=($mul5)+($mul13);
  $dx=$add;
  var $18=$h_addr;
  var $19=$g_addr;
  var $20=$p_addr;
  var $arrayidx14=(($20+16)|0);
  var $21=HEAPF64[(($arrayidx14)>>3)];
  var $22=$z0_addr;
  var $sub15=($21)-($22);
  var $mul16=($19)*($sub15);
  var $23=$h_addr;
  var $24=$p_addr;
  var $arrayidx17=(($24+8)|0);
  var $25=HEAPF64[(($arrayidx17)>>3)];
  var $26=$y0_addr;
  var $sub18=($25)-($26);
  var $mul19=($23)*($sub18);
  var $sub20=($mul16)-($mul19);
  var $mul21=($18)*($sub20);
  var $27=$f_addr;
  var $28=$f_addr;
  var $29=$p_addr;
  var $arrayidx22=(($29+8)|0);
  var $30=HEAPF64[(($arrayidx22)>>3)];
  var $31=$y0_addr;
  var $sub23=($30)-($31);
  var $mul24=($28)*($sub23);
  var $32=$g_addr;
  var $33=$p_addr;
  var $arrayidx25=(($33)|0);
  var $34=HEAPF64[(($arrayidx25)>>3)];
  var $35=$x0_addr;
  var $sub26=($34)-($35);
  var $mul27=($32)*($sub26);
  var $sub28=($mul24)-($mul27);
  var $mul29=($27)*($sub28);
  var $sub30=($mul21)-($mul29);
  $dy=$sub30;
  var $36=$f_addr;
  var $sub31=(-$36);
  var $37=$f_addr;
  var $38=$p_addr;
  var $arrayidx32=(($38+16)|0);
  var $39=HEAPF64[(($arrayidx32)>>3)];
  var $40=$z0_addr;
  var $sub33=($39)-($40);
  var $mul34=($37)*($sub33);
  var $41=$h_addr;
  var $42=$p_addr;
  var $arrayidx35=(($42)|0);
  var $43=HEAPF64[(($arrayidx35)>>3)];
  var $44=$x0_addr;
  var $sub36=($43)-($44);
  var $mul37=($41)*($sub36);
  var $sub38=($mul34)-($mul37);
  var $mul39=($sub31)*($sub38);
  var $45=$g_addr;
  var $46=$g_addr;
  var $47=$p_addr;
  var $arrayidx40=(($47+16)|0);
  var $48=HEAPF64[(($arrayidx40)>>3)];
  var $49=$z0_addr;
  var $sub41=($48)-($49);
  var $mul42=($46)*($sub41);
  var $50=$h_addr;
  var $51=$p_addr;
  var $arrayidx43=(($51+8)|0);
  var $52=HEAPF64[(($arrayidx43)>>3)];
  var $53=$y0_addr;
  var $sub44=($52)-($53);
  var $mul45=($50)*($sub44);
  var $sub46=($mul42)-($mul45);
  var $mul47=($45)*($sub46);
  var $sub48=($mul39)-($mul47);
  $dz=$sub48;
  var $54=$dx;
  var $55=$dx;
  var $mul49=($54)*($55);
  var $56=$dy;
  var $57=$dy;
  var $mul50=($56)*($57);
  var $add51=($mul49)+($mul50);
  var $58=$dz;
  var $59=$dz;
  var $mul52=($58)*($59);
  var $add53=($add51)+($mul52);
  var $call=Math.sqrt($add53);
  var $60=$f_addr;
  var $61=$f_addr;
  var $mul54=($60)*($61);
  var $62=$g_addr;
  var $63=$g_addr;
  var $mul55=($62)*($63);
  var $add56=($mul54)+($mul55);
  var $64=$h_addr;
  var $65=$h_addr;
  var $mul57=($64)*($65);
  var $add58=($add56)+($mul57);
  var $div=($call)/($add58);
  $value=$div;
  var $66=$value;
  return $66;
}
Module["_line_par_point_dist_3d"] = _line_par_point_dist_3d;
function _line_par_point_near_2d($f, $g, $x0, $y0, $p) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $x0_addr;
  var $y0_addr;
  var $p_addr;
  var $t;
  var $pn;
  $f_addr=$f;
  $g_addr=$g;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $p_addr=$p;
  var $0=$f_addr;
  var $1=$p_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$x0_addr;
  var $sub=($2)-($3);
  var $mul=($0)*($sub);
  var $4=$g_addr;
  var $5=$p_addr;
  var $arrayidx1=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx1)>>3)];
  var $7=$y0_addr;
  var $sub2=($6)-($7);
  var $mul3=($4)*($sub2);
  var $add=($mul)+($mul3);
  var $8=$f_addr;
  var $9=$f_addr;
  var $mul4=($8)*($9);
  var $10=$g_addr;
  var $11=$g_addr;
  var $mul5=($10)*($11);
  var $add6=($mul4)+($mul5);
  var $div=($add)/($add6);
  $t=$div;
  var $call=_malloc(16);
  var $12=$call;
  $pn=$12;
  var $13=$x0_addr;
  var $14=$t;
  var $15=$f_addr;
  var $mul7=($14)*($15);
  var $add8=($13)+($mul7);
  var $16=$pn;
  var $arrayidx9=(($16)|0);
  HEAPF64[(($arrayidx9)>>3)]=$add8;
  var $17=$y0_addr;
  var $18=$t;
  var $19=$g_addr;
  var $mul10=($18)*($19);
  var $add11=($17)+($mul10);
  var $20=$pn;
  var $arrayidx12=(($20+8)|0);
  HEAPF64[(($arrayidx12)>>3)]=$add11;
  var $21=$pn;
  return $21;
}
Module["_line_par_point_near_2d"] = _line_par_point_near_2d;
function _line_par_point_near_3d($f, $g, $h, $x0, $y0, $z0, $p) {
  var label = 0;
  var $f_addr;
  var $g_addr;
  var $h_addr;
  var $x0_addr;
  var $y0_addr;
  var $z0_addr;
  var $p_addr;
  var $pn;
  var $t;
  $f_addr=$f;
  $g_addr=$g;
  $h_addr=$h;
  $x0_addr=$x0;
  $y0_addr=$y0;
  $z0_addr=$z0;
  $p_addr=$p;
  var $0=$f_addr;
  var $1=$p_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$x0_addr;
  var $sub=($2)-($3);
  var $mul=($0)*($sub);
  var $4=$g_addr;
  var $5=$p_addr;
  var $arrayidx1=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx1)>>3)];
  var $7=$y0_addr;
  var $sub2=($6)-($7);
  var $mul3=($4)*($sub2);
  var $add=($mul)+($mul3);
  var $8=$h_addr;
  var $9=$p_addr;
  var $arrayidx4=(($9+16)|0);
  var $10=HEAPF64[(($arrayidx4)>>3)];
  var $11=$z0_addr;
  var $sub5=($10)-($11);
  var $mul6=($8)*($sub5);
  var $add7=($add)+($mul6);
  var $12=$f_addr;
  var $13=$f_addr;
  var $mul8=($12)*($13);
  var $14=$g_addr;
  var $15=$g_addr;
  var $mul9=($14)*($15);
  var $add10=($mul8)+($mul9);
  var $16=$h_addr;
  var $17=$h_addr;
  var $mul11=($16)*($17);
  var $add12=($add10)+($mul11);
  var $div=($add7)/($add12);
  $t=$div;
  var $call=_malloc(24);
  var $18=$call;
  $pn=$18;
  var $19=$x0_addr;
  var $20=$t;
  var $21=$f_addr;
  var $mul13=($20)*($21);
  var $add14=($19)+($mul13);
  var $22=$pn;
  var $arrayidx15=(($22)|0);
  HEAPF64[(($arrayidx15)>>3)]=$add14;
  var $23=$y0_addr;
  var $24=$t;
  var $25=$g_addr;
  var $mul16=($24)*($25);
  var $add17=($23)+($mul16);
  var $26=$pn;
  var $arrayidx18=(($26+8)|0);
  HEAPF64[(($arrayidx18)>>3)]=$add17;
  var $27=$z0_addr;
  var $28=$t;
  var $29=$h_addr;
  var $mul19=($28)*($29);
  var $add20=($27)+($mul19);
  var $30=$pn;
  var $arrayidx21=(($30+16)|0);
  HEAPF64[(($arrayidx21)>>3)]=$add20;
  var $31=$pn;
  return $31;
}
Module["_line_par_point_near_3d"] = _line_par_point_near_3d;
function _line_imp2par_2d($a, $b, $c, $f, $g, $x0, $y0) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $f_addr;
      var $g_addr;
      var $x0_addr;
      var $y0_addr;
      var $test;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $f_addr=$f;
      $g_addr=$g;
      $x0_addr=$x0;
      $y0_addr=$y0;
      var $0=$a_addr;
      var $1=$a_addr;
      var $mul=($0)*($1);
      var $2=$b_addr;
      var $3=$b_addr;
      var $mul1=($2)*($3);
      var $add=($mul)+($mul1);
      $test=$add;
      var $4=$test;
      var $cmp=$4 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($5, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($6, ((8152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($7, ((8440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $8=$a_addr;
      var $sub=(-$8);
      var $9=$c_addr;
      var $mul4=($sub)*($9);
      var $10=$test;
      var $div=($mul4)/($10);
      var $11=$x0_addr;
      HEAPF64[(($11)>>3)]=$div;
      var $12=$b_addr;
      var $sub5=(-$12);
      var $13=$c_addr;
      var $mul6=($sub5)*($13);
      var $14=$test;
      var $div7=($mul6)/($14);
      var $15=$y0_addr;
      HEAPF64[(($15)>>3)]=$div7;
      var $16=$b_addr;
      var $17=$test;
      var $call8=Math.sqrt($17);
      var $div9=($16)/($call8);
      var $18=$f_addr;
      HEAPF64[(($18)>>3)]=$div9;
      var $19=$a_addr;
      var $sub10=(-$19);
      var $20=$test;
      var $call11=Math.sqrt($20);
      var $div12=($sub10)/($call11);
      var $21=$g_addr;
      HEAPF64[(($21)>>3)]=$div12;
      var $22=$f_addr;
      var $23=HEAPF64[(($22)>>3)];
      var $cmp13=$23 < 0;
      if ($cmp13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=$f_addr;
      var $25=HEAPF64[(($24)>>3)];
      var $sub15=(-$25);
      var $26=$f_addr;
      HEAPF64[(($26)>>3)]=$sub15;
      var $27=$g_addr;
      var $28=HEAPF64[(($27)>>3)];
      var $sub16=(-$28);
      var $29=$g_addr;
      HEAPF64[(($29)>>3)]=$sub16;
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_line_imp2par_2d"] = _line_imp2par_2d;
function _lines_exp_angle_3d($p1, $p2, $p3, $p4) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $angle;
      var $ctheta;
      var $pdotq;
      var $pnorm;
      var $qnorm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p2_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p1_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$p2_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$p1_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $add8=($add)+($14);
      var $call=Math.sqrt($add8);
      $pnorm=$call;
      var $15=$p4_addr;
      var $arrayidx9=(($15)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$p3_addr;
      var $arrayidx10=(($17)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($16)-($18);
      var $19=Math.pow($sub11, 2);
      var $20=$p4_addr;
      var $arrayidx12=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx12)>>3)];
      var $22=$p3_addr;
      var $arrayidx13=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($21)-($23);
      var $24=Math.pow($sub14, 2);
      var $add15=($19)+($24);
      var $25=$p4_addr;
      var $arrayidx16=(($25+16)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$p3_addr;
      var $arrayidx17=(($27+16)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($add15)+($29);
      var $call20=Math.sqrt($add19);
      $qnorm=$call20;
      var $30=$p2_addr;
      var $arrayidx21=(($30)|0);
      var $31=HEAPF64[(($arrayidx21)>>3)];
      var $32=$p1_addr;
      var $arrayidx22=(($32)|0);
      var $33=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($31)-($33);
      var $34=$p4_addr;
      var $arrayidx24=(($34)|0);
      var $35=HEAPF64[(($arrayidx24)>>3)];
      var $36=$p3_addr;
      var $arrayidx25=(($36)|0);
      var $37=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($35)-($37);
      var $mul=($sub23)*($sub26);
      var $38=$p2_addr;
      var $arrayidx27=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx27)>>3)];
      var $40=$p1_addr;
      var $arrayidx28=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($39)-($41);
      var $42=$p4_addr;
      var $arrayidx30=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx30)>>3)];
      var $44=$p3_addr;
      var $arrayidx31=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($43)-($45);
      var $mul33=($sub29)*($sub32);
      var $add34=($mul)+($mul33);
      var $46=$p2_addr;
      var $arrayidx35=(($46+16)|0);
      var $47=HEAPF64[(($arrayidx35)>>3)];
      var $48=$p1_addr;
      var $arrayidx36=(($48+16)|0);
      var $49=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($47)-($49);
      var $50=$p4_addr;
      var $arrayidx38=(($50+16)|0);
      var $51=HEAPF64[(($arrayidx38)>>3)];
      var $52=$p3_addr;
      var $arrayidx39=(($52+16)|0);
      var $53=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($51)-($53);
      var $mul41=($sub37)*($sub40);
      var $add42=($add34)+($mul41);
      $pdotq=$add42;
      var $54=$pnorm;
      var $cmp=$54 <= 0;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $55=$qnorm;
      var $cmp43=$55 <= 0;
      if ($cmp43) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $56=HEAP32[((_stderr)>>2)];
      var $call44=_fprintf($56, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $57=HEAP32[((_stderr)>>2)];
      var $call45=_fprintf($57, ((8080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $58=HEAP32[((_stderr)>>2)];
      var $call46=_fprintf($58, ((8008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 5: 
      var $59=$pdotq;
      var $60=$pnorm;
      var $61=$qnorm;
      var $mul47=($60)*($61);
      var $div=($59)/($mul47);
      $ctheta=$div;
      var $62=$ctheta;
      var $call48=_r8_acos($62);
      $angle=$call48;
      label = 6; break;
    case 6: 
      var $63=$angle;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_angle_3d"] = _lines_exp_angle_3d;
function _lines_exp_angle_nd($p1, $p2, $q1, $q2, $dim_num) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $dim_num_addr;
      var $angle;
      var $ctheta;
      var $i;
      var $pdotq;
      var $pnorm;
      var $qnorm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      $dim_num_addr=$dim_num;
      $pnorm=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$pnorm;
      var $3=$i;
      var $4=$p2_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$p1_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=Math.pow($sub, 2);
      var $add=($2)+($9);
      $pnorm=$add;
      label = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $11=$pnorm;
      var $call=Math.sqrt($11);
      $pnorm=$call;
      $qnorm=0;
      $i=0;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $13=$dim_num_addr;
      var $cmp3=(($12)|(0)) < (($13)|(0));
      if ($cmp3) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $14=$qnorm;
      var $15=$i;
      var $16=$q2_addr;
      var $arrayidx5=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx5)>>3)];
      var $18=$i;
      var $19=$q1_addr;
      var $arrayidx6=(($19+($18<<3))|0);
      var $20=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($17)-($20);
      var $21=Math.pow($sub7, 2);
      var $add8=($14)+($21);
      $qnorm=$add8;
      label = 9; break;
    case 9: 
      var $22=$i;
      var $inc10=((($22)+(1))|0);
      $i=$inc10;
      label = 7; break;
    case 10: 
      var $23=$qnorm;
      var $call12=Math.sqrt($23);
      $qnorm=$call12;
      $pdotq=0;
      $i=0;
      label = 11; break;
    case 11: 
      var $24=$i;
      var $25=$dim_num_addr;
      var $cmp14=(($24)|(0)) < (($25)|(0));
      if ($cmp14) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $26=$pdotq;
      var $27=$i;
      var $28=$p2_addr;
      var $arrayidx16=(($28+($27<<3))|0);
      var $29=HEAPF64[(($arrayidx16)>>3)];
      var $30=$i;
      var $31=$p1_addr;
      var $arrayidx17=(($31+($30<<3))|0);
      var $32=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($29)-($32);
      var $33=$i;
      var $34=$q2_addr;
      var $arrayidx19=(($34+($33<<3))|0);
      var $35=HEAPF64[(($arrayidx19)>>3)];
      var $36=$i;
      var $37=$q1_addr;
      var $arrayidx20=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($35)-($38);
      var $mul=($sub18)*($sub21);
      var $add22=($26)+($mul);
      $pdotq=$add22;
      label = 13; break;
    case 13: 
      var $39=$i;
      var $inc24=((($39)+(1))|0);
      $i=$inc24;
      label = 11; break;
    case 14: 
      var $40=$pnorm;
      var $cmp26=$40 == 0;
      if ($cmp26) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $41=$qnorm;
      var $cmp27=$41 == 0;
      if ($cmp27) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $42=HEAP32[((_stderr)>>2)];
      var $call28=_fprintf($42, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $43=HEAP32[((_stderr)>>2)];
      var $call29=_fprintf($43, ((7936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $44=HEAP32[((_stderr)>>2)];
      var $call30=_fprintf($44, ((8008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 17: 
      var $45=$pdotq;
      var $46=$pnorm;
      var $47=$qnorm;
      var $mul31=($46)*($47);
      var $div=($45)/($mul31);
      $ctheta=$div;
      var $48=$ctheta;
      var $call32=_r8_acos($48);
      $angle=$call32;
      label = 18; break;
    case 18: 
      var $49=$angle;
      STACKTOP = __stackBase__;
      return $49;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_angle_nd"] = _lines_exp_angle_nd;
function _lines_exp_equal_2d($p1, $p2, $q1, $q2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $test1;
      var $test2;
      var $test3;
      var $test4;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      var $0=$p2_addr;
      var $arrayidx=(($0+8)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$q1_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p2_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p2_addr;
      var $arrayidx5=(($8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p1_addr;
      var $arrayidx6=(($10)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$q1_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p2_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      $test1=$sub12;
      var $16=$test1;
      var $cmp=$16 != 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $value=0;
      var $17=$value;
      $retval=$17;
      label = 11; break;
    case 4: 
      var $18=$q2_addr;
      var $arrayidx13=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx13)>>3)];
      var $20=$q1_addr;
      var $arrayidx14=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($19)-($21);
      var $22=$q1_addr;
      var $arrayidx16=(($22)|0);
      var $23=HEAPF64[(($arrayidx16)>>3)];
      var $24=$p2_addr;
      var $arrayidx17=(($24)|0);
      var $25=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($23)-($25);
      var $mul19=($sub15)*($sub18);
      var $26=$q2_addr;
      var $arrayidx20=(($26)|0);
      var $27=HEAPF64[(($arrayidx20)>>3)];
      var $28=$q1_addr;
      var $arrayidx21=(($28)|0);
      var $29=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($27)-($29);
      var $30=$q1_addr;
      var $arrayidx23=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx23)>>3)];
      var $32=$p2_addr;
      var $arrayidx24=(($32+8)|0);
      var $33=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($31)-($33);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      $test2=$sub27;
      var $34=$test2;
      var $cmp28=$34 != 0;
      if ($cmp28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $value=0;
      var $35=$value;
      $retval=$35;
      label = 11; break;
    case 6: 
      var $36=$p2_addr;
      var $arrayidx31=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx31)>>3)];
      var $38=$p1_addr;
      var $arrayidx32=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($37)-($39);
      var $40=$q2_addr;
      var $arrayidx34=(($40)|0);
      var $41=HEAPF64[(($arrayidx34)>>3)];
      var $42=$p1_addr;
      var $arrayidx35=(($42)|0);
      var $43=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($41)-($43);
      var $mul37=($sub33)*($sub36);
      var $44=$p2_addr;
      var $arrayidx38=(($44)|0);
      var $45=HEAPF64[(($arrayidx38)>>3)];
      var $46=$p1_addr;
      var $arrayidx39=(($46)|0);
      var $47=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($45)-($47);
      var $48=$q2_addr;
      var $arrayidx41=(($48+8)|0);
      var $49=HEAPF64[(($arrayidx41)>>3)];
      var $50=$p1_addr;
      var $arrayidx42=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx42)>>3)];
      var $sub43=($49)-($51);
      var $mul44=($sub40)*($sub43);
      var $sub45=($mul37)-($mul44);
      $test3=$sub45;
      var $52=$test3;
      var $cmp46=$52 != 0;
      if ($cmp46) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $value=0;
      var $53=$value;
      $retval=$53;
      label = 11; break;
    case 8: 
      var $54=$q2_addr;
      var $arrayidx49=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx49)>>3)];
      var $56=$q1_addr;
      var $arrayidx50=(($56+8)|0);
      var $57=HEAPF64[(($arrayidx50)>>3)];
      var $sub51=($55)-($57);
      var $58=$q2_addr;
      var $arrayidx52=(($58)|0);
      var $59=HEAPF64[(($arrayidx52)>>3)];
      var $60=$p1_addr;
      var $arrayidx53=(($60)|0);
      var $61=HEAPF64[(($arrayidx53)>>3)];
      var $sub54=($59)-($61);
      var $mul55=($sub51)*($sub54);
      var $62=$q2_addr;
      var $arrayidx56=(($62)|0);
      var $63=HEAPF64[(($arrayidx56)>>3)];
      var $64=$q1_addr;
      var $arrayidx57=(($64)|0);
      var $65=HEAPF64[(($arrayidx57)>>3)];
      var $sub58=($63)-($65);
      var $66=$q2_addr;
      var $arrayidx59=(($66+8)|0);
      var $67=HEAPF64[(($arrayidx59)>>3)];
      var $68=$p1_addr;
      var $arrayidx60=(($68+8)|0);
      var $69=HEAPF64[(($arrayidx60)>>3)];
      var $sub61=($67)-($69);
      var $mul62=($sub58)*($sub61);
      var $sub63=($mul55)-($mul62);
      $test4=$sub63;
      var $70=$test4;
      var $cmp64=$70 != 0;
      if ($cmp64) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $value=0;
      var $71=$value;
      $retval=$71;
      label = 11; break;
    case 10: 
      $value=1;
      var $72=$value;
      $retval=$72;
      label = 11; break;
    case 11: 
      var $73=$retval;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_equal_2d"] = _lines_exp_equal_2d;
function _lines_exp_dist_3d($p1, $p2, $q1, $q2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $a1=__stackBase__;
      var $a2=(__stackBase__)+(24);
      var $a3=(__stackBase__)+(48);
      var $bot;
      var $cr;
      var $dist;
      var $top;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      var $0=$q1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a1)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$q1_addr;
      var $arrayidx3=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$p1_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a1+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$q1_addr;
      var $arrayidx7=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$p1_addr;
      var $arrayidx8=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($a1+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $12=$p2_addr;
      var $arrayidx11=(($12)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$p1_addr;
      var $arrayidx12=(($14)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $arrayidx14=(($a2)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      var $16=$p2_addr;
      var $arrayidx15=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $18=$p1_addr;
      var $arrayidx16=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($17)-($19);
      var $arrayidx18=(($a2+8)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $20=$p2_addr;
      var $arrayidx19=(($20+16)|0);
      var $21=HEAPF64[(($arrayidx19)>>3)];
      var $22=$p1_addr;
      var $arrayidx20=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($21)-($23);
      var $arrayidx22=(($a2+16)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $24=$q2_addr;
      var $arrayidx23=(($24)|0);
      var $25=HEAPF64[(($arrayidx23)>>3)];
      var $26=$q1_addr;
      var $arrayidx24=(($26)|0);
      var $27=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($25)-($27);
      var $arrayidx26=(($a3)|0);
      HEAPF64[(($arrayidx26)>>3)]=$sub25;
      var $28=$q2_addr;
      var $arrayidx27=(($28+8)|0);
      var $29=HEAPF64[(($arrayidx27)>>3)];
      var $30=$q1_addr;
      var $arrayidx28=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($29)-($31);
      var $arrayidx30=(($a3+8)|0);
      HEAPF64[(($arrayidx30)>>3)]=$sub29;
      var $32=$q2_addr;
      var $arrayidx31=(($32+16)|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $34=$q1_addr;
      var $arrayidx32=(($34+16)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($33)-($35);
      var $arrayidx34=(($a3+16)|0);
      HEAPF64[(($arrayidx34)>>3)]=$sub33;
      var $arraydecay=(($a2)|0);
      var $arraydecay35=(($a3)|0);
      var $call=_r8vec_cross_product_3d($arraydecay, $arraydecay35);
      $cr=$call;
      var $36=$cr;
      var $call36=_r8vec_norm(3, $36);
      $bot=$call36;
      var $37=$bot;
      var $cmp=$37 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $38=$p1_addr;
      var $39=$p2_addr;
      var $40=$q1_addr;
      var $call37=_line_exp_point_dist_3d($38, $39, $40);
      $dist=$call37;
      label = 5; break;
    case 4: 
      var $arrayidx38=(($a1)|0);
      var $41=HEAPF64[(($arrayidx38)>>3)];
      var $arrayidx39=(($a2+8)|0);
      var $42=HEAPF64[(($arrayidx39)>>3)];
      var $arrayidx40=(($a3+16)|0);
      var $43=HEAPF64[(($arrayidx40)>>3)];
      var $mul=($42)*($43);
      var $arrayidx41=(($a2+16)|0);
      var $44=HEAPF64[(($arrayidx41)>>3)];
      var $arrayidx42=(($a3+8)|0);
      var $45=HEAPF64[(($arrayidx42)>>3)];
      var $mul43=($44)*($45);
      var $sub44=($mul)-($mul43);
      var $mul45=($41)*($sub44);
      var $arrayidx46=(($a1+8)|0);
      var $46=HEAPF64[(($arrayidx46)>>3)];
      var $arrayidx47=(($a2)|0);
      var $47=HEAPF64[(($arrayidx47)>>3)];
      var $arrayidx48=(($a3+16)|0);
      var $48=HEAPF64[(($arrayidx48)>>3)];
      var $mul49=($47)*($48);
      var $arrayidx50=(($a2+16)|0);
      var $49=HEAPF64[(($arrayidx50)>>3)];
      var $arrayidx51=(($a3)|0);
      var $50=HEAPF64[(($arrayidx51)>>3)];
      var $mul52=($49)*($50);
      var $sub53=($mul49)-($mul52);
      var $mul54=($46)*($sub53);
      var $sub55=($mul45)-($mul54);
      var $arrayidx56=(($a1+16)|0);
      var $51=HEAPF64[(($arrayidx56)>>3)];
      var $arrayidx57=(($a2)|0);
      var $52=HEAPF64[(($arrayidx57)>>3)];
      var $arrayidx58=(($a3+8)|0);
      var $53=HEAPF64[(($arrayidx58)>>3)];
      var $mul59=($52)*($53);
      var $arrayidx60=(($a2+8)|0);
      var $54=HEAPF64[(($arrayidx60)>>3)];
      var $arrayidx61=(($a3)|0);
      var $55=HEAPF64[(($arrayidx61)>>3)];
      var $mul62=($54)*($55);
      var $sub63=($mul59)-($mul62);
      var $mul64=($51)*($sub63);
      var $add=($sub55)+($mul64);
      var $call65=_r8_abs($add);
      $top=$call65;
      var $56=$top;
      var $57=$bot;
      var $div=($56)/($57);
      $dist=$div;
      label = 5; break;
    case 5: 
      var $58=$cr;
      var $59=$58;
      _free($59);
      var $60=$dist;
      STACKTOP = __stackBase__;
      return $60;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_dist_3d"] = _lines_exp_dist_3d;
function _r8vec_cross_product_3d($v1, $v2) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $v3;
  $v1_addr=$v1;
  $v2_addr=$v2;
  var $call=_malloc(24);
  var $0=$call;
  $v3=$0;
  var $1=$v1_addr;
  var $arrayidx=(($1+8)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$v2_addr;
  var $arrayidx1=(($3+16)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($2)*($4);
  var $5=$v1_addr;
  var $arrayidx2=(($5+16)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$v2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($6)*($8);
  var $sub=($mul)-($mul4);
  var $9=$v3;
  var $arrayidx5=(($9)|0);
  HEAPF64[(($arrayidx5)>>3)]=$sub;
  var $10=$v1_addr;
  var $arrayidx6=(($10+16)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $12=$v2_addr;
  var $arrayidx7=(($12)|0);
  var $13=HEAPF64[(($arrayidx7)>>3)];
  var $mul8=($11)*($13);
  var $14=$v1_addr;
  var $arrayidx9=(($14)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $16=$v2_addr;
  var $arrayidx10=(($16+16)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $mul11=($15)*($17);
  var $sub12=($mul8)-($mul11);
  var $18=$v3;
  var $arrayidx13=(($18+8)|0);
  HEAPF64[(($arrayidx13)>>3)]=$sub12;
  var $19=$v1_addr;
  var $arrayidx14=(($19)|0);
  var $20=HEAPF64[(($arrayidx14)>>3)];
  var $21=$v2_addr;
  var $arrayidx15=(($21+8)|0);
  var $22=HEAPF64[(($arrayidx15)>>3)];
  var $mul16=($20)*($22);
  var $23=$v1_addr;
  var $arrayidx17=(($23+8)|0);
  var $24=HEAPF64[(($arrayidx17)>>3)];
  var $25=$v2_addr;
  var $arrayidx18=(($25)|0);
  var $26=HEAPF64[(($arrayidx18)>>3)];
  var $mul19=($24)*($26);
  var $sub20=($mul16)-($mul19);
  var $27=$v3;
  var $arrayidx21=(($27+16)|0);
  HEAPF64[(($arrayidx21)>>3)]=$sub20;
  var $28=$v3;
  return $28;
}
Module["_r8vec_cross_product_3d"] = _r8vec_cross_product_3d;
function _lines_exp_dist_3d_2($p1, $p2, $q1, $q2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      var $dist;
      var $e;
      var $i;
      var $pn=__stackBase__;
      var $qn=(__stackBase__)+(24);
      var $sn;
      var $tn;
      var $u=(__stackBase__)+(48);
      var $v=(__stackBase__)+(72);
      var $w0=(__stackBase__)+(96);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($u+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp4=(($9)|(0)) < 3;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $11=$q2_addr;
      var $arrayidx6=(($11+($10<<3))|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$i;
      var $14=$q1_addr;
      var $arrayidx7=(($14+($13<<3))|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($12)-($15);
      var $16=$i;
      var $arrayidx9=(($v+($16<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc11=((($17)+(1))|0);
      $i=$inc11;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp14=(($18)|(0)) < 3;
      if ($cmp14) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $20=$p1_addr;
      var $arrayidx16=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$i;
      var $23=$q1_addr;
      var $arrayidx17=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($24);
      var $25=$i;
      var $arrayidx19=(($w0+($25<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$sub18;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc21=((($26)+(1))|0);
      $i=$inc21;
      label = 11; break;
    case 14: 
      var $arraydecay=(($u)|0);
      var $arraydecay23=(($u)|0);
      var $call=_r8vec_dot_product(3, $arraydecay, $arraydecay23);
      $a=$call;
      var $arraydecay24=(($u)|0);
      var $arraydecay25=(($v)|0);
      var $call26=_r8vec_dot_product(3, $arraydecay24, $arraydecay25);
      $b=$call26;
      var $arraydecay27=(($v)|0);
      var $arraydecay28=(($v)|0);
      var $call29=_r8vec_dot_product(3, $arraydecay27, $arraydecay28);
      $c=$call29;
      var $arraydecay30=(($u)|0);
      var $arraydecay31=(($w0)|0);
      var $call32=_r8vec_dot_product(3, $arraydecay30, $arraydecay31);
      $d=$call32;
      var $arraydecay33=(($v)|0);
      var $arraydecay34=(($w0)|0);
      var $call35=_r8vec_dot_product(3, $arraydecay33, $arraydecay34);
      $e=$call35;
      var $27=$a;
      var $sub36=(-$27);
      var $28=$c;
      var $mul=($sub36)*($28);
      var $29=$b;
      var $30=$b;
      var $mul37=($29)*($30);
      var $add=($mul)+($mul37);
      $det=$add;
      var $31=$det;
      var $cmp38=$31 == 0;
      if ($cmp38) { label = 15; break; } else { label = 19; break; }
    case 15: 
      $sn=0;
      var $32=$b;
      var $call39=_r8_abs($32);
      var $33=$c;
      var $call40=_r8_abs($33);
      var $cmp41=$call39 < $call40;
      if ($cmp41) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $34=$e;
      var $35=$c;
      var $div=($34)/($35);
      $tn=$div;
      label = 18; break;
    case 17: 
      var $36=$d;
      var $37=$b;
      var $div43=($36)/($37);
      $tn=$div43;
      label = 18; break;
    case 18: 
      label = 20; break;
    case 19: 
      var $38=$c;
      var $39=$d;
      var $mul45=($38)*($39);
      var $40=$b;
      var $41=$e;
      var $mul46=($40)*($41);
      var $sub47=($mul45)-($mul46);
      var $42=$det;
      var $div48=($sub47)/($42);
      $sn=$div48;
      var $43=$b;
      var $44=$d;
      var $mul49=($43)*($44);
      var $45=$a;
      var $46=$e;
      var $mul50=($45)*($46);
      var $sub51=($mul49)-($mul50);
      var $47=$det;
      var $div52=($sub51)/($47);
      $tn=$div52;
      label = 20; break;
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $48=$i;
      var $cmp55=(($48)|(0)) < 3;
      if ($cmp55) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $49=$i;
      var $50=$p1_addr;
      var $arrayidx57=(($50+($49<<3))|0);
      var $51=HEAPF64[(($arrayidx57)>>3)];
      var $52=$sn;
      var $53=$i;
      var $54=$p2_addr;
      var $arrayidx58=(($54+($53<<3))|0);
      var $55=HEAPF64[(($arrayidx58)>>3)];
      var $56=$i;
      var $57=$p1_addr;
      var $arrayidx59=(($57+($56<<3))|0);
      var $58=HEAPF64[(($arrayidx59)>>3)];
      var $sub60=($55)-($58);
      var $mul61=($52)*($sub60);
      var $add62=($51)+($mul61);
      var $59=$i;
      var $arrayidx63=(($pn+($59<<3))|0);
      HEAPF64[(($arrayidx63)>>3)]=$add62;
      label = 23; break;
    case 23: 
      var $60=$i;
      var $inc65=((($60)+(1))|0);
      $i=$inc65;
      label = 21; break;
    case 24: 
      $i=0;
      label = 25; break;
    case 25: 
      var $61=$i;
      var $cmp68=(($61)|(0)) < 3;
      if ($cmp68) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $62=$i;
      var $63=$q1_addr;
      var $arrayidx70=(($63+($62<<3))|0);
      var $64=HEAPF64[(($arrayidx70)>>3)];
      var $65=$tn;
      var $66=$i;
      var $67=$q2_addr;
      var $arrayidx71=(($67+($66<<3))|0);
      var $68=HEAPF64[(($arrayidx71)>>3)];
      var $69=$i;
      var $70=$q1_addr;
      var $arrayidx72=(($70+($69<<3))|0);
      var $71=HEAPF64[(($arrayidx72)>>3)];
      var $sub73=($68)-($71);
      var $mul74=($65)*($sub73);
      var $add75=($64)+($mul74);
      var $72=$i;
      var $arrayidx76=(($qn+($72<<3))|0);
      HEAPF64[(($arrayidx76)>>3)]=$add75;
      label = 27; break;
    case 27: 
      var $73=$i;
      var $inc78=((($73)+(1))|0);
      $i=$inc78;
      label = 25; break;
    case 28: 
      $dist=0;
      $i=0;
      label = 29; break;
    case 29: 
      var $74=$i;
      var $cmp81=(($74)|(0)) < 3;
      if ($cmp81) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $75=$dist;
      var $76=$i;
      var $arrayidx83=(($pn+($76<<3))|0);
      var $77=HEAPF64[(($arrayidx83)>>3)];
      var $78=$i;
      var $arrayidx84=(($qn+($78<<3))|0);
      var $79=HEAPF64[(($arrayidx84)>>3)];
      var $sub85=($77)-($79);
      var $80=Math.pow($sub85, 2);
      var $add86=($75)+($80);
      $dist=$add86;
      label = 31; break;
    case 31: 
      var $81=$i;
      var $inc88=((($81)+(1))|0);
      $i=$inc88;
      label = 29; break;
    case 32: 
      var $82=$dist;
      var $call90=Math.sqrt($82);
      $dist=$call90;
      var $83=$dist;
      STACKTOP = __stackBase__;
      return $83;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_dist_3d_2"] = _lines_exp_dist_3d_2;
function _lines_imp_int_2d($a1, $b1, $c1, $a2, $b2, $c2, $ival, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a1_addr;
      var $b1_addr;
      var $c1_addr;
      var $a2_addr;
      var $b2_addr;
      var $c2_addr;
      var $ival_addr;
      var $p_addr;
      var $a=__stackBase__;
      var $b;
      $a1_addr=$a1;
      $b1_addr=$b1;
      $c1_addr=$c1;
      $a2_addr=$a2;
      $b2_addr=$b2;
      $c2_addr=$c2;
      $ival_addr=$ival;
      $p_addr=$p;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      var $1=$p_addr;
      var $arrayidx1=(($1+8)|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      var $2=$a1_addr;
      var $cmp=$2 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $3=$b1_addr;
      var $cmp2=$3 == 0;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $4=$ival_addr;
      HEAP32[(($4)>>2)]=-1;
      label = 20; break;
    case 5: 
      var $5=$a2_addr;
      var $cmp3=$5 == 0;
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$b2_addr;
      var $cmp5=$6 == 0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=$ival_addr;
      HEAP32[(($7)>>2)]=-2;
      label = 20; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $8=$a1_addr;
      var $arrayidx8=(($a)|0);
      HEAPF64[(($arrayidx8)>>3)]=$8;
      var $9=$b1_addr;
      var $arrayidx9=(($a+16)|0);
      HEAPF64[(($arrayidx9)>>3)]=$9;
      var $10=$a2_addr;
      var $arrayidx10=(($a+8)|0);
      HEAPF64[(($arrayidx10)>>3)]=$10;
      var $11=$b2_addr;
      var $arrayidx11=(($a+24)|0);
      HEAPF64[(($arrayidx11)>>3)]=$11;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_inverse_2d($arraydecay);
      $b=$call;
      var $12=$b;
      var $cmp12=(($12)|(0))!=0;
      if ($cmp12) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $13=$ival_addr;
      HEAP32[(($13)>>2)]=1;
      var $14=$b;
      var $arrayidx14=(($14)|0);
      var $15=HEAPF64[(($arrayidx14)>>3)];
      var $sub=(-$15);
      var $16=$c1_addr;
      var $mul=($sub)*($16);
      var $17=$b;
      var $arrayidx15=(($17+16)|0);
      var $18=HEAPF64[(($arrayidx15)>>3)];
      var $19=$c2_addr;
      var $mul16=($18)*($19);
      var $sub17=($mul)-($mul16);
      var $20=$p_addr;
      var $arrayidx18=(($20)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $21=$b;
      var $arrayidx19=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=(-$22);
      var $23=$c1_addr;
      var $mul21=($sub20)*($23);
      var $24=$b;
      var $arrayidx22=(($24+24)|0);
      var $25=HEAPF64[(($arrayidx22)>>3)];
      var $26=$c2_addr;
      var $mul23=($25)*($26);
      var $sub24=($mul21)-($mul23);
      var $27=$p_addr;
      var $arrayidx25=(($27+8)|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub24;
      label = 19; break;
    case 11: 
      var $28=$ival_addr;
      HEAP32[(($28)>>2)]=0;
      var $29=$a1_addr;
      var $cmp27=$29 == 0;
      if ($cmp27) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $30=$b2_addr;
      var $31=$c1_addr;
      var $mul29=($30)*($31);
      var $32=$c2_addr;
      var $33=$b1_addr;
      var $mul30=($32)*($33);
      var $cmp31=$mul29 == $mul30;
      if ($cmp31) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $34=$ival_addr;
      HEAP32[(($34)>>2)]=2;
      label = 14; break;
    case 14: 
      label = 18; break;
    case 15: 
      var $35=$a2_addr;
      var $36=$c1_addr;
      var $mul35=($35)*($36);
      var $37=$c2_addr;
      var $38=$a1_addr;
      var $mul36=($37)*($38);
      var $cmp37=$mul35 == $mul36;
      if ($cmp37) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $39=$ival_addr;
      HEAP32[(($39)>>2)]=2;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $40=$b;
      var $41=$40;
      _free($41);
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_imp_int_2d"] = _lines_imp_int_2d;
function _lines_exp_parallel_2d($p1, $p2, $q1, $q2) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $q1_addr;
  var $q2_addr;
  var $value;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $q1_addr=$q1;
  $q2_addr=$q2;
  var $0=$p2_addr;
  var $arrayidx=(($0+8)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p1_addr;
  var $arrayidx1=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=$q2_addr;
  var $arrayidx2=(($4)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$q1_addr;
  var $arrayidx3=(($6)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($5)-($7);
  var $mul=($sub)*($sub4);
  var $8=$q2_addr;
  var $arrayidx5=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$q1_addr;
  var $arrayidx6=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($9)-($11);
  var $12=$p2_addr;
  var $arrayidx8=(($12)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$p1_addr;
  var $arrayidx9=(($14)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($13)-($15);
  var $mul11=($sub7)*($sub10);
  var $cmp=$mul == $mul11;
  var $conv=(($cmp)&(1));
  $value=$conv;
  var $16=$value;
  return $16;
}
Module["_lines_exp_parallel_2d"] = _lines_exp_parallel_2d;
function _lines_exp_near_3d($p1, $p2, $q1, $q2, $pn, $qn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $pn_addr;
      var $qn_addr;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      var $e;
      var $i;
      var $sn;
      var $tn;
      var $u=__stackBase__;
      var $v=(__stackBase__)+(24);
      var $w0=(__stackBase__)+(48);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      $pn_addr=$pn;
      $qn_addr=$qn;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($u+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp4=(($9)|(0)) < 3;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $11=$q2_addr;
      var $arrayidx6=(($11+($10<<3))|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$i;
      var $14=$q1_addr;
      var $arrayidx7=(($14+($13<<3))|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($12)-($15);
      var $16=$i;
      var $arrayidx9=(($v+($16<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc11=((($17)+(1))|0);
      $i=$inc11;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp14=(($18)|(0)) < 3;
      if ($cmp14) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $20=$p1_addr;
      var $arrayidx16=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$i;
      var $23=$q1_addr;
      var $arrayidx17=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($24);
      var $25=$i;
      var $arrayidx19=(($w0+($25<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$sub18;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc21=((($26)+(1))|0);
      $i=$inc21;
      label = 11; break;
    case 14: 
      var $arraydecay=(($u)|0);
      var $arraydecay23=(($u)|0);
      var $call=_r8vec_dot_product(3, $arraydecay, $arraydecay23);
      $a=$call;
      var $arraydecay24=(($u)|0);
      var $arraydecay25=(($v)|0);
      var $call26=_r8vec_dot_product(3, $arraydecay24, $arraydecay25);
      $b=$call26;
      var $arraydecay27=(($v)|0);
      var $arraydecay28=(($v)|0);
      var $call29=_r8vec_dot_product(3, $arraydecay27, $arraydecay28);
      $c=$call29;
      var $arraydecay30=(($u)|0);
      var $arraydecay31=(($w0)|0);
      var $call32=_r8vec_dot_product(3, $arraydecay30, $arraydecay31);
      $d=$call32;
      var $arraydecay33=(($v)|0);
      var $arraydecay34=(($w0)|0);
      var $call35=_r8vec_dot_product(3, $arraydecay33, $arraydecay34);
      $e=$call35;
      var $27=$a;
      var $sub36=(-$27);
      var $28=$c;
      var $mul=($sub36)*($28);
      var $29=$b;
      var $30=$b;
      var $mul37=($29)*($30);
      var $add=($mul)+($mul37);
      $det=$add;
      var $31=$det;
      var $cmp38=$31 == 0;
      if ($cmp38) { label = 15; break; } else { label = 19; break; }
    case 15: 
      $sn=0;
      var $32=$b;
      var $call39=_r8_abs($32);
      var $33=$c;
      var $call40=_r8_abs($33);
      var $cmp41=$call39 < $call40;
      if ($cmp41) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $34=$e;
      var $35=$c;
      var $div=($34)/($35);
      $tn=$div;
      label = 18; break;
    case 17: 
      var $36=$d;
      var $37=$b;
      var $div43=($36)/($37);
      $tn=$div43;
      label = 18; break;
    case 18: 
      label = 20; break;
    case 19: 
      var $38=$c;
      var $39=$d;
      var $mul45=($38)*($39);
      var $40=$b;
      var $41=$e;
      var $mul46=($40)*($41);
      var $sub47=($mul45)-($mul46);
      var $42=$det;
      var $div48=($sub47)/($42);
      $sn=$div48;
      var $43=$b;
      var $44=$d;
      var $mul49=($43)*($44);
      var $45=$a;
      var $46=$e;
      var $mul50=($45)*($46);
      var $sub51=($mul49)-($mul50);
      var $47=$det;
      var $div52=($sub51)/($47);
      $tn=$div52;
      label = 20; break;
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $48=$i;
      var $cmp55=(($48)|(0)) < 3;
      if ($cmp55) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $49=$i;
      var $50=$p1_addr;
      var $arrayidx57=(($50+($49<<3))|0);
      var $51=HEAPF64[(($arrayidx57)>>3)];
      var $52=$sn;
      var $53=$i;
      var $54=$p2_addr;
      var $arrayidx58=(($54+($53<<3))|0);
      var $55=HEAPF64[(($arrayidx58)>>3)];
      var $56=$i;
      var $57=$p1_addr;
      var $arrayidx59=(($57+($56<<3))|0);
      var $58=HEAPF64[(($arrayidx59)>>3)];
      var $sub60=($55)-($58);
      var $mul61=($52)*($sub60);
      var $add62=($51)+($mul61);
      var $59=$i;
      var $60=$pn_addr;
      var $arrayidx63=(($60+($59<<3))|0);
      HEAPF64[(($arrayidx63)>>3)]=$add62;
      label = 23; break;
    case 23: 
      var $61=$i;
      var $inc65=((($61)+(1))|0);
      $i=$inc65;
      label = 21; break;
    case 24: 
      $i=0;
      label = 25; break;
    case 25: 
      var $62=$i;
      var $cmp68=(($62)|(0)) < 3;
      if ($cmp68) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $63=$i;
      var $64=$q1_addr;
      var $arrayidx70=(($64+($63<<3))|0);
      var $65=HEAPF64[(($arrayidx70)>>3)];
      var $66=$tn;
      var $67=$i;
      var $68=$q2_addr;
      var $arrayidx71=(($68+($67<<3))|0);
      var $69=HEAPF64[(($arrayidx71)>>3)];
      var $70=$i;
      var $71=$q1_addr;
      var $arrayidx72=(($71+($70<<3))|0);
      var $72=HEAPF64[(($arrayidx72)>>3)];
      var $sub73=($69)-($72);
      var $mul74=($66)*($sub73);
      var $add75=($65)+($mul74);
      var $73=$i;
      var $74=$qn_addr;
      var $arrayidx76=(($74+($73<<3))|0);
      HEAPF64[(($arrayidx76)>>3)]=$add75;
      label = 27; break;
    case 27: 
      var $75=$i;
      var $inc78=((($75)+(1))|0);
      $i=$inc78;
      label = 25; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_near_3d"] = _lines_exp_near_3d;
function _lines_exp_parallel_3d($p1, $p2, $q1, $q2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $value;
      var $i;
      var $p;
      var $pdotp;
      var $pdotq;
      var $q;
      var $qdotq;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      var $call=_malloc(24);
      var $0=$call;
      $p=$0;
      var $call1=_malloc(24);
      var $1=$call1;
      $q=$1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $cmp=(($2)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $3=$i;
      var $4=$p2_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$p1_addr;
      var $arrayidx2=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($5)-($8);
      var $9=$i;
      var $10=$p;
      var $arrayidx3=(($10+($9<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $cmp5=(($12)|(0)) < 3;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $13=$i;
      var $14=$q2_addr;
      var $arrayidx7=(($14+($13<<3))|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $16=$i;
      var $17=$q1_addr;
      var $arrayidx8=(($17+($16<<3))|0);
      var $18=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($15)-($18);
      var $19=$i;
      var $20=$q;
      var $arrayidx10=(($20+($19<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      label = 9; break;
    case 9: 
      var $21=$i;
      var $inc12=((($21)+(1))|0);
      $i=$inc12;
      label = 7; break;
    case 10: 
      var $22=$p;
      var $23=$q;
      var $call14=_r8vec_dot_product(3, $22, $23);
      $pdotq=$call14;
      var $24=$p;
      var $25=$p;
      var $call15=_r8vec_dot_product(3, $24, $25);
      $pdotp=$call15;
      var $26=$q;
      var $27=$q;
      var $call16=_r8vec_dot_product(3, $26, $27);
      $qdotq=$call16;
      var $28=$p;
      var $29=$28;
      _free($29);
      var $30=$q;
      var $31=$30;
      _free($31);
      var $32=$pdotq;
      var $33=$pdotq;
      var $mul=($32)*($33);
      var $34=$pdotp;
      var $35=$qdotq;
      var $mul17=($34)*($35);
      var $cmp18=$mul == $mul17;
      var $conv=(($cmp18)&(1));
      $value=$conv;
      var $36=$value;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_exp_parallel_3d"] = _lines_exp_parallel_3d;
function _lines_imp_angle_2d($a1, $b1, $c1, $a2, $b2, $c2) {
  var label = 0;
  var $a1_addr;
  var $b1_addr;
  var $c1_addr;
  var $a2_addr;
  var $b2_addr;
  var $c2_addr;
  var $ctheta;
  var $pdotq;
  var $pnorm;
  var $qnorm;
  var $theta;
  $a1_addr=$a1;
  $b1_addr=$b1;
  $c1_addr=$c1;
  $a2_addr=$a2;
  $b2_addr=$b2;
  $c2_addr=$c2;
  var $0=$a1_addr;
  var $1=$a2_addr;
  var $mul=($0)*($1);
  var $2=$b1_addr;
  var $3=$b2_addr;
  var $mul1=($2)*($3);
  var $add=($mul)+($mul1);
  $pdotq=$add;
  var $4=$a1_addr;
  var $5=$a1_addr;
  var $mul2=($4)*($5);
  var $6=$b1_addr;
  var $7=$b1_addr;
  var $mul3=($6)*($7);
  var $add4=($mul2)+($mul3);
  var $call=Math.sqrt($add4);
  $pnorm=$call;
  var $8=$a2_addr;
  var $9=$a2_addr;
  var $mul5=($8)*($9);
  var $10=$b2_addr;
  var $11=$b2_addr;
  var $mul6=($10)*($11);
  var $add7=($mul5)+($mul6);
  var $call8=Math.sqrt($add7);
  $qnorm=$call8;
  var $12=$pdotq;
  var $13=$pnorm;
  var $14=$qnorm;
  var $mul9=($13)*($14);
  var $div=($12)/($mul9);
  $ctheta=$div;
  var $15=$ctheta;
  var $call10=Math.acos($15);
  $theta=$call10;
  var $16=$theta;
  return $16;
}
Module["_lines_imp_angle_2d"] = _lines_imp_angle_2d;
function _r8mat_inverse_2d($a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b;
      var $det;
      $a_addr=$a;
      var $0=$a_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$a_addr;
      var $arrayidx1=(($2+24)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($1)*($3);
      var $4=$a_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$a_addr;
      var $arrayidx3=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $mul4=($5)*($7);
      var $sub=($mul)-($mul4);
      $det=$sub;
      var $8=$det;
      var $cmp=$8 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      var $call=_malloc(32);
      var $9=$call;
      $b=$9;
      var $10=$a_addr;
      var $arrayidx5=(($10+24)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$det;
      var $div=($11)/($12);
      var $13=$b;
      var $arrayidx6=(($13)|0);
      HEAPF64[(($arrayidx6)>>3)]=$div;
      var $14=$a_addr;
      var $arrayidx7=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=(-$15);
      var $16=$det;
      var $div9=($sub8)/($16);
      var $17=$b;
      var $arrayidx10=(($17+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$div9;
      var $18=$a_addr;
      var $arrayidx11=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=(-$19);
      var $20=$det;
      var $div13=($sub12)/($20);
      var $21=$b;
      var $arrayidx14=(($21+8)|0);
      HEAPF64[(($arrayidx14)>>3)]=$div13;
      var $22=$a_addr;
      var $arrayidx15=(($22)|0);
      var $23=HEAPF64[(($arrayidx15)>>3)];
      var $24=$det;
      var $div16=($23)/($24);
      var $25=$b;
      var $arrayidx17=(($25+24)|0);
      HEAPF64[(($arrayidx17)>>3)]=$div16;
      var $26=$b;
      $retval=$26;
      label = 5; break;
    case 5: 
      var $27=$retval;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_inverse_2d"] = _r8mat_inverse_2d;
function _lines_par_angle_2d($f1, $g1, $x01, $y01, $f2, $g2, $x02, $y02) {
  var label = 0;
  var $f1_addr;
  var $g1_addr;
  var $x01_addr;
  var $y01_addr;
  var $f2_addr;
  var $g2_addr;
  var $x02_addr;
  var $y02_addr;
  var $pdotq;
  var $pnorm;
  var $qnorm;
  var $value;
  $f1_addr=$f1;
  $g1_addr=$g1;
  $x01_addr=$x01;
  $y01_addr=$y01;
  $f2_addr=$f2;
  $g2_addr=$g2;
  $x02_addr=$x02;
  $y02_addr=$y02;
  var $0=$f1_addr;
  var $1=$f2_addr;
  var $mul=($0)*($1);
  var $2=$g1_addr;
  var $3=$g2_addr;
  var $mul1=($2)*($3);
  var $add=($mul)+($mul1);
  $pdotq=$add;
  var $4=$f1_addr;
  var $5=$f1_addr;
  var $mul2=($4)*($5);
  var $6=$g1_addr;
  var $7=$g1_addr;
  var $mul3=($6)*($7);
  var $add4=($mul2)+($mul3);
  var $call=Math.sqrt($add4);
  $pnorm=$call;
  var $8=$f2_addr;
  var $9=$f2_addr;
  var $mul5=($8)*($9);
  var $10=$g2_addr;
  var $11=$g2_addr;
  var $mul6=($10)*($11);
  var $add7=($mul5)+($mul6);
  var $call8=Math.sqrt($add7);
  $qnorm=$call8;
  var $12=$pdotq;
  var $13=$pnorm;
  var $14=$qnorm;
  var $mul9=($13)*($14);
  var $div=($12)/($mul9);
  var $call10=_r8_acos($div);
  $value=$call10;
  var $15=$value;
  return $15;
}
Module["_lines_par_angle_2d"] = _lines_par_angle_2d;
function _lines_par_angle_3d($f1, $g1, $h1, $x01, $y01, $z01, $f2, $g2, $h2, $x02, $y02, $z02) {
  var label = 0;
  var $f1_addr;
  var $g1_addr;
  var $h1_addr;
  var $x01_addr;
  var $y01_addr;
  var $z01_addr;
  var $f2_addr;
  var $g2_addr;
  var $h2_addr;
  var $x02_addr;
  var $y02_addr;
  var $z02_addr;
  var $pdotq;
  var $pnorm;
  var $qnorm;
  var $value;
  $f1_addr=$f1;
  $g1_addr=$g1;
  $h1_addr=$h1;
  $x01_addr=$x01;
  $y01_addr=$y01;
  $z01_addr=$z01;
  $f2_addr=$f2;
  $g2_addr=$g2;
  $h2_addr=$h2;
  $x02_addr=$x02;
  $y02_addr=$y02;
  $z02_addr=$z02;
  var $0=$f1_addr;
  var $1=$f2_addr;
  var $mul=($0)*($1);
  var $2=$g1_addr;
  var $3=$g2_addr;
  var $mul1=($2)*($3);
  var $add=($mul)+($mul1);
  var $4=$h1_addr;
  var $5=$h2_addr;
  var $mul2=($4)*($5);
  var $add3=($add)+($mul2);
  $pdotq=$add3;
  var $6=$f1_addr;
  var $7=$f1_addr;
  var $mul4=($6)*($7);
  var $8=$g1_addr;
  var $9=$g1_addr;
  var $mul5=($8)*($9);
  var $add6=($mul4)+($mul5);
  var $10=$h1_addr;
  var $11=$h1_addr;
  var $mul7=($10)*($11);
  var $add8=($add6)+($mul7);
  var $call=Math.sqrt($add8);
  $pnorm=$call;
  var $12=$f2_addr;
  var $13=$f2_addr;
  var $mul9=($12)*($13);
  var $14=$g2_addr;
  var $15=$g2_addr;
  var $mul10=($14)*($15);
  var $add11=($mul9)+($mul10);
  var $16=$h2_addr;
  var $17=$h2_addr;
  var $mul12=($16)*($17);
  var $add13=($add11)+($mul12);
  var $call14=Math.sqrt($add13);
  $qnorm=$call14;
  var $18=$pdotq;
  var $19=$pnorm;
  var $20=$qnorm;
  var $mul15=($19)*($20);
  var $div=($18)/($mul15);
  var $call16=_r8_acos($div);
  $value=$call16;
  var $21=$value;
  return $21;
}
Module["_lines_par_angle_3d"] = _lines_par_angle_3d;
function _lines_par_dist_3d($f1, $g1, $h1, $x01, $y01, $z01, $f2, $g2, $h2, $x02, $y02, $z02) {
  var label = 0;
  var $f1_addr;
  var $g1_addr;
  var $h1_addr;
  var $x01_addr;
  var $y01_addr;
  var $z01_addr;
  var $f2_addr;
  var $g2_addr;
  var $h2_addr;
  var $x02_addr;
  var $y02_addr;
  var $z02_addr;
  var $value;
  $f1_addr=$f1;
  $g1_addr=$g1;
  $h1_addr=$h1;
  $x01_addr=$x01;
  $y01_addr=$y01;
  $z01_addr=$z01;
  $f2_addr=$f2;
  $g2_addr=$g2;
  $h2_addr=$h2;
  $x02_addr=$x02;
  $y02_addr=$y02;
  $z02_addr=$z02;
  var $0=$x02_addr;
  var $1=$x01_addr;
  var $sub=($0)-($1);
  var $2=$g1_addr;
  var $3=$h2_addr;
  var $mul=($2)*($3);
  var $4=$g2_addr;
  var $5=$h1_addr;
  var $mul1=($4)*($5);
  var $sub2=($mul)-($mul1);
  var $mul3=($sub)*($sub2);
  var $6=$y02_addr;
  var $7=$y01_addr;
  var $sub4=($6)-($7);
  var $8=$h1_addr;
  var $9=$f2_addr;
  var $mul5=($8)*($9);
  var $10=$h2_addr;
  var $11=$f1_addr;
  var $mul6=($10)*($11);
  var $sub7=($mul5)-($mul6);
  var $mul8=($sub4)*($sub7);
  var $add=($mul3)+($mul8);
  var $12=$z02_addr;
  var $13=$z01_addr;
  var $sub9=($12)-($13);
  var $14=$f1_addr;
  var $15=$g2_addr;
  var $mul10=($14)*($15);
  var $16=$f2_addr;
  var $17=$g1_addr;
  var $mul11=($16)*($17);
  var $sub12=($mul10)-($mul11);
  var $mul13=($sub9)*($sub12);
  var $add14=($add)+($mul13);
  var $call=_r8_abs($add14);
  var $18=$f1_addr;
  var $19=$g2_addr;
  var $mul15=($18)*($19);
  var $20=$f2_addr;
  var $21=$g1_addr;
  var $mul16=($20)*($21);
  var $sub17=($mul15)-($mul16);
  var $22=$f1_addr;
  var $23=$g2_addr;
  var $mul18=($22)*($23);
  var $24=$f2_addr;
  var $25=$g1_addr;
  var $mul19=($24)*($25);
  var $sub20=($mul18)-($mul19);
  var $mul21=($sub17)*($sub20);
  var $26=$g1_addr;
  var $27=$h2_addr;
  var $mul22=($26)*($27);
  var $28=$g2_addr;
  var $29=$h1_addr;
  var $mul23=($28)*($29);
  var $sub24=($mul22)-($mul23);
  var $30=$g1_addr;
  var $31=$h2_addr;
  var $mul25=($30)*($31);
  var $32=$g2_addr;
  var $33=$h1_addr;
  var $mul26=($32)*($33);
  var $sub27=($mul25)-($mul26);
  var $mul28=($sub24)*($sub27);
  var $add29=($mul21)+($mul28);
  var $34=$h1_addr;
  var $35=$f2_addr;
  var $mul30=($34)*($35);
  var $36=$h2_addr;
  var $37=$f1_addr;
  var $mul31=($36)*($37);
  var $sub32=($mul30)-($mul31);
  var $38=$h1_addr;
  var $39=$f2_addr;
  var $mul33=($38)*($39);
  var $40=$h2_addr;
  var $41=$f1_addr;
  var $mul34=($40)*($41);
  var $sub35=($mul33)-($mul34);
  var $mul36=($sub32)*($sub35);
  var $add37=($add29)+($mul36);
  var $div=($call)/($add37);
  $value=$div;
  var $42=$value;
  return $42;
}
Module["_lines_par_dist_3d"] = _lines_par_dist_3d;
function _lines_imp_dist_2d($a1, $b1, $c1, $a2, $b2, $c2) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a1_addr;
      var $b1_addr;
      var $c1_addr;
      var $a2_addr;
      var $b2_addr;
      var $c2_addr;
      var $value;
      $a1_addr=$a1;
      $b1_addr=$b1;
      $c1_addr=$c1;
      $a2_addr=$a2;
      $b2_addr=$b2;
      $c2_addr=$c2;
      var $0=$a1_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $1=$b1_addr;
      var $cmp1=$1 == 0;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((7864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((7816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 5: 
      var $5=$a2_addr;
      var $cmp4=$5 == 0;
      if ($cmp4) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$b2_addr;
      var $cmp6=$6 == 0;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($7, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call9=_fprintf($8, ((7864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $call10=_fprintf($9, ((7728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 8: 
      var $10=$a1_addr;
      var $11=$b2_addr;
      var $mul=($10)*($11);
      var $12=$a2_addr;
      var $13=$b1_addr;
      var $mul12=($12)*($13);
      var $cmp13=$mul != $mul12;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $value=0;
      var $14=$value;
      $retval=$14;
      label = 11; break;
    case 10: 
      var $15=$c2_addr;
      var $16=$a2_addr;
      var $17=$a2_addr;
      var $mul16=($16)*($17);
      var $18=$b2_addr;
      var $19=$b2_addr;
      var $mul17=($18)*($19);
      var $add=($mul16)+($mul17);
      var $call18=Math.sqrt($add);
      var $div=($15)/($call18);
      var $20=$c1_addr;
      var $21=$a1_addr;
      var $22=$a1_addr;
      var $mul19=($21)*($22);
      var $23=$b1_addr;
      var $24=$b1_addr;
      var $mul20=($23)*($24);
      var $add21=($mul19)+($mul20);
      var $call22=Math.sqrt($add21);
      var $div23=($20)/($call22);
      var $sub=($div)-($div23);
      var $call24=_r8_abs($sub);
      $value=$call24;
      var $25=$value;
      $retval=$25;
      label = 11; break;
    case 11: 
      var $26=$retval;
      STACKTOP = __stackBase__;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_imp_dist_2d"] = _lines_imp_dist_2d;
function _r8_swap($x, $y) {
  var label = 0;
  var $x_addr;
  var $y_addr;
  var $z;
  $x_addr=$x;
  $y_addr=$y;
  var $0=$x_addr;
  var $1=HEAPF64[(($0)>>3)];
  $z=$1;
  var $2=$y_addr;
  var $3=HEAPF64[(($2)>>3)];
  var $4=$x_addr;
  HEAPF64[(($4)>>3)]=$3;
  var $5=$z;
  var $6=$y_addr;
  HEAPF64[(($6)>>3)]=$5;
  return;
}
Module["_r8_swap"] = _r8_swap;
function _octahedron_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=6;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=12;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=8;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=3;
  return;
}
Module["_octahedron_size_3d"] = _octahedron_size_3d;
function _parabola_ex($x1, $y1, $x2, $y2, $x3, $y3, $x, $y) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x1_addr;
      var $y1_addr;
      var $x2_addr;
      var $y2_addr;
      var $x3_addr;
      var $y3_addr;
      var $x_addr;
      var $y_addr;
      var $bot;
      $x1_addr=$x1;
      $y1_addr=$y1;
      $x2_addr=$x2;
      $y2_addr=$y2;
      $x3_addr=$x3;
      $y3_addr=$y3;
      $x_addr=$x;
      $y_addr=$y;
      var $0=$x_addr;
      HEAPF64[(($0)>>3)]=0;
      var $1=$y_addr;
      HEAPF64[(($1)>>3)]=0;
      var $2=$x1_addr;
      var $3=$x2_addr;
      var $cmp=$2 == $3;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $4=$x2_addr;
      var $5=$x3_addr;
      var $cmp1=$4 == $5;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$x3_addr;
      var $7=$x1_addr;
      var $cmp3=$6 == $7;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 13; break;
    case 6: 
      var $8=$y1_addr;
      var $9=$y2_addr;
      var $cmp4=$8 == $9;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $10=$y2_addr;
      var $11=$y3_addr;
      var $cmp5=$10 == $11;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $12=$y3_addr;
      var $13=$y1_addr;
      var $cmp7=$12 == $13;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$x1_addr;
      var $15=$x_addr;
      HEAPF64[(($15)>>3)]=$14;
      var $16=$y1_addr;
      var $17=$y_addr;
      HEAPF64[(($17)>>3)]=$16;
      $retval=3;
      label = 13; break;
    case 10: 
      var $18=$x2_addr;
      var $19=$x3_addr;
      var $sub=($18)-($19);
      var $20=$y1_addr;
      var $mul=($sub)*($20);
      var $21=$x1_addr;
      var $22=$x3_addr;
      var $sub10=($21)-($22);
      var $23=$y2_addr;
      var $mul11=($sub10)*($23);
      var $sub12=($mul)-($mul11);
      var $24=$x1_addr;
      var $25=$x2_addr;
      var $sub13=($24)-($25);
      var $26=$y3_addr;
      var $mul14=($sub13)*($26);
      var $add=($sub12)+($mul14);
      $bot=$add;
      var $27=$bot;
      var $cmp15=$27 == 0;
      if ($cmp15) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=2;
      label = 13; break;
    case 12: 
      var $28=$x1_addr;
      var $29=$x1_addr;
      var $mul18=($28)*($29);
      var $30=$y3_addr;
      var $31=$y2_addr;
      var $sub19=($30)-($31);
      var $mul20=($mul18)*($sub19);
      var $32=$x2_addr;
      var $33=$x2_addr;
      var $mul21=($32)*($33);
      var $34=$y1_addr;
      var $35=$y3_addr;
      var $sub22=($34)-($35);
      var $mul23=($mul21)*($sub22);
      var $add24=($mul20)+($mul23);
      var $36=$x3_addr;
      var $37=$x3_addr;
      var $mul25=($36)*($37);
      var $38=$y2_addr;
      var $39=$y1_addr;
      var $sub26=($38)-($39);
      var $mul27=($mul25)*($sub26);
      var $add28=($add24)+($mul27);
      var $mul29=($add28)*(0.5);
      var $40=$bot;
      var $div=($mul29)/($40);
      var $41=$x_addr;
      HEAPF64[(($41)>>3)]=$div;
      var $42=$x_addr;
      var $43=HEAPF64[(($42)>>3)];
      var $44=$x2_addr;
      var $sub30=($43)-($44);
      var $45=$x_addr;
      var $46=HEAPF64[(($45)>>3)];
      var $47=$x3_addr;
      var $sub31=($46)-($47);
      var $mul32=($sub30)*($sub31);
      var $48=$x2_addr;
      var $49=$x3_addr;
      var $sub33=($48)-($49);
      var $mul34=($mul32)*($sub33);
      var $50=$y1_addr;
      var $mul35=($mul34)*($50);
      var $51=$x_addr;
      var $52=HEAPF64[(($51)>>3)];
      var $53=$x1_addr;
      var $sub36=($52)-($53);
      var $54=$x_addr;
      var $55=HEAPF64[(($54)>>3)];
      var $56=$x3_addr;
      var $sub37=($55)-($56);
      var $mul38=($sub36)*($sub37);
      var $57=$x1_addr;
      var $58=$x3_addr;
      var $sub39=($57)-($58);
      var $mul40=($mul38)*($sub39);
      var $59=$y2_addr;
      var $mul41=($mul40)*($59);
      var $sub42=($mul35)-($mul41);
      var $60=$x_addr;
      var $61=HEAPF64[(($60)>>3)];
      var $62=$x1_addr;
      var $sub43=($61)-($62);
      var $63=$x_addr;
      var $64=HEAPF64[(($63)>>3)];
      var $65=$x2_addr;
      var $sub44=($64)-($65);
      var $mul45=($sub43)*($sub44);
      var $66=$x1_addr;
      var $67=$x2_addr;
      var $sub46=($66)-($67);
      var $mul47=($mul45)*($sub46);
      var $68=$y3_addr;
      var $mul48=($mul47)*($68);
      var $add49=($sub42)+($mul48);
      var $69=$x1_addr;
      var $70=$x2_addr;
      var $sub50=($69)-($70);
      var $71=$x2_addr;
      var $72=$x3_addr;
      var $sub51=($71)-($72);
      var $mul52=($sub50)*($sub51);
      var $73=$x1_addr;
      var $74=$x3_addr;
      var $sub53=($73)-($74);
      var $mul54=($mul52)*($sub53);
      var $div55=($add49)/($mul54);
      var $75=$y_addr;
      HEAPF64[(($75)>>3)]=$div55;
      $retval=0;
      label = 13; break;
    case 13: 
      var $76=$retval;
      return $76;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parabola_ex"] = _parabola_ex;
function _r8vec_zero($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$a_addr;
      var $arrayidx=(($3+($2<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $inc=((($4)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_zero"] = _r8vec_zero;
function _loc2glob_3d($cospitch, $cosroll, $cosyaw, $sinpitch, $sinroll, $sinyaw, $locpts, $globas, $glopts) {
  var label = 0;
  var $cospitch_addr;
  var $cosroll_addr;
  var $cosyaw_addr;
  var $sinpitch_addr;
  var $sinroll_addr;
  var $sinyaw_addr;
  var $locpts_addr;
  var $globas_addr;
  var $glopts_addr;
  $cospitch_addr=$cospitch;
  $cosroll_addr=$cosroll;
  $cosyaw_addr=$cosyaw;
  $sinpitch_addr=$sinpitch;
  $sinroll_addr=$sinroll;
  $sinyaw_addr=$sinyaw;
  $locpts_addr=$locpts;
  $globas_addr=$globas;
  $glopts_addr=$glopts;
  var $0=$globas_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$cosyaw_addr;
  var $3=$cospitch_addr;
  var $mul=($2)*($3);
  var $4=$locpts_addr;
  var $arrayidx1=(($4)|0);
  var $5=HEAPF64[(($arrayidx1)>>3)];
  var $mul2=($mul)*($5);
  var $add=($1)+($mul2);
  var $6=$cosyaw_addr;
  var $7=$sinpitch_addr;
  var $mul3=($6)*($7);
  var $8=$sinroll_addr;
  var $mul4=($mul3)*($8);
  var $9=$sinyaw_addr;
  var $10=$cosroll_addr;
  var $mul5=($9)*($10);
  var $sub=($mul4)-($mul5);
  var $11=$locpts_addr;
  var $arrayidx6=(($11+8)|0);
  var $12=HEAPF64[(($arrayidx6)>>3)];
  var $mul7=($sub)*($12);
  var $add8=($add)+($mul7);
  var $13=$cosyaw_addr;
  var $14=$sinpitch_addr;
  var $mul9=($13)*($14);
  var $15=$cosroll_addr;
  var $mul10=($mul9)*($15);
  var $16=$sinyaw_addr;
  var $17=$sinroll_addr;
  var $mul11=($16)*($17);
  var $add12=($mul10)+($mul11);
  var $18=$locpts_addr;
  var $arrayidx13=(($18+16)|0);
  var $19=HEAPF64[(($arrayidx13)>>3)];
  var $mul14=($add12)*($19);
  var $add15=($add8)+($mul14);
  var $20=$glopts_addr;
  var $arrayidx16=(($20)|0);
  HEAPF64[(($arrayidx16)>>3)]=$add15;
  var $21=$globas_addr;
  var $arrayidx17=(($21+8)|0);
  var $22=HEAPF64[(($arrayidx17)>>3)];
  var $23=$sinyaw_addr;
  var $24=$cospitch_addr;
  var $mul18=($23)*($24);
  var $25=$locpts_addr;
  var $arrayidx19=(($25)|0);
  var $26=HEAPF64[(($arrayidx19)>>3)];
  var $mul20=($mul18)*($26);
  var $add21=($22)+($mul20);
  var $27=$sinyaw_addr;
  var $28=$sinpitch_addr;
  var $mul22=($27)*($28);
  var $29=$sinroll_addr;
  var $mul23=($mul22)*($29);
  var $30=$cosyaw_addr;
  var $31=$cosroll_addr;
  var $mul24=($30)*($31);
  var $add25=($mul23)+($mul24);
  var $32=$locpts_addr;
  var $arrayidx26=(($32+8)|0);
  var $33=HEAPF64[(($arrayidx26)>>3)];
  var $mul27=($add25)*($33);
  var $add28=($add21)+($mul27);
  var $34=$sinyaw_addr;
  var $35=$sinpitch_addr;
  var $mul29=($34)*($35);
  var $36=$cosroll_addr;
  var $mul30=($mul29)*($36);
  var $37=$cosyaw_addr;
  var $38=$sinroll_addr;
  var $mul31=($37)*($38);
  var $sub32=($mul30)-($mul31);
  var $39=$locpts_addr;
  var $arrayidx33=(($39+16)|0);
  var $40=HEAPF64[(($arrayidx33)>>3)];
  var $mul34=($sub32)*($40);
  var $add35=($add28)+($mul34);
  var $41=$glopts_addr;
  var $arrayidx36=(($41+8)|0);
  HEAPF64[(($arrayidx36)>>3)]=$add35;
  var $42=$globas_addr;
  var $arrayidx37=(($42+16)|0);
  var $43=HEAPF64[(($arrayidx37)>>3)];
  var $44=$sinpitch_addr;
  var $sub38=(-$44);
  var $45=$locpts_addr;
  var $arrayidx39=(($45)|0);
  var $46=HEAPF64[(($arrayidx39)>>3)];
  var $mul40=($sub38)*($46);
  var $add41=($43)+($mul40);
  var $47=$cospitch_addr;
  var $48=$sinroll_addr;
  var $mul42=($47)*($48);
  var $49=$locpts_addr;
  var $arrayidx43=(($49+8)|0);
  var $50=HEAPF64[(($arrayidx43)>>3)];
  var $mul44=($mul42)*($50);
  var $add45=($add41)+($mul44);
  var $51=$cospitch_addr;
  var $52=$cosroll_addr;
  var $mul46=($51)*($52);
  var $53=$locpts_addr;
  var $arrayidx47=(($53+16)|0);
  var $54=HEAPF64[(($arrayidx47)>>3)];
  var $mul48=($mul46)*($54);
  var $add49=($add45)+($mul48);
  var $55=$glopts_addr;
  var $arrayidx50=(($55+16)|0);
  HEAPF64[(($arrayidx50)>>3)]=$add49;
  return;
}
Module["_loc2glob_3d"] = _loc2glob_3d;
function _lines_par_int_2d($f1, $g1, $x1, $y1, $f2, $g2, $x2, $y2, $t1, $t2, $pint) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $f1_addr;
      var $g1_addr;
      var $x1_addr;
      var $y1_addr;
      var $f2_addr;
      var $g2_addr;
      var $x2_addr;
      var $y2_addr;
      var $t1_addr;
      var $t2_addr;
      var $pint_addr;
      var $det;
      $f1_addr=$f1;
      $g1_addr=$g1;
      $x1_addr=$x1;
      $y1_addr=$y1;
      $f2_addr=$f2;
      $g2_addr=$g2;
      $x2_addr=$x2;
      $y2_addr=$y2;
      $t1_addr=$t1;
      $t2_addr=$t2;
      $pint_addr=$pint;
      var $0=$f2_addr;
      var $1=$g1_addr;
      var $mul=($0)*($1);
      var $2=$f1_addr;
      var $3=$g2_addr;
      var $mul1=($2)*($3);
      var $sub=($mul)-($mul1);
      $det=$sub;
      var $4=$det;
      var $cmp=$4 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $5=$t1_addr;
      HEAPF64[(($5)>>3)]=0;
      var $6=$t2_addr;
      HEAPF64[(($6)>>3)]=0;
      var $7=$pint_addr;
      _r8vec_zero(2, $7);
      label = 5; break;
    case 4: 
      var $8=$f2_addr;
      var $9=$y2_addr;
      var $10=$y1_addr;
      var $sub2=($9)-($10);
      var $mul3=($8)*($sub2);
      var $11=$g2_addr;
      var $12=$x2_addr;
      var $13=$x1_addr;
      var $sub4=($12)-($13);
      var $mul5=($11)*($sub4);
      var $sub6=($mul3)-($mul5);
      var $14=$det;
      var $div=($sub6)/($14);
      var $15=$t1_addr;
      HEAPF64[(($15)>>3)]=$div;
      var $16=$f1_addr;
      var $17=$y2_addr;
      var $18=$y1_addr;
      var $sub7=($17)-($18);
      var $mul8=($16)*($sub7);
      var $19=$g1_addr;
      var $20=$x2_addr;
      var $21=$x1_addr;
      var $sub9=($20)-($21);
      var $mul10=($19)*($sub9);
      var $sub11=($mul8)-($mul10);
      var $22=$det;
      var $div12=($sub11)/($22);
      var $23=$t2_addr;
      HEAPF64[(($23)>>3)]=$div12;
      var $24=$x1_addr;
      var $25=$f1_addr;
      var $26=$t1_addr;
      var $27=HEAPF64[(($26)>>3)];
      var $mul13=($25)*($27);
      var $add=($24)+($mul13);
      var $28=$pint_addr;
      var $arrayidx=(($28)|0);
      HEAPF64[(($arrayidx)>>3)]=$add;
      var $29=$y1_addr;
      var $30=$g1_addr;
      var $31=$t1_addr;
      var $32=HEAPF64[(($31)>>3)];
      var $mul14=($30)*($32);
      var $add15=($29)+($mul14);
      var $33=$pint_addr;
      var $arrayidx16=(($33+8)|0);
      HEAPF64[(($arrayidx16)>>3)]=$add15;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lines_par_int_2d"] = _lines_par_int_2d;
function _lvec_print($n, $a, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $title_addr;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $sub=((($5)-(1))|0);
      var $cmp=(($4)|(0)) <= (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=HEAP32[((_stdout)>>2)];
      var $7=$i;
      var $8=$i;
      var $9=$a_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $call3=_fprintf($6, ((7656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(8))>>2)]=$10,tempInt));
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_lvec_print"] = _lvec_print;
function _minquad($x1, $y1, $x2, $y2, $x3, $y3, $xmin, $ymin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x1_addr;
      var $y1_addr;
      var $x2_addr;
      var $y2_addr;
      var $x3_addr;
      var $y3_addr;
      var $xmin_addr;
      var $ymin_addr;
      var $ierror;
      var $x=__stackBase__;
      var $xleft;
      var $xrite;
      var $y=(__stackBase__)+(8);
      $x1_addr=$x1;
      $y1_addr=$y1;
      $x2_addr=$x2;
      $y2_addr=$y2;
      $x3_addr=$x3;
      $y3_addr=$y3;
      $xmin_addr=$xmin;
      $ymin_addr=$ymin;
      var $0=$xmin_addr;
      HEAPF64[(($0)>>3)]=0;
      var $1=$ymin_addr;
      HEAPF64[(($1)>>3)]=0;
      var $2=$x1_addr;
      var $3=$x2_addr;
      var $cmp=$2 == $3;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $4=$x2_addr;
      var $5=$x3_addr;
      var $cmp1=$4 == $5;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $6=$x3_addr;
      var $7=$x1_addr;
      var $cmp3=$6 == $7;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 31; break;
    case 6: 
      var $8=$x1_addr;
      $xleft=$8;
      var $9=$x2_addr;
      var $10=$xleft;
      var $cmp4=$9 < $10;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $11=$x2_addr;
      $xleft=$11;
      label = 8; break;
    case 8: 
      var $12=$x3_addr;
      var $13=$xleft;
      var $cmp7=$12 < $13;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $14=$x3_addr;
      $xleft=$14;
      label = 10; break;
    case 10: 
      var $15=$x1_addr;
      $xrite=$15;
      var $16=$xrite;
      var $17=$x2_addr;
      var $cmp10=$16 < $17;
      if ($cmp10) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $18=$x2_addr;
      $xrite=$18;
      label = 12; break;
    case 12: 
      var $19=$xrite;
      var $20=$x3_addr;
      var $cmp13=$19 < $20;
      if ($cmp13) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$x3_addr;
      $xrite=$21;
      label = 14; break;
    case 14: 
      var $22=$y1_addr;
      var $23=$y2_addr;
      var $cmp16=$22 <= $23;
      if ($cmp16) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $24=$y1_addr;
      var $25=$y3_addr;
      var $cmp17=$24 <= $25;
      if ($cmp17) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $26=$x1_addr;
      var $27=$xmin_addr;
      HEAPF64[(($27)>>3)]=$26;
      var $28=$y1_addr;
      var $29=$ymin_addr;
      HEAPF64[(($29)>>3)]=$28;
      label = 25; break;
    case 17: 
      var $30=$y2_addr;
      var $31=$y1_addr;
      var $cmp19=$30 <= $31;
      if ($cmp19) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $32=$y2_addr;
      var $33=$y3_addr;
      var $cmp21=$32 <= $33;
      if ($cmp21) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $34=$x2_addr;
      var $35=$xmin_addr;
      HEAPF64[(($35)>>3)]=$34;
      var $36=$y2_addr;
      var $37=$ymin_addr;
      HEAPF64[(($37)>>3)]=$36;
      label = 24; break;
    case 20: 
      var $38=$y3_addr;
      var $39=$y1_addr;
      var $cmp24=$38 <= $39;
      if ($cmp24) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $40=$y3_addr;
      var $41=$y2_addr;
      var $cmp26=$40 <= $41;
      if ($cmp26) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $42=$x3_addr;
      var $43=$xmin_addr;
      HEAPF64[(($43)>>3)]=$42;
      var $44=$y3_addr;
      var $45=$ymin_addr;
      HEAPF64[(($45)>>3)]=$44;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $46=$x1_addr;
      var $47=$y1_addr;
      var $48=$x2_addr;
      var $49=$y2_addr;
      var $50=$x3_addr;
      var $51=$y3_addr;
      var $call=_parabola_ex($46, $47, $48, $49, $50, $51, $x, $y);
      $ierror=$call;
      var $52=$ierror;
      var $cmp31=(($52)|(0))!=2;
      if ($cmp31) { label = 26; break; } else { label = 30; break; }
    case 26: 
      var $53=HEAPF64[(($y)>>3)];
      var $54=$ymin_addr;
      var $55=HEAPF64[(($54)>>3)];
      var $cmp33=$53 < $55;
      if ($cmp33) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $56=$xleft;
      var $57=HEAPF64[(($x)>>3)];
      var $cmp35=$56 < $57;
      if ($cmp35) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $58=HEAPF64[(($x)>>3)];
      var $59=$xrite;
      var $cmp37=$58 < $59;
      if ($cmp37) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $60=HEAPF64[(($x)>>3)];
      var $61=$xmin_addr;
      HEAPF64[(($61)>>3)]=$60;
      var $62=HEAPF64[(($y)>>3)];
      var $63=$ymin_addr;
      HEAPF64[(($63)>>3)]=$62;
      label = 30; break;
    case 30: 
      $retval=1;
      label = 31; break;
    case 31: 
      var $64=$retval;
      STACKTOP = __stackBase__;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
Module["_minquad"] = _minquad;
function _octahedron_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  var $point_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  var $point_coord_addr;
  var $face_order_addr;
  var $face_point_addr;
  $point_num_addr=$point_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  $point_coord_addr=$point_coord;
  $face_order_addr=$face_order;
  $face_point_addr=$face_point;
  var $0=$face_num_addr;
  var $1=$face_order_addr;
  _i4vec_copy($0, ((5032)|0), $1);
  var $2=$face_order_max_addr;
  var $3=$face_num_addr;
  var $mul=(Math.imul($2,$3)|0);
  var $4=$face_point_addr;
  _i4vec_copy($mul, ((4936)|0), $4);
  var $5=$point_num_addr;
  var $mul1=((($5)*(3))&-1);
  var $6=$point_coord_addr;
  _r8vec_copy($mul1, ((4792)|0), $6);
  return;
}
Module["_octahedron_shape_3d"] = _octahedron_shape_3d;
function _minabs($x1, $y1, $x2, $y2, $x3, $y3, $xmin, $ymin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x1_addr=__stackBase__;
      var $y1_addr=(__stackBase__)+(8);
      var $x2_addr=(__stackBase__)+(16);
      var $y2_addr=(__stackBase__)+(24);
      var $x3_addr=(__stackBase__)+(32);
      var $y3_addr=(__stackBase__)+(40);
      var $xmin_addr;
      var $ymin_addr;
      var $slope;
      var $slope12;
      var $slope13;
      var $slope23;
      HEAPF64[(($x1_addr)>>3)]=$x1;
      HEAPF64[(($y1_addr)>>3)]=$y1;
      HEAPF64[(($x2_addr)>>3)]=$x2;
      HEAPF64[(($y2_addr)>>3)]=$y2;
      HEAPF64[(($x3_addr)>>3)]=$x3;
      HEAPF64[(($y3_addr)>>3)]=$y3;
      $xmin_addr=$xmin;
      $ymin_addr=$ymin;
      var $0=HEAPF64[(($x1_addr)>>3)];
      var $1=HEAPF64[(($x2_addr)>>3)];
      var $cmp=$0 == $1;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $2=HEAPF64[(($x2_addr)>>3)];
      var $3=HEAPF64[(($x3_addr)>>3)];
      var $cmp1=$2 == $3;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=HEAPF64[(($x3_addr)>>3)];
      var $5=HEAPF64[(($x1_addr)>>3)];
      var $cmp3=$4 == $5;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($6, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($7, ((7560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($8, ((7504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      var $9=HEAPF64[(($x2_addr)>>3)];
      var $10=HEAPF64[(($x1_addr)>>3)];
      var $cmp6=$9 < $10;
      if ($cmp6) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _r8_swap($x1_addr, $x2_addr);
      _r8_swap($y1_addr, $y2_addr);
      label = 8; break;
    case 8: 
      var $11=HEAPF64[(($x3_addr)>>3)];
      var $12=HEAPF64[(($x1_addr)>>3)];
      var $cmp9=$11 < $12;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _r8_swap($x1_addr, $x3_addr);
      _r8_swap($y1_addr, $y3_addr);
      label = 10; break;
    case 10: 
      var $13=HEAPF64[(($x3_addr)>>3)];
      var $14=HEAPF64[(($x2_addr)>>3)];
      var $cmp12=$13 < $14;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _r8_swap($x2_addr, $x3_addr);
      _r8_swap($y2_addr, $y3_addr);
      label = 12; break;
    case 12: 
      var $15=HEAPF64[(($y2_addr)>>3)];
      var $16=HEAPF64[(($y1_addr)>>3)];
      var $sub=($15)-($16);
      var $17=HEAPF64[(($x2_addr)>>3)];
      var $18=HEAPF64[(($x1_addr)>>3)];
      var $sub15=($17)-($18);
      var $div=($sub)/($sub15);
      $slope12=$div;
      var $19=HEAPF64[(($y3_addr)>>3)];
      var $20=HEAPF64[(($y2_addr)>>3)];
      var $sub16=($19)-($20);
      var $21=HEAPF64[(($x3_addr)>>3)];
      var $22=HEAPF64[(($x2_addr)>>3)];
      var $sub17=($21)-($22);
      var $div18=($sub16)/($sub17);
      $slope23=$div18;
      var $23=HEAPF64[(($y3_addr)>>3)];
      var $24=HEAPF64[(($y1_addr)>>3)];
      var $sub19=($23)-($24);
      var $25=HEAPF64[(($x3_addr)>>3)];
      var $26=HEAPF64[(($x1_addr)>>3)];
      var $sub20=($25)-($26);
      var $div21=($sub19)/($sub20);
      $slope13=$div21;
      var $27=$slope13;
      var $28=$slope12;
      var $cmp22=$27 <= $28;
      if ($cmp22) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $29=$slope12;
      var $cmp24=0 <= $29;
      if ($cmp24) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $30=HEAPF64[(($y1_addr)>>3)];
      var $31=HEAPF64[(($y3_addr)>>3)];
      var $cmp26=$30 < $31;
      if ($cmp26) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $32=HEAPF64[(($x1_addr)>>3)];
      var $33=$xmin_addr;
      HEAPF64[(($33)>>3)]=$32;
      var $34=HEAPF64[(($y1_addr)>>3)];
      var $35=$ymin_addr;
      HEAPF64[(($35)>>3)]=$34;
      label = 17; break;
    case 16: 
      var $36=HEAPF64[(($x3_addr)>>3)];
      var $37=$xmin_addr;
      HEAPF64[(($37)>>3)]=$36;
      var $38=HEAPF64[(($y3_addr)>>3)];
      var $39=$ymin_addr;
      HEAPF64[(($39)>>3)]=$38;
      label = 17; break;
    case 17: 
      label = 19; break;
    case 18: 
      var $40=$slope12;
      var $call30=_r8_abs($40);
      var $41=$slope23;
      var $call31=_r8_max($call30, $41);
      $slope=$call31;
      var $42=HEAPF64[(($x1_addr)>>3)];
      var $43=HEAPF64[(($x3_addr)>>3)];
      var $add=($42)+($43);
      var $44=HEAPF64[(($y1_addr)>>3)];
      var $45=HEAPF64[(($y3_addr)>>3)];
      var $sub32=($44)-($45);
      var $46=$slope;
      var $div33=($sub32)/($46);
      var $add34=($add)+($div33);
      var $mul=($add34)*(0.5);
      var $47=$xmin_addr;
      HEAPF64[(($47)>>3)]=$mul;
      var $48=HEAPF64[(($y1_addr)>>3)];
      var $49=$slope;
      var $50=$xmin_addr;
      var $51=HEAPF64[(($50)>>3)];
      var $52=HEAPF64[(($x1_addr)>>3)];
      var $sub35=($51)-($52);
      var $mul36=($49)*($sub35);
      var $sub37=($48)-($mul36);
      var $53=$ymin_addr;
      HEAPF64[(($53)>>3)]=$sub37;
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_minabs"] = _minabs;
function _parallelogram_area_2d($p) {
  var label = 0;
  var $p_addr;
  var $area;
  $p_addr=$p;
  var $0=$p_addr;
  var $arrayidx=(($0+16)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=$p_addr;
  var $arrayidx2=(($4+40)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$p_addr;
  var $arrayidx3=(($6+8)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($5)-($7);
  var $mul=($sub)*($sub4);
  var $8=$p_addr;
  var $arrayidx5=(($8+24)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$p_addr;
  var $arrayidx6=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($9)-($11);
  var $12=$p_addr;
  var $arrayidx8=(($12+32)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$p_addr;
  var $arrayidx9=(($14)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($13)-($15);
  var $mul11=($sub7)*($sub10);
  var $sub12=($mul)-($mul11);
  $area=$sub12;
  var $16=$area;
  return $16;
}
Module["_parallelogram_area_2d"] = _parallelogram_area_2d;
function _parabola_ex2($x1, $y1, $x2, $y2, $x3, $y3, $x, $y, $a, $b, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $x1_addr;
      var $y1_addr;
      var $x2_addr;
      var $y2_addr;
      var $x3_addr;
      var $y3_addr;
      var $x_addr;
      var $y_addr;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $v=__stackBase__;
      var $w;
      $x1_addr=$x1;
      $y1_addr=$y1;
      $x2_addr=$x2;
      $y2_addr=$y2;
      $x3_addr=$x3;
      $y3_addr=$y3;
      $x_addr=$x;
      $y_addr=$y;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      var $0=$a_addr;
      HEAPF64[(($0)>>3)]=0;
      var $1=$b_addr;
      HEAPF64[(($1)>>3)]=0;
      var $2=$c_addr;
      HEAPF64[(($2)>>3)]=0;
      var $3=$x_addr;
      HEAPF64[(($3)>>3)]=0;
      var $4=$y_addr;
      HEAPF64[(($4)>>3)]=0;
      var $5=$x1_addr;
      var $6=$x2_addr;
      var $cmp=$5 == $6;
      if ($cmp) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $7=$x2_addr;
      var $8=$x3_addr;
      var $cmp1=$7 == $8;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $9=$x3_addr;
      var $10=$x1_addr;
      var $cmp3=$9 == $10;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 13; break;
    case 6: 
      var $11=$y1_addr;
      var $12=$y2_addr;
      var $cmp4=$11 == $12;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $13=$y2_addr;
      var $14=$y3_addr;
      var $cmp5=$13 == $14;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $15=$y3_addr;
      var $16=$y1_addr;
      var $cmp7=$15 == $16;
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$x1_addr;
      var $18=$x_addr;
      HEAPF64[(($18)>>3)]=$17;
      var $19=$y1_addr;
      var $20=$y_addr;
      HEAPF64[(($20)>>3)]=$19;
      $retval=3;
      label = 13; break;
    case 10: 
      var $arrayidx=(($v)|0);
      HEAPF64[(($arrayidx)>>3)]=1;
      var $arrayidx10=(($v+8)|0);
      HEAPF64[(($arrayidx10)>>3)]=1;
      var $arrayidx11=(($v+16)|0);
      HEAPF64[(($arrayidx11)>>3)]=1;
      var $21=$x1_addr;
      var $arrayidx12=(($v+24)|0);
      HEAPF64[(($arrayidx12)>>3)]=$21;
      var $22=$x2_addr;
      var $arrayidx13=(($v+32)|0);
      HEAPF64[(($arrayidx13)>>3)]=$22;
      var $23=$x3_addr;
      var $arrayidx14=(($v+40)|0);
      HEAPF64[(($arrayidx14)>>3)]=$23;
      var $24=$x1_addr;
      var $25=$x1_addr;
      var $mul=($24)*($25);
      var $arrayidx15=(($v+48)|0);
      HEAPF64[(($arrayidx15)>>3)]=$mul;
      var $26=$x2_addr;
      var $27=$x2_addr;
      var $mul16=($26)*($27);
      var $arrayidx17=(($v+56)|0);
      HEAPF64[(($arrayidx17)>>3)]=$mul16;
      var $28=$x3_addr;
      var $29=$x3_addr;
      var $mul18=($28)*($29);
      var $arrayidx19=(($v+64)|0);
      HEAPF64[(($arrayidx19)>>3)]=$mul18;
      var $arraydecay=(($v)|0);
      var $call=_r8mat_inverse_3d($arraydecay);
      $w=$call;
      var $30=$w;
      var $arrayidx20=(($30)|0);
      var $31=HEAPF64[(($arrayidx20)>>3)];
      var $32=$y1_addr;
      var $mul21=($31)*($32);
      var $33=$w;
      var $arrayidx22=(($33+24)|0);
      var $34=HEAPF64[(($arrayidx22)>>3)];
      var $35=$y2_addr;
      var $mul23=($34)*($35);
      var $add=($mul21)+($mul23);
      var $36=$w;
      var $arrayidx24=(($36+48)|0);
      var $37=HEAPF64[(($arrayidx24)>>3)];
      var $38=$y3_addr;
      var $mul25=($37)*($38);
      var $add26=($add)+($mul25);
      var $39=$c_addr;
      HEAPF64[(($39)>>3)]=$add26;
      var $40=$w;
      var $arrayidx27=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx27)>>3)];
      var $42=$y1_addr;
      var $mul28=($41)*($42);
      var $43=$w;
      var $arrayidx29=(($43+32)|0);
      var $44=HEAPF64[(($arrayidx29)>>3)];
      var $45=$y2_addr;
      var $mul30=($44)*($45);
      var $add31=($mul28)+($mul30);
      var $46=$w;
      var $arrayidx32=(($46+56)|0);
      var $47=HEAPF64[(($arrayidx32)>>3)];
      var $48=$y3_addr;
      var $mul33=($47)*($48);
      var $add34=($add31)+($mul33);
      var $49=$b_addr;
      HEAPF64[(($49)>>3)]=$add34;
      var $50=$w;
      var $arrayidx35=(($50+16)|0);
      var $51=HEAPF64[(($arrayidx35)>>3)];
      var $52=$y1_addr;
      var $mul36=($51)*($52);
      var $53=$w;
      var $arrayidx37=(($53+40)|0);
      var $54=HEAPF64[(($arrayidx37)>>3)];
      var $55=$y2_addr;
      var $mul38=($54)*($55);
      var $add39=($mul36)+($mul38);
      var $56=$w;
      var $arrayidx40=(($56+64)|0);
      var $57=HEAPF64[(($arrayidx40)>>3)];
      var $58=$y3_addr;
      var $mul41=($57)*($58);
      var $add42=($add39)+($mul41);
      var $59=$a_addr;
      HEAPF64[(($59)>>3)]=$add42;
      var $60=$w;
      var $61=$60;
      _free($61);
      var $62=$a_addr;
      var $63=HEAPF64[(($62)>>3)];
      var $cmp43=$63 == 0;
      if ($cmp43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=2;
      label = 13; break;
    case 12: 
      var $64=$b_addr;
      var $65=HEAPF64[(($64)>>3)];
      var $sub=(-$65);
      var $66=$a_addr;
      var $67=HEAPF64[(($66)>>3)];
      var $mul46=($67)*(2);
      var $div=($sub)/($mul46);
      var $68=$x_addr;
      HEAPF64[(($68)>>3)]=$div;
      var $69=$a_addr;
      var $70=HEAPF64[(($69)>>3)];
      var $71=$x_addr;
      var $72=HEAPF64[(($71)>>3)];
      var $mul47=($70)*($72);
      var $73=$x_addr;
      var $74=HEAPF64[(($73)>>3)];
      var $mul48=($mul47)*($74);
      var $75=$b_addr;
      var $76=HEAPF64[(($75)>>3)];
      var $77=$x_addr;
      var $78=HEAPF64[(($77)>>3)];
      var $mul49=($76)*($78);
      var $add50=($mul48)+($mul49);
      var $79=$c_addr;
      var $80=HEAPF64[(($79)>>3)];
      var $add51=($add50)+($80);
      var $81=$y_addr;
      HEAPF64[(($81)>>3)]=$add51;
      $retval=0;
      label = 13; break;
    case 13: 
      var $82=$retval;
      STACKTOP = __stackBase__;
      return $82;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parabola_ex2"] = _parabola_ex2;
function _parallelogram_area_3d($p) {
  var label = 0;
  var $p_addr;
  var $area;
  var $cross;
  $p_addr=$p;
  $area=0;
  var $0=$p_addr;
  var $arrayidx=(($0+32)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p_addr;
  var $arrayidx1=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=$p_addr;
  var $arrayidx2=(($4+64)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$p_addr;
  var $arrayidx3=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($5)-($7);
  var $mul=($sub)*($sub4);
  var $8=$p_addr;
  var $arrayidx5=(($8+40)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$p_addr;
  var $arrayidx6=(($10+16)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($9)-($11);
  var $12=$p_addr;
  var $arrayidx8=(($12+56)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$p_addr;
  var $arrayidx9=(($14+8)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($13)-($15);
  var $mul11=($sub7)*($sub10);
  var $sub12=($mul)-($mul11);
  $cross=$sub12;
  var $16=$area;
  var $17=$cross;
  var $18=$cross;
  var $mul13=($17)*($18);
  var $add=($16)+($mul13);
  $area=$add;
  var $19=$p_addr;
  var $arrayidx14=(($19+40)|0);
  var $20=HEAPF64[(($arrayidx14)>>3)];
  var $21=$p_addr;
  var $arrayidx15=(($21+16)|0);
  var $22=HEAPF64[(($arrayidx15)>>3)];
  var $sub16=($20)-($22);
  var $23=$p_addr;
  var $arrayidx17=(($23+48)|0);
  var $24=HEAPF64[(($arrayidx17)>>3)];
  var $25=$p_addr;
  var $arrayidx18=(($25)|0);
  var $26=HEAPF64[(($arrayidx18)>>3)];
  var $sub19=($24)-($26);
  var $mul20=($sub16)*($sub19);
  var $27=$p_addr;
  var $arrayidx21=(($27+24)|0);
  var $28=HEAPF64[(($arrayidx21)>>3)];
  var $29=$p_addr;
  var $arrayidx22=(($29)|0);
  var $30=HEAPF64[(($arrayidx22)>>3)];
  var $sub23=($28)-($30);
  var $31=$p_addr;
  var $arrayidx24=(($31+64)|0);
  var $32=HEAPF64[(($arrayidx24)>>3)];
  var $33=$p_addr;
  var $arrayidx25=(($33+16)|0);
  var $34=HEAPF64[(($arrayidx25)>>3)];
  var $sub26=($32)-($34);
  var $mul27=($sub23)*($sub26);
  var $sub28=($mul20)-($mul27);
  $cross=$sub28;
  var $35=$area;
  var $36=$cross;
  var $37=$cross;
  var $mul29=($36)*($37);
  var $add30=($35)+($mul29);
  $area=$add30;
  var $38=$p_addr;
  var $arrayidx31=(($38+24)|0);
  var $39=HEAPF64[(($arrayidx31)>>3)];
  var $40=$p_addr;
  var $arrayidx32=(($40)|0);
  var $41=HEAPF64[(($arrayidx32)>>3)];
  var $sub33=($39)-($41);
  var $42=$p_addr;
  var $arrayidx34=(($42+56)|0);
  var $43=HEAPF64[(($arrayidx34)>>3)];
  var $44=$p_addr;
  var $arrayidx35=(($44+8)|0);
  var $45=HEAPF64[(($arrayidx35)>>3)];
  var $sub36=($43)-($45);
  var $mul37=($sub33)*($sub36);
  var $46=$p_addr;
  var $arrayidx38=(($46+32)|0);
  var $47=HEAPF64[(($arrayidx38)>>3)];
  var $48=$p_addr;
  var $arrayidx39=(($48+8)|0);
  var $49=HEAPF64[(($arrayidx39)>>3)];
  var $sub40=($47)-($49);
  var $50=$p_addr;
  var $arrayidx41=(($50+48)|0);
  var $51=HEAPF64[(($arrayidx41)>>3)];
  var $52=$p_addr;
  var $arrayidx42=(($52)|0);
  var $53=HEAPF64[(($arrayidx42)>>3)];
  var $sub43=($51)-($53);
  var $mul44=($sub40)*($sub43);
  var $sub45=($mul37)-($mul44);
  $cross=$sub45;
  var $54=$area;
  var $55=$cross;
  var $56=$cross;
  var $mul46=($55)*($56);
  var $add47=($54)+($mul46);
  $area=$add47;
  var $57=$area;
  var $call=Math.sqrt($57);
  $area=$call;
  var $58=$area;
  return $58;
}
Module["_parallelogram_area_3d"] = _parallelogram_area_3d;
function _r8mat_solve($n, $rhs_num, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $rhs_num_addr;
      var $a_addr;
      var $apivot;
      var $factor;
      var $i;
      var $ipivot;
      var $j;
      var $k;
      var $temp;
      $n_addr=$n;
      $rhs_num_addr=$rhs_num;
      $a_addr=$a;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 32; break; }
    case 4: 
      var $2=$j;
      $ipivot=$2;
      var $3=$j;
      var $4=$j;
      var $5=$n_addr;
      var $mul=(Math.imul($4,$5)|0);
      var $add=((($3)+($mul))|0);
      var $6=$a_addr;
      var $arrayidx=(($6+($add<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      $apivot=$7;
      var $8=$j;
      $i=$8;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $10=$n_addr;
      var $cmp2=(($9)|(0)) < (($10)|(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $11=$apivot;
      var $call=_r8_abs($11);
      var $12=$i;
      var $13=$j;
      var $14=$n_addr;
      var $mul4=(Math.imul($13,$14)|0);
      var $add5=((($12)+($mul4))|0);
      var $15=$a_addr;
      var $arrayidx6=(($15+($add5<<3))|0);
      var $16=HEAPF64[(($arrayidx6)>>3)];
      var $call7=_r8_abs($16);
      var $cmp8=$call < $call7;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $17=$i;
      var $18=$j;
      var $19=$n_addr;
      var $mul9=(Math.imul($18,$19)|0);
      var $add10=((($17)+($mul9))|0);
      var $20=$a_addr;
      var $arrayidx11=(($20+($add10<<3))|0);
      var $21=HEAPF64[(($arrayidx11)>>3)];
      $apivot=$21;
      var $22=$i;
      $ipivot=$22;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $24=$apivot;
      var $cmp12=$24 == 0;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$j;
      $retval=$25;
      label = 33; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $27=$n_addr;
      var $28=$rhs_num_addr;
      var $add16=((($27)+($28))|0);
      var $cmp17=(($26)|(0)) < (($add16)|(0));
      if ($cmp17) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $29=$ipivot;
      var $30=$i;
      var $31=$n_addr;
      var $mul19=(Math.imul($30,$31)|0);
      var $add20=((($29)+($mul19))|0);
      var $32=$a_addr;
      var $arrayidx21=(($32+($add20<<3))|0);
      var $33=HEAPF64[(($arrayidx21)>>3)];
      $temp=$33;
      var $34=$j;
      var $35=$i;
      var $36=$n_addr;
      var $mul22=(Math.imul($35,$36)|0);
      var $add23=((($34)+($mul22))|0);
      var $37=$a_addr;
      var $arrayidx24=(($37+($add23<<3))|0);
      var $38=HEAPF64[(($arrayidx24)>>3)];
      var $39=$ipivot;
      var $40=$i;
      var $41=$n_addr;
      var $mul25=(Math.imul($40,$41)|0);
      var $add26=((($39)+($mul25))|0);
      var $42=$a_addr;
      var $arrayidx27=(($42+($add26<<3))|0);
      HEAPF64[(($arrayidx27)>>3)]=$38;
      var $43=$temp;
      var $44=$j;
      var $45=$i;
      var $46=$n_addr;
      var $mul28=(Math.imul($45,$46)|0);
      var $add29=((($44)+($mul28))|0);
      var $47=$a_addr;
      var $arrayidx30=(($47+($add29<<3))|0);
      HEAPF64[(($arrayidx30)>>3)]=$43;
      label = 15; break;
    case 15: 
      var $48=$i;
      var $inc32=((($48)+(1))|0);
      $i=$inc32;
      label = 13; break;
    case 16: 
      var $49=$j;
      var $50=$j;
      var $51=$n_addr;
      var $mul34=(Math.imul($50,$51)|0);
      var $add35=((($49)+($mul34))|0);
      var $52=$a_addr;
      var $arrayidx36=(($52+($add35<<3))|0);
      HEAPF64[(($arrayidx36)>>3)]=1;
      var $53=$j;
      $k=$53;
      label = 17; break;
    case 17: 
      var $54=$k;
      var $55=$n_addr;
      var $56=$rhs_num_addr;
      var $add38=((($55)+($56))|0);
      var $cmp39=(($54)|(0)) < (($add38)|(0));
      if ($cmp39) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $57=$j;
      var $58=$k;
      var $59=$n_addr;
      var $mul41=(Math.imul($58,$59)|0);
      var $add42=((($57)+($mul41))|0);
      var $60=$a_addr;
      var $arrayidx43=(($60+($add42<<3))|0);
      var $61=HEAPF64[(($arrayidx43)>>3)];
      var $62=$apivot;
      var $div=($61)/($62);
      var $63=$j;
      var $64=$k;
      var $65=$n_addr;
      var $mul44=(Math.imul($64,$65)|0);
      var $add45=((($63)+($mul44))|0);
      var $66=$a_addr;
      var $arrayidx46=(($66+($add45<<3))|0);
      HEAPF64[(($arrayidx46)>>3)]=$div;
      label = 19; break;
    case 19: 
      var $67=$k;
      var $inc48=((($67)+(1))|0);
      $k=$inc48;
      label = 17; break;
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $68=$i;
      var $69=$n_addr;
      var $cmp51=(($68)|(0)) < (($69)|(0));
      if ($cmp51) { label = 22; break; } else { label = 30; break; }
    case 22: 
      var $70=$i;
      var $71=$j;
      var $cmp53=(($70)|(0))!=(($71)|(0));
      if ($cmp53) { label = 23; break; } else { label = 28; break; }
    case 23: 
      var $72=$i;
      var $73=$j;
      var $74=$n_addr;
      var $mul55=(Math.imul($73,$74)|0);
      var $add56=((($72)+($mul55))|0);
      var $75=$a_addr;
      var $arrayidx57=(($75+($add56<<3))|0);
      var $76=HEAPF64[(($arrayidx57)>>3)];
      $factor=$76;
      var $77=$i;
      var $78=$j;
      var $79=$n_addr;
      var $mul58=(Math.imul($78,$79)|0);
      var $add59=((($77)+($mul58))|0);
      var $80=$a_addr;
      var $arrayidx60=(($80+($add59<<3))|0);
      HEAPF64[(($arrayidx60)>>3)]=0;
      var $81=$j;
      $k=$81;
      label = 24; break;
    case 24: 
      var $82=$k;
      var $83=$n_addr;
      var $84=$rhs_num_addr;
      var $add62=((($83)+($84))|0);
      var $cmp63=(($82)|(0)) < (($add62)|(0));
      if ($cmp63) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $85=$i;
      var $86=$k;
      var $87=$n_addr;
      var $mul65=(Math.imul($86,$87)|0);
      var $add66=((($85)+($mul65))|0);
      var $88=$a_addr;
      var $arrayidx67=(($88+($add66<<3))|0);
      var $89=HEAPF64[(($arrayidx67)>>3)];
      var $90=$factor;
      var $91=$j;
      var $92=$k;
      var $93=$n_addr;
      var $mul68=(Math.imul($92,$93)|0);
      var $add69=((($91)+($mul68))|0);
      var $94=$a_addr;
      var $arrayidx70=(($94+($add69<<3))|0);
      var $95=HEAPF64[(($arrayidx70)>>3)];
      var $mul71=($90)*($95);
      var $sub=($89)-($mul71);
      var $96=$i;
      var $97=$k;
      var $98=$n_addr;
      var $mul72=(Math.imul($97,$98)|0);
      var $add73=((($96)+($mul72))|0);
      var $99=$a_addr;
      var $arrayidx74=(($99+($add73<<3))|0);
      HEAPF64[(($arrayidx74)>>3)]=$sub;
      label = 26; break;
    case 26: 
      var $100=$k;
      var $inc76=((($100)+(1))|0);
      $k=$inc76;
      label = 24; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $101=$i;
      var $inc80=((($101)+(1))|0);
      $i=$inc80;
      label = 21; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $102=$j;
      var $inc83=((($102)+(1))|0);
      $j=$inc83;
      label = 3; break;
    case 32: 
      $retval=0;
      label = 33; break;
    case 33: 
      var $103=$retval;
      return $103;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_solve"] = _r8mat_solve;
function _parallelogram_contains_point_2d($p1, $p2, $p3, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p_addr;
      var $a=__stackBase__;
      var $info;
      var $value;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$p2_addr;
      var $arrayidx3=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$p1_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$p3_addr;
      var $arrayidx7=(($8)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$p1_addr;
      var $arrayidx8=(($10)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($a+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $12=$p3_addr;
      var $arrayidx11=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$p1_addr;
      var $arrayidx12=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $arrayidx14=(($a+24)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      var $16=$p_addr;
      var $arrayidx15=(($16)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $18=$p1_addr;
      var $arrayidx16=(($18)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($17)-($19);
      var $arrayidx18=(($a+32)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $20=$p_addr;
      var $arrayidx19=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx19)>>3)];
      var $22=$p1_addr;
      var $arrayidx20=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($21)-($23);
      var $arrayidx22=(($a+40)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_solve(2, 1, $arraydecay);
      $info=$call;
      var $24=$info;
      var $cmp=(($24)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=HEAP32[((_stderr)>>2)];
      var $call23=_fprintf($25, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=HEAP32[((_stderr)>>2)];
      var $call24=_fprintf($26, ((7448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=HEAP32[((_stderr)>>2)];
      var $call25=_fprintf($27, ((7400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $28=HEAP32[((_stderr)>>2)];
      var $call26=_fprintf($28, ((7336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $arrayidx27=(($a+32)|0);
      var $29=HEAPF64[(($arrayidx27)>>3)];
      var $cmp28=$29 < 0;
      if ($cmp28) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $arrayidx29=(($a+32)|0);
      var $30=HEAPF64[(($arrayidx29)>>3)];
      var $cmp30=1 < $30;
      if ($cmp30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $value=0;
      label = 12; break;
    case 7: 
      var $arrayidx32=(($a+40)|0);
      var $31=HEAPF64[(($arrayidx32)>>3)];
      var $cmp33=$31 < 0;
      if ($cmp33) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $arrayidx35=(($a+40)|0);
      var $32=HEAPF64[(($arrayidx35)>>3)];
      var $cmp36=1 < $32;
      if ($cmp36) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $value=0;
      label = 11; break;
    case 10: 
      $value=1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $33=$value;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parallelogram_contains_point_2d"] = _parallelogram_contains_point_2d;
function _parallelogram_contains_point_3d($p1, $p2, $p3, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p_addr;
      var $dot;
      var $dotb;
      var $dott;
      var $v;
      var $p21=__stackBase__;
      var $p31=(__stackBase__)+(24);
      var $pn12=(__stackBase__)+(48);
      var $pn23;
      var $pn31;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0+8)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p3_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p1_addr;
      var $arrayidx3=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p2_addr;
      var $arrayidx5=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p1_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p1_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      var $arrayidx13=(($pn12)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $16=$p2_addr;
      var $arrayidx14=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $18=$p1_addr;
      var $arrayidx15=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($17)-($19);
      var $20=$p3_addr;
      var $arrayidx17=(($20)|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$p1_addr;
      var $arrayidx18=(($22)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($23);
      var $mul20=($sub16)*($sub19);
      var $24=$p2_addr;
      var $arrayidx21=(($24)|0);
      var $25=HEAPF64[(($arrayidx21)>>3)];
      var $26=$p1_addr;
      var $arrayidx22=(($26)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($25)-($27);
      var $28=$p3_addr;
      var $arrayidx24=(($28+16)|0);
      var $29=HEAPF64[(($arrayidx24)>>3)];
      var $30=$p1_addr;
      var $arrayidx25=(($30+16)|0);
      var $31=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($29)-($31);
      var $mul27=($sub23)*($sub26);
      var $sub28=($mul20)-($mul27);
      var $arrayidx29=(($pn12+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $32=$p2_addr;
      var $arrayidx30=(($32)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $34=$p1_addr;
      var $arrayidx31=(($34)|0);
      var $35=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($33)-($35);
      var $36=$p3_addr;
      var $arrayidx33=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $38=$p1_addr;
      var $arrayidx34=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($37)-($39);
      var $mul36=($sub32)*($sub35);
      var $40=$p2_addr;
      var $arrayidx37=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $42=$p1_addr;
      var $arrayidx38=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($41)-($43);
      var $44=$p3_addr;
      var $arrayidx40=(($44)|0);
      var $45=HEAPF64[(($arrayidx40)>>3)];
      var $46=$p1_addr;
      var $arrayidx41=(($46)|0);
      var $47=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($45)-($47);
      var $mul43=($sub39)*($sub42);
      var $sub44=($mul36)-($mul43);
      var $arrayidx45=(($pn12+16)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      var $48=$p_addr;
      var $arrayidx46=(($48)|0);
      var $49=HEAPF64[(($arrayidx46)>>3)];
      var $50=$p1_addr;
      var $arrayidx47=(($50)|0);
      var $51=HEAPF64[(($arrayidx47)>>3)];
      var $sub48=($49)-($51);
      var $arrayidx49=(($pn12)|0);
      var $52=HEAPF64[(($arrayidx49)>>3)];
      var $mul50=($sub48)*($52);
      var $53=$p_addr;
      var $arrayidx51=(($53+8)|0);
      var $54=HEAPF64[(($arrayidx51)>>3)];
      var $55=$p1_addr;
      var $arrayidx52=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx52)>>3)];
      var $sub53=($54)-($56);
      var $arrayidx54=(($pn12+8)|0);
      var $57=HEAPF64[(($arrayidx54)>>3)];
      var $mul55=($sub53)*($57);
      var $add=($mul50)+($mul55);
      var $58=$p_addr;
      var $arrayidx56=(($58+16)|0);
      var $59=HEAPF64[(($arrayidx56)>>3)];
      var $60=$p1_addr;
      var $arrayidx57=(($60+16)|0);
      var $61=HEAPF64[(($arrayidx57)>>3)];
      var $sub58=($59)-($61);
      var $arrayidx59=(($pn12+16)|0);
      var $62=HEAPF64[(($arrayidx59)>>3)];
      var $mul60=($sub58)*($62);
      var $add61=($add)+($mul60);
      $dot=$add61;
      var $63=$p2_addr;
      var $arrayidx62=(($63)|0);
      var $64=HEAPF64[(($arrayidx62)>>3)];
      var $65=$p_addr;
      var $arrayidx63=(($65)|0);
      var $66=HEAPF64[(($arrayidx63)>>3)];
      var $sub64=($64)-($66);
      var $67=Math.pow($sub64, 2);
      var $68=$p2_addr;
      var $arrayidx65=(($68+8)|0);
      var $69=HEAPF64[(($arrayidx65)>>3)];
      var $70=$p_addr;
      var $arrayidx66=(($70+8)|0);
      var $71=HEAPF64[(($arrayidx66)>>3)];
      var $sub67=($69)-($71);
      var $72=Math.pow($sub67, 2);
      var $add68=($67)+($72);
      var $73=$p2_addr;
      var $arrayidx69=(($73+16)|0);
      var $74=HEAPF64[(($arrayidx69)>>3)];
      var $75=$p_addr;
      var $arrayidx70=(($75+16)|0);
      var $76=HEAPF64[(($arrayidx70)>>3)];
      var $sub71=($74)-($76);
      var $77=Math.pow($sub71, 2);
      var $add72=($add68)+($77);
      var $call=Math.sqrt($add72);
      $v=$call;
      var $78=$v;
      var $add73=($78)+(1);
      var $mul74=($add73)*(0.00001);
      var $79=$dot;
      var $call75=_r8_abs($79);
      var $cmp=$mul74 < $call75;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $80=$p3_addr;
      var $arrayidx76=(($80)|0);
      var $81=HEAPF64[(($arrayidx76)>>3)];
      var $82=$p1_addr;
      var $arrayidx77=(($82)|0);
      var $83=HEAPF64[(($arrayidx77)>>3)];
      var $sub78=($81)-($83);
      var $arrayidx79=(($p31)|0);
      HEAPF64[(($arrayidx79)>>3)]=$sub78;
      var $84=$p3_addr;
      var $arrayidx80=(($84+8)|0);
      var $85=HEAPF64[(($arrayidx80)>>3)];
      var $86=$p1_addr;
      var $arrayidx81=(($86+8)|0);
      var $87=HEAPF64[(($arrayidx81)>>3)];
      var $sub82=($85)-($87);
      var $arrayidx83=(($p31+8)|0);
      HEAPF64[(($arrayidx83)>>3)]=$sub82;
      var $88=$p3_addr;
      var $arrayidx84=(($88+16)|0);
      var $89=HEAPF64[(($arrayidx84)>>3)];
      var $90=$p1_addr;
      var $arrayidx85=(($90+16)|0);
      var $91=HEAPF64[(($arrayidx85)>>3)];
      var $sub86=($89)-($91);
      var $arrayidx87=(($p31+16)|0);
      HEAPF64[(($arrayidx87)>>3)]=$sub86;
      var $arraydecay=(($p31)|0);
      var $arraydecay88=(($pn12)|0);
      var $call89=_r8vec_cross_product_3d($arraydecay, $arraydecay88);
      $pn23=$call89;
      var $92=$p_addr;
      var $arrayidx90=(($92)|0);
      var $93=HEAPF64[(($arrayidx90)>>3)];
      var $94=$p1_addr;
      var $arrayidx91=(($94)|0);
      var $95=HEAPF64[(($arrayidx91)>>3)];
      var $sub92=($93)-($95);
      var $96=$pn23;
      var $arrayidx93=(($96)|0);
      var $97=HEAPF64[(($arrayidx93)>>3)];
      var $mul94=($sub92)*($97);
      var $98=$p_addr;
      var $arrayidx95=(($98+8)|0);
      var $99=HEAPF64[(($arrayidx95)>>3)];
      var $100=$p1_addr;
      var $arrayidx96=(($100+8)|0);
      var $101=HEAPF64[(($arrayidx96)>>3)];
      var $sub97=($99)-($101);
      var $102=$pn23;
      var $arrayidx98=(($102+8)|0);
      var $103=HEAPF64[(($arrayidx98)>>3)];
      var $mul99=($sub97)*($103);
      var $add100=($mul94)+($mul99);
      var $104=$p_addr;
      var $arrayidx101=(($104+16)|0);
      var $105=HEAPF64[(($arrayidx101)>>3)];
      var $106=$p1_addr;
      var $arrayidx102=(($106+16)|0);
      var $107=HEAPF64[(($arrayidx102)>>3)];
      var $sub103=($105)-($107);
      var $108=$pn23;
      var $arrayidx104=(($108+16)|0);
      var $109=HEAPF64[(($arrayidx104)>>3)];
      var $mul105=($sub103)*($109);
      var $add106=($add100)+($mul105);
      $dott=$add106;
      var $110=$p2_addr;
      var $arrayidx107=(($110)|0);
      var $111=HEAPF64[(($arrayidx107)>>3)];
      var $112=$p1_addr;
      var $arrayidx108=(($112)|0);
      var $113=HEAPF64[(($arrayidx108)>>3)];
      var $sub109=($111)-($113);
      var $114=$pn23;
      var $arrayidx110=(($114)|0);
      var $115=HEAPF64[(($arrayidx110)>>3)];
      var $mul111=($sub109)*($115);
      var $116=$p2_addr;
      var $arrayidx112=(($116+8)|0);
      var $117=HEAPF64[(($arrayidx112)>>3)];
      var $118=$p1_addr;
      var $arrayidx113=(($118+8)|0);
      var $119=HEAPF64[(($arrayidx113)>>3)];
      var $sub114=($117)-($119);
      var $120=$pn23;
      var $arrayidx115=(($120+8)|0);
      var $121=HEAPF64[(($arrayidx115)>>3)];
      var $mul116=($sub114)*($121);
      var $add117=($mul111)+($mul116);
      var $122=$p2_addr;
      var $arrayidx118=(($122+16)|0);
      var $123=HEAPF64[(($arrayidx118)>>3)];
      var $124=$p1_addr;
      var $arrayidx119=(($124+16)|0);
      var $125=HEAPF64[(($arrayidx119)>>3)];
      var $sub120=($123)-($125);
      var $126=$pn23;
      var $arrayidx121=(($126+16)|0);
      var $127=HEAPF64[(($arrayidx121)>>3)];
      var $mul122=($sub120)*($127);
      var $add123=($add117)+($mul122);
      $dotb=$add123;
      var $128=$pn23;
      var $129=$128;
      _free($129);
      var $130=$dotb;
      var $cmp124=$130 < 0;
      if ($cmp124) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $131=$dott;
      var $sub126=(-$131);
      $dott=$sub126;
      var $132=$dotb;
      var $sub127=(-$132);
      $dotb=$sub127;
      label = 6; break;
    case 6: 
      var $133=$dott;
      var $cmp129=$133 < 0;
      if ($cmp129) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $134=$dotb;
      var $135=$dott;
      var $cmp130=$134 < $135;
      if ($cmp130) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=0;
      label = 15; break;
    case 9: 
      var $136=$p2_addr;
      var $arrayidx133=(($136)|0);
      var $137=HEAPF64[(($arrayidx133)>>3)];
      var $138=$p1_addr;
      var $arrayidx134=(($138)|0);
      var $139=HEAPF64[(($arrayidx134)>>3)];
      var $sub135=($137)-($139);
      var $arrayidx136=(($p21)|0);
      HEAPF64[(($arrayidx136)>>3)]=$sub135;
      var $140=$p2_addr;
      var $arrayidx137=(($140+8)|0);
      var $141=HEAPF64[(($arrayidx137)>>3)];
      var $142=$p1_addr;
      var $arrayidx138=(($142+8)|0);
      var $143=HEAPF64[(($arrayidx138)>>3)];
      var $sub139=($141)-($143);
      var $arrayidx140=(($p21+8)|0);
      HEAPF64[(($arrayidx140)>>3)]=$sub139;
      var $144=$p2_addr;
      var $arrayidx141=(($144+16)|0);
      var $145=HEAPF64[(($arrayidx141)>>3)];
      var $146=$p1_addr;
      var $arrayidx142=(($146+16)|0);
      var $147=HEAPF64[(($arrayidx142)>>3)];
      var $sub143=($145)-($147);
      var $arrayidx144=(($p21+16)|0);
      HEAPF64[(($arrayidx144)>>3)]=$sub143;
      var $arraydecay145=(($pn12)|0);
      var $arraydecay146=(($p21)|0);
      var $call147=_r8vec_cross_product_3d($arraydecay145, $arraydecay146);
      $pn31=$call147;
      var $148=$p_addr;
      var $arrayidx148=(($148)|0);
      var $149=HEAPF64[(($arrayidx148)>>3)];
      var $150=$p1_addr;
      var $arrayidx149=(($150)|0);
      var $151=HEAPF64[(($arrayidx149)>>3)];
      var $sub150=($149)-($151);
      var $152=$pn31;
      var $arrayidx151=(($152)|0);
      var $153=HEAPF64[(($arrayidx151)>>3)];
      var $mul152=($sub150)*($153);
      var $154=$p_addr;
      var $arrayidx153=(($154+8)|0);
      var $155=HEAPF64[(($arrayidx153)>>3)];
      var $156=$p1_addr;
      var $arrayidx154=(($156+8)|0);
      var $157=HEAPF64[(($arrayidx154)>>3)];
      var $sub155=($155)-($157);
      var $158=$pn31;
      var $arrayidx156=(($158+8)|0);
      var $159=HEAPF64[(($arrayidx156)>>3)];
      var $mul157=($sub155)*($159);
      var $add158=($mul152)+($mul157);
      var $160=$p_addr;
      var $arrayidx159=(($160+16)|0);
      var $161=HEAPF64[(($arrayidx159)>>3)];
      var $162=$p1_addr;
      var $arrayidx160=(($162+16)|0);
      var $163=HEAPF64[(($arrayidx160)>>3)];
      var $sub161=($161)-($163);
      var $164=$pn31;
      var $arrayidx162=(($164+16)|0);
      var $165=HEAPF64[(($arrayidx162)>>3)];
      var $mul163=($sub161)*($165);
      var $add164=($add158)+($mul163);
      $dott=$add164;
      var $166=$p3_addr;
      var $arrayidx165=(($166)|0);
      var $167=HEAPF64[(($arrayidx165)>>3)];
      var $168=$p1_addr;
      var $arrayidx166=(($168)|0);
      var $169=HEAPF64[(($arrayidx166)>>3)];
      var $sub167=($167)-($169);
      var $170=$pn31;
      var $arrayidx168=(($170)|0);
      var $171=HEAPF64[(($arrayidx168)>>3)];
      var $mul169=($sub167)*($171);
      var $172=$p3_addr;
      var $arrayidx170=(($172+8)|0);
      var $173=HEAPF64[(($arrayidx170)>>3)];
      var $174=$p1_addr;
      var $arrayidx171=(($174+8)|0);
      var $175=HEAPF64[(($arrayidx171)>>3)];
      var $sub172=($173)-($175);
      var $176=$pn31;
      var $arrayidx173=(($176+8)|0);
      var $177=HEAPF64[(($arrayidx173)>>3)];
      var $mul174=($sub172)*($177);
      var $add175=($mul169)+($mul174);
      var $178=$p3_addr;
      var $arrayidx176=(($178+16)|0);
      var $179=HEAPF64[(($arrayidx176)>>3)];
      var $180=$p1_addr;
      var $arrayidx177=(($180+16)|0);
      var $181=HEAPF64[(($arrayidx177)>>3)];
      var $sub178=($179)-($181);
      var $182=$pn31;
      var $arrayidx179=(($182+16)|0);
      var $183=HEAPF64[(($arrayidx179)>>3)];
      var $mul180=($sub178)*($183);
      var $add181=($add175)+($mul180);
      $dotb=$add181;
      var $184=$pn31;
      var $185=$184;
      _free($185);
      var $186=$dotb;
      var $cmp182=$186 < 0;
      if ($cmp182) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $187=$dott;
      var $sub184=(-$187);
      $dott=$sub184;
      var $188=$dotb;
      var $sub185=(-$188);
      $dotb=$sub185;
      label = 11; break;
    case 11: 
      var $189=$dott;
      var $cmp187=$189 < 0;
      if ($cmp187) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $190=$dotb;
      var $191=$dott;
      var $cmp189=$190 < $191;
      if ($cmp189) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 15; break;
    case 14: 
      $retval=1;
      label = 15; break;
    case 15: 
      var $192=$retval;
      STACKTOP = __stackBase__;
      return $192;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parallelogram_contains_point_3d"] = _parallelogram_contains_point_3d;
function _parallelogram_point_dist_3d($p1, $p2, $p3, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p_addr;
      var $dis13;
      var $dis21;
      var $dis34;
      var $dis42;
      var $dist;
      var $inside;
      var $t;
      var $temp;
      var $p4=__stackBase__;
      var $pn=(__stackBase__)+(24);
      var $pp=(__stackBase__)+(48);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0+8)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p3_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p1_addr;
      var $arrayidx3=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p2_addr;
      var $arrayidx5=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p1_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p1_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      var $arrayidx13=(($pp)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $16=$p2_addr;
      var $arrayidx14=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $18=$p1_addr;
      var $arrayidx15=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($17)-($19);
      var $20=$p3_addr;
      var $arrayidx17=(($20)|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$p1_addr;
      var $arrayidx18=(($22)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($23);
      var $mul20=($sub16)*($sub19);
      var $24=$p2_addr;
      var $arrayidx21=(($24)|0);
      var $25=HEAPF64[(($arrayidx21)>>3)];
      var $26=$p1_addr;
      var $arrayidx22=(($26)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($25)-($27);
      var $28=$p3_addr;
      var $arrayidx24=(($28+16)|0);
      var $29=HEAPF64[(($arrayidx24)>>3)];
      var $30=$p1_addr;
      var $arrayidx25=(($30+16)|0);
      var $31=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($29)-($31);
      var $mul27=($sub23)*($sub26);
      var $sub28=($mul20)-($mul27);
      var $arrayidx29=(($pp+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $32=$p2_addr;
      var $arrayidx30=(($32)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $34=$p1_addr;
      var $arrayidx31=(($34)|0);
      var $35=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($33)-($35);
      var $36=$p3_addr;
      var $arrayidx33=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $38=$p1_addr;
      var $arrayidx34=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($37)-($39);
      var $mul36=($sub32)*($sub35);
      var $40=$p2_addr;
      var $arrayidx37=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $42=$p1_addr;
      var $arrayidx38=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($41)-($43);
      var $44=$p3_addr;
      var $arrayidx40=(($44)|0);
      var $45=HEAPF64[(($arrayidx40)>>3)];
      var $46=$p1_addr;
      var $arrayidx41=(($46)|0);
      var $47=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($45)-($47);
      var $mul43=($sub39)*($sub42);
      var $sub44=($mul36)-($mul43);
      var $arrayidx45=(($pp+16)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      var $arrayidx46=(($pp)|0);
      var $48=HEAPF64[(($arrayidx46)>>3)];
      var $arrayidx47=(($pp)|0);
      var $49=HEAPF64[(($arrayidx47)>>3)];
      var $mul48=($48)*($49);
      var $arrayidx49=(($pp+8)|0);
      var $50=HEAPF64[(($arrayidx49)>>3)];
      var $arrayidx50=(($pp+8)|0);
      var $51=HEAPF64[(($arrayidx50)>>3)];
      var $mul51=($50)*($51);
      var $add=($mul48)+($mul51);
      var $arrayidx52=(($pp+16)|0);
      var $52=HEAPF64[(($arrayidx52)>>3)];
      var $arrayidx53=(($pp+16)|0);
      var $53=HEAPF64[(($arrayidx53)>>3)];
      var $mul54=($52)*($53);
      var $add55=($add)+($mul54);
      var $call=Math.sqrt($add55);
      $temp=$call;
      var $54=$temp;
      var $cmp=$54 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $55=HEAP32[((_stderr)>>2)];
      var $call56=_fprintf($55, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $56=HEAP32[((_stderr)>>2)];
      var $call57=_fprintf($56, ((7280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $57=HEAP32[((_stderr)>>2)];
      var $call58=_fprintf($57, ((7208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $arrayidx59=(($pp)|0);
      var $58=HEAPF64[(($arrayidx59)>>3)];
      var $59=$temp;
      var $div=($58)/($59);
      var $arrayidx60=(($pp)|0);
      HEAPF64[(($arrayidx60)>>3)]=$div;
      var $arrayidx61=(($pp+8)|0);
      var $60=HEAPF64[(($arrayidx61)>>3)];
      var $61=$temp;
      var $div62=($60)/($61);
      var $arrayidx63=(($pp+8)|0);
      HEAPF64[(($arrayidx63)>>3)]=$div62;
      var $arrayidx64=(($pp+16)|0);
      var $62=HEAPF64[(($arrayidx64)>>3)];
      var $63=$temp;
      var $div65=($62)/($63);
      var $arrayidx66=(($pp+16)|0);
      HEAPF64[(($arrayidx66)>>3)]=$div65;
      var $arrayidx67=(($pp)|0);
      var $64=HEAPF64[(($arrayidx67)>>3)];
      var $65=$p_addr;
      var $arrayidx68=(($65)|0);
      var $66=HEAPF64[(($arrayidx68)>>3)];
      var $67=$p1_addr;
      var $arrayidx69=(($67)|0);
      var $68=HEAPF64[(($arrayidx69)>>3)];
      var $sub70=($66)-($68);
      var $mul71=($64)*($sub70);
      var $arrayidx72=(($pp+8)|0);
      var $69=HEAPF64[(($arrayidx72)>>3)];
      var $70=$p_addr;
      var $arrayidx73=(($70+8)|0);
      var $71=HEAPF64[(($arrayidx73)>>3)];
      var $72=$p1_addr;
      var $arrayidx74=(($72+8)|0);
      var $73=HEAPF64[(($arrayidx74)>>3)];
      var $sub75=($71)-($73);
      var $mul76=($69)*($sub75);
      var $add77=($mul71)+($mul76);
      var $arrayidx78=(($pp+16)|0);
      var $74=HEAPF64[(($arrayidx78)>>3)];
      var $75=$p_addr;
      var $arrayidx79=(($75+16)|0);
      var $76=HEAPF64[(($arrayidx79)>>3)];
      var $77=$p1_addr;
      var $arrayidx80=(($77+16)|0);
      var $78=HEAPF64[(($arrayidx80)>>3)];
      var $sub81=($76)-($78);
      var $mul82=($74)*($sub81);
      var $add83=($add77)+($mul82);
      $t=$add83;
      var $79=$p_addr;
      var $arrayidx84=(($79)|0);
      var $80=HEAPF64[(($arrayidx84)>>3)];
      var $arrayidx85=(($pp)|0);
      var $81=HEAPF64[(($arrayidx85)>>3)];
      var $82=$t;
      var $mul86=($81)*($82);
      var $sub87=($80)-($mul86);
      var $arrayidx88=(($pn)|0);
      HEAPF64[(($arrayidx88)>>3)]=$sub87;
      var $83=$p_addr;
      var $arrayidx89=(($83+8)|0);
      var $84=HEAPF64[(($arrayidx89)>>3)];
      var $arrayidx90=(($pp+8)|0);
      var $85=HEAPF64[(($arrayidx90)>>3)];
      var $86=$t;
      var $mul91=($85)*($86);
      var $sub92=($84)-($mul91);
      var $arrayidx93=(($pn+8)|0);
      HEAPF64[(($arrayidx93)>>3)]=$sub92;
      var $87=$p_addr;
      var $arrayidx94=(($87+16)|0);
      var $88=HEAPF64[(($arrayidx94)>>3)];
      var $arrayidx95=(($pp+16)|0);
      var $89=HEAPF64[(($arrayidx95)>>3)];
      var $90=$t;
      var $mul96=($89)*($90);
      var $sub97=($88)-($mul96);
      var $arrayidx98=(($pn+16)|0);
      HEAPF64[(($arrayidx98)>>3)]=$sub97;
      var $91=$p1_addr;
      var $92=$p2_addr;
      var $93=$p3_addr;
      var $94=$p_addr;
      var $call99=_parallelogram_contains_point_3d($91, $92, $93, $94);
      $inside=$call99;
      var $95=$inside;
      var $cmp100=(($95)|(0))==1;
      if ($cmp100) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arrayidx102=(($pn)|0);
      var $96=HEAPF64[(($arrayidx102)>>3)];
      var $97=$p_addr;
      var $arrayidx103=(($97)|0);
      var $98=HEAPF64[(($arrayidx103)>>3)];
      var $sub104=($96)-($98);
      var $99=Math.pow($sub104, 2);
      var $arrayidx105=(($pn+8)|0);
      var $100=HEAPF64[(($arrayidx105)>>3)];
      var $101=$p_addr;
      var $arrayidx106=(($101+8)|0);
      var $102=HEAPF64[(($arrayidx106)>>3)];
      var $sub107=($100)-($102);
      var $103=Math.pow($sub107, 2);
      var $add108=($99)+($103);
      var $arrayidx109=(($pn+16)|0);
      var $104=HEAPF64[(($arrayidx109)>>3)];
      var $105=$p_addr;
      var $arrayidx110=(($105+16)|0);
      var $106=HEAPF64[(($arrayidx110)>>3)];
      var $sub111=($104)-($106);
      var $107=Math.pow($sub111, 2);
      var $add112=($add108)+($107);
      var $call113=Math.sqrt($add112);
      $dist=$call113;
      var $108=$dist;
      $retval=$108;
      label = 13; break;
    case 6: 
      var $109=$p2_addr;
      var $arrayidx115=(($109)|0);
      var $110=HEAPF64[(($arrayidx115)>>3)];
      var $111=$p3_addr;
      var $arrayidx116=(($111)|0);
      var $112=HEAPF64[(($arrayidx116)>>3)];
      var $add117=($110)+($112);
      var $113=$p1_addr;
      var $arrayidx118=(($113)|0);
      var $114=HEAPF64[(($arrayidx118)>>3)];
      var $sub119=($add117)-($114);
      var $arrayidx120=(($p4)|0);
      HEAPF64[(($arrayidx120)>>3)]=$sub119;
      var $115=$p2_addr;
      var $arrayidx121=(($115+8)|0);
      var $116=HEAPF64[(($arrayidx121)>>3)];
      var $117=$p3_addr;
      var $arrayidx122=(($117+8)|0);
      var $118=HEAPF64[(($arrayidx122)>>3)];
      var $add123=($116)+($118);
      var $119=$p1_addr;
      var $arrayidx124=(($119+8)|0);
      var $120=HEAPF64[(($arrayidx124)>>3)];
      var $sub125=($add123)-($120);
      var $arrayidx126=(($p4+8)|0);
      HEAPF64[(($arrayidx126)>>3)]=$sub125;
      var $121=$p2_addr;
      var $arrayidx127=(($121+16)|0);
      var $122=HEAPF64[(($arrayidx127)>>3)];
      var $123=$p3_addr;
      var $arrayidx128=(($123+16)|0);
      var $124=HEAPF64[(($arrayidx128)>>3)];
      var $add129=($122)+($124);
      var $125=$p1_addr;
      var $arrayidx130=(($125+16)|0);
      var $126=HEAPF64[(($arrayidx130)>>3)];
      var $sub131=($add129)-($126);
      var $arrayidx132=(($p4+16)|0);
      HEAPF64[(($arrayidx132)>>3)]=$sub131;
      var $127=$p1_addr;
      var $128=$p3_addr;
      var $129=$p_addr;
      var $call133=_segment_point_dist_3d($127, $128, $129);
      $dis13=$call133;
      var $130=$dis13;
      $dist=$130;
      var $131=$p3_addr;
      var $arraydecay=(($p4)|0);
      var $132=$p_addr;
      var $call134=_segment_point_dist_3d($131, $arraydecay, $132);
      $dis34=$call134;
      var $133=$dis34;
      var $134=$dist;
      var $cmp135=$133 < $134;
      if ($cmp135) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $135=$dis34;
      $dist=$135;
      label = 8; break;
    case 8: 
      var $arraydecay138=(($p4)|0);
      var $136=$p2_addr;
      var $137=$p_addr;
      var $call139=_segment_point_dist_3d($arraydecay138, $136, $137);
      $dis42=$call139;
      var $138=$dis42;
      var $139=$dist;
      var $cmp140=$138 < $139;
      if ($cmp140) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $140=$dis42;
      $dist=$140;
      label = 10; break;
    case 10: 
      var $141=$p2_addr;
      var $142=$p1_addr;
      var $143=$p_addr;
      var $call143=_segment_point_dist_3d($141, $142, $143);
      $dis21=$call143;
      var $144=$dis21;
      var $145=$dist;
      var $cmp144=$144 < $145;
      if ($cmp144) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $146=$dis21;
      $dist=$146;
      label = 12; break;
    case 12: 
      var $147=$dist;
      $retval=$147;
      label = 13; break;
    case 13: 
      var $148=$retval;
      STACKTOP = __stackBase__;
      return $148;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parallelogram_point_dist_3d"] = _parallelogram_point_dist_3d;
function _perm_check($n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $p_addr;
      var $found;
      var $i;
      var $seek;
      $n_addr=$n;
      $p_addr=$p;
      $seek=1;
      label = 3; break;
    case 3: 
      var $0=$seek;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      $found=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $4=$i;
      var $5=$p_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      var $7=$seek;
      var $cmp4=(($6)|(0))==(($7)|(0));
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $found=1;
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $9=$found;
      var $tobool=(($9)|(0))!=0;
      if ($tobool) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $retval=0;
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $10=$seek;
      var $inc8=((($10)+(1))|0);
      $seek=$inc8;
      label = 3; break;
    case 14: 
      $retval=1;
      label = 15; break;
    case 15: 
      var $11=$retval;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
Module["_perm_check"] = _perm_check;
function _segment_point_dist_3d($p1, $p2, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $bot;
      var $dist;
      var $i;
      var $t;
      var $pn=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(3, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $t=0;
      label = 13; break;
    case 4: 
      $bot=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp=(($2)|(0)) < 3;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $3=$bot;
      var $4=$i;
      var $5=$p2_addr;
      var $arrayidx=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$i;
      var $8=$p1_addr;
      var $arrayidx1=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($6)-($9);
      var $10=Math.pow($sub, 2);
      var $add=($3)+($10);
      $bot=$add;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      $t=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $12=$i;
      var $cmp3=(($12)|(0)) < 3;
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $13=$t;
      var $14=$i;
      var $15=$p_addr;
      var $arrayidx5=(($15+($14<<3))|0);
      var $16=HEAPF64[(($arrayidx5)>>3)];
      var $17=$i;
      var $18=$p1_addr;
      var $arrayidx6=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($16)-($19);
      var $20=$i;
      var $21=$p2_addr;
      var $arrayidx8=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx8)>>3)];
      var $23=$i;
      var $24=$p1_addr;
      var $arrayidx9=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($22)-($25);
      var $mul=($sub7)*($sub10);
      var $add11=($13)+($mul);
      $t=$add11;
      label = 11; break;
    case 11: 
      var $26=$i;
      var $inc13=((($26)+(1))|0);
      $i=$inc13;
      label = 9; break;
    case 12: 
      var $27=$t;
      var $28=$bot;
      var $div=($27)/($28);
      $t=$div;
      var $29=$t;
      var $call15=_r8_max($29, 0);
      $t=$call15;
      var $30=$t;
      var $call16=_r8_min($30, 1);
      $t=$call16;
      label = 13; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $31=$i;
      var $cmp18=(($31)|(0)) < 3;
      if ($cmp18) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $32=$i;
      var $33=$p1_addr;
      var $arrayidx20=(($33+($32<<3))|0);
      var $34=HEAPF64[(($arrayidx20)>>3)];
      var $35=$t;
      var $36=$i;
      var $37=$p2_addr;
      var $arrayidx21=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx21)>>3)];
      var $39=$i;
      var $40=$p1_addr;
      var $arrayidx22=(($40+($39<<3))|0);
      var $41=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($38)-($41);
      var $mul24=($35)*($sub23);
      var $add25=($34)+($mul24);
      var $42=$i;
      var $arrayidx26=(($pn+($42<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$add25;
      label = 16; break;
    case 16: 
      var $43=$i;
      var $inc28=((($43)+(1))|0);
      $i=$inc28;
      label = 14; break;
    case 17: 
      $dist=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $44=$i;
      var $cmp31=(($44)|(0)) < 3;
      if ($cmp31) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $45=$dist;
      var $46=$i;
      var $47=$p_addr;
      var $arrayidx33=(($47+($46<<3))|0);
      var $48=HEAPF64[(($arrayidx33)>>3)];
      var $49=$i;
      var $arrayidx34=(($pn+($49<<3))|0);
      var $50=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($48)-($50);
      var $51=Math.pow($sub35, 2);
      var $add36=($45)+($51);
      $dist=$add36;
      label = 20; break;
    case 20: 
      var $52=$i;
      var $inc38=((($52)+(1))|0);
      $i=$inc38;
      label = 18; break;
    case 21: 
      var $53=$dist;
      var $call40=Math.sqrt($53);
      $dist=$call40;
      var $54=$dist;
      STACKTOP = __stackBase__;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_point_dist_3d"] = _segment_point_dist_3d;
function _parallelepiped_contains_point_3d($p1, $p2, $p3, $p4, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $p_addr;
      var $dot;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p1_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p2_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p1_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p1_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $16=$p2_addr;
      var $arrayidx12=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $18=$p1_addr;
      var $arrayidx13=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($19);
      var $20=$p_addr;
      var $arrayidx15=(($20+16)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$p1_addr;
      var $arrayidx16=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($21)-($23);
      var $mul18=($sub14)*($sub17);
      var $add19=($add)+($mul18);
      $dot=$add19;
      var $24=$dot;
      var $cmp=$24 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 18; break;
    case 4: 
      var $25=$p2_addr;
      var $arrayidx20=(($25)|0);
      var $26=HEAPF64[(($arrayidx20)>>3)];
      var $27=$p1_addr;
      var $arrayidx21=(($27)|0);
      var $28=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($26)-($28);
      var $29=Math.pow($sub22, 2);
      var $30=$p2_addr;
      var $arrayidx23=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx23)>>3)];
      var $32=$p1_addr;
      var $arrayidx24=(($32+8)|0);
      var $33=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($31)-($33);
      var $34=Math.pow($sub25, 2);
      var $add26=($29)+($34);
      var $35=$p2_addr;
      var $arrayidx27=(($35+16)|0);
      var $36=HEAPF64[(($arrayidx27)>>3)];
      var $37=$p1_addr;
      var $arrayidx28=(($37+16)|0);
      var $38=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($36)-($38);
      var $39=Math.pow($sub29, 2);
      var $add30=($add26)+($39);
      var $40=$dot;
      var $cmp31=$add30 < $40;
      if ($cmp31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 18; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $41=$p3_addr;
      var $arrayidx34=(($41)|0);
      var $42=HEAPF64[(($arrayidx34)>>3)];
      var $43=$p1_addr;
      var $arrayidx35=(($43)|0);
      var $44=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($42)-($44);
      var $45=$p_addr;
      var $arrayidx37=(($45)|0);
      var $46=HEAPF64[(($arrayidx37)>>3)];
      var $47=$p1_addr;
      var $arrayidx38=(($47)|0);
      var $48=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($46)-($48);
      var $mul40=($sub36)*($sub39);
      var $49=$p3_addr;
      var $arrayidx41=(($49+8)|0);
      var $50=HEAPF64[(($arrayidx41)>>3)];
      var $51=$p1_addr;
      var $arrayidx42=(($51+8)|0);
      var $52=HEAPF64[(($arrayidx42)>>3)];
      var $sub43=($50)-($52);
      var $53=$p_addr;
      var $arrayidx44=(($53+8)|0);
      var $54=HEAPF64[(($arrayidx44)>>3)];
      var $55=$p1_addr;
      var $arrayidx45=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx45)>>3)];
      var $sub46=($54)-($56);
      var $mul47=($sub43)*($sub46);
      var $add48=($mul40)+($mul47);
      var $57=$p3_addr;
      var $arrayidx49=(($57+16)|0);
      var $58=HEAPF64[(($arrayidx49)>>3)];
      var $59=$p1_addr;
      var $arrayidx50=(($59+16)|0);
      var $60=HEAPF64[(($arrayidx50)>>3)];
      var $sub51=($58)-($60);
      var $61=$p_addr;
      var $arrayidx52=(($61+16)|0);
      var $62=HEAPF64[(($arrayidx52)>>3)];
      var $63=$p1_addr;
      var $arrayidx53=(($63+16)|0);
      var $64=HEAPF64[(($arrayidx53)>>3)];
      var $sub54=($62)-($64);
      var $mul55=($sub51)*($sub54);
      var $add56=($add48)+($mul55);
      $dot=$add56;
      var $65=$dot;
      var $cmp57=$65 < 0;
      if ($cmp57) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $retval=0;
      label = 18; break;
    case 9: 
      var $66=$p3_addr;
      var $arrayidx60=(($66)|0);
      var $67=HEAPF64[(($arrayidx60)>>3)];
      var $68=$p1_addr;
      var $arrayidx61=(($68)|0);
      var $69=HEAPF64[(($arrayidx61)>>3)];
      var $sub62=($67)-($69);
      var $70=Math.pow($sub62, 2);
      var $71=$p3_addr;
      var $arrayidx63=(($71+8)|0);
      var $72=HEAPF64[(($arrayidx63)>>3)];
      var $73=$p1_addr;
      var $arrayidx64=(($73+8)|0);
      var $74=HEAPF64[(($arrayidx64)>>3)];
      var $sub65=($72)-($74);
      var $75=Math.pow($sub65, 2);
      var $add66=($70)+($75);
      var $76=$p3_addr;
      var $arrayidx67=(($76+16)|0);
      var $77=HEAPF64[(($arrayidx67)>>3)];
      var $78=$p1_addr;
      var $arrayidx68=(($78+16)|0);
      var $79=HEAPF64[(($arrayidx68)>>3)];
      var $sub69=($77)-($79);
      var $80=Math.pow($sub69, 2);
      var $add70=($add66)+($80);
      var $81=$dot;
      var $cmp71=$add70 < $81;
      if ($cmp71) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $retval=0;
      label = 18; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $82=$p4_addr;
      var $arrayidx75=(($82)|0);
      var $83=HEAPF64[(($arrayidx75)>>3)];
      var $84=$p1_addr;
      var $arrayidx76=(($84)|0);
      var $85=HEAPF64[(($arrayidx76)>>3)];
      var $sub77=($83)-($85);
      var $86=$p_addr;
      var $arrayidx78=(($86)|0);
      var $87=HEAPF64[(($arrayidx78)>>3)];
      var $88=$p1_addr;
      var $arrayidx79=(($88)|0);
      var $89=HEAPF64[(($arrayidx79)>>3)];
      var $sub80=($87)-($89);
      var $mul81=($sub77)*($sub80);
      var $90=$p4_addr;
      var $arrayidx82=(($90+8)|0);
      var $91=HEAPF64[(($arrayidx82)>>3)];
      var $92=$p1_addr;
      var $arrayidx83=(($92+8)|0);
      var $93=HEAPF64[(($arrayidx83)>>3)];
      var $sub84=($91)-($93);
      var $94=$p_addr;
      var $arrayidx85=(($94+8)|0);
      var $95=HEAPF64[(($arrayidx85)>>3)];
      var $96=$p1_addr;
      var $arrayidx86=(($96+8)|0);
      var $97=HEAPF64[(($arrayidx86)>>3)];
      var $sub87=($95)-($97);
      var $mul88=($sub84)*($sub87);
      var $add89=($mul81)+($mul88);
      var $98=$p4_addr;
      var $arrayidx90=(($98+16)|0);
      var $99=HEAPF64[(($arrayidx90)>>3)];
      var $100=$p1_addr;
      var $arrayidx91=(($100+16)|0);
      var $101=HEAPF64[(($arrayidx91)>>3)];
      var $sub92=($99)-($101);
      var $102=$p_addr;
      var $arrayidx93=(($102+16)|0);
      var $103=HEAPF64[(($arrayidx93)>>3)];
      var $104=$p1_addr;
      var $arrayidx94=(($104+16)|0);
      var $105=HEAPF64[(($arrayidx94)>>3)];
      var $sub95=($103)-($105);
      var $mul96=($sub92)*($sub95);
      var $add97=($add89)+($mul96);
      $dot=$add97;
      var $106=$dot;
      var $cmp98=$106 < 0;
      if ($cmp98) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $retval=0;
      label = 18; break;
    case 14: 
      var $107=$p4_addr;
      var $arrayidx101=(($107)|0);
      var $108=HEAPF64[(($arrayidx101)>>3)];
      var $109=$p1_addr;
      var $arrayidx102=(($109)|0);
      var $110=HEAPF64[(($arrayidx102)>>3)];
      var $sub103=($108)-($110);
      var $111=Math.pow($sub103, 2);
      var $112=$p4_addr;
      var $arrayidx104=(($112+8)|0);
      var $113=HEAPF64[(($arrayidx104)>>3)];
      var $114=$p1_addr;
      var $arrayidx105=(($114+8)|0);
      var $115=HEAPF64[(($arrayidx105)>>3)];
      var $sub106=($113)-($115);
      var $116=Math.pow($sub106, 2);
      var $add107=($111)+($116);
      var $117=$p4_addr;
      var $arrayidx108=(($117+16)|0);
      var $118=HEAPF64[(($arrayidx108)>>3)];
      var $119=$p1_addr;
      var $arrayidx109=(($119+16)|0);
      var $120=HEAPF64[(($arrayidx109)>>3)];
      var $sub110=($118)-($120);
      var $121=Math.pow($sub110, 2);
      var $add111=($add107)+($121);
      var $122=$dot;
      var $cmp112=$add111 < $122;
      if ($cmp112) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=0;
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      $retval=1;
      label = 18; break;
    case 18: 
      var $123=$retval;
      return $123;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parallelepiped_contains_point_3d"] = _parallelepiped_contains_point_3d;
function _parallelepiped_point_dist_3d($p1, $p2, $p3, $p4, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $p_addr;
      var $dis;
      var $dist;
      var $p5=__stackBase__;
      var $p6=(__stackBase__)+(24);
      var $p7=(__stackBase__)+(48);
      var $p8=(__stackBase__)+(72);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $p_addr=$p;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p3_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $add=($1)+($3);
      var $4=$p1_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($add)-($5);
      var $arrayidx3=(($p5)|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub;
      var $6=$p2_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $8=$p3_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $add6=($7)+($9);
      var $10=$p1_addr;
      var $arrayidx7=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($add6)-($11);
      var $arrayidx9=(($p5+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      var $12=$p2_addr;
      var $arrayidx10=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx10)>>3)];
      var $14=$p3_addr;
      var $arrayidx11=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx11)>>3)];
      var $add12=($13)+($15);
      var $16=$p1_addr;
      var $arrayidx13=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($add12)-($17);
      var $arrayidx15=(($p5+16)|0);
      HEAPF64[(($arrayidx15)>>3)]=$sub14;
      var $18=$p2_addr;
      var $arrayidx16=(($18)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $20=$p4_addr;
      var $arrayidx17=(($20)|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $add18=($19)+($21);
      var $22=$p1_addr;
      var $arrayidx19=(($22)|0);
      var $23=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($add18)-($23);
      var $arrayidx21=(($p6)|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $24=$p2_addr;
      var $arrayidx22=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx22)>>3)];
      var $26=$p4_addr;
      var $arrayidx23=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx23)>>3)];
      var $add24=($25)+($27);
      var $28=$p1_addr;
      var $arrayidx25=(($28+8)|0);
      var $29=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($add24)-($29);
      var $arrayidx27=(($p6+8)|0);
      HEAPF64[(($arrayidx27)>>3)]=$sub26;
      var $30=$p2_addr;
      var $arrayidx28=(($30+16)|0);
      var $31=HEAPF64[(($arrayidx28)>>3)];
      var $32=$p4_addr;
      var $arrayidx29=(($32+16)|0);
      var $33=HEAPF64[(($arrayidx29)>>3)];
      var $add30=($31)+($33);
      var $34=$p1_addr;
      var $arrayidx31=(($34+16)|0);
      var $35=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($add30)-($35);
      var $arrayidx33=(($p6+16)|0);
      HEAPF64[(($arrayidx33)>>3)]=$sub32;
      var $36=$p3_addr;
      var $arrayidx34=(($36)|0);
      var $37=HEAPF64[(($arrayidx34)>>3)];
      var $38=$p4_addr;
      var $arrayidx35=(($38)|0);
      var $39=HEAPF64[(($arrayidx35)>>3)];
      var $add36=($37)+($39);
      var $40=$p1_addr;
      var $arrayidx37=(($40)|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $sub38=($add36)-($41);
      var $arrayidx39=(($p7)|0);
      HEAPF64[(($arrayidx39)>>3)]=$sub38;
      var $42=$p3_addr;
      var $arrayidx40=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx40)>>3)];
      var $44=$p4_addr;
      var $arrayidx41=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx41)>>3)];
      var $add42=($43)+($45);
      var $46=$p1_addr;
      var $arrayidx43=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=($add42)-($47);
      var $arrayidx45=(($p7+8)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      var $48=$p3_addr;
      var $arrayidx46=(($48+16)|0);
      var $49=HEAPF64[(($arrayidx46)>>3)];
      var $50=$p4_addr;
      var $arrayidx47=(($50+16)|0);
      var $51=HEAPF64[(($arrayidx47)>>3)];
      var $add48=($49)+($51);
      var $52=$p1_addr;
      var $arrayidx49=(($52+16)|0);
      var $53=HEAPF64[(($arrayidx49)>>3)];
      var $sub50=($add48)-($53);
      var $arrayidx51=(($p7+16)|0);
      HEAPF64[(($arrayidx51)>>3)]=$sub50;
      var $54=$p2_addr;
      var $arrayidx52=(($54)|0);
      var $55=HEAPF64[(($arrayidx52)>>3)];
      var $56=$p3_addr;
      var $arrayidx53=(($56)|0);
      var $57=HEAPF64[(($arrayidx53)>>3)];
      var $add54=($55)+($57);
      var $58=$p4_addr;
      var $arrayidx55=(($58)|0);
      var $59=HEAPF64[(($arrayidx55)>>3)];
      var $add56=($add54)+($59);
      var $60=$p1_addr;
      var $arrayidx57=(($60)|0);
      var $61=HEAPF64[(($arrayidx57)>>3)];
      var $mul=($61)*(2);
      var $sub58=($add56)-($mul);
      var $arrayidx59=(($p8)|0);
      HEAPF64[(($arrayidx59)>>3)]=$sub58;
      var $62=$p2_addr;
      var $arrayidx60=(($62+8)|0);
      var $63=HEAPF64[(($arrayidx60)>>3)];
      var $64=$p3_addr;
      var $arrayidx61=(($64+8)|0);
      var $65=HEAPF64[(($arrayidx61)>>3)];
      var $add62=($63)+($65);
      var $66=$p4_addr;
      var $arrayidx63=(($66+8)|0);
      var $67=HEAPF64[(($arrayidx63)>>3)];
      var $add64=($add62)+($67);
      var $68=$p1_addr;
      var $arrayidx65=(($68+8)|0);
      var $69=HEAPF64[(($arrayidx65)>>3)];
      var $mul66=($69)*(2);
      var $sub67=($add64)-($mul66);
      var $arrayidx68=(($p8+8)|0);
      HEAPF64[(($arrayidx68)>>3)]=$sub67;
      var $70=$p2_addr;
      var $arrayidx69=(($70+16)|0);
      var $71=HEAPF64[(($arrayidx69)>>3)];
      var $72=$p3_addr;
      var $arrayidx70=(($72+16)|0);
      var $73=HEAPF64[(($arrayidx70)>>3)];
      var $add71=($71)+($73);
      var $74=$p4_addr;
      var $arrayidx72=(($74+16)|0);
      var $75=HEAPF64[(($arrayidx72)>>3)];
      var $add73=($add71)+($75);
      var $76=$p1_addr;
      var $arrayidx74=(($76+16)|0);
      var $77=HEAPF64[(($arrayidx74)>>3)];
      var $mul75=($77)*(2);
      var $sub76=($add73)-($mul75);
      var $arrayidx77=(($p8+16)|0);
      HEAPF64[(($arrayidx77)>>3)]=$sub76;
      var $78=$p1_addr;
      var $79=$p2_addr;
      var $80=$p3_addr;
      var $81=$p_addr;
      var $call=_parallelogram_point_dist_3d($78, $79, $80, $81);
      $dis=$call;
      var $82=$dis;
      $dist=$82;
      var $83=$p1_addr;
      var $84=$p2_addr;
      var $85=$p4_addr;
      var $86=$p_addr;
      var $call78=_parallelogram_point_dist_3d($83, $84, $85, $86);
      $dis=$call78;
      var $87=$dis;
      var $88=$dist;
      var $cmp=$87 < $88;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $89=$dis;
      $dist=$89;
      label = 4; break;
    case 4: 
      var $90=$p1_addr;
      var $91=$p3_addr;
      var $92=$p4_addr;
      var $93=$p_addr;
      var $call79=_parallelogram_point_dist_3d($90, $91, $92, $93);
      $dis=$call79;
      var $94=$dis;
      var $95=$dist;
      var $cmp80=$94 < $95;
      if ($cmp80) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $96=$dis;
      $dist=$96;
      label = 6; break;
    case 6: 
      var $arraydecay=(($p8)|0);
      var $arraydecay83=(($p5)|0);
      var $arraydecay84=(($p6)|0);
      var $97=$p_addr;
      var $call85=_parallelogram_point_dist_3d($arraydecay, $arraydecay83, $arraydecay84, $97);
      $dis=$call85;
      var $98=$dis;
      var $99=$dist;
      var $cmp86=$98 < $99;
      if ($cmp86) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $100=$dis;
      $dist=$100;
      label = 8; break;
    case 8: 
      var $arraydecay89=(($p8)|0);
      var $arraydecay90=(($p5)|0);
      var $arraydecay91=(($p7)|0);
      var $101=$p_addr;
      var $call92=_parallelogram_point_dist_3d($arraydecay89, $arraydecay90, $arraydecay91, $101);
      $dis=$call92;
      var $102=$dis;
      var $103=$dist;
      var $cmp93=$102 < $103;
      if ($cmp93) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $104=$dis;
      $dist=$104;
      label = 10; break;
    case 10: 
      var $arraydecay96=(($p8)|0);
      var $arraydecay97=(($p6)|0);
      var $arraydecay98=(($p7)|0);
      var $105=$p_addr;
      var $call99=_parallelogram_point_dist_3d($arraydecay96, $arraydecay97, $arraydecay98, $105);
      $dis=$call99;
      var $106=$dis;
      var $107=$dist;
      var $cmp100=$106 < $107;
      if ($cmp100) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $108=$dis;
      $dist=$108;
      label = 12; break;
    case 12: 
      var $109=$dist;
      STACKTOP = __stackBase__;
      return $109;
    default: assert(0, "bad label: " + label);
  }
}
Module["_parallelepiped_point_dist_3d"] = _parallelepiped_point_dist_3d;
function _perm_inv($n, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $p_addr;
      var $i;
      var $i0;
      var $i1;
      var $i2;
      var $is;
      $n_addr=$n;
      $p_addr=$p;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((7152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $4=$n_addr;
      var $call2=_fprintf($3, ((7096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$n_addr;
      var $6=$p_addr;
      var $call3=_perm_check($5, $6);
      var $tobool=(($call3)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($7, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($8, ((7152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $call7=_fprintf($9, ((7016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($10, ((6936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      $is=1;
      $i=1;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $12=$n_addr;
      var $cmp10=(($11)|(0)) <= (($12)|(0));
      if ($cmp10) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $13=$i;
      var $sub=((($13)-(1))|0);
      var $14=$p_addr;
      var $arrayidx=(($14+($sub<<2))|0);
      var $15=HEAP32[(($arrayidx)>>2)];
      $i1=$15;
      label = 9; break;
    case 9: 
      var $16=$i;
      var $17=$i1;
      var $cmp11=(($16)|(0)) < (($17)|(0));
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $18=$i1;
      var $sub12=((($18)-(1))|0);
      var $19=$p_addr;
      var $arrayidx13=(($19+($sub12<<2))|0);
      var $20=HEAP32[(($arrayidx13)>>2)];
      $i2=$20;
      var $21=$i2;
      var $sub14=(((-$21))|0);
      var $22=$i1;
      var $sub15=((($22)-(1))|0);
      var $23=$p_addr;
      var $arrayidx16=(($23+($sub15<<2))|0);
      HEAP32[(($arrayidx16)>>2)]=$sub14;
      var $24=$i2;
      $i1=$24;
      label = 9; break;
    case 11: 
      var $25=$i;
      var $sub17=((($25)-(1))|0);
      var $26=$p_addr;
      var $arrayidx18=(($26+($sub17<<2))|0);
      var $27=HEAP32[(($arrayidx18)>>2)];
      var $call19=_i4_sign($27);
      var $sub20=(((-$call19))|0);
      $is=$sub20;
      var $28=$is;
      var $call21=_i4_sign($28);
      var $29=$i;
      var $sub22=((($29)-(1))|0);
      var $30=$p_addr;
      var $arrayidx23=(($30+($sub22<<2))|0);
      var $31=HEAP32[(($arrayidx23)>>2)];
      var $call24=Math.abs($31);
      var $mul=(Math.imul($call21,$call24)|0);
      var $32=$i;
      var $sub25=((($32)-(1))|0);
      var $33=$p_addr;
      var $arrayidx26=(($33+($sub25<<2))|0);
      HEAP32[(($arrayidx26)>>2)]=$mul;
      label = 12; break;
    case 12: 
      var $34=$i;
      var $inc=((($34)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 13: 
      $i=1;
      label = 14; break;
    case 14: 
      var $35=$i;
      var $36=$n_addr;
      var $cmp28=(($35)|(0)) <= (($36)|(0));
      if ($cmp28) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $37=$i;
      var $sub30=((($37)-(1))|0);
      var $38=$p_addr;
      var $arrayidx31=(($38+($sub30<<2))|0);
      var $39=HEAP32[(($arrayidx31)>>2)];
      var $sub32=(((-$39))|0);
      $i1=$sub32;
      var $40=$i1;
      var $cmp33=0 <= (($40)|(0));
      if ($cmp33) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $41=$i;
      $i0=$41;
      label = 17; break;
    case 17: 
      var $42=$i1;
      var $sub36=((($42)-(1))|0);
      var $43=$p_addr;
      var $arrayidx37=(($43+($sub36<<2))|0);
      var $44=HEAP32[(($arrayidx37)>>2)];
      $i2=$44;
      var $45=$i0;
      var $46=$i1;
      var $sub38=((($46)-(1))|0);
      var $47=$p_addr;
      var $arrayidx39=(($47+($sub38<<2))|0);
      HEAP32[(($arrayidx39)>>2)]=$45;
      var $48=$i2;
      var $cmp40=(($48)|(0)) < 0;
      if ($cmp40) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $49=$i1;
      $i0=$49;
      var $50=$i2;
      $i1=$50;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $51=$i;
      var $inc46=((($51)+(1))|0);
      $i=$inc46;
      label = 14; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_perm_inv"] = _perm_inv;
function _plane_exp2imp_3d($p1, $p2, $p3, $a, $b, $c, $d) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  var $0=$p2_addr;
  var $arrayidx=(($0+8)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p1_addr;
  var $arrayidx1=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=$p3_addr;
  var $arrayidx2=(($4+16)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$p1_addr;
  var $arrayidx3=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($5)-($7);
  var $mul=($sub)*($sub4);
  var $8=$p2_addr;
  var $arrayidx5=(($8+16)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$p1_addr;
  var $arrayidx6=(($10+16)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($9)-($11);
  var $12=$p3_addr;
  var $arrayidx8=(($12+8)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$p1_addr;
  var $arrayidx9=(($14+8)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($13)-($15);
  var $mul11=($sub7)*($sub10);
  var $sub12=($mul)-($mul11);
  var $16=$a_addr;
  HEAPF64[(($16)>>3)]=$sub12;
  var $17=$p2_addr;
  var $arrayidx13=(($17+16)|0);
  var $18=HEAPF64[(($arrayidx13)>>3)];
  var $19=$p1_addr;
  var $arrayidx14=(($19+16)|0);
  var $20=HEAPF64[(($arrayidx14)>>3)];
  var $sub15=($18)-($20);
  var $21=$p3_addr;
  var $arrayidx16=(($21)|0);
  var $22=HEAPF64[(($arrayidx16)>>3)];
  var $23=$p1_addr;
  var $arrayidx17=(($23)|0);
  var $24=HEAPF64[(($arrayidx17)>>3)];
  var $sub18=($22)-($24);
  var $mul19=($sub15)*($sub18);
  var $25=$p2_addr;
  var $arrayidx20=(($25)|0);
  var $26=HEAPF64[(($arrayidx20)>>3)];
  var $27=$p1_addr;
  var $arrayidx21=(($27)|0);
  var $28=HEAPF64[(($arrayidx21)>>3)];
  var $sub22=($26)-($28);
  var $29=$p3_addr;
  var $arrayidx23=(($29+16)|0);
  var $30=HEAPF64[(($arrayidx23)>>3)];
  var $31=$p1_addr;
  var $arrayidx24=(($31+16)|0);
  var $32=HEAPF64[(($arrayidx24)>>3)];
  var $sub25=($30)-($32);
  var $mul26=($sub22)*($sub25);
  var $sub27=($mul19)-($mul26);
  var $33=$b_addr;
  HEAPF64[(($33)>>3)]=$sub27;
  var $34=$p2_addr;
  var $arrayidx28=(($34)|0);
  var $35=HEAPF64[(($arrayidx28)>>3)];
  var $36=$p1_addr;
  var $arrayidx29=(($36)|0);
  var $37=HEAPF64[(($arrayidx29)>>3)];
  var $sub30=($35)-($37);
  var $38=$p3_addr;
  var $arrayidx31=(($38+8)|0);
  var $39=HEAPF64[(($arrayidx31)>>3)];
  var $40=$p1_addr;
  var $arrayidx32=(($40+8)|0);
  var $41=HEAPF64[(($arrayidx32)>>3)];
  var $sub33=($39)-($41);
  var $mul34=($sub30)*($sub33);
  var $42=$p2_addr;
  var $arrayidx35=(($42+8)|0);
  var $43=HEAPF64[(($arrayidx35)>>3)];
  var $44=$p1_addr;
  var $arrayidx36=(($44+8)|0);
  var $45=HEAPF64[(($arrayidx36)>>3)];
  var $sub37=($43)-($45);
  var $46=$p3_addr;
  var $arrayidx38=(($46)|0);
  var $47=HEAPF64[(($arrayidx38)>>3)];
  var $48=$p1_addr;
  var $arrayidx39=(($48)|0);
  var $49=HEAPF64[(($arrayidx39)>>3)];
  var $sub40=($47)-($49);
  var $mul41=($sub37)*($sub40);
  var $sub42=($mul34)-($mul41);
  var $50=$c_addr;
  HEAPF64[(($50)>>3)]=$sub42;
  var $51=$p2_addr;
  var $arrayidx43=(($51)|0);
  var $52=HEAPF64[(($arrayidx43)>>3)];
  var $sub44=(-$52);
  var $53=$a_addr;
  var $54=HEAPF64[(($53)>>3)];
  var $mul45=($sub44)*($54);
  var $55=$p2_addr;
  var $arrayidx46=(($55+8)|0);
  var $56=HEAPF64[(($arrayidx46)>>3)];
  var $57=$b_addr;
  var $58=HEAPF64[(($57)>>3)];
  var $mul47=($56)*($58);
  var $sub48=($mul45)-($mul47);
  var $59=$p2_addr;
  var $arrayidx49=(($59+16)|0);
  var $60=HEAPF64[(($arrayidx49)>>3)];
  var $61=$c_addr;
  var $62=HEAPF64[(($61)>>3)];
  var $mul50=($60)*($62);
  var $sub51=($sub48)-($mul50);
  var $63=$d_addr;
  HEAPF64[(($63)>>3)]=$sub51;
  return;
}
Module["_plane_exp2imp_3d"] = _plane_exp2imp_3d;
function _plane_exp_grid_3d($p1, $p2, $p3, $ncor3, $line_num, $cor3, $lines, $maxcor3, $line_max, $ierror) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $ncor3_addr;
      var $line_num_addr;
      var $cor3_addr;
      var $lines_addr;
      var $maxcor3_addr;
      var $line_max_addr;
      var $ierror_addr;
      var $a;
      var $amax;
      var $amin;
      var $b;
      var $bmax;
      var $bmin;
      var $dot;
      var $i;
      var $j;
      var $k;
      var $nbase;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(24);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $ncor3_addr=$ncor3;
      $line_num_addr=$line_num;
      $cor3_addr=$cor3;
      $lines_addr=$lines;
      $maxcor3_addr=$maxcor3;
      $line_max_addr=$line_max;
      $ierror_addr=$ierror;
      $a=0;
      $amax=0;
      $amin=0;
      $b=0;
      $bmax=0;
      $bmin=0;
      $dot=0;
      var $0=$ierror_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$ncor3_addr;
      var $2=HEAP32[(($1)>>2)];
      var $cmp=(($2)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$ncor3_addr;
      HEAP32[(($3)>>2)]=0;
      label = 4; break;
    case 4: 
      var $4=$line_num_addr;
      var $5=HEAP32[(($4)>>2)];
      var $cmp1=(($5)|(0)) <= 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$line_num_addr;
      HEAP32[(($6)>>2)]=0;
      label = 6; break;
    case 6: 
      var $7=$ncor3_addr;
      var $8=HEAP32[(($7)>>2)];
      $nbase=$8;
      var $9=$p2_addr;
      var $arrayidx=(($9)|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $11=$p1_addr;
      var $arrayidx4=(($11)|0);
      var $12=HEAPF64[(($arrayidx4)>>3)];
      var $sub=($10)-($12);
      var $arrayidx5=(($v1)|0);
      HEAPF64[(($arrayidx5)>>3)]=$sub;
      var $13=$p2_addr;
      var $arrayidx6=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx6)>>3)];
      var $15=$p1_addr;
      var $arrayidx7=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($14)-($16);
      var $arrayidx9=(($v1+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      var $17=$p2_addr;
      var $arrayidx10=(($17+16)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $19=$p1_addr;
      var $arrayidx11=(($19+16)|0);
      var $20=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($18)-($20);
      var $arrayidx13=(($v1+16)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $arraydecay=(($v1)|0);
      _vector_unit_nd(3, $arraydecay);
      var $21=$p3_addr;
      var $arrayidx14=(($21)|0);
      var $22=HEAPF64[(($arrayidx14)>>3)];
      var $23=$p1_addr;
      var $arrayidx15=(($23)|0);
      var $24=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($22)-($24);
      var $arrayidx17=(($v2)|0);
      HEAPF64[(($arrayidx17)>>3)]=$sub16;
      var $25=$p3_addr;
      var $arrayidx18=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx18)>>3)];
      var $27=$p1_addr;
      var $arrayidx19=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($26)-($28);
      var $arrayidx21=(($v2+8)|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $29=$p3_addr;
      var $arrayidx22=(($29+16)|0);
      var $30=HEAPF64[(($arrayidx22)>>3)];
      var $31=$p1_addr;
      var $arrayidx23=(($31+16)|0);
      var $32=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($30)-($32);
      var $arrayidx25=(($v2+16)|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub24;
      var $arraydecay26=(($v1)|0);
      var $arraydecay27=(($v2)|0);
      var $call=_r8vec_dot_product(3, $arraydecay26, $arraydecay27);
      $dot=$call;
      $i=0;
      label = 7; break;
    case 7: 
      var $33=$i;
      var $cmp28=(($33)|(0)) < 3;
      if ($cmp28) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $34=$i;
      var $arrayidx29=(($v2+($34<<3))|0);
      var $35=HEAPF64[(($arrayidx29)>>3)];
      var $36=$dot;
      var $37=$i;
      var $arrayidx30=(($v1+($37<<3))|0);
      var $38=HEAPF64[(($arrayidx30)>>3)];
      var $mul=($36)*($38);
      var $sub31=($35)-($mul);
      var $39=$i;
      var $arrayidx32=(($v2+($39<<3))|0);
      HEAPF64[(($arrayidx32)>>3)]=$sub31;
      label = 9; break;
    case 9: 
      var $40=$i;
      var $inc=((($40)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $arraydecay33=(($v2)|0);
      _vector_unit_nd(3, $arraydecay33);
      var $41=$ncor3_addr;
      var $42=HEAP32[(($41)>>2)];
      var $cmp34=(($42)|(0))==0;
      if ($cmp34) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $amin=0;
      $amax=1;
      $bmin=0;
      $bmax=1;
      label = 24; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $43=$i;
      var $44=$ncor3_addr;
      var $45=HEAP32[(($44)>>2)];
      var $cmp37=(($43)|(0)) < (($45)|(0));
      if ($cmp37) { label = 14; break; } else { label = 23; break; }
    case 14: 
      $a=0;
      $b=0;
      $j=0;
      label = 15; break;
    case 15: 
      var $46=$j;
      var $cmp40=(($46)|(0)) < 3;
      if ($cmp40) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $47=$a;
      var $48=$j;
      var $arrayidx42=(($v1+($48<<3))|0);
      var $49=HEAPF64[(($arrayidx42)>>3)];
      var $50=$j;
      var $51=$i;
      var $mul43=((($51)*(3))&-1);
      var $add=((($50)+($mul43))|0);
      var $52=$cor3_addr;
      var $arrayidx44=(($52+($add<<3))|0);
      var $53=HEAPF64[(($arrayidx44)>>3)];
      var $mul45=($49)*($53);
      var $add46=($47)+($mul45);
      $a=$add46;
      var $54=$b;
      var $55=$j;
      var $arrayidx47=(($v2+($55<<3))|0);
      var $56=HEAPF64[(($arrayidx47)>>3)];
      var $57=$j;
      var $58=$i;
      var $mul48=((($58)*(3))&-1);
      var $add49=((($57)+($mul48))|0);
      var $59=$cor3_addr;
      var $arrayidx50=(($59+($add49<<3))|0);
      var $60=HEAPF64[(($arrayidx50)>>3)];
      var $mul51=($56)*($60);
      var $add52=($54)+($mul51);
      $b=$add52;
      label = 17; break;
    case 17: 
      var $61=$j;
      var $inc54=((($61)+(1))|0);
      $j=$inc54;
      label = 15; break;
    case 18: 
      var $62=$i;
      var $cmp56=(($62)|(0))==0;
      if ($cmp56) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $63=$a;
      $amin=$63;
      var $64=$a;
      $amax=$64;
      var $65=$b;
      $bmin=$65;
      var $66=$b;
      $bmax=$66;
      label = 21; break;
    case 20: 
      var $67=$amin;
      var $68=$a;
      var $call59=_r8_min($67, $68);
      $amin=$call59;
      var $69=$amax;
      var $70=$a;
      var $call60=_r8_max($69, $70);
      $amax=$call60;
      var $71=$bmin;
      var $72=$b;
      var $call61=_r8_min($71, $72);
      $bmin=$call61;
      var $73=$bmax;
      var $74=$b;
      var $call62=_r8_max($73, $74);
      $bmax=$call62;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $75=$i;
      var $inc65=((($75)+(1))|0);
      $i=$inc65;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $76=$maxcor3_addr;
      var $77=$ncor3_addr;
      var $78=HEAP32[(($77)>>2)];
      var $add68=((($78)+(25))|0);
      var $cmp69=(($76)|(0)) < (($add68)|(0));
      if ($cmp69) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $79=$ierror_addr;
      HEAP32[(($79)>>2)]=1;
      label = 63; break;
    case 26: 
      $j=1;
      label = 27; break;
    case 27: 
      var $80=$j;
      var $cmp73=(($80)|(0)) <= 5;
      if ($cmp73) { label = 28; break; } else { label = 38; break; }
    case 28: 
      var $81=$j;
      var $sub75=(((5)-($81))|0);
      var $conv=(($sub75)|(0));
      var $82=$bmin;
      var $mul76=($conv)*($82);
      var $83=$j;
      var $sub77=((($83)-(1))|0);
      var $conv78=(($sub77)|(0));
      var $84=$bmax;
      var $mul79=($conv78)*($84);
      var $add80=($mul76)+($mul79);
      var $div=($add80)/(4);
      $b=$div;
      $i=1;
      label = 29; break;
    case 29: 
      var $85=$i;
      var $cmp82=(($85)|(0)) <= 5;
      if ($cmp82) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $86=$i;
      var $sub85=(((5)-($86))|0);
      var $conv86=(($sub85)|(0));
      var $87=$amin;
      var $mul87=($conv86)*($87);
      var $88=$i;
      var $sub88=((($88)-(1))|0);
      var $conv89=(($sub88)|(0));
      var $89=$amax;
      var $mul90=($conv89)*($89);
      var $add91=($mul87)+($mul90);
      var $div92=($add91)/(4);
      $a=$div92;
      $k=0;
      label = 31; break;
    case 31: 
      var $90=$k;
      var $cmp94=(($90)|(0)) < 3;
      if ($cmp94) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $91=$a;
      var $92=$k;
      var $arrayidx97=(($v1+($92<<3))|0);
      var $93=HEAPF64[(($arrayidx97)>>3)];
      var $mul98=($91)*($93);
      var $94=$b;
      var $95=$k;
      var $arrayidx99=(($v2+($95<<3))|0);
      var $96=HEAPF64[(($arrayidx99)>>3)];
      var $mul100=($94)*($96);
      var $add101=($mul98)+($mul100);
      var $97=$k;
      var $98=$ncor3_addr;
      var $99=HEAP32[(($98)>>2)];
      var $mul102=((($99)*(3))&-1);
      var $add103=((($97)+($mul102))|0);
      var $100=$cor3_addr;
      var $arrayidx104=(($100+($add103<<3))|0);
      HEAPF64[(($arrayidx104)>>3)]=$add101;
      label = 33; break;
    case 33: 
      var $101=$k;
      var $inc106=((($101)+(1))|0);
      $k=$inc106;
      label = 31; break;
    case 34: 
      var $102=$ncor3_addr;
      var $103=HEAP32[(($102)>>2)];
      var $add108=((($103)+(1))|0);
      var $104=$ncor3_addr;
      HEAP32[(($104)>>2)]=$add108;
      label = 35; break;
    case 35: 
      var $105=$i;
      var $inc110=((($105)+(1))|0);
      $i=$inc110;
      label = 29; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $106=$j;
      var $inc113=((($106)+(1))|0);
      $j=$inc113;
      label = 27; break;
    case 38: 
      $i=1;
      label = 39; break;
    case 39: 
      var $107=$i;
      var $cmp116=(($107)|(0)) <= 5;
      if ($cmp116) { label = 40; break; } else { label = 50; break; }
    case 40: 
      $j=1;
      label = 41; break;
    case 41: 
      var $108=$j;
      var $cmp120=(($108)|(0)) <= 5;
      if ($cmp120) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $109=$line_max_addr;
      var $110=$line_num_addr;
      var $111=HEAP32[(($110)>>2)];
      var $cmp123=(($109)|(0)) <= (($111)|(0));
      if ($cmp123) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $112=$ierror_addr;
      HEAP32[(($112)>>2)]=2;
      label = 63; break;
    case 44: 
      var $113=$nbase;
      var $114=$j;
      var $sub127=((($114)-(1))|0);
      var $mul128=((($sub127)*(5))&-1);
      var $add129=((($113)+($mul128))|0);
      var $115=$i;
      var $add130=((($add129)+($115))|0);
      var $116=$line_num_addr;
      var $117=HEAP32[(($116)>>2)];
      var $118=$lines_addr;
      var $arrayidx131=(($118+($117<<2))|0);
      HEAP32[(($arrayidx131)>>2)]=$add130;
      var $119=$line_num_addr;
      var $120=HEAP32[(($119)>>2)];
      var $add132=((($120)+(1))|0);
      var $121=$line_num_addr;
      HEAP32[(($121)>>2)]=$add132;
      label = 45; break;
    case 45: 
      var $122=$j;
      var $inc134=((($122)+(1))|0);
      $j=$inc134;
      label = 41; break;
    case 46: 
      var $123=$line_max_addr;
      var $124=$line_num_addr;
      var $125=HEAP32[(($124)>>2)];
      var $cmp136=(($123)|(0)) <= (($125)|(0));
      if ($cmp136) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $126=$ierror_addr;
      HEAP32[(($126)>>2)]=2;
      label = 63; break;
    case 48: 
      var $127=$line_num_addr;
      var $128=HEAP32[(($127)>>2)];
      var $129=$lines_addr;
      var $arrayidx140=(($129+($128<<2))|0);
      HEAP32[(($arrayidx140)>>2)]=-1;
      var $130=$line_num_addr;
      var $131=HEAP32[(($130)>>2)];
      var $add141=((($131)+(1))|0);
      var $132=$line_num_addr;
      HEAP32[(($132)>>2)]=$add141;
      label = 49; break;
    case 49: 
      var $133=$i;
      var $inc143=((($133)+(1))|0);
      $i=$inc143;
      label = 39; break;
    case 50: 
      $j=1;
      label = 51; break;
    case 51: 
      var $134=$j;
      var $cmp146=(($134)|(0)) <= 5;
      if ($cmp146) { label = 52; break; } else { label = 62; break; }
    case 52: 
      $i=1;
      label = 53; break;
    case 53: 
      var $135=$i;
      var $cmp150=(($135)|(0)) <= 5;
      if ($cmp150) { label = 54; break; } else { label = 58; break; }
    case 54: 
      var $136=$line_max_addr;
      var $137=$line_num_addr;
      var $138=HEAP32[(($137)>>2)];
      var $cmp153=(($136)|(0)) <= (($138)|(0));
      if ($cmp153) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $139=$ierror_addr;
      HEAP32[(($139)>>2)]=2;
      label = 63; break;
    case 56: 
      var $140=$nbase;
      var $141=$j;
      var $sub157=((($141)-(1))|0);
      var $mul158=((($sub157)*(5))&-1);
      var $add159=((($140)+($mul158))|0);
      var $142=$i;
      var $add160=((($add159)+($142))|0);
      var $143=$line_num_addr;
      var $144=HEAP32[(($143)>>2)];
      var $145=$lines_addr;
      var $arrayidx161=(($145+($144<<2))|0);
      HEAP32[(($arrayidx161)>>2)]=$add160;
      var $146=$line_num_addr;
      var $147=HEAP32[(($146)>>2)];
      var $add162=((($147)+(1))|0);
      var $148=$line_num_addr;
      HEAP32[(($148)>>2)]=$add162;
      label = 57; break;
    case 57: 
      var $149=$i;
      var $inc164=((($149)+(1))|0);
      $i=$inc164;
      label = 53; break;
    case 58: 
      var $150=$line_max_addr;
      var $151=$line_num_addr;
      var $152=HEAP32[(($151)>>2)];
      var $cmp166=(($150)|(0)) <= (($152)|(0));
      if ($cmp166) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $153=$ierror_addr;
      HEAP32[(($153)>>2)]=2;
      label = 63; break;
    case 60: 
      var $154=$line_num_addr;
      var $155=HEAP32[(($154)>>2)];
      var $156=$lines_addr;
      var $arrayidx170=(($156+($155<<2))|0);
      HEAP32[(($arrayidx170)>>2)]=-1;
      var $157=$line_num_addr;
      var $158=HEAP32[(($157)>>2)];
      var $add171=((($158)+(1))|0);
      var $159=$line_num_addr;
      HEAP32[(($159)>>2)]=$add171;
      label = 61; break;
    case 61: 
      var $160=$j;
      var $inc173=((($160)+(1))|0);
      $j=$inc173;
      label = 51; break;
    case 62: 
      label = 63; break;
    case 63: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_exp_grid_3d"] = _plane_exp_grid_3d;
function _plane_exp_point_dist_3d($p1, $p2, $p3, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $p_addr;
  var $a=__stackBase__;
  var $b=(__stackBase__)+(8);
  var $c=(__stackBase__)+(16);
  var $d=(__stackBase__)+(24);
  var $dist;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  $p_addr=$p;
  var $0=$p1_addr;
  var $1=$p2_addr;
  var $2=$p3_addr;
  _plane_exp2imp_3d($0, $1, $2, $a, $b, $c, $d);
  var $3=HEAPF64[(($a)>>3)];
  var $4=HEAPF64[(($b)>>3)];
  var $5=HEAPF64[(($c)>>3)];
  var $6=HEAPF64[(($d)>>3)];
  var $7=$p_addr;
  var $call=_plane_imp_point_dist_3d($3, $4, $5, $6, $7);
  $dist=$call;
  var $8=$dist;
  STACKTOP = __stackBase__;
  return $8;
}
Module["_plane_exp_point_dist_3d"] = _plane_exp_point_dist_3d;
function _plane_imp_point_dist_3d($a, $b, $c, $d, $p) {
  var label = 0;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  var $p_addr;
  var $dist;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  $p_addr=$p;
  var $0=$a_addr;
  var $1=$p_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $mul=($0)*($2);
  var $3=$b_addr;
  var $4=$p_addr;
  var $arrayidx1=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx1)>>3)];
  var $mul2=($3)*($5);
  var $add=($mul)+($mul2);
  var $6=$c_addr;
  var $7=$p_addr;
  var $arrayidx3=(($7+16)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($6)*($8);
  var $add5=($add)+($mul4);
  var $9=$d_addr;
  var $add6=($add5)+($9);
  var $call=_r8_abs($add6);
  var $10=$a_addr;
  var $11=$a_addr;
  var $mul7=($10)*($11);
  var $12=$b_addr;
  var $13=$b_addr;
  var $mul8=($12)*($13);
  var $add9=($mul7)+($mul8);
  var $14=$c_addr;
  var $15=$c_addr;
  var $mul10=($14)*($15);
  var $add11=($add9)+($mul10);
  var $call12=Math.sqrt($add11);
  var $div=($call)/($call12);
  $dist=$div;
  var $16=$dist;
  return $16;
}
Module["_plane_imp_point_dist_3d"] = _plane_imp_point_dist_3d;
function _plane_imp_is_degenerate_3d($a, $b, $c) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      var $0=$a_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $1=$b_addr;
      var $cmp1=$1 == 0;
      if ($cmp1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$c_addr;
      var $cmp3=$2 == 0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 7; break;
    case 6: 
      $retval=0;
      label = 7; break;
    case 7: 
      var $3=$retval;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_is_degenerate_3d"] = _plane_imp_is_degenerate_3d;
function _plane_exp_pro2($p1, $p2, $p3, $n, $pp, $alpha, $beta) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $n_addr;
      var $pp_addr;
      var $alpha_addr;
      var $beta_addr;
      var $dot;
      var $i;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(24);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $n_addr=$n;
      $pp_addr=$pp;
      $alpha_addr=$alpha;
      $beta_addr=$beta;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($v1)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$p2_addr;
      var $arrayidx3=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$p1_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($v1+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$p2_addr;
      var $arrayidx7=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$p1_addr;
      var $arrayidx8=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($v1+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $arraydecay=(($v1)|0);
      _vector_unit_nd(3, $arraydecay);
      var $12=$p3_addr;
      var $arrayidx11=(($12)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$p1_addr;
      var $arrayidx12=(($14)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $arrayidx14=(($v2)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      var $16=$p3_addr;
      var $arrayidx15=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $18=$p1_addr;
      var $arrayidx16=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($17)-($19);
      var $arrayidx18=(($v2+8)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $20=$p3_addr;
      var $arrayidx19=(($20+16)|0);
      var $21=HEAPF64[(($arrayidx19)>>3)];
      var $22=$p1_addr;
      var $arrayidx20=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($21)-($23);
      var $arrayidx22=(($v2+16)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $arraydecay23=(($v1)|0);
      var $arraydecay24=(($v2)|0);
      var $call=_r8vec_dot_product(3, $arraydecay23, $arraydecay24);
      $dot=$call;
      $i=0;
      label = 3; break;
    case 3: 
      var $24=$i;
      var $cmp=(($24)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $25=$i;
      var $arrayidx25=(($v2+($25<<3))|0);
      var $26=HEAPF64[(($arrayidx25)>>3)];
      var $27=$dot;
      var $28=$i;
      var $arrayidx26=(($v1+($28<<3))|0);
      var $29=HEAPF64[(($arrayidx26)>>3)];
      var $mul=($27)*($29);
      var $sub27=($26)-($mul);
      var $30=$i;
      var $arrayidx28=(($v2+($30<<3))|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub27;
      label = 5; break;
    case 5: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay29=(($v2)|0);
      _vector_unit_nd(3, $arraydecay29);
      $i=0;
      label = 7; break;
    case 7: 
      var $32=$i;
      var $33=$n_addr;
      var $cmp31=(($32)|(0)) < (($33)|(0));
      if ($cmp31) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $34=$i;
      var $mul33=((($34)*(3))&-1);
      var $add=(($mul33)|0);
      var $35=$pp_addr;
      var $arrayidx34=(($35+($add<<3))|0);
      var $36=HEAPF64[(($arrayidx34)>>3)];
      var $37=$p1_addr;
      var $arrayidx35=(($37)|0);
      var $38=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($36)-($38);
      var $arrayidx37=(($v1)|0);
      var $39=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($sub36)*($39);
      var $40=$i;
      var $mul39=((($40)*(3))&-1);
      var $add40=((($mul39)+(1))|0);
      var $41=$pp_addr;
      var $arrayidx41=(($41+($add40<<3))|0);
      var $42=HEAPF64[(($arrayidx41)>>3)];
      var $43=$p1_addr;
      var $arrayidx42=(($43+8)|0);
      var $44=HEAPF64[(($arrayidx42)>>3)];
      var $sub43=($42)-($44);
      var $arrayidx44=(($v1+8)|0);
      var $45=HEAPF64[(($arrayidx44)>>3)];
      var $mul45=($sub43)*($45);
      var $add46=($mul38)+($mul45);
      var $46=$i;
      var $mul47=((($46)*(3))&-1);
      var $add48=((($mul47)+(2))|0);
      var $47=$pp_addr;
      var $arrayidx49=(($47+($add48<<3))|0);
      var $48=HEAPF64[(($arrayidx49)>>3)];
      var $49=$p1_addr;
      var $arrayidx50=(($49+16)|0);
      var $50=HEAPF64[(($arrayidx50)>>3)];
      var $sub51=($48)-($50);
      var $arrayidx52=(($v1+16)|0);
      var $51=HEAPF64[(($arrayidx52)>>3)];
      var $mul53=($sub51)*($51);
      var $add54=($add46)+($mul53);
      var $52=$i;
      var $53=$alpha_addr;
      var $arrayidx55=(($53+($52<<3))|0);
      HEAPF64[(($arrayidx55)>>3)]=$add54;
      var $54=$i;
      var $mul56=((($54)*(3))&-1);
      var $add57=(($mul56)|0);
      var $55=$pp_addr;
      var $arrayidx58=(($55+($add57<<3))|0);
      var $56=HEAPF64[(($arrayidx58)>>3)];
      var $57=$p1_addr;
      var $arrayidx59=(($57)|0);
      var $58=HEAPF64[(($arrayidx59)>>3)];
      var $sub60=($56)-($58);
      var $arrayidx61=(($v2)|0);
      var $59=HEAPF64[(($arrayidx61)>>3)];
      var $mul62=($sub60)*($59);
      var $60=$i;
      var $mul63=((($60)*(3))&-1);
      var $add64=((($mul63)+(1))|0);
      var $61=$pp_addr;
      var $arrayidx65=(($61+($add64<<3))|0);
      var $62=HEAPF64[(($arrayidx65)>>3)];
      var $63=$p1_addr;
      var $arrayidx66=(($63+8)|0);
      var $64=HEAPF64[(($arrayidx66)>>3)];
      var $sub67=($62)-($64);
      var $arrayidx68=(($v2+8)|0);
      var $65=HEAPF64[(($arrayidx68)>>3)];
      var $mul69=($sub67)*($65);
      var $add70=($mul62)+($mul69);
      var $66=$i;
      var $mul71=((($66)*(3))&-1);
      var $add72=((($mul71)+(2))|0);
      var $67=$pp_addr;
      var $arrayidx73=(($67+($add72<<3))|0);
      var $68=HEAPF64[(($arrayidx73)>>3)];
      var $69=$p1_addr;
      var $arrayidx74=(($69+16)|0);
      var $70=HEAPF64[(($arrayidx74)>>3)];
      var $sub75=($68)-($70);
      var $arrayidx76=(($v2+16)|0);
      var $71=HEAPF64[(($arrayidx76)>>3)];
      var $mul77=($sub75)*($71);
      var $add78=($add70)+($mul77);
      var $72=$i;
      var $73=$beta_addr;
      var $arrayidx79=(($73+($72<<3))|0);
      HEAPF64[(($arrayidx79)>>3)]=$add78;
      label = 9; break;
    case 9: 
      var $74=$i;
      var $inc81=((($74)+(1))|0);
      $i=$inc81;
      label = 7; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_exp_pro2"] = _plane_exp_pro2;
function _plane_exp_pro3($p1, $p2, $p3, $n, $po, $pp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $n_addr;
      var $po_addr;
      var $pp_addr;
      var $a=__stackBase__;
      var $b=(__stackBase__)+(8);
      var $c=(__stackBase__)+(16);
      var $d=(__stackBase__)+(24);
      var $i;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $n_addr=$n;
      $po_addr=$po;
      $pp_addr=$pp;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$p3_addr;
      _plane_exp2imp_3d($0, $1, $2, $a, $b, $c, $d);
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$n_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=HEAPF64[(($a)>>3)];
      var $6=HEAPF64[(($b)>>3)];
      var $7=HEAPF64[(($c)>>3)];
      var $8=HEAPF64[(($d)>>3)];
      var $9=$po_addr;
      var $10=$i;
      var $mul=((($10)*(3))&-1);
      var $add_ptr=(($9+($mul<<3))|0);
      var $11=$pp_addr;
      var $12=$i;
      var $mul1=((($12)*(3))&-1);
      var $add_ptr2=(($11+($mul1<<3))|0);
      _plane_imp_point_near_3d($5, $6, $7, $8, $add_ptr, $add_ptr2);
      label = 5; break;
    case 5: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_exp_pro3"] = _plane_exp_pro3;
function _plane_exp_project_3d($p1, $p2, $p3, $pf, $n, $po, $pp, $ivis) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $pf_addr;
      var $n_addr;
      var $po_addr;
      var $pp_addr;
      var $ivis_addr;
      var $a=__stackBase__;
      var $alpha;
      var $b=(__stackBase__)+(8);
      var $beta;
      var $c=(__stackBase__)+(16);
      var $d=(__stackBase__)+(24);
      var $disfo;
      var $disfn;
      var $i;
      var $pn=(__stackBase__)+(32);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pf_addr=$pf;
      $n_addr=$n;
      $po_addr=$po;
      $pp_addr=$pp;
      $ivis_addr=$ivis;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$p3_addr;
      _plane_exp2imp_3d($0, $1, $2, $a, $b, $c, $d);
      var $3=HEAPF64[(($a)>>3)];
      var $4=HEAPF64[(($b)>>3)];
      var $5=HEAPF64[(($c)>>3)];
      var $6=HEAPF64[(($d)>>3)];
      var $7=$pf_addr;
      var $arraydecay=(($pn)|0);
      _plane_imp_point_near_3d($3, $4, $5, $6, $7, $arraydecay);
      var $8=$pf_addr;
      var $arraydecay1=(($pn)|0);
      var $call=_points_dist_3d($8, $arraydecay1);
      $disfn=$call;
      var $9=$disfn;
      var $cmp=$9 == 0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $10=$i;
      var $11=$n_addr;
      var $cmp2=(($10)|(0)) < (($11)|(0));
      if ($cmp2) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $12=$i;
      var $13=$ivis_addr;
      var $arrayidx=(($13+($12<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $14=$pf_addr;
      var $arrayidx3=(($14)|0);
      var $15=HEAPF64[(($arrayidx3)>>3)];
      var $16=$i;
      var $mul=((($16)*(3))&-1);
      var $add=(($mul)|0);
      var $17=$pp_addr;
      var $arrayidx4=(($17+($add<<3))|0);
      HEAPF64[(($arrayidx4)>>3)]=$15;
      var $18=$pf_addr;
      var $arrayidx5=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx5)>>3)];
      var $20=$i;
      var $mul6=((($20)*(3))&-1);
      var $add7=((($mul6)+(1))|0);
      var $21=$pp_addr;
      var $arrayidx8=(($21+($add7<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$19;
      var $22=$pf_addr;
      var $arrayidx9=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx9)>>3)];
      var $24=$i;
      var $mul10=((($24)*(3))&-1);
      var $add11=((($mul10)+(2))|0);
      var $25=$pp_addr;
      var $arrayidx12=(($25+($add11<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$23;
      label = 6; break;
    case 6: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      label = 28; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $27=$i;
      var $28=$n_addr;
      var $cmp14=(($27)|(0)) < (($28)|(0));
      if ($cmp14) { label = 10; break; } else { label = 27; break; }
    case 10: 
      var $29=$pf_addr;
      var $30=$po_addr;
      var $31=$i;
      var $mul16=((($31)*(3))&-1);
      var $add_ptr=(($30+($mul16<<3))|0);
      var $call17=_points_dist_3d($29, $add_ptr);
      $disfo=$call17;
      var $32=$disfo;
      var $cmp18=$32 == 0;
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $33=$i;
      var $34=$ivis_addr;
      var $arrayidx20=(($34+($33<<2))|0);
      HEAP32[(($arrayidx20)>>2)]=0;
      var $arrayidx21=(($pn)|0);
      var $35=HEAPF64[(($arrayidx21)>>3)];
      var $36=$i;
      var $mul22=((($36)*(3))&-1);
      var $add23=(($mul22)|0);
      var $37=$pp_addr;
      var $arrayidx24=(($37+($add23<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$35;
      var $arrayidx25=(($pn+8)|0);
      var $38=HEAPF64[(($arrayidx25)>>3)];
      var $39=$i;
      var $mul26=((($39)*(3))&-1);
      var $add27=((($mul26)+(1))|0);
      var $40=$pp_addr;
      var $arrayidx28=(($40+($add27<<3))|0);
      HEAPF64[(($arrayidx28)>>3)]=$38;
      var $arrayidx29=(($pn+16)|0);
      var $41=HEAPF64[(($arrayidx29)>>3)];
      var $42=$i;
      var $mul30=((($42)*(3))&-1);
      var $add31=((($mul30)+(2))|0);
      var $43=$pp_addr;
      var $arrayidx32=(($43+($add31<<3))|0);
      HEAPF64[(($arrayidx32)>>3)]=$41;
      label = 25; break;
    case 12: 
      var $44=$po_addr;
      var $45=$i;
      var $mul33=((($45)*(3))&-1);
      var $add_ptr34=(($44+($mul33<<3))|0);
      var $46=$pf_addr;
      var $arraydecay35=(($pn)|0);
      var $call36=_angle_rad_3d($add_ptr34, $46, $arraydecay35);
      $alpha=$call36;
      var $47=$alpha;
      var $call37=Math.cos($47);
      var $cmp38=$call37 == 0;
      if ($cmp38) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $48=$i;
      var $49=$ivis_addr;
      var $arrayidx40=(($49+($48<<2))|0);
      HEAP32[(($arrayidx40)>>2)]=0;
      var $arrayidx41=(($pn)|0);
      var $50=HEAPF64[(($arrayidx41)>>3)];
      var $51=$i;
      var $mul42=((($51)*(3))&-1);
      var $add43=(($mul42)|0);
      var $52=$pp_addr;
      var $arrayidx44=(($52+($add43<<3))|0);
      HEAPF64[(($arrayidx44)>>3)]=$50;
      var $arrayidx45=(($pn+8)|0);
      var $53=HEAPF64[(($arrayidx45)>>3)];
      var $54=$i;
      var $mul46=((($54)*(3))&-1);
      var $add47=((($mul46)+(1))|0);
      var $55=$pp_addr;
      var $arrayidx48=(($55+($add47<<3))|0);
      HEAPF64[(($arrayidx48)>>3)]=$53;
      var $arrayidx49=(($pn+16)|0);
      var $56=HEAPF64[(($arrayidx49)>>3)];
      var $57=$i;
      var $mul50=((($57)*(3))&-1);
      var $add51=((($mul50)+(2))|0);
      var $58=$pp_addr;
      var $arrayidx52=(($58+($add51<<3))|0);
      HEAPF64[(($arrayidx52)>>3)]=$56;
      label = 24; break;
    case 14: 
      var $59=$disfn;
      var $60=$alpha;
      var $call54=Math.cos($60);
      var $61=$disfo;
      var $mul55=($call54)*($61);
      var $div=($59)/($mul55);
      $beta=$div;
      var $62=$beta;
      var $cmp56=1 < $62;
      if ($cmp56) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $63=$i;
      var $64=$ivis_addr;
      var $arrayidx58=(($64+($63<<2))|0);
      HEAP32[(($arrayidx58)>>2)]=1;
      label = 23; break;
    case 16: 
      var $65=$beta;
      var $cmp60=$65 == 1;
      if ($cmp60) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $66=$i;
      var $67=$ivis_addr;
      var $arrayidx62=(($67+($66<<2))|0);
      HEAP32[(($arrayidx62)>>2)]=2;
      label = 22; break;
    case 18: 
      var $68=$beta;
      var $cmp64=0 < $68;
      if ($cmp64) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $69=$i;
      var $70=$ivis_addr;
      var $arrayidx66=(($70+($69<<2))|0);
      HEAP32[(($arrayidx66)>>2)]=3;
      label = 21; break;
    case 20: 
      var $71=$i;
      var $72=$ivis_addr;
      var $arrayidx68=(($72+($71<<2))|0);
      HEAP32[(($arrayidx68)>>2)]=-1;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $73=$pf_addr;
      var $arrayidx72=(($73)|0);
      var $74=HEAPF64[(($arrayidx72)>>3)];
      var $75=$beta;
      var $76=$i;
      var $mul73=((($76)*(3))&-1);
      var $add74=(($mul73)|0);
      var $77=$po_addr;
      var $arrayidx75=(($77+($add74<<3))|0);
      var $78=HEAPF64[(($arrayidx75)>>3)];
      var $79=$pf_addr;
      var $arrayidx76=(($79)|0);
      var $80=HEAPF64[(($arrayidx76)>>3)];
      var $sub=($78)-($80);
      var $mul77=($75)*($sub);
      var $add78=($74)+($mul77);
      var $81=$i;
      var $mul79=((($81)*(3))&-1);
      var $add80=(($mul79)|0);
      var $82=$pp_addr;
      var $arrayidx81=(($82+($add80<<3))|0);
      HEAPF64[(($arrayidx81)>>3)]=$add78;
      var $83=$pf_addr;
      var $arrayidx82=(($83+8)|0);
      var $84=HEAPF64[(($arrayidx82)>>3)];
      var $85=$beta;
      var $86=$i;
      var $mul83=((($86)*(3))&-1);
      var $add84=((($mul83)+(1))|0);
      var $87=$po_addr;
      var $arrayidx85=(($87+($add84<<3))|0);
      var $88=HEAPF64[(($arrayidx85)>>3)];
      var $89=$pf_addr;
      var $arrayidx86=(($89+8)|0);
      var $90=HEAPF64[(($arrayidx86)>>3)];
      var $sub87=($88)-($90);
      var $mul88=($85)*($sub87);
      var $add89=($84)+($mul88);
      var $91=$i;
      var $mul90=((($91)*(3))&-1);
      var $add91=((($mul90)+(1))|0);
      var $92=$pp_addr;
      var $arrayidx92=(($92+($add91<<3))|0);
      HEAPF64[(($arrayidx92)>>3)]=$add89;
      var $93=$pf_addr;
      var $arrayidx93=(($93+16)|0);
      var $94=HEAPF64[(($arrayidx93)>>3)];
      var $95=$beta;
      var $96=$i;
      var $mul94=((($96)*(3))&-1);
      var $add95=((($mul94)+(2))|0);
      var $97=$po_addr;
      var $arrayidx96=(($97+($add95<<3))|0);
      var $98=HEAPF64[(($arrayidx96)>>3)];
      var $99=$pf_addr;
      var $arrayidx97=(($99+16)|0);
      var $100=HEAPF64[(($arrayidx97)>>3)];
      var $sub98=($98)-($100);
      var $mul99=($95)*($sub98);
      var $add100=($94)+($mul99);
      var $101=$i;
      var $mul101=((($101)*(3))&-1);
      var $add102=((($mul101)+(2))|0);
      var $102=$pp_addr;
      var $arrayidx103=(($102+($add102<<3))|0);
      HEAPF64[(($arrayidx103)>>3)]=$add100;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $103=$i;
      var $inc107=((($103)+(1))|0);
      $i=$inc107;
      label = 9; break;
    case 27: 
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_exp_project_3d"] = _plane_exp_project_3d;
function _points_dist_3d($p1, $p2) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $dist;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p2_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=Math.pow($sub, 2);
  var $5=$p1_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$p2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=Math.pow($sub4, 2);
  var $add=($4)+($9);
  var $10=$p1_addr;
  var $arrayidx5=(($10+16)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $12=$p2_addr;
  var $arrayidx6=(($12+16)|0);
  var $13=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($11)-($13);
  var $14=Math.pow($sub7, 2);
  var $add8=($add)+($14);
  var $call=Math.sqrt($add8);
  $dist=$call;
  var $15=$dist;
  return $15;
}
Module["_points_dist_3d"] = _points_dist_3d;
function _plane_imp_point_near_3d($a, $b, $c, $d, $p, $pn) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $p_addr;
      var $pn_addr;
      var $t;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $p_addr=$p;
      $pn_addr=$pn;
      var $0=$a_addr;
      var $1=$b_addr;
      var $2=$c_addr;
      var $call=_plane_imp_is_degenerate_3d($0, $1, $2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($4, ((6248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($5, ((17552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$a_addr;
      var $7=$p_addr;
      var $arrayidx=(($7)|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $mul=($6)*($8);
      var $9=$b_addr;
      var $10=$p_addr;
      var $arrayidx4=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx4)>>3)];
      var $mul5=($9)*($11);
      var $add=($mul)+($mul5);
      var $12=$c_addr;
      var $13=$p_addr;
      var $arrayidx6=(($13+16)|0);
      var $14=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($12)*($14);
      var $add8=($add)+($mul7);
      var $15=$d_addr;
      var $add9=($add8)+($15);
      var $sub=(-$add9);
      var $16=$a_addr;
      var $17=$a_addr;
      var $mul10=($16)*($17);
      var $18=$b_addr;
      var $19=$b_addr;
      var $mul11=($18)*($19);
      var $add12=($mul10)+($mul11);
      var $20=$c_addr;
      var $21=$c_addr;
      var $mul13=($20)*($21);
      var $add14=($add12)+($mul13);
      var $div=($sub)/($add14);
      $t=$div;
      var $22=$p_addr;
      var $arrayidx15=(($22)|0);
      var $23=HEAPF64[(($arrayidx15)>>3)];
      var $24=$a_addr;
      var $25=$t;
      var $mul16=($24)*($25);
      var $add17=($23)+($mul16);
      var $26=$pn_addr;
      var $arrayidx18=(($26)|0);
      HEAPF64[(($arrayidx18)>>3)]=$add17;
      var $27=$p_addr;
      var $arrayidx19=(($27+8)|0);
      var $28=HEAPF64[(($arrayidx19)>>3)];
      var $29=$b_addr;
      var $30=$t;
      var $mul20=($29)*($30);
      var $add21=($28)+($mul20);
      var $31=$pn_addr;
      var $arrayidx22=(($31+8)|0);
      HEAPF64[(($arrayidx22)>>3)]=$add21;
      var $32=$p_addr;
      var $arrayidx23=(($32+16)|0);
      var $33=HEAPF64[(($arrayidx23)>>3)];
      var $34=$c_addr;
      var $35=$t;
      var $mul24=($34)*($35);
      var $add25=($33)+($mul24);
      var $36=$pn_addr;
      var $arrayidx26=(($36+16)|0);
      HEAPF64[(($arrayidx26)>>3)]=$add25;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_point_near_3d"] = _plane_imp_point_near_3d;
function _plane_exp2normal_3d($p1, $p2, $p3, $pp, $pn) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $pp_addr;
      var $pn_addr;
      var $norm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $pp_addr=$pp;
      $pn_addr=$pn;
      var $0=$p1_addr;
      var $1=$pp_addr;
      _r8vec_copy(3, $0, $1);
      var $2=$p2_addr;
      var $arrayidx=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$p1_addr;
      var $arrayidx1=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($5);
      var $6=$p3_addr;
      var $arrayidx2=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$p1_addr;
      var $arrayidx3=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $mul=($sub)*($sub4);
      var $10=$p2_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$p1_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=$p3_addr;
      var $arrayidx8=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx8)>>3)];
      var $16=$p1_addr;
      var $arrayidx9=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($15)-($17);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      var $18=$pn_addr;
      var $arrayidx13=(($18)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $19=$p2_addr;
      var $arrayidx14=(($19+16)|0);
      var $20=HEAPF64[(($arrayidx14)>>3)];
      var $21=$p1_addr;
      var $arrayidx15=(($21+16)|0);
      var $22=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($20)-($22);
      var $23=$p3_addr;
      var $arrayidx17=(($23)|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $25=$p1_addr;
      var $arrayidx18=(($25)|0);
      var $26=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($24)-($26);
      var $mul20=($sub16)*($sub19);
      var $27=$p2_addr;
      var $arrayidx21=(($27)|0);
      var $28=HEAPF64[(($arrayidx21)>>3)];
      var $29=$p1_addr;
      var $arrayidx22=(($29)|0);
      var $30=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($28)-($30);
      var $31=$p3_addr;
      var $arrayidx24=(($31+16)|0);
      var $32=HEAPF64[(($arrayidx24)>>3)];
      var $33=$p1_addr;
      var $arrayidx25=(($33+16)|0);
      var $34=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($32)-($34);
      var $mul27=($sub23)*($sub26);
      var $sub28=($mul20)-($mul27);
      var $35=$pn_addr;
      var $arrayidx29=(($35+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $36=$p2_addr;
      var $arrayidx30=(($36)|0);
      var $37=HEAPF64[(($arrayidx30)>>3)];
      var $38=$p1_addr;
      var $arrayidx31=(($38)|0);
      var $39=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($37)-($39);
      var $40=$p3_addr;
      var $arrayidx33=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx33)>>3)];
      var $42=$p1_addr;
      var $arrayidx34=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($41)-($43);
      var $mul36=($sub32)*($sub35);
      var $44=$p2_addr;
      var $arrayidx37=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx37)>>3)];
      var $46=$p1_addr;
      var $arrayidx38=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($45)-($47);
      var $48=$p3_addr;
      var $arrayidx40=(($48)|0);
      var $49=HEAPF64[(($arrayidx40)>>3)];
      var $50=$p1_addr;
      var $arrayidx41=(($50)|0);
      var $51=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($49)-($51);
      var $mul43=($sub39)*($sub42);
      var $sub44=($mul36)-($mul43);
      var $52=$pn_addr;
      var $arrayidx45=(($52+16)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      var $53=$pn_addr;
      var $arrayidx46=(($53)|0);
      var $54=HEAPF64[(($arrayidx46)>>3)];
      var $55=$pn_addr;
      var $arrayidx47=(($55)|0);
      var $56=HEAPF64[(($arrayidx47)>>3)];
      var $mul48=($54)*($56);
      var $57=$pn_addr;
      var $arrayidx49=(($57+8)|0);
      var $58=HEAPF64[(($arrayidx49)>>3)];
      var $59=$pn_addr;
      var $arrayidx50=(($59+8)|0);
      var $60=HEAPF64[(($arrayidx50)>>3)];
      var $mul51=($58)*($60);
      var $add=($mul48)+($mul51);
      var $61=$pn_addr;
      var $arrayidx52=(($61+16)|0);
      var $62=HEAPF64[(($arrayidx52)>>3)];
      var $63=$pn_addr;
      var $arrayidx53=(($63+16)|0);
      var $64=HEAPF64[(($arrayidx53)>>3)];
      var $mul54=($62)*($64);
      var $add55=($add)+($mul54);
      var $call=Math.sqrt($add55);
      $norm=$call;
      var $65=$norm;
      var $cmp=$65 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $66=HEAP32[((_stderr)>>2)];
      var $call56=_fprintf($66, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $67=HEAP32[((_stderr)>>2)];
      var $call57=_fprintf($67, ((6672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $68=HEAP32[((_stderr)>>2)];
      var $call58=_fprintf($68, ((6616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $69=HEAP32[((_stderr)>>2)];
      var $call59=_fprintf($69, ((6560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $70=$pn_addr;
      var $arrayidx60=(($70)|0);
      var $71=HEAPF64[(($arrayidx60)>>3)];
      var $72=$norm;
      var $div=($71)/($72);
      var $73=$pn_addr;
      var $arrayidx61=(($73)|0);
      HEAPF64[(($arrayidx61)>>3)]=$div;
      var $74=$pn_addr;
      var $arrayidx62=(($74+8)|0);
      var $75=HEAPF64[(($arrayidx62)>>3)];
      var $76=$norm;
      var $div63=($75)/($76);
      var $77=$pn_addr;
      var $arrayidx64=(($77+8)|0);
      HEAPF64[(($arrayidx64)>>3)]=$div63;
      var $78=$pn_addr;
      var $arrayidx65=(($78+16)|0);
      var $79=HEAPF64[(($arrayidx65)>>3)];
      var $80=$norm;
      var $div66=($79)/($80);
      var $81=$pn_addr;
      var $arrayidx67=(($81+16)|0);
      HEAPF64[(($arrayidx67)>>3)]=$div66;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_exp2normal_3d"] = _plane_exp2normal_3d;
function _plane_imp_point_dist_signed_3d($a, $b, $c, $d, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $p_addr;
      var $dist;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $p_addr=$p;
      var $0=$a_addr;
      var $1=$p_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $mul=($0)*($2);
      var $3=$b_addr;
      var $4=$p_addr;
      var $arrayidx1=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx1)>>3)];
      var $mul2=($3)*($5);
      var $add=($mul)+($mul2);
      var $6=$c_addr;
      var $7=$p_addr;
      var $arrayidx3=(($7+16)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $mul4=($6)*($8);
      var $add5=($add)+($mul4);
      var $9=$d_addr;
      var $add6=($add5)+($9);
      var $sub=(-$add6);
      var $10=$a_addr;
      var $11=$a_addr;
      var $mul7=($10)*($11);
      var $12=$b_addr;
      var $13=$b_addr;
      var $mul8=($12)*($13);
      var $add9=($mul7)+($mul8);
      var $14=$c_addr;
      var $15=$c_addr;
      var $mul10=($14)*($15);
      var $add11=($add9)+($mul10);
      var $call=Math.sqrt($add11);
      var $div=($sub)/($call);
      $dist=$div;
      var $16=$d_addr;
      var $cmp=$16 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$dist;
      var $sub12=(-$17);
      $dist=$sub12;
      label = 4; break;
    case 4: 
      var $18=$dist;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_point_dist_signed_3d"] = _plane_imp_point_dist_signed_3d;
function _plane_imp_line_par_int_3d($a, $b, $c, $d, $x0, $y0, $z0, $f, $g, $h, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $x0_addr;
      var $y0_addr;
      var $z0_addr;
      var $f_addr;
      var $g_addr;
      var $h_addr;
      var $p_addr;
      var $denom;
      var $norm1;
      var $norm2;
      var $t;
      var $TOL;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $x0_addr=$x0;
      $y0_addr=$y0;
      $z0_addr=$z0;
      $f_addr=$f;
      $g_addr=$g;
      $h_addr=$h;
      $p_addr=$p;
      $TOL=0.00001;
      var $0=$a_addr;
      var $1=$a_addr;
      var $mul=($0)*($1);
      var $2=$b_addr;
      var $3=$b_addr;
      var $mul1=($2)*($3);
      var $add=($mul)+($mul1);
      var $4=$c_addr;
      var $5=$c_addr;
      var $mul2=($4)*($5);
      var $add3=($add)+($mul2);
      var $call=Math.sqrt($add3);
      $norm1=$call;
      var $6=$norm1;
      var $cmp=$6 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($7, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($8, ((6496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($9, ((6392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $10=$f_addr;
      var $11=$f_addr;
      var $mul7=($10)*($11);
      var $12=$g_addr;
      var $13=$g_addr;
      var $mul8=($12)*($13);
      var $add9=($mul7)+($mul8);
      var $14=$h_addr;
      var $15=$h_addr;
      var $mul10=($14)*($15);
      var $add11=($add9)+($mul10);
      var $call12=Math.sqrt($add11);
      $norm2=$call12;
      var $16=$norm2;
      var $cmp13=$16 == 0;
      if ($cmp13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=HEAP32[((_stderr)>>2)];
      var $call15=_fprintf($17, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $18=HEAP32[((_stderr)>>2)];
      var $call16=_fprintf($18, ((6496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $19=HEAP32[((_stderr)>>2)];
      var $call17=_fprintf($19, ((6320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      var $20=$a_addr;
      var $21=$f_addr;
      var $mul19=($20)*($21);
      var $22=$b_addr;
      var $23=$g_addr;
      var $mul20=($22)*($23);
      var $add21=($mul19)+($mul20);
      var $24=$c_addr;
      var $25=$h_addr;
      var $mul22=($24)*($25);
      var $add23=($add21)+($mul22);
      $denom=$add23;
      var $26=$denom;
      var $call24=_r8_abs($26);
      var $27=$TOL;
      var $28=$norm1;
      var $mul25=($27)*($28);
      var $29=$norm2;
      var $mul26=($mul25)*($29);
      var $cmp27=$call24 < $mul26;
      if ($cmp27) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $30=$a_addr;
      var $31=$x0_addr;
      var $mul29=($30)*($31);
      var $32=$b_addr;
      var $33=$y0_addr;
      var $mul30=($32)*($33);
      var $add31=($mul29)+($mul30);
      var $34=$c_addr;
      var $35=$z0_addr;
      var $mul32=($34)*($35);
      var $add33=($add31)+($mul32);
      var $36=$d_addr;
      var $add34=($add33)+($36);
      var $cmp35=$add34 == 0;
      if ($cmp35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $37=$x0_addr;
      var $38=$p_addr;
      var $arrayidx=(($38)|0);
      HEAPF64[(($arrayidx)>>3)]=$37;
      var $39=$y0_addr;
      var $40=$p_addr;
      var $arrayidx37=(($40+8)|0);
      HEAPF64[(($arrayidx37)>>3)]=$39;
      var $41=$z0_addr;
      var $42=$p_addr;
      var $arrayidx38=(($42+16)|0);
      HEAPF64[(($arrayidx38)>>3)]=$41;
      $retval=1;
      label = 11; break;
    case 9: 
      var $43=$p_addr;
      _r8vec_zero(3, $43);
      $retval=0;
      label = 11; break;
    case 10: 
      var $44=$a_addr;
      var $45=$x0_addr;
      var $mul40=($44)*($45);
      var $46=$b_addr;
      var $47=$y0_addr;
      var $mul41=($46)*($47);
      var $add42=($mul40)+($mul41);
      var $48=$c_addr;
      var $49=$z0_addr;
      var $mul43=($48)*($49);
      var $add44=($add42)+($mul43);
      var $50=$d_addr;
      var $add45=($add44)+($50);
      var $sub=(-$add45);
      var $51=$denom;
      var $div=($sub)/($51);
      $t=$div;
      var $52=$x0_addr;
      var $53=$t;
      var $54=$f_addr;
      var $mul46=($53)*($54);
      var $add47=($52)+($mul46);
      var $55=$p_addr;
      var $arrayidx48=(($55)|0);
      HEAPF64[(($arrayidx48)>>3)]=$add47;
      var $56=$y0_addr;
      var $57=$t;
      var $58=$g_addr;
      var $mul49=($57)*($58);
      var $add50=($56)+($mul49);
      var $59=$p_addr;
      var $arrayidx51=(($59+8)|0);
      HEAPF64[(($arrayidx51)>>3)]=$add50;
      var $60=$z0_addr;
      var $61=$t;
      var $62=$h_addr;
      var $mul52=($61)*($62);
      var $add53=($60)+($mul52);
      var $63=$p_addr;
      var $arrayidx54=(($63+16)|0);
      HEAPF64[(($arrayidx54)>>3)]=$add53;
      $retval=1;
      label = 11; break;
    case 11: 
      var $64=$retval;
      STACKTOP = __stackBase__;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_line_par_int_3d"] = _plane_imp_line_par_int_3d;
function _plane_imp_segment_near_3d($p1, $p2, $a, $b, $c, $d, $dist, $pnp, $pnl) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $dist_addr;
      var $pnp_addr;
      var $pnl_addr;
      var $alpha;
      var $an;
      var $bn;
      var $cn;
      var $dn;
      var $idiocy;
      var $norm;
      var $t1;
      var $t2;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $dist_addr=$dist;
      $pnp_addr=$pnp;
      $pnl_addr=$pnl;
      var $0=$pnl_addr;
      _r8vec_zero(3, $0);
      var $1=$pnp_addr;
      _r8vec_zero(3, $1);
      var $2=$a_addr;
      var $3=$a_addr;
      var $mul=($2)*($3);
      var $4=$b_addr;
      var $5=$b_addr;
      var $mul1=($4)*($5);
      var $add=($mul)+($mul1);
      var $6=$c_addr;
      var $7=$c_addr;
      var $mul2=($6)*($7);
      var $add3=($add)+($mul2);
      var $call=Math.sqrt($add3);
      $norm=$call;
      var $8=$norm;
      var $cmp=$8 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($9, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($10, ((17448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($11, ((17368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $12=$a_addr;
      var $13=$norm;
      var $div=($12)/($13);
      $an=$div;
      var $14=$b_addr;
      var $15=$norm;
      var $div7=($14)/($15);
      $bn=$div7;
      var $16=$c_addr;
      var $17=$norm;
      var $div8=($16)/($17);
      $cn=$div8;
      var $18=$d_addr;
      var $19=$norm;
      var $div9=($18)/($19);
      $dn=$div9;
      var $20=$p1_addr;
      var $21=$p2_addr;
      var $call10=_r8vec_eq(3, $20, $21);
      var $tobool=(($call10)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $22=$an;
      var $23=$p1_addr;
      var $arrayidx=(($23)|0);
      var $24=HEAPF64[(($arrayidx)>>3)];
      var $mul12=($22)*($24);
      var $25=$bn;
      var $26=$p1_addr;
      var $arrayidx13=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx13)>>3)];
      var $mul14=($25)*($27);
      var $add15=($mul12)+($mul14);
      var $28=$cn;
      var $29=$p1_addr;
      var $arrayidx16=(($29+16)|0);
      var $30=HEAPF64[(($arrayidx16)>>3)];
      var $mul17=($28)*($30);
      var $add18=($add15)+($mul17);
      var $31=$dn;
      var $add19=($add18)+($31);
      $t1=$add19;
      var $32=$t1;
      var $call20=_r8_abs($32);
      var $33=$dist_addr;
      HEAPF64[(($33)>>3)]=$call20;
      var $34=$p1_addr;
      var $35=$pnl_addr;
      _r8vec_copy(3, $34, $35);
      var $36=$p1_addr;
      var $arrayidx21=(($36)|0);
      var $37=HEAPF64[(($arrayidx21)>>3)];
      var $38=$an;
      var $39=$t1;
      var $mul22=($38)*($39);
      var $sub=($37)-($mul22);
      var $40=$pnp_addr;
      var $arrayidx23=(($40)|0);
      HEAPF64[(($arrayidx23)>>3)]=$sub;
      var $41=$p1_addr;
      var $arrayidx24=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx24)>>3)];
      var $43=$bn;
      var $44=$t1;
      var $mul25=($43)*($44);
      var $sub26=($42)-($mul25);
      var $45=$pnp_addr;
      var $arrayidx27=(($45+8)|0);
      HEAPF64[(($arrayidx27)>>3)]=$sub26;
      var $46=$p1_addr;
      var $arrayidx28=(($46+16)|0);
      var $47=HEAPF64[(($arrayidx28)>>3)];
      var $48=$cn;
      var $49=$t1;
      var $mul29=($48)*($49);
      var $sub30=($47)-($mul29);
      var $50=$pnp_addr;
      var $arrayidx31=(($50+16)|0);
      HEAPF64[(($arrayidx31)>>3)]=$sub30;
      label = 19; break;
    case 6: 
      var $51=$an;
      var $52=$p1_addr;
      var $arrayidx33=(($52)|0);
      var $53=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($51)*($53);
      var $54=$bn;
      var $55=$p1_addr;
      var $arrayidx35=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($54)*($56);
      var $add37=($mul34)+($mul36);
      var $57=$cn;
      var $58=$p1_addr;
      var $arrayidx38=(($58+16)|0);
      var $59=HEAPF64[(($arrayidx38)>>3)];
      var $mul39=($57)*($59);
      var $add40=($add37)+($mul39);
      var $60=$dn;
      var $add41=($add40)+($60);
      $t1=$add41;
      var $61=$an;
      var $62=$p2_addr;
      var $arrayidx42=(($62)|0);
      var $63=HEAPF64[(($arrayidx42)>>3)];
      var $mul43=($61)*($63);
      var $64=$bn;
      var $65=$p2_addr;
      var $arrayidx44=(($65+8)|0);
      var $66=HEAPF64[(($arrayidx44)>>3)];
      var $mul45=($64)*($66);
      var $add46=($mul43)+($mul45);
      var $67=$cn;
      var $68=$p2_addr;
      var $arrayidx47=(($68+16)|0);
      var $69=HEAPF64[(($arrayidx47)>>3)];
      var $mul48=($67)*($69);
      var $add49=($add46)+($mul48);
      var $70=$dn;
      var $add50=($add49)+($70);
      $t2=$add50;
      var $71=$t1;
      var $72=$t2;
      var $mul51=($71)*($72);
      $idiocy=$mul51;
      var $73=$idiocy;
      var $cmp52=0 < $73;
      if ($cmp52) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $74=$t1;
      var $call54=_r8_abs($74);
      $t1=$call54;
      var $75=$t2;
      var $call55=_r8_abs($75);
      $t2=$call55;
      var $76=$t1;
      var $77=$t2;
      var $cmp56=$76 < $77;
      if ($cmp56) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $78=$p1_addr;
      var $79=$pnl_addr;
      _r8vec_copy(3, $78, $79);
      var $80=$p1_addr;
      var $arrayidx58=(($80)|0);
      var $81=HEAPF64[(($arrayidx58)>>3)];
      var $82=$an;
      var $83=$t1;
      var $mul59=($82)*($83);
      var $sub60=($81)-($mul59);
      var $84=$pnp_addr;
      var $arrayidx61=(($84)|0);
      HEAPF64[(($arrayidx61)>>3)]=$sub60;
      var $85=$p1_addr;
      var $arrayidx62=(($85+8)|0);
      var $86=HEAPF64[(($arrayidx62)>>3)];
      var $87=$bn;
      var $88=$t1;
      var $mul63=($87)*($88);
      var $sub64=($86)-($mul63);
      var $89=$pnp_addr;
      var $arrayidx65=(($89+8)|0);
      HEAPF64[(($arrayidx65)>>3)]=$sub64;
      var $90=$p1_addr;
      var $arrayidx66=(($90+16)|0);
      var $91=HEAPF64[(($arrayidx66)>>3)];
      var $92=$cn;
      var $93=$t1;
      var $mul67=($92)*($93);
      var $sub68=($91)-($mul67);
      var $94=$pnp_addr;
      var $arrayidx69=(($94+16)|0);
      HEAPF64[(($arrayidx69)>>3)]=$sub68;
      var $95=$t1;
      var $96=$dist_addr;
      HEAPF64[(($96)>>3)]=$95;
      label = 10; break;
    case 9: 
      var $97=$p2_addr;
      var $98=$pnl_addr;
      _r8vec_copy(3, $97, $98);
      var $99=$t2;
      var $100=$dist_addr;
      HEAPF64[(($100)>>3)]=$99;
      var $101=$p2_addr;
      var $arrayidx70=(($101)|0);
      var $102=HEAPF64[(($arrayidx70)>>3)];
      var $103=$an;
      var $104=$t2;
      var $mul71=($103)*($104);
      var $sub72=($102)-($mul71);
      var $105=$pnp_addr;
      var $arrayidx73=(($105)|0);
      HEAPF64[(($arrayidx73)>>3)]=$sub72;
      var $106=$p2_addr;
      var $arrayidx74=(($106+8)|0);
      var $107=HEAPF64[(($arrayidx74)>>3)];
      var $108=$bn;
      var $109=$t2;
      var $mul75=($108)*($109);
      var $sub76=($107)-($mul75);
      var $110=$pnp_addr;
      var $arrayidx77=(($110+8)|0);
      HEAPF64[(($arrayidx77)>>3)]=$sub76;
      var $111=$p2_addr;
      var $arrayidx78=(($111+16)|0);
      var $112=HEAPF64[(($arrayidx78)>>3)];
      var $113=$cn;
      var $114=$t2;
      var $mul79=($113)*($114);
      var $sub80=($112)-($mul79);
      var $115=$pnp_addr;
      var $arrayidx81=(($115+16)|0);
      HEAPF64[(($arrayidx81)>>3)]=$sub80;
      label = 10; break;
    case 10: 
      label = 18; break;
    case 11: 
      var $116=$t1;
      var $cmp84=$116 == 0;
      if ($cmp84) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $alpha=0;
      label = 17; break;
    case 13: 
      var $117=$t2;
      var $cmp87=$117 == 0;
      if ($cmp87) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $alpha=1;
      label = 16; break;
    case 15: 
      var $118=$t2;
      var $119=$t2;
      var $120=$t1;
      var $sub90=($119)-($120);
      var $div91=($118)/($sub90);
      $alpha=$div91;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $121=$alpha;
      var $122=$p1_addr;
      var $arrayidx94=(($122)|0);
      var $123=HEAPF64[(($arrayidx94)>>3)];
      var $mul95=($121)*($123);
      var $124=$alpha;
      var $sub96=(1)-($124);
      var $125=$p2_addr;
      var $arrayidx97=(($125)|0);
      var $126=HEAPF64[(($arrayidx97)>>3)];
      var $mul98=($sub96)*($126);
      var $add99=($mul95)+($mul98);
      var $127=$pnl_addr;
      var $arrayidx100=(($127)|0);
      HEAPF64[(($arrayidx100)>>3)]=$add99;
      var $128=$alpha;
      var $129=$p1_addr;
      var $arrayidx101=(($129+8)|0);
      var $130=HEAPF64[(($arrayidx101)>>3)];
      var $mul102=($128)*($130);
      var $131=$alpha;
      var $sub103=(1)-($131);
      var $132=$p2_addr;
      var $arrayidx104=(($132+8)|0);
      var $133=HEAPF64[(($arrayidx104)>>3)];
      var $mul105=($sub103)*($133);
      var $add106=($mul102)+($mul105);
      var $134=$pnl_addr;
      var $arrayidx107=(($134+8)|0);
      HEAPF64[(($arrayidx107)>>3)]=$add106;
      var $135=$alpha;
      var $136=$p1_addr;
      var $arrayidx108=(($136+16)|0);
      var $137=HEAPF64[(($arrayidx108)>>3)];
      var $mul109=($135)*($137);
      var $138=$alpha;
      var $sub110=(1)-($138);
      var $139=$p2_addr;
      var $arrayidx111=(($139+16)|0);
      var $140=HEAPF64[(($arrayidx111)>>3)];
      var $mul112=($sub110)*($140);
      var $add113=($mul109)+($mul112);
      var $141=$pnl_addr;
      var $arrayidx114=(($141+16)|0);
      HEAPF64[(($arrayidx114)>>3)]=$add113;
      var $142=$pnl_addr;
      var $143=$pnp_addr;
      _r8vec_copy(3, $142, $143);
      var $144=$dist_addr;
      HEAPF64[(($144)>>3)]=0;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_segment_near_3d"] = _plane_imp_segment_near_3d;
function _plane_imp_triangle_int_add_3d($p1, $p2, $dist1, $dist2, $int_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $dist1_addr;
      var $dist2_addr;
      var $int_num_addr;
      var $p_addr;
      var $alpha;
      var $n;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $dist1_addr=$dist1;
      $dist2_addr=$dist2;
      $int_num_addr=$int_num;
      $p_addr=$p;
      var $0=$int_num_addr;
      var $1=HEAP32[(($0)>>2)];
      $n=$1;
      var $2=$dist1_addr;
      var $cmp=$2 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$p1_addr;
      var $arrayidx=(($3)|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$n;
      var $mul=((($5)*(3))&-1);
      var $add=(($mul)|0);
      var $6=$p_addr;
      var $arrayidx1=(($6+($add<<3))|0);
      HEAPF64[(($arrayidx1)>>3)]=$4;
      var $7=$p1_addr;
      var $arrayidx2=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx2)>>3)];
      var $9=$n;
      var $mul3=((($9)*(3))&-1);
      var $add4=((($mul3)+(1))|0);
      var $10=$p_addr;
      var $arrayidx5=(($10+($add4<<3))|0);
      HEAPF64[(($arrayidx5)>>3)]=$8;
      var $11=$p1_addr;
      var $arrayidx6=(($11+16)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$n;
      var $mul7=((($13)*(3))&-1);
      var $add8=((($mul7)+(2))|0);
      var $14=$p_addr;
      var $arrayidx9=(($14+($add8<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$12;
      var $15=$n;
      var $add10=((($15)+(1))|0);
      $n=$add10;
      label = 10; break;
    case 4: 
      var $16=$dist2_addr;
      var $cmp11=$16 == 0;
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$p2_addr;
      var $arrayidx13=(($17)|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      var $19=$n;
      var $mul14=((($19)*(3))&-1);
      var $add15=(($mul14)|0);
      var $20=$p_addr;
      var $arrayidx16=(($20+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$18;
      var $21=$p2_addr;
      var $arrayidx17=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx17)>>3)];
      var $23=$n;
      var $mul18=((($23)*(3))&-1);
      var $add19=((($mul18)+(1))|0);
      var $24=$p_addr;
      var $arrayidx20=(($24+($add19<<3))|0);
      HEAPF64[(($arrayidx20)>>3)]=$22;
      var $25=$p2_addr;
      var $arrayidx21=(($25+16)|0);
      var $26=HEAPF64[(($arrayidx21)>>3)];
      var $27=$n;
      var $mul22=((($27)*(3))&-1);
      var $add23=((($mul22)+(2))|0);
      var $28=$p_addr;
      var $arrayidx24=(($28+($add23<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$26;
      var $29=$n;
      var $add25=((($29)+(1))|0);
      $n=$add25;
      label = 9; break;
    case 6: 
      var $30=$dist1_addr;
      var $31=$dist2_addr;
      var $mul27=($30)*($31);
      var $cmp28=$mul27 < 0;
      if ($cmp28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$dist2_addr;
      var $33=$dist2_addr;
      var $34=$dist1_addr;
      var $sub=($33)-($34);
      var $div=($32)/($sub);
      $alpha=$div;
      var $35=$alpha;
      var $36=$p1_addr;
      var $arrayidx30=(($36)|0);
      var $37=HEAPF64[(($arrayidx30)>>3)];
      var $mul31=($35)*($37);
      var $38=$alpha;
      var $sub32=(1)-($38);
      var $39=$p2_addr;
      var $arrayidx33=(($39)|0);
      var $40=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($sub32)*($40);
      var $add35=($mul31)+($mul34);
      var $41=$n;
      var $mul36=((($41)*(3))&-1);
      var $add37=(($mul36)|0);
      var $42=$p_addr;
      var $arrayidx38=(($42+($add37<<3))|0);
      HEAPF64[(($arrayidx38)>>3)]=$add35;
      var $43=$alpha;
      var $44=$p1_addr;
      var $arrayidx39=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx39)>>3)];
      var $mul40=($43)*($45);
      var $46=$alpha;
      var $sub41=(1)-($46);
      var $47=$p2_addr;
      var $arrayidx42=(($47+8)|0);
      var $48=HEAPF64[(($arrayidx42)>>3)];
      var $mul43=($sub41)*($48);
      var $add44=($mul40)+($mul43);
      var $49=$n;
      var $mul45=((($49)*(3))&-1);
      var $add46=((($mul45)+(1))|0);
      var $50=$p_addr;
      var $arrayidx47=(($50+($add46<<3))|0);
      HEAPF64[(($arrayidx47)>>3)]=$add44;
      var $51=$alpha;
      var $52=$p1_addr;
      var $arrayidx48=(($52+16)|0);
      var $53=HEAPF64[(($arrayidx48)>>3)];
      var $mul49=($51)*($53);
      var $54=$alpha;
      var $sub50=(1)-($54);
      var $55=$p2_addr;
      var $arrayidx51=(($55+16)|0);
      var $56=HEAPF64[(($arrayidx51)>>3)];
      var $mul52=($sub50)*($56);
      var $add53=($mul49)+($mul52);
      var $57=$n;
      var $mul54=((($57)*(3))&-1);
      var $add55=((($mul54)+(2))|0);
      var $58=$p_addr;
      var $arrayidx56=(($58+($add55<<3))|0);
      HEAPF64[(($arrayidx56)>>3)]=$add53;
      var $59=$n;
      var $add57=((($59)+(1))|0);
      $n=$add57;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $60=$n;
      var $61=$int_num_addr;
      HEAP32[(($61)>>2)]=$60;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_triangle_int_add_3d"] = _plane_imp_triangle_int_add_3d;
function _plane_imp_triangle_int_3d($a, $b, $c, $d, $t, $int_num, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $t_addr;
      var $int_num_addr;
      var $p_addr;
      var $dist1;
      var $dist2;
      var $dist3;
      var $n=__stackBase__;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $t_addr=$t;
      $int_num_addr=$int_num;
      $p_addr=$p;
      HEAP32[(($n)>>2)]=0;
      var $0=$a_addr;
      var $1=$t_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $mul=($0)*($2);
      var $3=$b_addr;
      var $4=$t_addr;
      var $arrayidx1=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx1)>>3)];
      var $mul2=($3)*($5);
      var $add=($mul)+($mul2);
      var $6=$c_addr;
      var $7=$t_addr;
      var $arrayidx3=(($7+16)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $mul4=($6)*($8);
      var $add5=($add)+($mul4);
      var $9=$d_addr;
      var $add6=($add5)+($9);
      $dist1=$add6;
      var $10=$a_addr;
      var $11=$t_addr;
      var $arrayidx7=(($11+24)|0);
      var $12=HEAPF64[(($arrayidx7)>>3)];
      var $mul8=($10)*($12);
      var $13=$b_addr;
      var $14=$t_addr;
      var $arrayidx9=(($14+32)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $mul10=($13)*($15);
      var $add11=($mul8)+($mul10);
      var $16=$c_addr;
      var $17=$t_addr;
      var $arrayidx12=(($17+40)|0);
      var $18=HEAPF64[(($arrayidx12)>>3)];
      var $mul13=($16)*($18);
      var $add14=($add11)+($mul13);
      var $19=$d_addr;
      var $add15=($add14)+($19);
      $dist2=$add15;
      var $20=$a_addr;
      var $21=$t_addr;
      var $arrayidx16=(($21+48)|0);
      var $22=HEAPF64[(($arrayidx16)>>3)];
      var $mul17=($20)*($22);
      var $23=$b_addr;
      var $24=$t_addr;
      var $arrayidx18=(($24+56)|0);
      var $25=HEAPF64[(($arrayidx18)>>3)];
      var $mul19=($23)*($25);
      var $add20=($mul17)+($mul19);
      var $26=$c_addr;
      var $27=$t_addr;
      var $arrayidx21=(($27+64)|0);
      var $28=HEAPF64[(($arrayidx21)>>3)];
      var $mul22=($26)*($28);
      var $add23=($add20)+($mul22);
      var $29=$d_addr;
      var $add24=($add23)+($29);
      $dist3=$add24;
      var $30=$dist1;
      var $cmp=$30 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $31=$t_addr;
      var $arrayidx25=(($31)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $33=HEAP32[(($n)>>2)];
      var $mul26=((($33)*(3))&-1);
      var $add27=(($mul26)|0);
      var $34=$p_addr;
      var $arrayidx28=(($34+($add27<<3))|0);
      HEAPF64[(($arrayidx28)>>3)]=$32;
      var $35=$t_addr;
      var $arrayidx29=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx29)>>3)];
      var $37=HEAP32[(($n)>>2)];
      var $mul30=((($37)*(3))&-1);
      var $add31=((($mul30)+(1))|0);
      var $38=$p_addr;
      var $arrayidx32=(($38+($add31<<3))|0);
      HEAPF64[(($arrayidx32)>>3)]=$36;
      var $39=$t_addr;
      var $arrayidx33=(($39+16)|0);
      var $40=HEAPF64[(($arrayidx33)>>3)];
      var $41=HEAP32[(($n)>>2)];
      var $mul34=((($41)*(3))&-1);
      var $add35=((($mul34)+(2))|0);
      var $42=$p_addr;
      var $arrayidx36=(($42+($add35<<3))|0);
      HEAPF64[(($arrayidx36)>>3)]=$40;
      var $43=HEAP32[(($n)>>2)];
      var $add37=((($43)+(1))|0);
      HEAP32[(($n)>>2)]=$add37;
      label = 4; break;
    case 4: 
      var $44=$dist2;
      var $cmp38=$44 == 0;
      if ($cmp38) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $45=$t_addr;
      var $arrayidx40=(($45+24)|0);
      var $46=HEAPF64[(($arrayidx40)>>3)];
      var $47=HEAP32[(($n)>>2)];
      var $mul41=((($47)*(3))&-1);
      var $add42=(($mul41)|0);
      var $48=$p_addr;
      var $arrayidx43=(($48+($add42<<3))|0);
      HEAPF64[(($arrayidx43)>>3)]=$46;
      var $49=$t_addr;
      var $arrayidx44=(($49+32)|0);
      var $50=HEAPF64[(($arrayidx44)>>3)];
      var $51=HEAP32[(($n)>>2)];
      var $mul45=((($51)*(3))&-1);
      var $add46=((($mul45)+(1))|0);
      var $52=$p_addr;
      var $arrayidx47=(($52+($add46<<3))|0);
      HEAPF64[(($arrayidx47)>>3)]=$50;
      var $53=$t_addr;
      var $arrayidx48=(($53+40)|0);
      var $54=HEAPF64[(($arrayidx48)>>3)];
      var $55=HEAP32[(($n)>>2)];
      var $mul49=((($55)*(3))&-1);
      var $add50=((($mul49)+(2))|0);
      var $56=$p_addr;
      var $arrayidx51=(($56+($add50<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$54;
      var $57=HEAP32[(($n)>>2)];
      var $add52=((($57)+(1))|0);
      HEAP32[(($n)>>2)]=$add52;
      label = 6; break;
    case 6: 
      var $58=$dist3;
      var $cmp54=$58 == 0;
      if ($cmp54) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $59=$t_addr;
      var $arrayidx56=(($59+48)|0);
      var $60=HEAPF64[(($arrayidx56)>>3)];
      var $61=HEAP32[(($n)>>2)];
      var $mul57=((($61)*(3))&-1);
      var $add58=(($mul57)|0);
      var $62=$p_addr;
      var $arrayidx59=(($62+($add58<<3))|0);
      HEAPF64[(($arrayidx59)>>3)]=$60;
      var $63=$t_addr;
      var $arrayidx60=(($63+56)|0);
      var $64=HEAPF64[(($arrayidx60)>>3)];
      var $65=HEAP32[(($n)>>2)];
      var $mul61=((($65)*(3))&-1);
      var $add62=((($mul61)+(1))|0);
      var $66=$p_addr;
      var $arrayidx63=(($66+($add62<<3))|0);
      HEAPF64[(($arrayidx63)>>3)]=$64;
      var $67=$t_addr;
      var $arrayidx64=(($67+64)|0);
      var $68=HEAPF64[(($arrayidx64)>>3)];
      var $69=HEAP32[(($n)>>2)];
      var $mul65=((($69)*(3))&-1);
      var $add66=((($mul65)+(2))|0);
      var $70=$p_addr;
      var $arrayidx67=(($70+($add66<<3))|0);
      HEAPF64[(($arrayidx67)>>3)]=$68;
      var $71=HEAP32[(($n)>>2)];
      var $add68=((($71)+(1))|0);
      HEAP32[(($n)>>2)]=$add68;
      label = 8; break;
    case 8: 
      var $72=HEAP32[(($n)>>2)];
      var $cmp70=2 <= (($72)|(0));
      if ($cmp70) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $73=HEAP32[(($n)>>2)];
      var $74=$int_num_addr;
      HEAP32[(($74)>>2)]=$73;
      label = 32; break;
    case 10: 
      var $75=HEAP32[(($n)>>2)];
      var $cmp73=(($75)|(0))==1;
      if ($cmp73) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $76=$dist1;
      var $cmp75=$76 == 0;
      if ($cmp75) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $77=$t_addr;
      var $add_ptr=(($77+24)|0);
      var $78=$t_addr;
      var $add_ptr77=(($78+48)|0);
      var $79=$dist2;
      var $80=$dist3;
      var $81=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr, $add_ptr77, $79, $80, $n, $81);
      label = 19; break;
    case 13: 
      var $82=$dist2;
      var $cmp78=$82 == 0;
      if ($cmp78) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $83=$t_addr;
      var $add_ptr80=(($83)|0);
      var $84=$t_addr;
      var $add_ptr81=(($84+48)|0);
      var $85=$dist1;
      var $86=$dist3;
      var $87=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr80, $add_ptr81, $85, $86, $n, $87);
      label = 18; break;
    case 15: 
      var $88=$dist3;
      var $cmp83=$88 == 0;
      if ($cmp83) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $89=$t_addr;
      var $add_ptr85=(($89)|0);
      var $90=$t_addr;
      var $add_ptr86=(($90+24)|0);
      var $91=$dist1;
      var $92=$dist2;
      var $93=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr85, $add_ptr86, $91, $92, $n, $93);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 32; break;
    case 20: 
      var $94=$dist1;
      var $95=$dist2;
      var $mul91=($94)*($95);
      var $cmp92=$mul91 < 0;
      if ($cmp92) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $96=$dist1;
      var $97=$dist3;
      var $mul93=($96)*($97);
      var $cmp94=$mul93 < 0;
      if ($cmp94) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $98=$t_addr;
      var $add_ptr96=(($98)|0);
      var $99=$t_addr;
      var $add_ptr97=(($99+24)|0);
      var $100=$dist1;
      var $101=$dist2;
      var $102=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr96, $add_ptr97, $100, $101, $n, $102);
      var $103=$t_addr;
      var $add_ptr98=(($103)|0);
      var $104=$t_addr;
      var $add_ptr99=(($104+48)|0);
      var $105=$dist1;
      var $106=$dist3;
      var $107=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr98, $add_ptr99, $105, $106, $n, $107);
      label = 31; break;
    case 23: 
      var $108=$dist2;
      var $109=$dist1;
      var $mul101=($108)*($109);
      var $cmp102=$mul101 < 0;
      if ($cmp102) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $110=$dist2;
      var $111=$dist3;
      var $mul104=($110)*($111);
      var $cmp105=$mul104 < 0;
      if ($cmp105) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $112=$t_addr;
      var $add_ptr107=(($112+24)|0);
      var $113=$t_addr;
      var $add_ptr108=(($113)|0);
      var $114=$dist2;
      var $115=$dist1;
      var $116=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr107, $add_ptr108, $114, $115, $n, $116);
      var $117=$t_addr;
      var $add_ptr109=(($117+24)|0);
      var $118=$t_addr;
      var $add_ptr110=(($118+48)|0);
      var $119=$dist2;
      var $120=$dist3;
      var $121=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr109, $add_ptr110, $119, $120, $n, $121);
      label = 30; break;
    case 26: 
      var $122=$dist3;
      var $123=$dist1;
      var $mul112=($122)*($123);
      var $cmp113=$mul112 < 0;
      if ($cmp113) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $124=$dist3;
      var $125=$dist2;
      var $mul115=($124)*($125);
      var $cmp116=$mul115 < 0;
      if ($cmp116) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $126=$t_addr;
      var $add_ptr118=(($126+48)|0);
      var $127=$t_addr;
      var $add_ptr119=(($127)|0);
      var $128=$dist3;
      var $129=$dist1;
      var $130=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr118, $add_ptr119, $128, $129, $n, $130);
      var $131=$t_addr;
      var $add_ptr120=(($131+48)|0);
      var $132=$t_addr;
      var $add_ptr121=(($132+24)|0);
      var $133=$dist3;
      var $134=$dist2;
      var $135=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr120, $add_ptr121, $133, $134, $n, $135);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $136=HEAP32[(($n)>>2)];
      var $137=$int_num_addr;
      HEAP32[(($137)>>2)]=$136;
      label = 32; break;
    case 32: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_triangle_int_3d"] = _plane_imp_triangle_int_3d;
function _plane_imp_triangle_near_3d($t, $a, $b, $c, $d, $dist, $pn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $dist_addr;
      var $pn_addr;
      var $dist12=__stackBase__;
      var $dist23=(__stackBase__)+(8);
      var $dist31=(__stackBase__)+(16);
      var $near_num;
      var $pp=(__stackBase__)+(24);
      var $pt=(__stackBase__)+(48);
      $t_addr=$t;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $dist_addr=$dist;
      $pn_addr=$pn;
      $near_num=0;
      var $0=$t_addr;
      var $add_ptr=(($0)|0);
      var $1=$t_addr;
      var $add_ptr1=(($1+24)|0);
      var $2=$a_addr;
      var $3=$b_addr;
      var $4=$c_addr;
      var $5=$d_addr;
      var $arraydecay=(($pp)|0);
      var $arraydecay2=(($pt)|0);
      _plane_imp_segment_near_3d($add_ptr, $add_ptr1, $2, $3, $4, $5, $dist12, $arraydecay, $arraydecay2);
      var $6=HEAPF64[(($dist12)>>3)];
      var $7=$dist_addr;
      HEAPF64[(($7)>>3)]=$6;
      var $arraydecay3=(($pt)|0);
      var $8=$pn_addr;
      var $9=$near_num;
      var $mul=((($9)*(3))&-1);
      var $add_ptr4=(($8+($mul<<3))|0);
      _r8vec_copy(3, $arraydecay3, $add_ptr4);
      var $10=$near_num;
      var $add=((($10)+(1))|0);
      $near_num=$add;
      var $11=HEAPF64[(($dist12)>>3)];
      var $cmp=0 < $11;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $arraydecay5=(($pp)|0);
      var $12=$pn_addr;
      var $13=$near_num;
      var $mul6=((($13)*(3))&-1);
      var $add_ptr7=(($12+($mul6<<3))|0);
      _r8vec_copy(3, $arraydecay5, $add_ptr7);
      var $14=$near_num;
      var $add8=((($14)+(1))|0);
      $near_num=$add8;
      label = 4; break;
    case 4: 
      var $15=$t_addr;
      var $add_ptr9=(($15+24)|0);
      var $16=$t_addr;
      var $add_ptr10=(($16+48)|0);
      var $17=$a_addr;
      var $18=$b_addr;
      var $19=$c_addr;
      var $20=$d_addr;
      var $arraydecay11=(($pp)|0);
      var $arraydecay12=(($pt)|0);
      _plane_imp_segment_near_3d($add_ptr9, $add_ptr10, $17, $18, $19, $20, $dist23, $arraydecay11, $arraydecay12);
      var $21=HEAPF64[(($dist23)>>3)];
      var $22=$dist_addr;
      var $23=HEAPF64[(($22)>>3)];
      var $cmp13=$21 < $23;
      if ($cmp13) { label = 5; break; } else { label = 8; break; }
    case 5: 
      $near_num=0;
      var $24=HEAPF64[(($dist23)>>3)];
      var $25=$dist_addr;
      HEAPF64[(($25)>>3)]=$24;
      var $arraydecay15=(($pt)|0);
      var $26=$pn_addr;
      var $27=$near_num;
      var $mul16=((($27)*(3))&-1);
      var $add_ptr17=(($26+($mul16<<3))|0);
      _r8vec_copy(3, $arraydecay15, $add_ptr17);
      var $28=$near_num;
      var $add18=((($28)+(1))|0);
      $near_num=$add18;
      var $29=HEAPF64[(($dist23)>>3)];
      var $cmp19=0 < $29;
      if ($cmp19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $arraydecay21=(($pp)|0);
      var $30=$pn_addr;
      var $31=$near_num;
      var $mul22=((($31)*(3))&-1);
      var $add_ptr23=(($30+($mul22<<3))|0);
      _r8vec_copy(3, $arraydecay21, $add_ptr23);
      var $32=$near_num;
      var $add24=((($32)+(1))|0);
      $near_num=$add24;
      label = 7; break;
    case 7: 
      label = 13; break;
    case 8: 
      var $33=HEAPF64[(($dist23)>>3)];
      var $34=$dist_addr;
      var $35=HEAPF64[(($34)>>3)];
      var $cmp26=$33 == $35;
      if ($cmp26) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $arraydecay28=(($pt)|0);
      var $36=$pn_addr;
      var $37=$near_num;
      var $mul29=((($37)*(3))&-1);
      var $add_ptr30=(($36+($mul29<<3))|0);
      _r8vec_copy(3, $arraydecay28, $add_ptr30);
      var $38=$near_num;
      var $add31=((($38)+(1))|0);
      $near_num=$add31;
      var $39=HEAPF64[(($dist23)>>3)];
      var $cmp32=0 < $39;
      if ($cmp32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $arraydecay34=(($pp)|0);
      var $40=$pn_addr;
      var $41=$near_num;
      var $mul35=((($41)*(3))&-1);
      var $add_ptr36=(($40+($mul35<<3))|0);
      _r8vec_copy(3, $arraydecay34, $add_ptr36);
      var $42=$near_num;
      var $add37=((($42)+(1))|0);
      $near_num=$add37;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $43=$t_addr;
      var $add_ptr41=(($43+48)|0);
      var $44=$t_addr;
      var $add_ptr42=(($44)|0);
      var $45=$a_addr;
      var $46=$b_addr;
      var $47=$c_addr;
      var $48=$d_addr;
      var $arraydecay43=(($pp)|0);
      var $arraydecay44=(($pt)|0);
      _plane_imp_segment_near_3d($add_ptr41, $add_ptr42, $45, $46, $47, $48, $dist31, $arraydecay43, $arraydecay44);
      var $49=HEAPF64[(($dist31)>>3)];
      var $50=$dist_addr;
      var $51=HEAPF64[(($50)>>3)];
      var $cmp45=$49 < $51;
      if ($cmp45) { label = 14; break; } else { label = 17; break; }
    case 14: 
      $near_num=0;
      var $52=HEAPF64[(($dist31)>>3)];
      var $53=$dist_addr;
      HEAPF64[(($53)>>3)]=$52;
      var $arraydecay47=(($pt)|0);
      var $54=$pn_addr;
      var $55=$near_num;
      var $mul48=((($55)*(3))&-1);
      var $add_ptr49=(($54+($mul48<<3))|0);
      _r8vec_copy(3, $arraydecay47, $add_ptr49);
      var $56=$near_num;
      var $add50=((($56)+(1))|0);
      $near_num=$add50;
      var $57=HEAPF64[(($dist31)>>3)];
      var $cmp51=0 < $57;
      if ($cmp51) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $arraydecay53=(($pp)|0);
      var $58=$pn_addr;
      var $59=$near_num;
      var $mul54=((($59)*(3))&-1);
      var $add_ptr55=(($58+($mul54<<3))|0);
      _r8vec_copy(3, $arraydecay53, $add_ptr55);
      var $60=$near_num;
      var $add56=((($60)+(1))|0);
      $near_num=$add56;
      label = 16; break;
    case 16: 
      label = 22; break;
    case 17: 
      var $61=HEAPF64[(($dist31)>>3)];
      var $62=$dist_addr;
      var $63=HEAPF64[(($62)>>3)];
      var $cmp59=$61 == $63;
      if ($cmp59) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $arraydecay61=(($pt)|0);
      var $64=$pn_addr;
      var $65=$near_num;
      var $mul62=((($65)*(3))&-1);
      var $add_ptr63=(($64+($mul62<<3))|0);
      _r8vec_copy(3, $arraydecay61, $add_ptr63);
      var $66=$near_num;
      var $add64=((($66)+(1))|0);
      $near_num=$add64;
      var $67=HEAPF64[(($dist31)>>3)];
      var $cmp65=0 < $67;
      if ($cmp65) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $arraydecay67=(($pp)|0);
      var $68=$pn_addr;
      var $69=$near_num;
      var $mul68=((($69)*(3))&-1);
      var $add_ptr69=(($68+($mul68<<3))|0);
      _r8vec_copy(3, $arraydecay67, $add_ptr69);
      var $70=$near_num;
      var $add70=((($70)+(1))|0);
      $near_num=$add70;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $71=$near_num;
      STACKTOP = __stackBase__;
      return $71;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp_triangle_near_3d"] = _plane_imp_triangle_near_3d;
function _plane_imp2exp_3d($a, $b, $c, $d, $p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $pn=__stackBase__;
  var $pp=(__stackBase__)+(24);
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  var $0=$a_addr;
  var $1=$b_addr;
  var $2=$c_addr;
  var $3=$d_addr;
  var $arraydecay=(($pp)|0);
  var $arraydecay1=(($pn)|0);
  _plane_imp2normal_3d($0, $1, $2, $3, $arraydecay, $arraydecay1);
  var $arraydecay2=(($pp)|0);
  var $arraydecay3=(($pn)|0);
  var $4=$p1_addr;
  var $5=$p2_addr;
  var $6=$p3_addr;
  _plane_normal2exp_3d($arraydecay2, $arraydecay3, $4, $5, $6);
  STACKTOP = __stackBase__;
  return;
}
Module["_plane_imp2exp_3d"] = _plane_imp2exp_3d;
function _plane_imp2normal_3d($a, $b, $c, $d, $pp, $pn) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d_addr;
      var $pp_addr;
      var $pn_addr;
      var $norm;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $d_addr=$d;
      $pp_addr=$pp;
      $pn_addr=$pn;
      var $0=$a_addr;
      var $1=$a_addr;
      var $mul=($0)*($1);
      var $2=$b_addr;
      var $3=$b_addr;
      var $mul1=($2)*($3);
      var $add=($mul)+($mul1);
      var $4=$c_addr;
      var $5=$c_addr;
      var $mul2=($4)*($5);
      var $add3=($add)+($mul2);
      var $call=Math.sqrt($add3);
      $norm=$call;
      var $6=$norm;
      var $cmp=$6 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($7, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($8, ((17280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($9, ((6616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stderr)>>2)];
      var $call7=_fprintf($10, ((6560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $11=$a_addr;
      var $12=$norm;
      var $div=($11)/($12);
      var $13=$pn_addr;
      var $arrayidx=(($13)|0);
      HEAPF64[(($arrayidx)>>3)]=$div;
      var $14=$b_addr;
      var $15=$norm;
      var $div8=($14)/($15);
      var $16=$pn_addr;
      var $arrayidx9=(($16+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$div8;
      var $17=$c_addr;
      var $18=$norm;
      var $div10=($17)/($18);
      var $19=$pn_addr;
      var $arrayidx11=(($19+16)|0);
      HEAPF64[(($arrayidx11)>>3)]=$div10;
      var $20=$a_addr;
      var $cmp12=$20 != 0;
      if ($cmp12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$d_addr;
      var $sub=(-$21);
      var $22=$a_addr;
      var $div14=($sub)/($22);
      var $23=$pp_addr;
      var $arrayidx15=(($23)|0);
      HEAPF64[(($arrayidx15)>>3)]=$div14;
      var $24=$pp_addr;
      var $arrayidx16=(($24+8)|0);
      HEAPF64[(($arrayidx16)>>3)]=0;
      var $25=$pp_addr;
      var $arrayidx17=(($25+16)|0);
      HEAPF64[(($arrayidx17)>>3)]=0;
      label = 13; break;
    case 6: 
      var $26=$b_addr;
      var $cmp18=$26 != 0;
      if ($cmp18) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=$pp_addr;
      var $arrayidx20=(($27)|0);
      HEAPF64[(($arrayidx20)>>3)]=0;
      var $28=$d_addr;
      var $sub21=(-$28);
      var $29=$b_addr;
      var $div22=($sub21)/($29);
      var $30=$pp_addr;
      var $arrayidx23=(($30+8)|0);
      HEAPF64[(($arrayidx23)>>3)]=$div22;
      var $31=$pp_addr;
      var $arrayidx24=(($31+16)|0);
      HEAPF64[(($arrayidx24)>>3)]=0;
      label = 12; break;
    case 8: 
      var $32=$c_addr;
      var $cmp26=$32 != 0;
      if ($cmp26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $33=$pp_addr;
      var $arrayidx28=(($33)|0);
      HEAPF64[(($arrayidx28)>>3)]=0;
      var $34=$pp_addr;
      var $arrayidx29=(($34+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=0;
      var $35=$d_addr;
      var $sub30=(-$35);
      var $36=$c_addr;
      var $div31=($sub30)/($36);
      var $37=$pp_addr;
      var $arrayidx32=(($37+16)|0);
      HEAPF64[(($arrayidx32)>>3)]=$div31;
      label = 11; break;
    case 10: 
      var $38=HEAP32[((_stderr)>>2)];
      var $call34=_fprintf($38, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $39=HEAP32[((_stderr)>>2)];
      var $call35=_fprintf($39, ((17280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $40=HEAP32[((_stderr)>>2)];
      var $call36=_fprintf($40, ((17200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_imp2normal_3d"] = _plane_imp2normal_3d;
function _r8vec_negative_strict($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $a_addr=$a;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$i;
      var $3=$a_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $cmp1=0 <= $4;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $value=0;
      var $5=$value;
      $retval=$5;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $value=1;
      var $7=$value;
      $retval=$7;
      label = 9; break;
    case 9: 
      var $8=$retval;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_negative_strict"] = _r8vec_negative_strict;
function _plane_normal2exp_3d($pp, $pn, $p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $pp_addr;
  var $pn_addr;
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $pq=__stackBase__;
  var $pr=(__stackBase__)+(24);
  $pp_addr=$pp;
  $pn_addr=$pn;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  var $0=$pp_addr;
  var $1=$pn_addr;
  var $arraydecay=(($pq)|0);
  var $arraydecay1=(($pr)|0);
  _plane_normal_basis_3d($0, $1, $arraydecay, $arraydecay1);
  var $2=$pp_addr;
  var $arrayidx=(($2)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$p1_addr;
  var $arrayidx2=(($4)|0);
  HEAPF64[(($arrayidx2)>>3)]=$3;
  var $5=$pp_addr;
  var $arrayidx3=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx3)>>3)];
  var $7=$p1_addr;
  var $arrayidx4=(($7+8)|0);
  HEAPF64[(($arrayidx4)>>3)]=$6;
  var $8=$pp_addr;
  var $arrayidx5=(($8+16)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$p1_addr;
  var $arrayidx6=(($10+16)|0);
  HEAPF64[(($arrayidx6)>>3)]=$9;
  var $11=$pp_addr;
  var $arrayidx7=(($11)|0);
  var $12=HEAPF64[(($arrayidx7)>>3)];
  var $arrayidx8=(($pq)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $add=($12)+($13);
  var $14=$p2_addr;
  var $arrayidx9=(($14)|0);
  HEAPF64[(($arrayidx9)>>3)]=$add;
  var $15=$pp_addr;
  var $arrayidx10=(($15+8)|0);
  var $16=HEAPF64[(($arrayidx10)>>3)];
  var $arrayidx11=(($pq+8)|0);
  var $17=HEAPF64[(($arrayidx11)>>3)];
  var $add12=($16)+($17);
  var $18=$p2_addr;
  var $arrayidx13=(($18+8)|0);
  HEAPF64[(($arrayidx13)>>3)]=$add12;
  var $19=$pp_addr;
  var $arrayidx14=(($19+16)|0);
  var $20=HEAPF64[(($arrayidx14)>>3)];
  var $arrayidx15=(($pq+16)|0);
  var $21=HEAPF64[(($arrayidx15)>>3)];
  var $add16=($20)+($21);
  var $22=$p2_addr;
  var $arrayidx17=(($22+16)|0);
  HEAPF64[(($arrayidx17)>>3)]=$add16;
  var $23=$pp_addr;
  var $arrayidx18=(($23)|0);
  var $24=HEAPF64[(($arrayidx18)>>3)];
  var $arrayidx19=(($pr)|0);
  var $25=HEAPF64[(($arrayidx19)>>3)];
  var $add20=($24)+($25);
  var $26=$p3_addr;
  var $arrayidx21=(($26)|0);
  HEAPF64[(($arrayidx21)>>3)]=$add20;
  var $27=$pp_addr;
  var $arrayidx22=(($27+8)|0);
  var $28=HEAPF64[(($arrayidx22)>>3)];
  var $arrayidx23=(($pr+8)|0);
  var $29=HEAPF64[(($arrayidx23)>>3)];
  var $add24=($28)+($29);
  var $30=$p3_addr;
  var $arrayidx25=(($30+8)|0);
  HEAPF64[(($arrayidx25)>>3)]=$add24;
  var $31=$pp_addr;
  var $arrayidx26=(($31+16)|0);
  var $32=HEAPF64[(($arrayidx26)>>3)];
  var $arrayidx27=(($pr+16)|0);
  var $33=HEAPF64[(($arrayidx27)>>3)];
  var $add28=($32)+($33);
  var $34=$p3_addr;
  var $arrayidx29=(($34+16)|0);
  HEAPF64[(($arrayidx29)>>3)]=$add28;
  STACKTOP = __stackBase__;
  return;
}
Module["_plane_normal2exp_3d"] = _plane_normal2exp_3d;
function _plane_normal_qr_to_xyz($pp, $normal, $pq, $pr, $n, $qr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pp_addr;
      var $normal_addr;
      var $pq_addr;
      var $pr_addr;
      var $n_addr;
      var $qr_addr;
      var $i;
      var $j;
      var $xyz;
      $pp_addr=$pp;
      $normal_addr=$normal;
      $pq_addr=$pq;
      $pr_addr=$pr;
      $n_addr=$n;
      $qr_addr=$qr;
      var $0=$n_addr;
      var $mul=((($0)*(3))&-1);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $1=$call;
      $xyz=$1;
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $cmp3=(($4)|(0)) < 3;
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$i;
      var $6=$pp_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$pq_addr;
      var $arrayidx5=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$j;
      var $mul6=($11<<1);
      var $add=(($mul6)|0);
      var $12=$qr_addr;
      var $arrayidx7=(($12+($add<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $mul8=($10)*($13);
      var $add9=($7)+($mul8);
      var $14=$i;
      var $15=$pr_addr;
      var $arrayidx10=(($15+($14<<3))|0);
      var $16=HEAPF64[(($arrayidx10)>>3)];
      var $17=$j;
      var $mul11=($17<<1);
      var $add12=((($mul11)+(1))|0);
      var $18=$qr_addr;
      var $arrayidx13=(($18+($add12<<3))|0);
      var $19=HEAPF64[(($arrayidx13)>>3)];
      var $mul14=($16)*($19);
      var $add15=($add9)+($mul14);
      var $20=$i;
      var $21=$j;
      var $mul16=((($21)*(3))&-1);
      var $add17=((($20)+($mul16))|0);
      var $22=$xyz;
      var $arrayidx18=(($22+($add17<<3))|0);
      HEAPF64[(($arrayidx18)>>3)]=$add15;
      label = 7; break;
    case 7: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $24=$j;
      var $inc20=((($24)+(1))|0);
      $j=$inc20;
      label = 3; break;
    case 10: 
      var $25=$xyz;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_qr_to_xyz"] = _plane_normal_qr_to_xyz;
function _plane_normal_tetrahedron_intersect($pp, $normal, $t, $int_num, $pint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pp_addr;
      var $normal_addr;
      var $t_addr;
      var $int_num_addr;
      var $pint_addr;
      var $area1;
      var $area2;
      var $d=__stackBase__;
      var $dn;
      var $dpp;
      var $i;
      var $j;
      var $j1;
      var $j2;
      var $temp;
      $pp_addr=$pp;
      $normal_addr=$normal;
      $t_addr=$t;
      $int_num_addr=$int_num;
      $pint_addr=$pint;
      var $0=$int_num_addr;
      HEAP32[(($0)>>2)]=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $cmp=(($1)|(0)) < 4;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp2=(($2)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $3=$i;
      var $4=$j;
      var $mul=((($4)*(3))&-1);
      var $add=((($3)+($mul))|0);
      var $5=$pint_addr;
      var $arrayidx=(($5+($add<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 7; break;
    case 7: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $7=$j;
      var $inc5=((($7)+(1))|0);
      $j=$inc5;
      label = 3; break;
    case 10: 
      var $8=$normal_addr;
      var $9=$normal_addr;
      var $call=_r8vec_dot_product(3, $8, $9);
      var $call7=Math.sqrt($call);
      $dn=$call7;
      var $10=$dn;
      var $11=$normal_addr;
      var $12=$pp_addr;
      var $call8=_r8vec_dot_product(3, $11, $12);
      var $13=$dn;
      var $div=($call8)/($13);
      var $sub=($10)-($div);
      $dpp=$sub;
      $j=0;
      label = 11; break;
    case 11: 
      var $14=$j;
      var $cmp10=(($14)|(0)) < 4;
      if ($cmp10) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $15=$dn;
      var $16=$dpp;
      var $sub12=($15)-($16);
      var $17=$j;
      var $arrayidx13=(($d+($17<<3))|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      $i=0;
      label = 13; break;
    case 13: 
      var $18=$i;
      var $cmp15=(($18)|(0)) < 3;
      if ($cmp15) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $19=$j;
      var $arrayidx17=(($d+($19<<3))|0);
      var $20=HEAPF64[(($arrayidx17)>>3)];
      var $21=$i;
      var $22=$normal_addr;
      var $arrayidx18=(($22+($21<<3))|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $24=$i;
      var $25=$j;
      var $mul19=((($25)*(3))&-1);
      var $add20=((($24)+($mul19))|0);
      var $26=$t_addr;
      var $arrayidx21=(($26+($add20<<3))|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $mul22=($23)*($27);
      var $sub23=($20)-($mul22);
      var $28=$j;
      var $arrayidx24=(($d+($28<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$sub23;
      label = 15; break;
    case 15: 
      var $29=$i;
      var $inc26=((($29)+(1))|0);
      $i=$inc26;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $30=$j;
      var $inc29=((($30)+(1))|0);
      $j=$inc29;
      label = 11; break;
    case 18: 
      var $arraydecay=(($d)|0);
      var $call31=_r8vec_negative_strict(4, $arraydecay);
      var $tobool=(($call31)|(0))!=0;
      if ($tobool) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $arraydecay32=(($d)|0);
      var $call33=_r8vec_positive_strict(4, $arraydecay32);
      var $tobool34=(($call33)|(0))!=0;
      if ($tobool34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $31=$int_num_addr;
      HEAP32[(($31)>>2)]=0;
      label = 51; break;
    case 21: 
      $j1=0;
      label = 22; break;
    case 22: 
      var $32=$j1;
      var $cmp36=(($32)|(0)) < 4;
      if ($cmp36) { label = 23; break; } else { label = 42; break; }
    case 23: 
      var $33=$j1;
      var $arrayidx38=(($d+($33<<3))|0);
      var $34=HEAPF64[(($arrayidx38)>>3)];
      var $cmp39=$34 == 0;
      if ($cmp39) { label = 24; break; } else { label = 29; break; }
    case 24: 
      $i=0;
      label = 25; break;
    case 25: 
      var $35=$i;
      var $cmp42=(($35)|(0)) < 3;
      if ($cmp42) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $36=$i;
      var $37=$j1;
      var $mul44=((($37)*(3))&-1);
      var $add45=((($36)+($mul44))|0);
      var $38=$t_addr;
      var $arrayidx46=(($38+($add45<<3))|0);
      var $39=HEAPF64[(($arrayidx46)>>3)];
      var $40=$i;
      var $41=$int_num_addr;
      var $42=HEAP32[(($41)>>2)];
      var $mul47=((($42)*(3))&-1);
      var $add48=((($40)+($mul47))|0);
      var $43=$pint_addr;
      var $arrayidx49=(($43+($add48<<3))|0);
      HEAPF64[(($arrayidx49)>>3)]=$39;
      label = 27; break;
    case 27: 
      var $44=$i;
      var $inc51=((($44)+(1))|0);
      $i=$inc51;
      label = 25; break;
    case 28: 
      var $45=$int_num_addr;
      var $46=HEAP32[(($45)>>2)];
      var $add53=((($46)+(1))|0);
      var $47=$int_num_addr;
      HEAP32[(($47)>>2)]=$add53;
      label = 40; break;
    case 29: 
      var $48=$j1;
      var $add54=((($48)+(1))|0);
      $j2=$add54;
      label = 30; break;
    case 30: 
      var $49=$j2;
      var $cmp56=(($49)|(0)) < 4;
      if ($cmp56) { label = 31; break; } else { label = 39; break; }
    case 31: 
      var $50=$j1;
      var $arrayidx58=(($d+($50<<3))|0);
      var $51=HEAPF64[(($arrayidx58)>>3)];
      var $52=$j2;
      var $arrayidx59=(($d+($52<<3))|0);
      var $53=HEAPF64[(($arrayidx59)>>3)];
      var $call60=_r8_sign_opposite_strict($51, $53);
      var $tobool61=(($call60)|(0))!=0;
      if ($tobool61) { label = 32; break; } else { label = 37; break; }
    case 32: 
      $i=0;
      label = 33; break;
    case 33: 
      var $54=$i;
      var $cmp64=(($54)|(0)) < 3;
      if ($cmp64) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $55=$j1;
      var $arrayidx66=(($d+($55<<3))|0);
      var $56=HEAPF64[(($arrayidx66)>>3)];
      var $57=$i;
      var $58=$j2;
      var $mul67=((($58)*(3))&-1);
      var $add68=((($57)+($mul67))|0);
      var $59=$t_addr;
      var $arrayidx69=(($59+($add68<<3))|0);
      var $60=HEAPF64[(($arrayidx69)>>3)];
      var $mul70=($56)*($60);
      var $61=$j2;
      var $arrayidx71=(($d+($61<<3))|0);
      var $62=HEAPF64[(($arrayidx71)>>3)];
      var $63=$i;
      var $64=$j1;
      var $mul72=((($64)*(3))&-1);
      var $add73=((($63)+($mul72))|0);
      var $65=$t_addr;
      var $arrayidx74=(($65+($add73<<3))|0);
      var $66=HEAPF64[(($arrayidx74)>>3)];
      var $mul75=($62)*($66);
      var $sub76=($mul70)-($mul75);
      var $67=$j1;
      var $arrayidx77=(($d+($67<<3))|0);
      var $68=HEAPF64[(($arrayidx77)>>3)];
      var $69=$j2;
      var $arrayidx78=(($d+($69<<3))|0);
      var $70=HEAPF64[(($arrayidx78)>>3)];
      var $sub79=($68)-($70);
      var $div80=($sub76)/($sub79);
      var $71=$i;
      var $72=$int_num_addr;
      var $73=HEAP32[(($72)>>2)];
      var $mul81=((($73)*(3))&-1);
      var $add82=((($71)+($mul81))|0);
      var $74=$pint_addr;
      var $arrayidx83=(($74+($add82<<3))|0);
      HEAPF64[(($arrayidx83)>>3)]=$div80;
      label = 35; break;
    case 35: 
      var $75=$i;
      var $inc85=((($75)+(1))|0);
      $i=$inc85;
      label = 33; break;
    case 36: 
      var $76=$int_num_addr;
      var $77=HEAP32[(($76)>>2)];
      var $add87=((($77)+(1))|0);
      var $78=$int_num_addr;
      HEAP32[(($78)>>2)]=$add87;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $79=$j2;
      var $inc90=((($79)+(1))|0);
      $j2=$inc90;
      label = 30; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $80=$j1;
      var $inc94=((($80)+(1))|0);
      $j1=$inc94;
      label = 22; break;
    case 42: 
      var $81=$int_num_addr;
      var $82=HEAP32[(($81)>>2)];
      var $cmp96=(($82)|(0))==4;
      if ($cmp96) { label = 43; break; } else { label = 50; break; }
    case 43: 
      var $83=$pint_addr;
      var $call98=_quad_area_3d($83);
      $area1=$call98;
      $i=0;
      label = 44; break;
    case 44: 
      var $84=$i;
      var $cmp100=(($84)|(0)) < 3;
      if ($cmp100) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $85=$i;
      var $add102=((($85)+(9))|0);
      var $86=$pint_addr;
      var $arrayidx103=(($86+($add102<<3))|0);
      var $87=HEAPF64[(($arrayidx103)>>3)];
      $temp=$87;
      var $88=$i;
      var $add104=((($88)+(12))|0);
      var $89=$pint_addr;
      var $arrayidx105=(($89+($add104<<3))|0);
      var $90=HEAPF64[(($arrayidx105)>>3)];
      var $91=$i;
      var $add106=((($91)+(9))|0);
      var $92=$pint_addr;
      var $arrayidx107=(($92+($add106<<3))|0);
      HEAPF64[(($arrayidx107)>>3)]=$90;
      var $93=$temp;
      var $94=$i;
      var $add108=((($94)+(12))|0);
      var $95=$pint_addr;
      var $arrayidx109=(($95+($add108<<3))|0);
      HEAPF64[(($arrayidx109)>>3)]=$93;
      label = 46; break;
    case 46: 
      var $96=$i;
      var $inc111=((($96)+(1))|0);
      $i=$inc111;
      label = 44; break;
    case 47: 
      var $97=$pint_addr;
      var $call113=_quad_area_3d($97);
      $area2=$call113;
      var $98=$area2;
      var $99=$area1;
      var $cmp114=$98 < $99;
      if ($cmp114) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $100=$i;
      var $add116=((($100)+(9))|0);
      var $101=$pint_addr;
      var $arrayidx117=(($101+($add116<<3))|0);
      var $102=HEAPF64[(($arrayidx117)>>3)];
      $temp=$102;
      var $103=$i;
      var $add118=((($103)+(12))|0);
      var $104=$pint_addr;
      var $arrayidx119=(($104+($add118<<3))|0);
      var $105=HEAPF64[(($arrayidx119)>>3)];
      var $106=$i;
      var $add120=((($106)+(9))|0);
      var $107=$pint_addr;
      var $arrayidx121=(($107+($add120<<3))|0);
      HEAPF64[(($arrayidx121)>>3)]=$105;
      var $108=$temp;
      var $109=$i;
      var $add122=((($109)+(12))|0);
      var $110=$pint_addr;
      var $arrayidx123=(($110+($add122<<3))|0);
      HEAPF64[(($arrayidx123)>>3)]=$108;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_tetrahedron_intersect"] = _plane_normal_tetrahedron_intersect;
function _plane_normal_line_exp_int_3d($pp, $normal, $p1, $p2, $pint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pp_addr;
      var $normal_addr;
      var $p1_addr;
      var $p2_addr;
      var $pint_addr;
      var $direction=__stackBase__;
      var $i;
      var $ival;
      var $temp;
      var $temp2;
      $pp_addr=$pp;
      $normal_addr=$normal;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $pint_addr=$pint;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_line_exp_is_degenerate_nd(3, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((16960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((8200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$normal_addr;
      var $call4=_r8vec_norm(3, $5);
      $temp=$call4;
      var $6=$temp;
      var $cmp=$6 == 0;
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($7, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call7=_fprintf($8, ((16960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($9, ((16888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $10=$i;
      var $cmp10=(($10)|(0)) < 3;
      if ($cmp10) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $11=$i;
      var $12=$normal_addr;
      var $arrayidx=(($12+($11<<3))|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $14=$temp;
      var $div=($13)/($14);
      var $15=$i;
      var $16=$normal_addr;
      var $arrayidx11=(($16+($15<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$div;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp13=(($18)|(0)) < 3;
      if ($cmp13) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $20=$p2_addr;
      var $arrayidx15=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$i;
      var $23=$p1_addr;
      var $arrayidx16=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx16)>>3)];
      var $sub=($21)-($24);
      var $25=$i;
      var $arrayidx17=(($direction+($25<<3))|0);
      HEAPF64[(($arrayidx17)>>3)]=$sub;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc19=((($26)+(1))|0);
      $i=$inc19;
      label = 11; break;
    case 14: 
      var $arraydecay=(($direction)|0);
      var $call21=_r8vec_norm(3, $arraydecay);
      $temp=$call21;
      $i=0;
      label = 15; break;
    case 15: 
      var $27=$i;
      var $cmp23=(($27)|(0)) < 3;
      if ($cmp23) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $28=$i;
      var $arrayidx25=(($direction+($28<<3))|0);
      var $29=HEAPF64[(($arrayidx25)>>3)];
      var $30=$temp;
      var $div26=($29)/($30);
      var $31=$i;
      var $arrayidx27=(($direction+($31<<3))|0);
      HEAPF64[(($arrayidx27)>>3)]=$div26;
      label = 17; break;
    case 17: 
      var $32=$i;
      var $inc29=((($32)+(1))|0);
      $i=$inc29;
      label = 15; break;
    case 18: 
      var $33=$normal_addr;
      var $arraydecay31=(($direction)|0);
      var $call32=_r8vec_dot_product(3, $33, $arraydecay31);
      var $cmp33=$call32 == 0;
      if ($cmp33) { label = 19; break; } else { label = 31; break; }
    case 19: 
      $temp=0;
      $i=0;
      label = 20; break;
    case 20: 
      var $34=$i;
      var $cmp36=(($34)|(0)) < 3;
      if ($cmp36) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $35=$temp;
      var $36=$i;
      var $37=$normal_addr;
      var $arrayidx38=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx38)>>3)];
      var $39=$i;
      var $40=$p1_addr;
      var $arrayidx39=(($40+($39<<3))|0);
      var $41=HEAPF64[(($arrayidx39)>>3)];
      var $42=$i;
      var $43=$pp_addr;
      var $arrayidx40=(($43+($42<<3))|0);
      var $44=HEAPF64[(($arrayidx40)>>3)];
      var $sub41=($41)-($44);
      var $mul=($38)*($sub41);
      var $add=($35)+($mul);
      $temp=$add;
      label = 22; break;
    case 22: 
      var $45=$i;
      var $inc43=((($45)+(1))|0);
      $i=$inc43;
      label = 20; break;
    case 23: 
      var $46=$temp;
      var $cmp45=$46 == 0;
      if ($cmp45) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $ival=2;
      var $47=$p1_addr;
      var $48=$pint_addr;
      _r8vec_copy(3, $47, $48);
      label = 30; break;
    case 25: 
      $ival=0;
      $i=0;
      label = 26; break;
    case 26: 
      var $49=$i;
      var $cmp48=(($49)|(0)) < 3;
      if ($cmp48) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $call50=_r8_huge();
      var $50=$i;
      var $51=$pint_addr;
      var $arrayidx51=(($51+($50<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$call50;
      label = 28; break;
    case 28: 
      var $52=$i;
      var $inc53=((($52)+(1))|0);
      $i=$inc53;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $53=$ival;
      $retval=$53;
      label = 44; break;
    case 31: 
      $temp=0;
      $i=0;
      label = 32; break;
    case 32: 
      var $54=$i;
      var $cmp58=(($54)|(0)) < 3;
      if ($cmp58) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $55=$temp;
      var $56=$i;
      var $57=$normal_addr;
      var $arrayidx60=(($57+($56<<3))|0);
      var $58=HEAPF64[(($arrayidx60)>>3)];
      var $59=$i;
      var $60=$pp_addr;
      var $arrayidx61=(($60+($59<<3))|0);
      var $61=HEAPF64[(($arrayidx61)>>3)];
      var $62=$i;
      var $63=$p1_addr;
      var $arrayidx62=(($63+($62<<3))|0);
      var $64=HEAPF64[(($arrayidx62)>>3)];
      var $sub63=($61)-($64);
      var $mul64=($58)*($sub63);
      var $add65=($55)+($mul64);
      $temp=$add65;
      label = 34; break;
    case 34: 
      var $65=$i;
      var $inc67=((($65)+(1))|0);
      $i=$inc67;
      label = 32; break;
    case 35: 
      $temp2=0;
      $i=0;
      label = 36; break;
    case 36: 
      var $66=$i;
      var $cmp70=(($66)|(0)) < 3;
      if ($cmp70) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $67=$temp2;
      var $68=$i;
      var $69=$normal_addr;
      var $arrayidx72=(($69+($68<<3))|0);
      var $70=HEAPF64[(($arrayidx72)>>3)];
      var $71=$i;
      var $arrayidx73=(($direction+($71<<3))|0);
      var $72=HEAPF64[(($arrayidx73)>>3)];
      var $mul74=($70)*($72);
      var $add75=($67)+($mul74);
      $temp2=$add75;
      label = 38; break;
    case 38: 
      var $73=$i;
      var $inc77=((($73)+(1))|0);
      $i=$inc77;
      label = 36; break;
    case 39: 
      $ival=1;
      $i=0;
      label = 40; break;
    case 40: 
      var $74=$i;
      var $cmp80=(($74)|(0)) < 3;
      if ($cmp80) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $75=$i;
      var $76=$p1_addr;
      var $arrayidx82=(($76+($75<<3))|0);
      var $77=HEAPF64[(($arrayidx82)>>3)];
      var $78=$temp;
      var $79=$i;
      var $arrayidx83=(($direction+($79<<3))|0);
      var $80=HEAPF64[(($arrayidx83)>>3)];
      var $mul84=($78)*($80);
      var $81=$temp2;
      var $div85=($mul84)/($81);
      var $add86=($77)+($div85);
      var $82=$i;
      var $83=$pint_addr;
      var $arrayidx87=(($83+($82<<3))|0);
      HEAPF64[(($arrayidx87)>>3)]=$add86;
      label = 42; break;
    case 42: 
      var $84=$i;
      var $inc89=((($84)+(1))|0);
      $i=$inc89;
      label = 40; break;
    case 43: 
      var $85=$ival;
      $retval=$85;
      label = 44; break;
    case 44: 
      var $86=$retval;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_line_exp_int_3d"] = _plane_normal_line_exp_int_3d;
function _r8_sign_opposite_strict($r1, $r2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r1_addr;
      var $r2_addr;
      var $value;
      $r1_addr=$r1;
      $r2_addr=$r2;
      var $0=$r1_addr;
      var $cmp=$0 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$r2_addr;
      var $cmp1=0 < $1;
      if ($cmp1) { var $5 = 1;label = 7; break; } else { label = 4; break; }
    case 4: 
      var $2=$r2_addr;
      var $cmp2=$2 < 0;
      if ($cmp2) { label = 5; break; } else { var $4 = 0;label = 6; break; }
    case 5: 
      var $3=$r1_addr;
      var $cmp3=0 < $3;
      var $4 = $cmp3;label = 6; break;
    case 6: 
      var $4;
      var $5 = $4;label = 7; break;
    case 7: 
      var $5;
      var $lor_ext=(($5)&(1));
      $value=$lor_ext;
      var $6=$value;
      return $6;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_sign_opposite_strict"] = _r8_sign_opposite_strict;
function _r8vec_positive_strict($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $a_addr=$a;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$i;
      var $3=$a_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $cmp1=$4 <= 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $value=0;
      var $5=$value;
      $retval=$5;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $value=1;
      var $7=$value;
      $retval=$7;
      label = 9; break;
    case 9: 
      var $8=$retval;
      return $8;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_positive_strict"] = _r8vec_positive_strict;
function _quad_area_3d($q) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $area;
      var $i;
      var $j;
      var $p;
      $q_addr=$q;
      var $call=_malloc(96);
      var $0=$call;
      $p=$0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp2=(($2)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $3=$i;
      var $4=$j;
      var $mul=((($4)*(3))&-1);
      var $add=((($3)+($mul))|0);
      var $5=$q_addr;
      var $arrayidx=(($5+($add<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$i;
      var $8=$j;
      var $add4=((($8)+(1))|0);
      var $mul5=((($add4)*(3))&-1);
      var $add6=((($7)+($mul5))|0);
      var $9=$q_addr;
      var $arrayidx7=(($9+($add6<<3))|0);
      var $10=HEAPF64[(($arrayidx7)>>3)];
      var $add8=($6)+($10);
      var $div=($add8)/(2);
      var $11=$i;
      var $12=$j;
      var $mul9=((($12)*(3))&-1);
      var $add10=((($11)+($mul9))|0);
      var $13=$p;
      var $arrayidx11=(($13+($add10<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$div;
      label = 7; break;
    case 7: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $15=$j;
      var $inc13=((($15)+(1))|0);
      $j=$inc13;
      label = 3; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $cmp16=(($16)|(0)) < 3;
      if ($cmp16) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $17=$i;
      var $add18=((($17)+(9))|0);
      var $18=$q_addr;
      var $arrayidx19=(($18+($add18<<3))|0);
      var $19=HEAPF64[(($arrayidx19)>>3)];
      var $20=$i;
      var $add20=(($20)|0);
      var $21=$q_addr;
      var $arrayidx21=(($21+($add20<<3))|0);
      var $22=HEAPF64[(($arrayidx21)>>3)];
      var $add22=($19)+($22);
      var $div23=($add22)/(2);
      var $23=$i;
      var $add24=((($23)+(9))|0);
      var $24=$p;
      var $arrayidx25=(($24+($add24<<3))|0);
      HEAPF64[(($arrayidx25)>>3)]=$div23;
      label = 13; break;
    case 13: 
      var $25=$i;
      var $inc27=((($25)+(1))|0);
      $i=$inc27;
      label = 11; break;
    case 14: 
      var $26=$p;
      var $call29=_parallelogram_area_3d($26);
      $area=$call29;
      var $27=$area;
      var $mul30=($27)*(2);
      $area=$mul30;
      var $28=$p;
      var $29=$28;
      _free($29);
      var $30=$area;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_area_3d"] = _quad_area_3d;
function _plane_normal_triangle_int_3d($pp, $pn, $t, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pp_addr;
      var $pn_addr;
      var $t_addr;
      var $p_addr;
      var $d;
      var $dist1;
      var $dist2;
      var $dist3;
      var $int_num=__stackBase__;
      $pp_addr=$pp;
      $pn_addr=$pn;
      $t_addr=$t;
      $p_addr=$p;
      HEAP32[(($int_num)>>2)]=0;
      var $0=$pn_addr;
      var $1=$pp_addr;
      var $call=_r8vec_dot_product(3, $0, $1);
      var $sub=(-$call);
      $d=$sub;
      var $2=$pn_addr;
      var $3=$t_addr;
      var $add_ptr=(($3)|0);
      var $call1=_r8vec_dot_product(3, $2, $add_ptr);
      var $4=$d;
      var $add=($call1)+($4);
      $dist1=$add;
      var $5=$pn_addr;
      var $6=$t_addr;
      var $add_ptr2=(($6+24)|0);
      var $call3=_r8vec_dot_product(3, $5, $add_ptr2);
      var $7=$d;
      var $add4=($call3)+($7);
      $dist2=$add4;
      var $8=$pn_addr;
      var $9=$t_addr;
      var $add_ptr5=(($9+48)|0);
      var $call6=_r8vec_dot_product(3, $8, $add_ptr5);
      var $10=$d;
      var $add7=($call6)+($10);
      $dist3=$add7;
      var $11=$dist1;
      var $cmp=$11 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$t_addr;
      var $add_ptr8=(($12)|0);
      var $13=$p_addr;
      var $14=HEAP32[(($int_num)>>2)];
      var $mul=((($14)*(3))&-1);
      var $add_ptr9=(($13+($mul<<3))|0);
      _r8vec_copy(3, $add_ptr8, $add_ptr9);
      var $15=HEAP32[(($int_num)>>2)];
      var $add10=((($15)+(1))|0);
      HEAP32[(($int_num)>>2)]=$add10;
      label = 4; break;
    case 4: 
      var $16=$dist2;
      var $cmp11=$16 == 0;
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$t_addr;
      var $add_ptr13=(($17+24)|0);
      var $18=$p_addr;
      var $19=HEAP32[(($int_num)>>2)];
      var $mul14=((($19)*(3))&-1);
      var $add_ptr15=(($18+($mul14<<3))|0);
      _r8vec_copy(3, $add_ptr13, $add_ptr15);
      var $20=HEAP32[(($int_num)>>2)];
      var $add16=((($20)+(1))|0);
      HEAP32[(($int_num)>>2)]=$add16;
      label = 6; break;
    case 6: 
      var $21=$dist3;
      var $cmp18=$21 == 0;
      if ($cmp18) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$t_addr;
      var $add_ptr20=(($22+48)|0);
      var $23=$p_addr;
      var $24=HEAP32[(($int_num)>>2)];
      var $mul21=((($24)*(3))&-1);
      var $add_ptr22=(($23+($mul21<<3))|0);
      _r8vec_copy(3, $add_ptr20, $add_ptr22);
      var $25=HEAP32[(($int_num)>>2)];
      var $add23=((($25)+(1))|0);
      HEAP32[(($int_num)>>2)]=$add23;
      label = 8; break;
    case 8: 
      var $26=HEAP32[(($int_num)>>2)];
      var $cmp25=2 <= (($26)|(0));
      if ($cmp25) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=HEAP32[(($int_num)>>2)];
      $retval=$27;
      label = 32; break;
    case 10: 
      var $28=HEAP32[(($int_num)>>2)];
      var $cmp28=(($28)|(0))==1;
      if ($cmp28) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $29=$dist1;
      var $cmp30=$29 == 0;
      if ($cmp30) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $30=$t_addr;
      var $add_ptr32=(($30+24)|0);
      var $31=$t_addr;
      var $add_ptr33=(($31+48)|0);
      var $32=$dist2;
      var $33=$dist3;
      var $34=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr32, $add_ptr33, $32, $33, $int_num, $34);
      label = 19; break;
    case 13: 
      var $35=$dist2;
      var $cmp34=$35 == 0;
      if ($cmp34) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $36=$t_addr;
      var $add_ptr36=(($36)|0);
      var $37=$t_addr;
      var $add_ptr37=(($37+48)|0);
      var $38=$dist1;
      var $39=$dist3;
      var $40=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr36, $add_ptr37, $38, $39, $int_num, $40);
      label = 18; break;
    case 15: 
      var $41=$dist3;
      var $cmp39=$41 == 0;
      if ($cmp39) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $42=$t_addr;
      var $add_ptr41=(($42)|0);
      var $43=$t_addr;
      var $add_ptr42=(($43+24)|0);
      var $44=$dist1;
      var $45=$dist2;
      var $46=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr41, $add_ptr42, $44, $45, $int_num, $46);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $47=HEAP32[(($int_num)>>2)];
      $retval=$47;
      label = 32; break;
    case 20: 
      var $48=$dist1;
      var $49=$dist2;
      var $mul47=($48)*($49);
      var $cmp48=$mul47 < 0;
      if ($cmp48) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $50=$dist1;
      var $51=$dist3;
      var $mul49=($50)*($51);
      var $cmp50=$mul49 < 0;
      if ($cmp50) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $52=$t_addr;
      var $add_ptr52=(($52)|0);
      var $53=$t_addr;
      var $add_ptr53=(($53+24)|0);
      var $54=$dist1;
      var $55=$dist2;
      var $56=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr52, $add_ptr53, $54, $55, $int_num, $56);
      var $57=$t_addr;
      var $add_ptr54=(($57)|0);
      var $58=$t_addr;
      var $add_ptr55=(($58+48)|0);
      var $59=$dist1;
      var $60=$dist3;
      var $61=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr54, $add_ptr55, $59, $60, $int_num, $61);
      label = 31; break;
    case 23: 
      var $62=$dist2;
      var $63=$dist1;
      var $mul57=($62)*($63);
      var $cmp58=$mul57 < 0;
      if ($cmp58) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $64=$dist2;
      var $65=$dist3;
      var $mul60=($64)*($65);
      var $cmp61=$mul60 < 0;
      if ($cmp61) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $66=$t_addr;
      var $add_ptr63=(($66+24)|0);
      var $67=$t_addr;
      var $add_ptr64=(($67)|0);
      var $68=$dist2;
      var $69=$dist1;
      var $70=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr63, $add_ptr64, $68, $69, $int_num, $70);
      var $71=$t_addr;
      var $add_ptr65=(($71+24)|0);
      var $72=$t_addr;
      var $add_ptr66=(($72+48)|0);
      var $73=$dist2;
      var $74=$dist3;
      var $75=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr65, $add_ptr66, $73, $74, $int_num, $75);
      label = 30; break;
    case 26: 
      var $76=$dist3;
      var $77=$dist1;
      var $mul68=($76)*($77);
      var $cmp69=$mul68 < 0;
      if ($cmp69) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $78=$dist3;
      var $79=$dist2;
      var $mul71=($78)*($79);
      var $cmp72=$mul71 < 0;
      if ($cmp72) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $80=$t_addr;
      var $add_ptr74=(($80+48)|0);
      var $81=$t_addr;
      var $add_ptr75=(($81)|0);
      var $82=$dist3;
      var $83=$dist1;
      var $84=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr74, $add_ptr75, $82, $83, $int_num, $84);
      var $85=$t_addr;
      var $add_ptr76=(($85+48)|0);
      var $86=$t_addr;
      var $add_ptr77=(($86+24)|0);
      var $87=$dist3;
      var $88=$dist2;
      var $89=$p_addr;
      _plane_imp_triangle_int_add_3d($add_ptr76, $add_ptr77, $87, $88, $int_num, $89);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $90=HEAP32[(($int_num)>>2)];
      $retval=$90;
      label = 32; break;
    case 32: 
      var $91=$retval;
      STACKTOP = __stackBase__;
      return $91;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_triangle_int_3d"] = _plane_normal_triangle_int_3d;
function _plane_normal_uniform_3d($seed, $pp, $normal) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $seed_addr;
      var $pp_addr;
      var $normal_addr;
      var $i;
      var $norm;
      var $v;
      $seed_addr=$seed;
      $pp_addr=$pp;
      $normal_addr=$normal;
      var $0=$seed_addr;
      var $call=_ball_unit_sample_3d($0);
      $v=$call;
      var $1=$v;
      var $2=$pp_addr;
      _r8vec_copy(3, $1, $2);
      var $3=$v;
      var $4=$3;
      _free($4);
      var $5=$seed_addr;
      var $call1=_r8vec_normal_01_new(3, $5);
      $v=$call1;
      var $6=$v;
      var $7=$normal_addr;
      _r8vec_copy(3, $6, $7);
      var $8=$v;
      var $9=$8;
      _free($9);
      var $10=$normal_addr;
      var $call2=_r8vec_norm(3, $10);
      $norm=$call2;
      $i=0;
      label = 3; break;
    case 3: 
      var $11=$i;
      var $cmp=(($11)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $12=$i;
      var $13=$normal_addr;
      var $arrayidx=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx)>>3)];
      var $15=$norm;
      var $div=($14)/($15);
      var $16=$i;
      var $17=$normal_addr;
      var $arrayidx3=(($17+($16<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_uniform_3d"] = _plane_normal_uniform_3d;
function _plane_normal_uniform_nd($dim_num, $seed, $pp, $normal) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $seed_addr;
      var $pp_addr;
      var $normal_addr;
      var $i;
      var $norm;
      var $v;
      $dim_num_addr=$dim_num;
      $seed_addr=$seed;
      $pp_addr=$pp;
      $normal_addr=$normal;
      var $0=$dim_num_addr;
      var $1=$seed_addr;
      var $call=_ball_unit_sample_nd($0, $1);
      $v=$call;
      var $2=$dim_num_addr;
      var $3=$v;
      var $4=$pp_addr;
      _r8vec_copy($2, $3, $4);
      var $5=$v;
      var $6=$5;
      _free($6);
      var $7=$dim_num_addr;
      var $8=$seed_addr;
      var $call1=_r8vec_normal_01_new($7, $8);
      $v=$call1;
      var $9=$dim_num_addr;
      var $10=$v;
      var $11=$normal_addr;
      _r8vec_copy($9, $10, $11);
      var $12=$v;
      var $13=$12;
      _free($13);
      var $14=$dim_num_addr;
      var $15=$normal_addr;
      var $call2=_r8vec_norm($14, $15);
      $norm=$call2;
      $i=0;
      label = 3; break;
    case 3: 
      var $16=$i;
      var $17=$dim_num_addr;
      var $cmp=(($16)|(0)) < (($17)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $18=$i;
      var $19=$normal_addr;
      var $arrayidx=(($19+($18<<3))|0);
      var $20=HEAPF64[(($arrayidx)>>3)];
      var $21=$norm;
      var $div=($20)/($21);
      var $22=$i;
      var $23=$normal_addr;
      var $arrayidx3=(($23+($22<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_uniform_nd"] = _plane_normal_uniform_nd;
function _plane_normal_xyz_to_qr($pp, $normal, $pq, $pr, $n, $xyz) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pp_addr;
      var $normal_addr;
      var $pq_addr;
      var $pr_addr;
      var $n_addr;
      var $xyz_addr;
      var $j;
      var $qr;
      $pp_addr=$pp;
      $normal_addr=$normal;
      $pq_addr=$pq;
      $pr_addr=$pr;
      $n_addr=$n;
      $xyz_addr=$xyz;
      var $0=$n_addr;
      var $mul=($0<<1);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $1=$call;
      $qr=$1;
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$pq_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$j;
      var $mul2=((($6)*(3))&-1);
      var $add=(($mul2)|0);
      var $7=$xyz_addr;
      var $arrayidx3=(($7+($add<<3))|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $9=$pp_addr;
      var $arrayidx4=(($9)|0);
      var $10=HEAPF64[(($arrayidx4)>>3)];
      var $sub=($8)-($10);
      var $mul5=($5)*($sub);
      var $11=$pq_addr;
      var $arrayidx6=(($11+8)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$j;
      var $mul7=((($13)*(3))&-1);
      var $add8=((($mul7)+(1))|0);
      var $14=$xyz_addr;
      var $arrayidx9=(($14+($add8<<3))|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $16=$pp_addr;
      var $arrayidx10=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($15)-($17);
      var $mul12=($12)*($sub11);
      var $add13=($mul5)+($mul12);
      var $18=$pq_addr;
      var $arrayidx14=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $20=$j;
      var $mul15=((($20)*(3))&-1);
      var $add16=((($mul15)+(2))|0);
      var $21=$xyz_addr;
      var $arrayidx17=(($21+($add16<<3))|0);
      var $22=HEAPF64[(($arrayidx17)>>3)];
      var $23=$pp_addr;
      var $arrayidx18=(($23+16)|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($22)-($24);
      var $mul20=($19)*($sub19);
      var $add21=($add13)+($mul20);
      var $25=$j;
      var $mul22=($25<<1);
      var $add23=(($mul22)|0);
      var $26=$qr;
      var $arrayidx24=(($26+($add23<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$add21;
      var $27=$pr_addr;
      var $arrayidx25=(($27)|0);
      var $28=HEAPF64[(($arrayidx25)>>3)];
      var $29=$j;
      var $mul26=($29<<1);
      var $add27=(($mul26)|0);
      var $30=$xyz_addr;
      var $arrayidx28=(($30+($add27<<3))|0);
      var $31=HEAPF64[(($arrayidx28)>>3)];
      var $32=$pp_addr;
      var $arrayidx29=(($32)|0);
      var $33=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($31)-($33);
      var $mul31=($28)*($sub30);
      var $34=$pr_addr;
      var $arrayidx32=(($34+8)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $36=$j;
      var $mul33=((($36)*(3))&-1);
      var $add34=((($mul33)+(1))|0);
      var $37=$xyz_addr;
      var $arrayidx35=(($37+($add34<<3))|0);
      var $38=HEAPF64[(($arrayidx35)>>3)];
      var $39=$pp_addr;
      var $arrayidx36=(($39+8)|0);
      var $40=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($38)-($40);
      var $mul38=($35)*($sub37);
      var $add39=($mul31)+($mul38);
      var $41=$pr_addr;
      var $arrayidx40=(($41+16)|0);
      var $42=HEAPF64[(($arrayidx40)>>3)];
      var $43=$j;
      var $mul41=((($43)*(3))&-1);
      var $add42=((($mul41)+(2))|0);
      var $44=$xyz_addr;
      var $arrayidx43=(($44+($add42<<3))|0);
      var $45=HEAPF64[(($arrayidx43)>>3)];
      var $46=$pp_addr;
      var $arrayidx44=(($46+16)|0);
      var $47=HEAPF64[(($arrayidx44)>>3)];
      var $sub45=($45)-($47);
      var $mul46=($42)*($sub45);
      var $add47=($add39)+($mul46);
      var $48=$j;
      var $mul48=($48<<1);
      var $add49=((($mul48)+(1))|0);
      var $49=$qr;
      var $arrayidx50=(($49+($add49<<3))|0);
      HEAPF64[(($arrayidx50)>>3)]=$add47;
      label = 5; break;
    case 5: 
      var $50=$j;
      var $inc=((($50)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 6: 
      var $51=$qr;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
Module["_plane_normal_xyz_to_qr"] = _plane_normal_xyz_to_qr;
function _plane_normal2imp_3d($pp, $pn, $a, $b, $c, $d) {
  var label = 0;
  var $pp_addr;
  var $pn_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $d_addr;
  $pp_addr=$pp;
  $pn_addr=$pn;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $d_addr=$d;
  var $0=$pn_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$a_addr;
  HEAPF64[(($2)>>3)]=$1;
  var $3=$pn_addr;
  var $arrayidx1=(($3+8)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $5=$b_addr;
  HEAPF64[(($5)>>3)]=$4;
  var $6=$pn_addr;
  var $arrayidx2=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx2)>>3)];
  var $8=$c_addr;
  HEAPF64[(($8)>>3)]=$7;
  var $9=$pn_addr;
  var $10=$pp_addr;
  var $call=_r8vec_dot_product(3, $9, $10);
  var $sub=(-$call);
  var $11=$d_addr;
  HEAPF64[(($11)>>3)]=$sub;
  return;
}
Module["_plane_normal2imp_3d"] = _plane_normal2imp_3d;
function _planes_imp_angle_3d($a1, $b1, $c1, $d1, $a2, $b2, $c2, $d2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $a1_addr;
      var $b1_addr;
      var $c1_addr;
      var $d1_addr;
      var $a2_addr;
      var $b2_addr;
      var $c2_addr;
      var $d2_addr;
      var $cosine;
      var $norm1;
      var $norm2;
      var $value;
      $a1_addr=$a1;
      $b1_addr=$b1;
      $c1_addr=$c1;
      $d1_addr=$d1;
      $a2_addr=$a2;
      $b2_addr=$b2;
      $c2_addr=$c2;
      $d2_addr=$d2;
      var $0=$a1_addr;
      var $1=$a1_addr;
      var $mul=($0)*($1);
      var $2=$b1_addr;
      var $3=$b1_addr;
      var $mul1=($2)*($3);
      var $add=($mul)+($mul1);
      var $4=$c1_addr;
      var $5=$c1_addr;
      var $mul2=($4)*($5);
      var $add3=($add)+($mul2);
      var $call=Math.sqrt($add3);
      $norm1=$call;
      var $6=$norm1;
      var $cmp=$6 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call4=_r8_huge();
      $value=$call4;
      var $7=$value;
      $retval=$7;
      label = 7; break;
    case 4: 
      var $8=$a2_addr;
      var $9=$a2_addr;
      var $mul5=($8)*($9);
      var $10=$b2_addr;
      var $11=$b2_addr;
      var $mul6=($10)*($11);
      var $add7=($mul5)+($mul6);
      var $12=$c2_addr;
      var $13=$c2_addr;
      var $mul8=($12)*($13);
      var $add9=($add7)+($mul8);
      var $call10=Math.sqrt($add9);
      $norm2=$call10;
      var $14=$norm2;
      var $cmp11=$14 == 0;
      if ($cmp11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $call13=_r8_huge();
      $value=$call13;
      var $15=$value;
      $retval=$15;
      label = 7; break;
    case 6: 
      var $16=$a1_addr;
      var $17=$a2_addr;
      var $mul15=($16)*($17);
      var $18=$b1_addr;
      var $19=$b2_addr;
      var $mul16=($18)*($19);
      var $add17=($mul15)+($mul16);
      var $20=$c1_addr;
      var $21=$c2_addr;
      var $mul18=($20)*($21);
      var $add19=($add17)+($mul18);
      var $22=$norm1;
      var $23=$norm2;
      var $mul20=($22)*($23);
      var $div=($add19)/($mul20);
      $cosine=$div;
      var $24=$cosine;
      var $call21=Math.acos($24);
      $value=$call21;
      var $25=$value;
      $retval=$25;
      label = 7; break;
    case 7: 
      var $26=$retval;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_planes_imp_angle_3d"] = _planes_imp_angle_3d;
function _points_bisect_line_imp_2d($p1, $p2, $a, $b, $c) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$p1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p2_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=$a_addr;
  HEAPF64[(($4)>>3)]=$sub;
  var $5=$p1_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$p2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=$b_addr;
  HEAPF64[(($9)>>3)]=$sub4;
  var $10=$p1_addr;
  var $arrayidx5=(($10)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $12=$p1_addr;
  var $arrayidx6=(($12)|0);
  var $13=HEAPF64[(($arrayidx6)>>3)];
  var $mul=($11)*($13);
  var $14=$p1_addr;
  var $arrayidx7=(($14+8)|0);
  var $15=HEAPF64[(($arrayidx7)>>3)];
  var $16=$p1_addr;
  var $arrayidx8=(($16+8)|0);
  var $17=HEAPF64[(($arrayidx8)>>3)];
  var $mul9=($15)*($17);
  var $add=($mul)+($mul9);
  var $18=$p2_addr;
  var $arrayidx10=(($18)|0);
  var $19=HEAPF64[(($arrayidx10)>>3)];
  var $20=$p2_addr;
  var $arrayidx11=(($20)|0);
  var $21=HEAPF64[(($arrayidx11)>>3)];
  var $mul12=($19)*($21);
  var $22=$p2_addr;
  var $arrayidx13=(($22+8)|0);
  var $23=HEAPF64[(($arrayidx13)>>3)];
  var $24=$p2_addr;
  var $arrayidx14=(($24+8)|0);
  var $25=HEAPF64[(($arrayidx14)>>3)];
  var $mul15=($23)*($25);
  var $add16=($mul12)+($mul15);
  var $sub17=($add)-($add16);
  var $mul18=($sub17)*(-0.5);
  var $26=$c_addr;
  HEAPF64[(($26)>>3)]=$mul18;
  return;
}
Module["_points_bisect_line_imp_2d"] = _points_bisect_line_imp_2d;
function _points_centroid_2d($n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $p_addr;
      var $cent;
      var $dist;
      var $dist_min;
      var $i;
      var $j;
      $n_addr=$n;
      $p_addr=$p;
      $dist_min=0;
      $cent=-1;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 15; break; }
    case 4: 
      $dist=0;
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$dist;
      var $5=$i;
      var $mul=($5<<1);
      var $add=(($mul)|0);
      var $6=$p_addr;
      var $arrayidx=(($6+($add<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$j;
      var $mul4=($8<<1);
      var $add5=(($mul4)|0);
      var $9=$p_addr;
      var $arrayidx6=(($9+($add5<<3))|0);
      var $10=HEAPF64[(($arrayidx6)>>3)];
      var $sub=($7)-($10);
      var $11=$i;
      var $mul7=($11<<1);
      var $add8=(($mul7)|0);
      var $12=$p_addr;
      var $arrayidx9=(($12+($add8<<3))|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $14=$j;
      var $mul10=($14<<1);
      var $add11=(($mul10)|0);
      var $15=$p_addr;
      var $arrayidx12=(($15+($add11<<3))|0);
      var $16=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($16);
      var $mul14=($sub)*($sub13);
      var $add15=($4)+($mul14);
      var $17=$i;
      var $mul16=($17<<1);
      var $add17=((($mul16)+(1))|0);
      var $18=$p_addr;
      var $arrayidx18=(($18+($add17<<3))|0);
      var $19=HEAPF64[(($arrayidx18)>>3)];
      var $20=$j;
      var $mul19=($20<<1);
      var $add20=((($mul19)+(1))|0);
      var $21=$p_addr;
      var $arrayidx21=(($21+($add20<<3))|0);
      var $22=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($19)-($22);
      var $23=$i;
      var $mul23=($23<<1);
      var $add24=((($mul23)+(1))|0);
      var $24=$p_addr;
      var $arrayidx25=(($24+($add24<<3))|0);
      var $25=HEAPF64[(($arrayidx25)>>3)];
      var $26=$j;
      var $mul26=($26<<1);
      var $add27=((($mul26)+(1))|0);
      var $27=$p_addr;
      var $arrayidx28=(($27+($add27<<3))|0);
      var $28=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($25)-($28);
      var $mul30=($sub22)*($sub29);
      var $add31=($add15)+($mul30);
      $dist=$add31;
      label = 7; break;
    case 7: 
      var $29=$j;
      var $inc=((($29)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $30=$i;
      var $cmp32=(($30)|(0))==0;
      if ($cmp32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$dist;
      $dist_min=$31;
      var $32=$i;
      $cent=$32;
      label = 13; break;
    case 10: 
      var $33=$dist;
      var $34=$dist_min;
      var $cmp33=$33 < $34;
      if ($cmp33) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $35=$dist;
      $dist_min=$35;
      var $36=$i;
      $cent=$36;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $37=$i;
      var $inc37=((($37)+(1))|0);
      $i=$inc37;
      label = 3; break;
    case 15: 
      var $38=$cent;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_centroid_2d"] = _points_centroid_2d;
function _triangle_area_2d($t) {
  var label = 0;
  var $t_addr;
  var $area;
  $t_addr=$t;
  var $0=$t_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$t_addr;
  var $arrayidx1=(($2+24)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $4=$t_addr;
  var $arrayidx2=(($4+40)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $sub=($3)-($5);
  var $mul=($1)*($sub);
  var $6=$t_addr;
  var $arrayidx3=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $8=$t_addr;
  var $arrayidx4=(($8+40)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $10=$t_addr;
  var $arrayidx5=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $sub6=($9)-($11);
  var $mul7=($7)*($sub6);
  var $add=($mul)+($mul7);
  var $12=$t_addr;
  var $arrayidx8=(($12+32)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$t_addr;
  var $arrayidx9=(($14+8)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $16=$t_addr;
  var $arrayidx10=(($16+24)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $sub11=($15)-($17);
  var $mul12=($13)*($sub11);
  var $add13=($add)+($mul12);
  var $mul14=($add13)*(0.5);
  $area=$mul14;
  var $18=$area;
  return $18;
}
Module["_triangle_area_2d"] = _triangle_area_2d;
function _points_avoid_point_naive_2d($n, $pset, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $pset_addr;
      var $p_addr;
      var $j;
      var $normsq;
      var $tolsq;
      $n_addr=$n;
      $pset_addr=$pset;
      $p_addr=$p;
      var $call=_r8_epsilon();
      var $mul=($call)*(100);
      $tolsq=$mul;
      var $0=$tolsq;
      var $1=$tolsq;
      var $mul1=($0)*($1);
      $tolsq=$mul1;
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$j;
      var $mul2=($4<<1);
      var $add=(($mul2)|0);
      var $5=$pset_addr;
      var $arrayidx=(($5+($add<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$p_addr;
      var $arrayidx3=(($7)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub=($6)-($8);
      var $9=$j;
      var $mul4=($9<<1);
      var $add5=(($mul4)|0);
      var $10=$pset_addr;
      var $arrayidx6=(($10+($add5<<3))|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $12=$p_addr;
      var $arrayidx7=(($12)|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($11)-($13);
      var $mul9=($sub)*($sub8);
      var $14=$j;
      var $mul10=($14<<1);
      var $add11=((($mul10)+(1))|0);
      var $15=$pset_addr;
      var $arrayidx12=(($15+($add11<<3))|0);
      var $16=HEAPF64[(($arrayidx12)>>3)];
      var $17=$p_addr;
      var $arrayidx13=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($16)-($18);
      var $19=$j;
      var $mul15=($19<<1);
      var $add16=((($mul15)+(1))|0);
      var $20=$pset_addr;
      var $arrayidx17=(($20+($add16<<3))|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$p_addr;
      var $arrayidx18=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($23);
      var $mul20=($sub14)*($sub19);
      var $add21=($mul9)+($mul20);
      $normsq=$add21;
      var $24=$normsq;
      var $25=$tolsq;
      var $cmp22=$24 < $25;
      if ($cmp22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$j;
      var $inc=((($26)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $27=$retval;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_avoid_point_naive_2d"] = _points_avoid_point_naive_2d;
function _points_bisect_line_par_2d($p1, $p2, $f, $g, $x, $y) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $f_addr;
      var $g_addr;
      var $x_addr;
      var $y_addr;
      var $norm;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $f_addr=$f;
      $g_addr=$g;
      $x_addr=$x;
      $y_addr=$y;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p2_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $add=($1)+($3);
      var $mul=($add)*(0.5);
      var $4=$f_addr;
      HEAPF64[(($4)>>3)]=$mul;
      var $5=$p1_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$p2_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $add4=($6)+($8);
      var $mul5=($add4)*(0.5);
      var $9=$g_addr;
      HEAPF64[(($9)>>3)]=$mul5;
      var $10=$f_addr;
      var $11=HEAPF64[(($10)>>3)];
      var $12=Math.pow($11, 2);
      var $13=$g_addr;
      var $14=HEAPF64[(($13)>>3)];
      var $15=Math.pow($14, 2);
      var $add6=($12)+($15);
      var $call=Math.sqrt($add6);
      $norm=$call;
      var $16=$norm;
      var $cmp=0 < $16;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$f_addr;
      var $18=HEAPF64[(($17)>>3)];
      var $19=$norm;
      var $div=($18)/($19);
      var $20=$f_addr;
      HEAPF64[(($20)>>3)]=$div;
      var $21=$g_addr;
      var $22=HEAPF64[(($21)>>3)];
      var $23=$norm;
      var $div7=($22)/($23);
      var $24=$g_addr;
      HEAPF64[(($24)>>3)]=$div7;
      label = 4; break;
    case 4: 
      var $25=$f_addr;
      var $26=HEAPF64[(($25)>>3)];
      var $cmp8=$26 < 0;
      if ($cmp8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $27=$f_addr;
      var $28=HEAPF64[(($27)>>3)];
      var $sub=(-$28);
      var $29=$f_addr;
      HEAPF64[(($29)>>3)]=$sub;
      var $30=$g_addr;
      var $31=HEAPF64[(($30)>>3)];
      var $sub10=(-$31);
      var $32=$g_addr;
      HEAPF64[(($32)>>3)]=$sub10;
      label = 6; break;
    case 6: 
      var $33=$p2_addr;
      var $arrayidx12=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx12)>>3)];
      var $35=$p1_addr;
      var $arrayidx13=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($34)-($36);
      var $sub15=(-$sub14);
      var $37=$x_addr;
      HEAPF64[(($37)>>3)]=$sub15;
      var $38=$p2_addr;
      var $arrayidx16=(($38)|0);
      var $39=HEAPF64[(($arrayidx16)>>3)];
      var $40=$p1_addr;
      var $arrayidx17=(($40)|0);
      var $41=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($39)-($41);
      var $42=$y_addr;
      HEAPF64[(($42)>>3)]=$sub18;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_bisect_line_par_2d"] = _points_bisect_line_par_2d;
function _points_colin_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $area_triangle;
      var $area2;
      var $colin;
      var $perim;
      var $s12;
      var $s23;
      var $s31;
      var $side;
      var $t=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($t)|0);
      HEAPF64[(($arrayidx1)>>3)]=$1;
      var $2=$p1_addr;
      var $arrayidx2=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx2)>>3)];
      var $arrayidx3=(($t+8)|0);
      HEAPF64[(($arrayidx3)>>3)]=$3;
      var $4=$p2_addr;
      var $arrayidx4=(($4)|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t+16)|0);
      HEAPF64[(($arrayidx5)>>3)]=$5;
      var $6=$p2_addr;
      var $arrayidx6=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx6)>>3)];
      var $arrayidx7=(($t+24)|0);
      HEAPF64[(($arrayidx7)>>3)]=$7;
      var $8=$p3_addr;
      var $arrayidx8=(($8)|0);
      var $9=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($t+32)|0);
      HEAPF64[(($arrayidx9)>>3)]=$9;
      var $10=$p3_addr;
      var $arrayidx10=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx10)>>3)];
      var $arrayidx11=(($t+40)|0);
      HEAPF64[(($arrayidx11)>>3)]=$11;
      var $arraydecay=(($t)|0);
      var $call=_triangle_area_2d($arraydecay);
      $area_triangle=$call;
      var $12=$area_triangle;
      var $cmp=$12 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $colin=0;
      label = 5; break;
    case 4: 
      var $13=$p2_addr;
      var $arrayidx12=(($13)|0);
      var $14=HEAPF64[(($arrayidx12)>>3)];
      var $15=$p1_addr;
      var $arrayidx13=(($15)|0);
      var $16=HEAPF64[(($arrayidx13)>>3)];
      var $sub=($14)-($16);
      var $17=Math.pow($sub, 2);
      var $18=$p2_addr;
      var $arrayidx14=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $20=$p1_addr;
      var $arrayidx15=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($19)-($21);
      var $22=Math.pow($sub16, 2);
      var $add=($17)+($22);
      var $call17=Math.sqrt($add);
      $s12=$call17;
      var $23=$p3_addr;
      var $arrayidx18=(($23)|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $25=$p2_addr;
      var $arrayidx19=(($25)|0);
      var $26=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($24)-($26);
      var $27=Math.pow($sub20, 2);
      var $28=$p3_addr;
      var $arrayidx21=(($28+8)|0);
      var $29=HEAPF64[(($arrayidx21)>>3)];
      var $30=$p2_addr;
      var $arrayidx22=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($29)-($31);
      var $32=Math.pow($sub23, 2);
      var $add24=($27)+($32);
      var $call25=Math.sqrt($add24);
      $s23=$call25;
      var $33=$p1_addr;
      var $arrayidx26=(($33)|0);
      var $34=HEAPF64[(($arrayidx26)>>3)];
      var $35=$p3_addr;
      var $arrayidx27=(($35)|0);
      var $36=HEAPF64[(($arrayidx27)>>3)];
      var $sub28=($34)-($36);
      var $37=Math.pow($sub28, 2);
      var $38=$p1_addr;
      var $arrayidx29=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx29)>>3)];
      var $40=$p3_addr;
      var $arrayidx30=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx30)>>3)];
      var $sub31=($39)-($41);
      var $42=Math.pow($sub31, 2);
      var $add32=($37)+($42);
      var $call33=Math.sqrt($add32);
      $s31=$call33;
      var $43=$s12;
      var $44=$s23;
      var $add34=($43)+($44);
      var $45=$s31;
      var $add35=($add34)+($45);
      $perim=$add35;
      var $46=$perim;
      var $div=($46)/(3);
      $side=$div;
      var $call36=Math.sqrt(3);
      var $mul=($call36)*(0.25);
      var $47=$side;
      var $mul37=($mul)*($47);
      var $48=$side;
      var $mul38=($mul37)*($48);
      $area2=$mul38;
      var $49=$area_triangle;
      var $call39=_r8_abs($49);
      var $50=$area2;
      var $div40=($call39)/($50);
      $colin=$div40;
      label = 5; break;
    case 5: 
      var $51=$colin;
      STACKTOP = __stackBase__;
      return $51;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_colin_2d"] = _points_colin_2d;
function _points_colin_3d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $area_triangle;
      var $area2;
      var $colin;
      var $perim;
      var $s12;
      var $s23;
      var $s31;
      var $side;
      var $t=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($t)|0);
      HEAPF64[(($arrayidx1)>>3)]=$1;
      var $2=$p1_addr;
      var $arrayidx2=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx2)>>3)];
      var $arrayidx3=(($t+8)|0);
      HEAPF64[(($arrayidx3)>>3)]=$3;
      var $4=$p1_addr;
      var $arrayidx4=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t+16)|0);
      HEAPF64[(($arrayidx5)>>3)]=$5;
      var $6=$p2_addr;
      var $arrayidx6=(($6)|0);
      var $7=HEAPF64[(($arrayidx6)>>3)];
      var $arrayidx7=(($t+24)|0);
      HEAPF64[(($arrayidx7)>>3)]=$7;
      var $8=$p2_addr;
      var $arrayidx8=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($t+32)|0);
      HEAPF64[(($arrayidx9)>>3)]=$9;
      var $10=$p2_addr;
      var $arrayidx10=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx10)>>3)];
      var $arrayidx11=(($t+40)|0);
      HEAPF64[(($arrayidx11)>>3)]=$11;
      var $12=$p3_addr;
      var $arrayidx12=(($12)|0);
      var $13=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($t+48)|0);
      HEAPF64[(($arrayidx13)>>3)]=$13;
      var $14=$p3_addr;
      var $arrayidx14=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx14)>>3)];
      var $arrayidx15=(($t+56)|0);
      HEAPF64[(($arrayidx15)>>3)]=$15;
      var $16=$p3_addr;
      var $arrayidx16=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx16)>>3)];
      var $arrayidx17=(($t+64)|0);
      HEAPF64[(($arrayidx17)>>3)]=$17;
      var $arraydecay=(($t)|0);
      var $call=_triangle_area_3d($arraydecay);
      $area_triangle=$call;
      var $18=$area_triangle;
      var $cmp=$18 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $colin=0;
      label = 5; break;
    case 4: 
      var $19=$p2_addr;
      var $arrayidx18=(($19)|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$p1_addr;
      var $arrayidx19=(($21)|0);
      var $22=HEAPF64[(($arrayidx19)>>3)];
      var $sub=($20)-($22);
      var $23=Math.pow($sub, 2);
      var $24=$p2_addr;
      var $arrayidx20=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$p1_addr;
      var $arrayidx21=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=Math.pow($sub22, 2);
      var $add=($23)+($28);
      var $29=$p2_addr;
      var $arrayidx23=(($29+16)|0);
      var $30=HEAPF64[(($arrayidx23)>>3)];
      var $31=$p1_addr;
      var $arrayidx24=(($31+16)|0);
      var $32=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($30)-($32);
      var $33=Math.pow($sub25, 2);
      var $add26=($add)+($33);
      var $call27=Math.sqrt($add26);
      $s12=$call27;
      var $34=$p3_addr;
      var $arrayidx28=(($34)|0);
      var $35=HEAPF64[(($arrayidx28)>>3)];
      var $36=$p2_addr;
      var $arrayidx29=(($36)|0);
      var $37=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($35)-($37);
      var $38=Math.pow($sub30, 2);
      var $39=$p3_addr;
      var $arrayidx31=(($39+8)|0);
      var $40=HEAPF64[(($arrayidx31)>>3)];
      var $41=$p2_addr;
      var $arrayidx32=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($40)-($42);
      var $43=Math.pow($sub33, 2);
      var $add34=($38)+($43);
      var $44=$p3_addr;
      var $arrayidx35=(($44+16)|0);
      var $45=HEAPF64[(($arrayidx35)>>3)];
      var $46=$p2_addr;
      var $arrayidx36=(($46+16)|0);
      var $47=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($45)-($47);
      var $48=Math.pow($sub37, 2);
      var $add38=($add34)+($48);
      var $call39=Math.sqrt($add38);
      $s23=$call39;
      var $49=$p1_addr;
      var $arrayidx40=(($49)|0);
      var $50=HEAPF64[(($arrayidx40)>>3)];
      var $51=$p3_addr;
      var $arrayidx41=(($51)|0);
      var $52=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($50)-($52);
      var $53=Math.pow($sub42, 2);
      var $54=$p1_addr;
      var $arrayidx43=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx43)>>3)];
      var $56=$p3_addr;
      var $arrayidx44=(($56+8)|0);
      var $57=HEAPF64[(($arrayidx44)>>3)];
      var $sub45=($55)-($57);
      var $58=Math.pow($sub45, 2);
      var $add46=($53)+($58);
      var $59=$p1_addr;
      var $arrayidx47=(($59+16)|0);
      var $60=HEAPF64[(($arrayidx47)>>3)];
      var $61=$p3_addr;
      var $arrayidx48=(($61+16)|0);
      var $62=HEAPF64[(($arrayidx48)>>3)];
      var $sub49=($60)-($62);
      var $63=Math.pow($sub49, 2);
      var $add50=($add46)+($63);
      var $call51=Math.sqrt($add50);
      $s31=$call51;
      var $64=$s12;
      var $65=$s23;
      var $add52=($64)+($65);
      var $66=$s31;
      var $add53=($add52)+($66);
      $perim=$add53;
      var $67=$perim;
      var $div=($67)/(3);
      $side=$div;
      var $call54=Math.sqrt(3);
      var $mul=($call54)*(0.25);
      var $68=$side;
      var $mul55=($mul)*($68);
      var $69=$side;
      var $mul56=($mul55)*($69);
      $area2=$mul56;
      var $70=$area_triangle;
      var $call57=_r8_abs($70);
      var $71=$area2;
      var $div58=($call57)/($71);
      $colin=$div58;
      label = 5; break;
    case 5: 
      var $72=$colin;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_colin_3d"] = _points_colin_3d;
function _triangle_area_3d($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $area;
      var $cross;
      var $i;
      $t_addr=$t;
      var $call=_malloc(24);
      var $0=$call;
      $cross=$0;
      var $1=$t_addr;
      var $arrayidx=(($1+32)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$t_addr;
      var $arrayidx1=(($3+8)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=$t_addr;
      var $arrayidx2=(($5+64)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+16)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $mul=($sub)*($sub4);
      var $9=$t_addr;
      var $arrayidx5=(($9+40)|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$t_addr;
      var $arrayidx6=(($11+16)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($10)-($12);
      var $13=$t_addr;
      var $arrayidx8=(($13+56)|0);
      var $14=HEAPF64[(($arrayidx8)>>3)];
      var $15=$t_addr;
      var $arrayidx9=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($14)-($16);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      var $17=$cross;
      var $arrayidx13=(($17)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $18=$t_addr;
      var $arrayidx14=(($18+40)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $20=$t_addr;
      var $arrayidx15=(($20+16)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($19)-($21);
      var $22=$t_addr;
      var $arrayidx17=(($22+48)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $24=$t_addr;
      var $arrayidx18=(($24)|0);
      var $25=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($23)-($25);
      var $mul20=($sub16)*($sub19);
      var $26=$t_addr;
      var $arrayidx21=(($26+24)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $28=$t_addr;
      var $arrayidx22=(($28)|0);
      var $29=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($27)-($29);
      var $30=$t_addr;
      var $arrayidx24=(($30+64)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $32=$t_addr;
      var $arrayidx25=(($32+16)|0);
      var $33=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($31)-($33);
      var $mul27=($sub23)*($sub26);
      var $sub28=($mul20)-($mul27);
      var $34=$cross;
      var $arrayidx29=(($34+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $35=$t_addr;
      var $arrayidx30=(($35+24)|0);
      var $36=HEAPF64[(($arrayidx30)>>3)];
      var $37=$t_addr;
      var $arrayidx31=(($37)|0);
      var $38=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($36)-($38);
      var $39=$t_addr;
      var $arrayidx33=(($39+56)|0);
      var $40=HEAPF64[(($arrayidx33)>>3)];
      var $41=$t_addr;
      var $arrayidx34=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($40)-($42);
      var $mul36=($sub32)*($sub35);
      var $43=$t_addr;
      var $arrayidx37=(($43+32)|0);
      var $44=HEAPF64[(($arrayidx37)>>3)];
      var $45=$t_addr;
      var $arrayidx38=(($45+8)|0);
      var $46=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($44)-($46);
      var $47=$t_addr;
      var $arrayidx40=(($47+48)|0);
      var $48=HEAPF64[(($arrayidx40)>>3)];
      var $49=$t_addr;
      var $arrayidx41=(($49)|0);
      var $50=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($48)-($50);
      var $mul43=($sub39)*($sub42);
      var $sub44=($mul36)-($mul43);
      var $51=$cross;
      var $arrayidx45=(($51+16)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      $area=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $52=$i;
      var $cmp=(($52)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $53=$area;
      var $54=$i;
      var $55=$cross;
      var $arrayidx46=(($55+($54<<3))|0);
      var $56=HEAPF64[(($arrayidx46)>>3)];
      var $57=Math.pow($56, 2);
      var $add=($53)+($57);
      $area=$add;
      label = 5; break;
    case 5: 
      var $58=$i;
      var $inc=((($58)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $59=$area;
      var $call47=Math.sqrt($59);
      var $mul48=($call47)*(0.5);
      $area=$mul48;
      var $60=$cross;
      var $61=$60;
      _free($61);
      var $62=$area;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_area_3d"] = _triangle_area_3d;
function _points_dist_2d($p1, $p2) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $dist;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p2_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=Math.pow($sub, 2);
  var $5=$p1_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$p2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=Math.pow($sub4, 2);
  var $add=($4)+($9);
  var $call=Math.sqrt($add);
  $dist=$call;
  var $10=$dist;
  return $10;
}
Module["_points_dist_2d"] = _points_dist_2d;
function _points_dist_nd($dim_num, $p1, $p2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $p1_addr;
      var $p2_addr;
      var $dist;
      var $i;
      $dim_num_addr=$dim_num;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $dist=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$dist;
      var $3=$i;
      var $4=$p1_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$p2_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=$i;
      var $10=$p1_addr;
      var $arrayidx2=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx2)>>3)];
      var $12=$i;
      var $13=$p2_addr;
      var $arrayidx3=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($11)-($14);
      var $mul=($sub)*($sub4);
      var $add=($2)+($mul);
      $dist=$add;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $16=$dist;
      var $call=Math.sqrt($16);
      $dist=$call;
      var $17=$dist;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_dist_nd"] = _points_dist_nd;
function _points_hull_2d($node_num, $node_xy, $hull_num, $hull) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $node_num_addr;
      var $node_xy_addr;
      var $hull_num_addr;
      var $hull_addr;
      var $angle;
      var $angle_max;
      var $di;
      var $dr;
      var $first;
      var $i;
      var $p_xy=__stackBase__;
      var $q;
      var $q_xy=(__stackBase__)+(16);
      var $r;
      var $r_xy=(__stackBase__)+(32);
      $node_num_addr=$node_num;
      $node_xy_addr=$node_xy;
      $hull_num_addr=$hull_num;
      $hull_addr=$hull;
      var $0=$hull_num_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$node_num_addr;
      var $cmp=(($1)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 43; break;
    case 4: 
      var $2=$node_num_addr;
      var $cmp1=(($2)|(0))==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$hull_num_addr;
      var $4=HEAP32[(($3)>>2)];
      var $5=$hull_addr;
      var $arrayidx=(($5+($4<<2))|0);
      HEAP32[(($arrayidx)>>2)]=1;
      var $6=$hull_num_addr;
      var $7=HEAP32[(($6)>>2)];
      var $add=((($7)+(1))|0);
      var $8=$hull_num_addr;
      HEAP32[(($8)>>2)]=$add;
      label = 43; break;
    case 6: 
      var $9=$node_num_addr;
      var $cmp4=(($9)|(0))==2;
      if ($cmp4) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $10=$hull_num_addr;
      var $11=HEAP32[(($10)>>2)];
      var $12=$hull_addr;
      var $arrayidx6=(($12+($11<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=1;
      var $13=$hull_num_addr;
      var $14=HEAP32[(($13)>>2)];
      var $add7=((($14)+(1))|0);
      var $15=$hull_num_addr;
      HEAP32[(($15)>>2)]=$add7;
      var $16=$node_xy_addr;
      var $arrayidx8=(($16)|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $18=$node_xy_addr;
      var $arrayidx9=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx9)>>3)];
      var $cmp10=$17 != $19;
      if ($cmp10) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $20=$node_xy_addr;
      var $arrayidx11=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx11)>>3)];
      var $22=$node_xy_addr;
      var $arrayidx12=(($22+24)|0);
      var $23=HEAPF64[(($arrayidx12)>>3)];
      var $cmp13=$21 != $23;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$hull_num_addr;
      var $25=HEAP32[(($24)>>2)];
      var $26=$hull_addr;
      var $arrayidx15=(($26+($25<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=2;
      var $27=$hull_num_addr;
      var $28=HEAP32[(($27)>>2)];
      var $add16=((($28)+(1))|0);
      var $29=$hull_num_addr;
      HEAP32[(($29)>>2)]=$add16;
      label = 10; break;
    case 10: 
      label = 43; break;
    case 11: 
      $q=1;
      $i=2;
      label = 12; break;
    case 12: 
      var $30=$i;
      var $31=$node_num_addr;
      var $cmp19=(($30)|(0)) <= (($31)|(0));
      if ($cmp19) { label = 13; break; } else { label = 19; break; }
    case 13: 
      var $32=$i;
      var $sub=((($32)-(1))|0);
      var $mul=($sub<<1);
      var $add20=(($mul)|0);
      var $33=$node_xy_addr;
      var $arrayidx21=(($33+($add20<<3))|0);
      var $34=HEAPF64[(($arrayidx21)>>3)];
      var $35=$q;
      var $sub22=((($35)-(1))|0);
      var $mul23=($sub22<<1);
      var $add24=(($mul23)|0);
      var $36=$node_xy_addr;
      var $arrayidx25=(($36+($add24<<3))|0);
      var $37=HEAPF64[(($arrayidx25)>>3)];
      var $cmp26=$34 < $37;
      if ($cmp26) { label = 16; break; } else { label = 14; break; }
    case 14: 
      var $38=$i;
      var $sub28=((($38)-(1))|0);
      var $mul29=($sub28<<1);
      var $add30=(($mul29)|0);
      var $39=$node_xy_addr;
      var $arrayidx31=(($39+($add30<<3))|0);
      var $40=HEAPF64[(($arrayidx31)>>3)];
      var $41=$q;
      var $sub32=((($41)-(1))|0);
      var $mul33=($sub32<<1);
      var $add34=(($mul33)|0);
      var $42=$node_xy_addr;
      var $arrayidx35=(($42+($add34<<3))|0);
      var $43=HEAPF64[(($arrayidx35)>>3)];
      var $cmp36=$40 == $43;
      if ($cmp36) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $44=$i;
      var $sub37=((($44)-(1))|0);
      var $mul38=($sub37<<1);
      var $add39=((($mul38)+(1))|0);
      var $45=$node_xy_addr;
      var $arrayidx40=(($45+($add39<<3))|0);
      var $46=HEAPF64[(($arrayidx40)>>3)];
      var $47=$q;
      var $sub41=((($47)-(1))|0);
      var $mul42=($sub41<<1);
      var $add43=((($mul42)+(1))|0);
      var $48=$node_xy_addr;
      var $arrayidx44=(($48+($add43<<3))|0);
      var $49=HEAPF64[(($arrayidx44)>>3)];
      var $cmp45=$46 < $49;
      if ($cmp45) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $50=$i;
      $q=$50;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $51=$i;
      var $inc=((($51)+(1))|0);
      $i=$inc;
      label = 12; break;
    case 19: 
      var $52=$q;
      var $sub48=((($52)-(1))|0);
      var $mul49=($sub48<<1);
      var $add50=(($mul49)|0);
      var $53=$node_xy_addr;
      var $arrayidx51=(($53+($add50<<3))|0);
      var $54=HEAPF64[(($arrayidx51)>>3)];
      var $arrayidx52=(($q_xy)|0);
      HEAPF64[(($arrayidx52)>>3)]=$54;
      var $55=$q;
      var $sub53=((($55)-(1))|0);
      var $mul54=($sub53<<1);
      var $add55=((($mul54)+(1))|0);
      var $56=$node_xy_addr;
      var $arrayidx56=(($56+($add55<<3))|0);
      var $57=HEAPF64[(($arrayidx56)>>3)];
      var $arrayidx57=(($q_xy+8)|0);
      HEAPF64[(($arrayidx57)>>3)]=$57;
      var $58=$q;
      $first=$58;
      var $59=$q;
      var $60=$hull_num_addr;
      var $61=HEAP32[(($60)>>2)];
      var $62=$hull_addr;
      var $arrayidx58=(($62+($61<<2))|0);
      HEAP32[(($arrayidx58)>>2)]=$59;
      var $63=$hull_num_addr;
      var $64=HEAP32[(($63)>>2)];
      var $add59=((($64)+(1))|0);
      var $65=$hull_num_addr;
      HEAP32[(($65)>>2)]=$add59;
      var $arrayidx60=(($q_xy)|0);
      var $66=HEAPF64[(($arrayidx60)>>3)];
      var $arrayidx61=(($p_xy)|0);
      HEAPF64[(($arrayidx61)>>3)]=$66;
      var $arrayidx62=(($q_xy+8)|0);
      var $67=HEAPF64[(($arrayidx62)>>3)];
      var $sub63=($67)-(1);
      var $arrayidx64=(($p_xy+8)|0);
      HEAPF64[(($arrayidx64)>>3)]=$sub63;
      label = 20; break;
    case 20: 
      $r=0;
      $angle_max=0;
      $i=1;
      label = 21; break;
    case 21: 
      var $68=$i;
      var $69=$node_num_addr;
      var $cmp67=(($68)|(0)) <= (($69)|(0));
      if ($cmp67) { label = 22; break; } else { label = 37; break; }
    case 22: 
      var $70=$i;
      var $71=$q;
      var $cmp69=(($70)|(0))!=(($71)|(0));
      if ($cmp69) { label = 23; break; } else { label = 35; break; }
    case 23: 
      var $72=$i;
      var $sub71=((($72)-(1))|0);
      var $mul72=($sub71<<1);
      var $add73=(($mul72)|0);
      var $73=$node_xy_addr;
      var $arrayidx74=(($73+($add73<<3))|0);
      var $74=HEAPF64[(($arrayidx74)>>3)];
      var $arrayidx75=(($q_xy)|0);
      var $75=HEAPF64[(($arrayidx75)>>3)];
      var $cmp76=$74 != $75;
      if ($cmp76) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $76=$i;
      var $sub78=((($76)-(1))|0);
      var $mul79=($sub78<<1);
      var $add80=((($mul79)+(1))|0);
      var $77=$node_xy_addr;
      var $arrayidx81=(($77+($add80<<3))|0);
      var $78=HEAPF64[(($arrayidx81)>>3)];
      var $arrayidx82=(($q_xy+8)|0);
      var $79=HEAPF64[(($arrayidx82)>>3)];
      var $cmp83=$78 != $79;
      if ($cmp83) { label = 25; break; } else { label = 35; break; }
    case 25: 
      var $arraydecay=(($p_xy)|0);
      var $arraydecay85=(($q_xy)|0);
      var $80=$node_xy_addr;
      var $81=$i;
      var $sub86=((($81)-(1))|0);
      var $mul87=($sub86<<1);
      var $add_ptr=(($80+($mul87<<3))|0);
      var $call=_angle_rad_2d($arraydecay, $arraydecay85, $add_ptr);
      $angle=$call;
      var $82=$r;
      var $cmp88=(($82)|(0))==0;
      if ($cmp88) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $83=$angle_max;
      var $84=$angle;
      var $cmp90=$83 < $84;
      if ($cmp90) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $85=$i;
      $r=$85;
      var $86=$r;
      var $sub92=((($86)-(1))|0);
      var $mul93=($sub92<<1);
      var $add94=(($mul93)|0);
      var $87=$node_xy_addr;
      var $arrayidx95=(($87+($add94<<3))|0);
      var $88=HEAPF64[(($arrayidx95)>>3)];
      var $arrayidx96=(($r_xy)|0);
      HEAPF64[(($arrayidx96)>>3)]=$88;
      var $89=$r;
      var $sub97=((($89)-(1))|0);
      var $mul98=($sub97<<1);
      var $add99=((($mul98)+(1))|0);
      var $90=$node_xy_addr;
      var $arrayidx100=(($90+($add99<<3))|0);
      var $91=HEAPF64[(($arrayidx100)>>3)];
      var $arrayidx101=(($r_xy+8)|0);
      HEAPF64[(($arrayidx101)>>3)]=$91;
      var $92=$angle;
      $angle_max=$92;
      label = 34; break;
    case 28: 
      var $93=$r;
      var $cmp102=(($93)|(0))!=0;
      if ($cmp102) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $94=$angle;
      var $95=$angle_max;
      var $cmp104=$94 == $95;
      if ($cmp104) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $96=$i;
      var $sub106=((($96)-(1))|0);
      var $mul107=($sub106<<1);
      var $add108=(($mul107)|0);
      var $97=$node_xy_addr;
      var $arrayidx109=(($97+($add108<<3))|0);
      var $98=HEAPF64[(($arrayidx109)>>3)];
      var $arrayidx110=(($q_xy)|0);
      var $99=HEAPF64[(($arrayidx110)>>3)];
      var $sub111=($98)-($99);
      var $100=Math.pow($sub111, 2);
      var $101=$i;
      var $sub112=((($101)-(1))|0);
      var $mul113=($sub112<<1);
      var $add114=((($mul113)+(1))|0);
      var $102=$node_xy_addr;
      var $arrayidx115=(($102+($add114<<3))|0);
      var $103=HEAPF64[(($arrayidx115)>>3)];
      var $arrayidx116=(($q_xy+8)|0);
      var $104=HEAPF64[(($arrayidx116)>>3)];
      var $sub117=($103)-($104);
      var $105=Math.pow($sub117, 2);
      var $add118=($100)+($105);
      var $call119=Math.sqrt($add118);
      $di=$call119;
      var $arrayidx120=(($r_xy)|0);
      var $106=HEAPF64[(($arrayidx120)>>3)];
      var $arrayidx121=(($q_xy)|0);
      var $107=HEAPF64[(($arrayidx121)>>3)];
      var $sub122=($106)-($107);
      var $108=Math.pow($sub122, 2);
      var $arrayidx123=(($r_xy+8)|0);
      var $109=HEAPF64[(($arrayidx123)>>3)];
      var $arrayidx124=(($q_xy+8)|0);
      var $110=HEAPF64[(($arrayidx124)>>3)];
      var $sub125=($109)-($110);
      var $111=Math.pow($sub125, 2);
      var $add126=($108)+($111);
      var $call127=Math.sqrt($add126);
      $dr=$call127;
      var $112=$di;
      var $113=$dr;
      var $cmp128=$112 < $113;
      if ($cmp128) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $114=$i;
      $r=$114;
      var $115=$r;
      var $sub130=((($115)-(1))|0);
      var $mul131=($sub130<<1);
      var $add132=(($mul131)|0);
      var $116=$node_xy_addr;
      var $arrayidx133=(($116+($add132<<3))|0);
      var $117=HEAPF64[(($arrayidx133)>>3)];
      var $arrayidx134=(($r_xy)|0);
      HEAPF64[(($arrayidx134)>>3)]=$117;
      var $118=$r;
      var $sub135=((($118)-(1))|0);
      var $mul136=($sub135<<1);
      var $add137=((($mul136)+(1))|0);
      var $119=$node_xy_addr;
      var $arrayidx138=(($119+($add137<<3))|0);
      var $120=HEAPF64[(($arrayidx138)>>3)];
      var $arrayidx139=(($r_xy+8)|0);
      HEAPF64[(($arrayidx139)>>3)]=$120;
      var $121=$angle;
      $angle_max=$121;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $122=$i;
      var $inc145=((($122)+(1))|0);
      $i=$inc145;
      label = 21; break;
    case 37: 
      var $123=$r;
      var $124=$first;
      var $cmp147=(($123)|(0))==(($124)|(0));
      if ($cmp147) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 42; break;
    case 39: 
      var $125=$node_num_addr;
      var $126=$hull_num_addr;
      var $127=HEAP32[(($126)>>2)];
      var $add150=((($127)+(1))|0);
      var $cmp151=(($125)|(0)) < (($add150)|(0));
      if ($cmp151) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $128=HEAP32[((_stderr)>>2)];
      var $call153=_fprintf($128, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $129=HEAP32[((_stderr)>>2)];
      var $call154=_fprintf($129, ((16808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $130=HEAP32[((_stderr)>>2)];
      var $call155=_fprintf($130, ((16752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 41: 
      var $131=$r;
      var $132=$hull_num_addr;
      var $133=HEAP32[(($132)>>2)];
      var $134=$hull_addr;
      var $arrayidx157=(($134+($133<<2))|0);
      HEAP32[(($arrayidx157)>>2)]=$131;
      var $135=$hull_num_addr;
      var $136=HEAP32[(($135)>>2)];
      var $add158=((($136)+(1))|0);
      var $137=$hull_num_addr;
      HEAP32[(($137)>>2)]=$add158;
      var $138=$r;
      $q=$138;
      var $arrayidx159=(($q_xy)|0);
      var $139=HEAPF64[(($arrayidx159)>>3)];
      var $arrayidx160=(($p_xy)|0);
      HEAPF64[(($arrayidx160)>>3)]=$139;
      var $arrayidx161=(($q_xy+8)|0);
      var $140=HEAPF64[(($arrayidx161)>>3)];
      var $arrayidx162=(($p_xy+8)|0);
      HEAPF64[(($arrayidx162)>>3)]=$140;
      var $arrayidx163=(($r_xy)|0);
      var $141=HEAPF64[(($arrayidx163)>>3)];
      var $arrayidx164=(($q_xy)|0);
      HEAPF64[(($arrayidx164)>>3)]=$141;
      var $arrayidx165=(($r_xy+8)|0);
      var $142=HEAPF64[(($arrayidx165)>>3)];
      var $arrayidx166=(($q_xy+8)|0);
      HEAPF64[(($arrayidx166)>>3)]=$142;
      label = 20; break;
    case 42: 
      label = 43; break;
    case 43: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_hull_2d"] = _points_hull_2d;
function _r8_nint($x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $s;
      var $value;
      $x_addr=$x;
      var $0=$x_addr;
      var $cmp=$0 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $s=-1;
      label = 5; break;
    case 4: 
      $s=1;
      label = 5; break;
    case 5: 
      var $1=$s;
      var $2=$x_addr;
      var $call=Math.abs($2);
      var $add=($call)+(0.5);
      var $conv=(($add)&-1);
      var $mul=(Math.imul($1,$conv)|0);
      $value=$mul;
      var $3=$value;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_nint"] = _r8_nint;
function _points_point_near_naive_2d($nset, $pset, $ptest, $d_min) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $nset_addr;
      var $pset_addr;
      var $ptest_addr;
      var $d_min_addr;
      var $d;
      var $i;
      var $j;
      var $p_min;
      $nset_addr=$nset;
      $pset_addr=$pset;
      $ptest_addr=$ptest;
      $d_min_addr=$d_min;
      var $call=_r8_huge();
      var $0=$d_min_addr;
      HEAPF64[(($0)>>3)]=$call;
      $p_min=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $2=$nset_addr;
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $d=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp2=(($3)|(0)) < 2;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$d;
      var $5=$i;
      var $6=$ptest_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$j;
      var $mul=($9<<1);
      var $add=((($8)+($mul))|0);
      var $10=$pset_addr;
      var $arrayidx4=(($10+($add<<3))|0);
      var $11=HEAPF64[(($arrayidx4)>>3)];
      var $sub=($7)-($11);
      var $12=Math.pow($sub, 2);
      var $add5=($4)+($12);
      $d=$add5;
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $14=$d;
      var $15=$d_min_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $cmp6=$14 < $16;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$d;
      var $18=$d_min_addr;
      HEAPF64[(($18)>>3)]=$17;
      var $19=$j;
      $p_min=$19;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $20=$j;
      var $inc8=((($20)+(1))|0);
      $j=$inc8;
      label = 3; break;
    case 12: 
      var $21=$d_min_addr;
      var $22=HEAPF64[(($21)>>3)];
      var $call10=Math.sqrt($22);
      var $23=$d_min_addr;
      HEAPF64[(($23)>>3)]=$call10;
      var $24=$p_min;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_point_near_naive_2d"] = _points_point_near_naive_2d;
function _points_point_near_naive_3d($nset, $pset, $ptest, $d_min) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $nset_addr;
      var $pset_addr;
      var $ptest_addr;
      var $d_min_addr;
      var $d;
      var $i;
      var $j;
      var $p_min;
      $nset_addr=$nset;
      $pset_addr=$pset;
      $ptest_addr=$ptest;
      $d_min_addr=$d_min;
      var $call=_r8_huge();
      var $0=$d_min_addr;
      HEAPF64[(($0)>>3)]=$call;
      $p_min=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $2=$nset_addr;
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $d=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp2=(($3)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$d;
      var $5=$i;
      var $6=$ptest_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$j;
      var $mul=((($9)*(3))&-1);
      var $add=((($8)+($mul))|0);
      var $10=$pset_addr;
      var $arrayidx4=(($10+($add<<3))|0);
      var $11=HEAPF64[(($arrayidx4)>>3)];
      var $sub=($7)-($11);
      var $12=Math.pow($sub, 2);
      var $add5=($4)+($12);
      $d=$add5;
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $14=$d;
      var $15=$d_min_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $cmp6=$14 < $16;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$d;
      var $18=$d_min_addr;
      HEAPF64[(($18)>>3)]=$17;
      var $19=$j;
      $p_min=$19;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $20=$j;
      var $inc8=((($20)+(1))|0);
      $j=$inc8;
      label = 3; break;
    case 12: 
      var $21=$d_min_addr;
      var $22=HEAPF64[(($21)>>3)];
      var $call10=Math.sqrt($22);
      var $23=$d_min_addr;
      HEAPF64[(($23)>>3)]=$call10;
      var $24=$p_min;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_point_near_naive_3d"] = _points_point_near_naive_3d;
function _points_plot($file_name, $node_num, $node_xy, $node_label) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $file_name_addr;
      var $node_num_addr;
      var $node_xy_addr;
      var $node_label_addr;
      var $circle_size;
      var $delta;
      var $file_unit;
      var $node;
      var $x_max;
      var $x_min;
      var $x_ps;
      var $x_ps_max;
      var $x_ps_max_clip;
      var $x_ps_min;
      var $x_ps_min_clip;
      var $x_scale;
      var $y_max;
      var $y_min;
      var $y_ps;
      var $y_ps_max;
      var $y_ps_max_clip;
      var $y_ps_min;
      var $y_ps_min_clip;
      var $y_scale;
      $file_name_addr=$file_name;
      $node_num_addr=$node_num;
      $node_xy_addr=$node_xy;
      $node_label_addr=$node_label;
      $circle_size=3;
      $x_ps_max=576;
      $x_ps_max_clip=594;
      $x_ps_min=36;
      $x_ps_min_clip=18;
      $y_ps_max=666;
      $y_ps_max_clip=684;
      $y_ps_min=126;
      $y_ps_min_clip=108;
      var $call=_r8_huge();
      var $sub=(-$call);
      $x_max=$sub;
      $node=0;
      label = 3; break;
    case 3: 
      var $0=$node;
      var $1=$node_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$x_max;
      var $3=$node;
      var $mul=($3<<1);
      var $add=(($mul)|0);
      var $4=$node_xy_addr;
      var $arrayidx=(($4+($add<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $cmp1=$2 < $5;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$node;
      var $mul2=($6<<1);
      var $add3=(($mul2)|0);
      var $7=$node_xy_addr;
      var $arrayidx4=(($7+($add3<<3))|0);
      var $8=HEAPF64[(($arrayidx4)>>3)];
      $x_max=$8;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $9=$node;
      var $inc=((($9)+(1))|0);
      $node=$inc;
      label = 3; break;
    case 8: 
      var $call5=_r8_huge();
      $x_min=$call5;
      $node=0;
      label = 9; break;
    case 9: 
      var $10=$node;
      var $11=$node_num_addr;
      var $cmp7=(($10)|(0)) < (($11)|(0));
      if ($cmp7) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $12=$node;
      var $mul9=($12<<1);
      var $add10=(($mul9)|0);
      var $13=$node_xy_addr;
      var $arrayidx11=(($13+($add10<<3))|0);
      var $14=HEAPF64[(($arrayidx11)>>3)];
      var $15=$x_min;
      var $cmp12=$14 < $15;
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $16=$node;
      var $mul14=($16<<1);
      var $add15=(($mul14)|0);
      var $17=$node_xy_addr;
      var $arrayidx16=(($17+($add15<<3))|0);
      var $18=HEAPF64[(($arrayidx16)>>3)];
      $x_min=$18;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $19=$node;
      var $inc19=((($19)+(1))|0);
      $node=$inc19;
      label = 9; break;
    case 14: 
      var $20=$x_max;
      var $21=$x_min;
      var $sub21=($20)-($21);
      $x_scale=$sub21;
      var $22=$x_max;
      var $23=$x_scale;
      var $mul22=($23)*(0.05);
      var $add23=($22)+($mul22);
      $x_max=$add23;
      var $24=$x_min;
      var $25=$x_scale;
      var $mul24=($25)*(0.05);
      var $sub25=($24)-($mul24);
      $x_min=$sub25;
      var $26=$x_max;
      var $27=$x_min;
      var $sub26=($26)-($27);
      $x_scale=$sub26;
      var $call27=_r8_huge();
      var $sub28=(-$call27);
      $y_max=$sub28;
      $node=0;
      label = 15; break;
    case 15: 
      var $28=$node;
      var $29=$node_num_addr;
      var $cmp30=(($28)|(0)) < (($29)|(0));
      if ($cmp30) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $30=$y_max;
      var $31=$node;
      var $mul32=($31<<1);
      var $add33=((($mul32)+(1))|0);
      var $32=$node_xy_addr;
      var $arrayidx34=(($32+($add33<<3))|0);
      var $33=HEAPF64[(($arrayidx34)>>3)];
      var $cmp35=$30 < $33;
      if ($cmp35) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $34=$node;
      var $mul37=($34<<1);
      var $add38=((($mul37)+(1))|0);
      var $35=$node_xy_addr;
      var $arrayidx39=(($35+($add38<<3))|0);
      var $36=HEAPF64[(($arrayidx39)>>3)];
      $y_max=$36;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$node;
      var $inc42=((($37)+(1))|0);
      $node=$inc42;
      label = 15; break;
    case 20: 
      var $call44=_r8_huge();
      $y_min=$call44;
      $node=0;
      label = 21; break;
    case 21: 
      var $38=$node;
      var $39=$node_num_addr;
      var $cmp46=(($38)|(0)) < (($39)|(0));
      if ($cmp46) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $40=$node;
      var $mul48=($40<<1);
      var $add49=((($mul48)+(1))|0);
      var $41=$node_xy_addr;
      var $arrayidx50=(($41+($add49<<3))|0);
      var $42=HEAPF64[(($arrayidx50)>>3)];
      var $43=$y_min;
      var $cmp51=$42 < $43;
      if ($cmp51) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $44=$node;
      var $mul53=($44<<1);
      var $add54=((($mul53)+(1))|0);
      var $45=$node_xy_addr;
      var $arrayidx55=(($45+($add54<<3))|0);
      var $46=HEAPF64[(($arrayidx55)>>3)];
      $y_min=$46;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $47=$node;
      var $inc58=((($47)+(1))|0);
      $node=$inc58;
      label = 21; break;
    case 26: 
      var $48=$y_max;
      var $49=$y_min;
      var $sub60=($48)-($49);
      $y_scale=$sub60;
      var $50=$y_max;
      var $51=$y_scale;
      var $mul61=($51)*(0.05);
      var $add62=($50)+($mul61);
      $y_max=$add62;
      var $52=$y_min;
      var $53=$y_scale;
      var $mul63=($53)*(0.05);
      var $sub64=($52)-($mul63);
      $y_min=$sub64;
      var $54=$y_max;
      var $55=$y_min;
      var $sub65=($54)-($55);
      $y_scale=$sub65;
      var $56=$x_scale;
      var $57=$y_scale;
      var $cmp66=$56 < $57;
      if ($cmp66) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $58=$x_ps_max;
      var $59=$x_ps_min;
      var $sub68=((($58)-($59))|0);
      var $conv=(($sub68)|(0));
      var $60=$y_scale;
      var $61=$x_scale;
      var $sub69=($60)-($61);
      var $mul70=($conv)*($sub69);
      var $62=$y_scale;
      var $mul71=($62)*(2);
      var $div=($mul70)/($mul71);
      var $call72=_r8_nint($div);
      $delta=$call72;
      var $63=$x_ps_max;
      var $64=$delta;
      var $sub73=((($63)-($64))|0);
      $x_ps_max=$sub73;
      var $65=$x_ps_min;
      var $66=$delta;
      var $add74=((($65)+($66))|0);
      $x_ps_min=$add74;
      var $67=$x_ps_max_clip;
      var $68=$delta;
      var $sub75=((($67)-($68))|0);
      $x_ps_max_clip=$sub75;
      var $69=$x_ps_min_clip;
      var $70=$delta;
      var $add76=((($69)+($70))|0);
      $x_ps_min_clip=$add76;
      var $71=$y_scale;
      $x_scale=$71;
      label = 31; break;
    case 28: 
      var $72=$y_scale;
      var $73=$x_scale;
      var $cmp77=$72 < $73;
      if ($cmp77) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $74=$y_ps_max;
      var $75=$y_ps_min;
      var $sub80=((($74)-($75))|0);
      var $conv81=(($sub80)|(0));
      var $76=$x_scale;
      var $77=$y_scale;
      var $sub82=($76)-($77);
      var $mul83=($conv81)*($sub82);
      var $78=$x_scale;
      var $mul84=($78)*(2);
      var $div85=($mul83)/($mul84);
      var $call86=_r8_nint($div85);
      $delta=$call86;
      var $79=$y_ps_max;
      var $80=$delta;
      var $sub87=((($79)-($80))|0);
      $y_ps_max=$sub87;
      var $81=$y_ps_min;
      var $82=$delta;
      var $add88=((($81)+($82))|0);
      $y_ps_min=$add88;
      var $83=$y_ps_max_clip;
      var $84=$delta;
      var $sub89=((($83)-($84))|0);
      $y_ps_max_clip=$sub89;
      var $85=$y_ps_min_clip;
      var $86=$delta;
      var $add90=((($85)+($86))|0);
      $y_ps_min_clip=$add90;
      var $87=$x_scale;
      $y_scale=$87;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $88=$file_name_addr;
      var $call93=_fopen($88, ((16672)|0));
      $file_unit=$call93;
      var $89=$file_unit;
      var $tobool=(($89)|(0))!=0;
      if ($tobool) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $90=HEAP32[((_stderr)>>2)];
      var $call95=_fprintf($90, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $91=HEAP32[((_stderr)>>2)];
      var $call96=_fprintf($91, ((16640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $92=HEAP32[((_stderr)>>2)];
      var $call97=_fprintf($92, ((16600)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 33: 
      var $93=$file_unit;
      var $call99=_fprintf($93, ((16568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $94=$file_unit;
      var $call100=_fprintf($94, ((16536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $95=$file_unit;
      var $96=$file_name_addr;
      var $call101=_fprintf($95, ((16520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$96,tempInt));
      var $97=$file_unit;
      var $call102=_fprintf($97, ((16504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $98=$file_unit;
      var $99=$x_ps_min;
      var $100=$y_ps_min;
      var $101=$x_ps_max;
      var $102=$y_ps_max;
      var $call103=_fprintf($98, ((16472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$99,HEAP32[(((tempInt)+(8))>>2)]=$100,HEAP32[(((tempInt)+(16))>>2)]=$101,HEAP32[(((tempInt)+(24))>>2)]=$102,tempInt));
      var $103=$file_unit;
      var $call104=_fprintf($103, ((16440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $104=$file_unit;
      var $call105=_fprintf($104, ((16392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $105=$file_unit;
      var $call106=_fprintf($105, ((16376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $106=$file_unit;
      var $call107=_fprintf($106, ((16336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $107=$file_unit;
      var $call108=_fprintf($107, ((16312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $108=$file_unit;
      var $call109=_fprintf($108, ((16296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $109=$file_unit;
      var $call110=_fprintf($109, ((16272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $110=$file_unit;
      var $call111=_fprintf($110, ((16264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $111=$file_unit;
      var $call112=_fprintf($111, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $112=$file_unit;
      var $call113=_fprintf($112, ((16208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $113=$file_unit;
      var $call114=_fprintf($113, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $114=$file_unit;
      var $call115=_fprintf($114, ((16168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $115=$file_unit;
      var $call116=_fprintf($115, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $116=$file_unit;
      var $call117=_fprintf($116, ((16104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $117=$file_unit;
      var $call118=_fprintf($117, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $118=$file_unit;
      var $call119=_fprintf($118, ((16088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $119=$file_unit;
      var $120=$x_ps_min;
      var $121=$y_ps_min;
      var $call120=_fprintf($119, ((16040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$120,HEAP32[(((tempInt)+(8))>>2)]=$121,tempInt));
      var $122=$file_unit;
      var $123=$x_ps_max;
      var $124=$y_ps_min;
      var $call121=_fprintf($122, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$123,HEAP32[(((tempInt)+(8))>>2)]=$124,tempInt));
      var $125=$file_unit;
      var $126=$x_ps_max;
      var $127=$y_ps_max;
      var $call122=_fprintf($125, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$126,HEAP32[(((tempInt)+(8))>>2)]=$127,tempInt));
      var $128=$file_unit;
      var $129=$x_ps_min;
      var $130=$y_ps_max;
      var $call123=_fprintf($128, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$129,HEAP32[(((tempInt)+(8))>>2)]=$130,tempInt));
      var $131=$file_unit;
      var $132=$x_ps_min;
      var $133=$y_ps_min;
      var $call124=_fprintf($131, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$132,HEAP32[(((tempInt)+(8))>>2)]=$133,tempInt));
      var $134=$file_unit;
      var $call125=_fprintf($134, ((16008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $135=$file_unit;
      var $call126=_fprintf($135, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $136=$file_unit;
      var $call127=_fprintf($136, ((15968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $137=$file_unit;
      var $call128=_fprintf($137, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $138=$file_unit;
      var $call129=_fprintf($138, ((15928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $139=$file_unit;
      var $call130=_fprintf($139, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $140=$file_unit;
      var $call131=_fprintf($140, ((15896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $141=$file_unit;
      var $call132=_fprintf($141, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $142=$file_unit;
      var $call133=_fprintf($142, ((15872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $143=$file_unit;
      var $call134=_fprintf($143, ((15848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $144=$file_unit;
      var $call135=_fprintf($144, ((15808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $145=$file_unit;
      var $call136=_fprintf($145, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $146=$file_unit;
      var $call137=_fprintf($146, ((15784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $147=$file_unit;
      var $call138=_fprintf($147, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $148=$file_unit;
      var $call139=_fprintf($148, ((15736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $149=$file_unit;
      var $call140=_fprintf($149, ((15712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $150=$file_unit;
      var $call141=_fprintf($150, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $151=$file_unit;
      var $call142=_fprintf($151, ((15680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $152=$file_unit;
      var $call143=_fprintf($152, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $153=$file_unit;
      var $call144=_fprintf($153, ((16088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $154=$file_unit;
      var $155=$x_ps_min_clip;
      var $156=$y_ps_min_clip;
      var $call145=_fprintf($154, ((16040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$155,HEAP32[(((tempInt)+(8))>>2)]=$156,tempInt));
      var $157=$file_unit;
      var $158=$x_ps_max_clip;
      var $159=$y_ps_min_clip;
      var $call146=_fprintf($157, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$158,HEAP32[(((tempInt)+(8))>>2)]=$159,tempInt));
      var $160=$file_unit;
      var $161=$x_ps_max_clip;
      var $162=$y_ps_max_clip;
      var $call147=_fprintf($160, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$161,HEAP32[(((tempInt)+(8))>>2)]=$162,tempInt));
      var $163=$file_unit;
      var $164=$x_ps_min_clip;
      var $165=$y_ps_max_clip;
      var $call148=_fprintf($163, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$164,HEAP32[(((tempInt)+(8))>>2)]=$165,tempInt));
      var $166=$file_unit;
      var $167=$x_ps_min_clip;
      var $168=$y_ps_min_clip;
      var $call149=_fprintf($166, ((16016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$167,HEAP32[(((tempInt)+(8))>>2)]=$168,tempInt));
      var $169=$file_unit;
      var $call150=_fprintf($169, ((15664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $170=$file_unit;
      var $call151=_fprintf($170, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $171=$file_unit;
      var $call152=_fprintf($171, ((15624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $172=$file_unit;
      var $call153=_fprintf($172, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $173=$file_unit;
      var $call154=_fprintf($173, ((15592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $174=$file_unit;
      var $call155=_fprintf($174, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $175=$file_unit;
      var $call156=_fprintf($175, ((15552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $176=$file_unit;
      var $call157=_fprintf($176, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $node=0;
      label = 34; break;
    case 34: 
      var $177=$node;
      var $178=$node_num_addr;
      var $cmp159=(($177)|(0)) < (($178)|(0));
      if ($cmp159) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $179=$x_max;
      var $180=$node;
      var $mul162=($180<<1);
      var $add163=(($mul162)|0);
      var $181=$node_xy_addr;
      var $arrayidx164=(($181+($add163<<3))|0);
      var $182=HEAPF64[(($arrayidx164)>>3)];
      var $sub165=($179)-($182);
      var $183=$x_ps_min;
      var $conv166=(($183)|(0));
      var $mul167=($sub165)*($conv166);
      var $184=$node;
      var $mul168=($184<<1);
      var $add169=(($mul168)|0);
      var $185=$node_xy_addr;
      var $arrayidx170=(($185+($add169<<3))|0);
      var $186=HEAPF64[(($arrayidx170)>>3)];
      var $187=$x_min;
      var $sub171=($186)-($187);
      var $188=$x_ps_max;
      var $conv172=(($188)|(0));
      var $mul173=($sub171)*($conv172);
      var $add174=($mul167)+($mul173);
      var $189=$x_max;
      var $190=$x_min;
      var $sub175=($189)-($190);
      var $div176=($add174)/($sub175);
      var $conv177=(($div176)&-1);
      $x_ps=$conv177;
      var $191=$y_max;
      var $192=$node;
      var $mul178=($192<<1);
      var $add179=((($mul178)+(1))|0);
      var $193=$node_xy_addr;
      var $arrayidx180=(($193+($add179<<3))|0);
      var $194=HEAPF64[(($arrayidx180)>>3)];
      var $sub181=($191)-($194);
      var $195=$y_ps_min;
      var $conv182=(($195)|(0));
      var $mul183=($sub181)*($conv182);
      var $196=$node;
      var $mul184=($196<<1);
      var $add185=((($mul184)+(1))|0);
      var $197=$node_xy_addr;
      var $arrayidx186=(($197+($add185<<3))|0);
      var $198=HEAPF64[(($arrayidx186)>>3)];
      var $199=$y_min;
      var $sub187=($198)-($199);
      var $200=$y_ps_max;
      var $conv188=(($200)|(0));
      var $mul189=($sub187)*($conv188);
      var $add190=($mul183)+($mul189);
      var $201=$y_max;
      var $202=$y_min;
      var $sub191=($201)-($202);
      var $div192=($add190)/($sub191);
      var $conv193=(($div192)&-1);
      $y_ps=$conv193;
      var $203=$file_unit;
      var $204=$x_ps;
      var $205=$y_ps;
      var $206=$circle_size;
      var $call194=_fprintf($203, ((15504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$204,HEAP32[(((tempInt)+(8))>>2)]=$205,HEAP32[(((tempInt)+(16))>>2)]=$206,tempInt));
      label = 36; break;
    case 36: 
      var $207=$node;
      var $inc196=((($207)+(1))|0);
      $node=$inc196;
      label = 34; break;
    case 37: 
      var $208=$file_unit;
      var $call198=_fprintf($208, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $209=$file_unit;
      var $call199=_fprintf($209, ((15456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $210=$file_unit;
      var $call200=_fprintf($210, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $211=$file_unit;
      var $call201=_fprintf($211, ((15416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $212=$file_unit;
      var $call202=_fprintf($212, ((16256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $213=$file_unit;
      var $call203=_fprintf($213, ((15352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $214=$file_unit;
      var $call204=_fprintf($214, ((15872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $215=$file_unit;
      var $call205=_fprintf($215, ((15328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $216=$file_unit;
      var $call206=_fprintf($216, ((15808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $217=$file_unit;
      var $call207=_fprintf($217, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $node=0;
      label = 38; break;
    case 38: 
      var $218=$node;
      var $219=$node_num_addr;
      var $cmp209=(($218)|(0)) < (($219)|(0));
      if ($cmp209) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $220=$x_max;
      var $221=$node;
      var $mul212=($221<<1);
      var $add213=(($mul212)|0);
      var $222=$node_xy_addr;
      var $arrayidx214=(($222+($add213<<3))|0);
      var $223=HEAPF64[(($arrayidx214)>>3)];
      var $sub215=($220)-($223);
      var $224=$x_ps_min;
      var $conv216=(($224)|(0));
      var $mul217=($sub215)*($conv216);
      var $225=$node;
      var $mul218=($225<<1);
      var $add219=(($mul218)|0);
      var $226=$node_xy_addr;
      var $arrayidx220=(($226+($add219<<3))|0);
      var $227=HEAPF64[(($arrayidx220)>>3)];
      var $228=$x_min;
      var $sub221=($227)-($228);
      var $229=$x_ps_max;
      var $conv222=(($229)|(0));
      var $mul223=($sub221)*($conv222);
      var $add224=($mul217)+($mul223);
      var $230=$x_max;
      var $231=$x_min;
      var $sub225=($230)-($231);
      var $div226=($add224)/($sub225);
      var $conv227=(($div226)&-1);
      $x_ps=$conv227;
      var $232=$y_max;
      var $233=$node;
      var $mul228=($233<<1);
      var $add229=((($mul228)+(1))|0);
      var $234=$node_xy_addr;
      var $arrayidx230=(($234+($add229<<3))|0);
      var $235=HEAPF64[(($arrayidx230)>>3)];
      var $sub231=($232)-($235);
      var $236=$y_ps_min;
      var $conv232=(($236)|(0));
      var $mul233=($sub231)*($conv232);
      var $237=$node;
      var $mul234=($237<<1);
      var $add235=((($mul234)+(1))|0);
      var $238=$node_xy_addr;
      var $arrayidx236=(($238+($add235<<3))|0);
      var $239=HEAPF64[(($arrayidx236)>>3)];
      var $240=$y_min;
      var $sub237=($239)-($240);
      var $241=$y_ps_max;
      var $conv238=(($241)|(0));
      var $mul239=($sub237)*($conv238);
      var $add240=($mul233)+($mul239);
      var $242=$y_max;
      var $243=$y_min;
      var $sub241=($242)-($243);
      var $div242=($add240)/($sub241);
      var $conv243=(($div242)&-1);
      $y_ps=$conv243;
      var $244=$file_unit;
      var $245=$x_ps;
      var $246=$y_ps;
      var $add244=((($246)+(5))|0);
      var $247=$node;
      var $add245=((($247)+(1))|0);
      var $call246=_fprintf($244, ((15288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$245,HEAP32[(((tempInt)+(8))>>2)]=$add244,HEAP32[(((tempInt)+(16))>>2)]=$add245,tempInt));
      label = 40; break;
    case 40: 
      var $248=$node;
      var $inc248=((($248)+(1))|0);
      $node=$inc248;
      label = 38; break;
    case 41: 
      var $249=$file_unit;
      var $call250=_fprintf($249, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $250=$file_unit;
      var $call251=_fprintf($250, ((15264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $251=$file_unit;
      var $call252=_fprintf($251, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $252=$file_unit;
      var $call253=_fprintf($252, ((15248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $253=$file_unit;
      var $call254=_fprintf($253, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $254=$file_unit;
      var $call255=_fprintf($254, ((15232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $255=$file_unit;
      var $call256=_fprintf($255, ((15224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $256=$file_unit;
      var $call257=_fclose($256);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_plot"] = _points_plot;
function _polygon_area_2d($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $area;
      var $i;
      var $im1;
      var $ip1;
      $n_addr=$n;
      $v_addr=$v;
      $area=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $2=$i;
      var $sub=((($2)-(1))|0);
      $im1=$sub;
      var $3=$i;
      var $add=((($3)+(1))|0);
      $ip1=$add;
      var $4=$im1;
      var $cmp1=(($4)|(0)) < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$n_addr;
      var $sub2=((($5)-(1))|0);
      $im1=$sub2;
      label = 6; break;
    case 6: 
      var $6=$n_addr;
      var $7=$ip1;
      var $cmp3=(($6)|(0)) <= (($7)|(0));
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $ip1=0;
      label = 8; break;
    case 8: 
      var $8=$area;
      var $9=$i;
      var $mul=($9<<1);
      var $add6=(($mul)|0);
      var $10=$v_addr;
      var $arrayidx=(($10+($add6<<3))|0);
      var $11=HEAPF64[(($arrayidx)>>3)];
      var $12=$ip1;
      var $mul7=($12<<1);
      var $add8=((($mul7)+(1))|0);
      var $13=$v_addr;
      var $arrayidx9=(($13+($add8<<3))|0);
      var $14=HEAPF64[(($arrayidx9)>>3)];
      var $15=$im1;
      var $mul10=($15<<1);
      var $add11=((($mul10)+(1))|0);
      var $16=$v_addr;
      var $arrayidx12=(($16+($add11<<3))|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($14)-($17);
      var $mul14=($11)*($sub13);
      var $add15=($8)+($mul14);
      $area=$add15;
      label = 9; break;
    case 9: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 10: 
      var $19=$area;
      var $mul16=($19)*(0.5);
      $area=$mul16;
      var $20=$area;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_area_2d"] = _polygon_area_2d;
function _points_point_near_naive_nd($dim_num, $nset, $pset, $ptest, $d_min) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $nset_addr;
      var $pset_addr;
      var $ptest_addr;
      var $d_min_addr;
      var $d;
      var $i;
      var $j;
      var $p_min;
      $dim_num_addr=$dim_num;
      $nset_addr=$nset;
      $pset_addr=$pset;
      $ptest_addr=$ptest;
      $d_min_addr=$d_min;
      var $call=_r8_huge();
      var $0=$d_min_addr;
      HEAPF64[(($0)>>3)]=$call;
      $p_min=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $2=$nset_addr;
      var $cmp=(($1)|(0)) < (($2)|(0));
      if ($cmp) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $d=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $4=$dim_num_addr;
      var $cmp2=(($3)|(0)) < (($4)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$d;
      var $6=$i;
      var $7=$ptest_addr;
      var $arrayidx=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$i;
      var $10=$j;
      var $11=$dim_num_addr;
      var $mul=(Math.imul($10,$11)|0);
      var $add=((($9)+($mul))|0);
      var $12=$pset_addr;
      var $arrayidx4=(($12+($add<<3))|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $sub=($8)-($13);
      var $14=Math.pow($sub, 2);
      var $add5=($5)+($14);
      $d=$add5;
      label = 7; break;
    case 7: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $16=$d;
      var $17=$d_min_addr;
      var $18=HEAPF64[(($17)>>3)];
      var $cmp6=$16 < $18;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=$d;
      var $20=$d_min_addr;
      HEAPF64[(($20)>>3)]=$19;
      var $21=$j;
      $p_min=$21;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $22=$j;
      var $inc8=((($22)+(1))|0);
      $j=$inc8;
      label = 3; break;
    case 12: 
      var $23=$d_min_addr;
      var $24=HEAPF64[(($23)>>3)];
      var $call10=Math.sqrt($24);
      var $25=$d_min_addr;
      HEAPF64[(($25)>>3)]=$call10;
      var $26=$p_min;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_point_near_naive_nd"] = _points_point_near_naive_nd;
function _points_points_near_naive_2d($nset, $pset, $ntest, $ptest) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $nset_addr;
      var $pset_addr;
      var $ntest_addr;
      var $ptest_addr;
      var $d;
      var $d_min;
      var $i;
      var $nearest;
      var $set;
      var $test;
      $nset_addr=$nset;
      $pset_addr=$pset;
      $ntest_addr=$ntest;
      $ptest_addr=$ptest;
      var $0=$ntest_addr;
      var $mul=($0<<2);
      var $call=_malloc($mul);
      var $1=$call;
      $nearest=$1;
      $test=0;
      label = 3; break;
    case 3: 
      var $2=$test;
      var $3=$ntest_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $call1=_r8_huge();
      $d_min=$call1;
      var $4=$test;
      var $5=$nearest;
      var $arrayidx=(($5+($4<<2))|0);
      HEAP32[(($arrayidx)>>2)]=-1;
      $set=0;
      label = 5; break;
    case 5: 
      var $6=$set;
      var $7=$nset_addr;
      var $cmp3=(($6)|(0)) < (($7)|(0));
      if ($cmp3) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $d=0;
      $i=0;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $cmp6=(($8)|(0)) < 2;
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $9=$d;
      var $10=$i;
      var $11=$test;
      var $mul8=($11<<1);
      var $add=((($10)+($mul8))|0);
      var $12=$ptest_addr;
      var $arrayidx9=(($12+($add<<3))|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $14=$i;
      var $15=$set;
      var $mul10=($15<<1);
      var $add11=((($14)+($mul10))|0);
      var $16=$pset_addr;
      var $arrayidx12=(($16+($add11<<3))|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $sub=($13)-($17);
      var $18=Math.pow($sub, 2);
      var $add13=($9)+($18);
      $d=$add13;
      label = 9; break;
    case 9: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $20=$d;
      var $21=$d_min;
      var $cmp14=$20 < $21;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $22=$d;
      $d_min=$22;
      var $23=$set;
      var $24=$test;
      var $25=$nearest;
      var $arrayidx15=(($25+($24<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$23;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$set;
      var $inc17=((($26)+(1))|0);
      $set=$inc17;
      label = 5; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $27=$test;
      var $inc20=((($27)+(1))|0);
      $test=$inc20;
      label = 3; break;
    case 16: 
      var $28=$nearest;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_points_near_naive_2d"] = _points_points_near_naive_2d;
function _points_points_near_naive_3d($nset, $pset, $ntest, $ptest) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $nset_addr;
      var $pset_addr;
      var $ntest_addr;
      var $ptest_addr;
      var $d;
      var $d_min;
      var $i;
      var $nearest;
      var $set;
      var $test;
      $nset_addr=$nset;
      $pset_addr=$pset;
      $ntest_addr=$ntest;
      $ptest_addr=$ptest;
      var $0=$ntest_addr;
      var $mul=($0<<2);
      var $call=_malloc($mul);
      var $1=$call;
      $nearest=$1;
      $test=0;
      label = 3; break;
    case 3: 
      var $2=$test;
      var $3=$ntest_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $call1=_r8_huge();
      $d_min=$call1;
      var $4=$test;
      var $5=$nearest;
      var $arrayidx=(($5+($4<<2))|0);
      HEAP32[(($arrayidx)>>2)]=-1;
      $set=0;
      label = 5; break;
    case 5: 
      var $6=$set;
      var $7=$nset_addr;
      var $cmp3=(($6)|(0)) < (($7)|(0));
      if ($cmp3) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $d=0;
      $i=0;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $cmp6=(($8)|(0)) < 3;
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $9=$d;
      var $10=$i;
      var $11=$test;
      var $mul8=((($11)*(3))&-1);
      var $add=((($10)+($mul8))|0);
      var $12=$ptest_addr;
      var $arrayidx9=(($12+($add<<3))|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $14=$i;
      var $15=$set;
      var $mul10=((($15)*(3))&-1);
      var $add11=((($14)+($mul10))|0);
      var $16=$pset_addr;
      var $arrayidx12=(($16+($add11<<3))|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $sub=($13)-($17);
      var $18=Math.pow($sub, 2);
      var $add13=($9)+($18);
      $d=$add13;
      label = 9; break;
    case 9: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $20=$d;
      var $21=$d_min;
      var $cmp14=$20 < $21;
      if ($cmp14) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $22=$d;
      $d_min=$22;
      var $23=$set;
      var $24=$test;
      var $25=$nearest;
      var $arrayidx15=(($25+($24<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$23;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$set;
      var $inc17=((($26)+(1))|0);
      $set=$inc17;
      label = 5; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $27=$test;
      var $inc20=((($27)+(1))|0);
      $test=$inc20;
      label = 3; break;
    case 16: 
      var $28=$nearest;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
Module["_points_points_near_naive_3d"] = _points_points_near_naive_3d;
function _polar_to_xy($r, $t, $xy) {
  var label = 0;
  var $r_addr;
  var $t_addr;
  var $xy_addr;
  $r_addr=$r;
  $t_addr=$t;
  $xy_addr=$xy;
  var $0=$r_addr;
  var $1=$t_addr;
  var $call=Math.cos($1);
  var $mul=($0)*($call);
  var $2=$xy_addr;
  var $arrayidx=(($2)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul;
  var $3=$r_addr;
  var $4=$t_addr;
  var $call1=Math.sin($4);
  var $mul2=($3)*($call1);
  var $5=$xy_addr;
  var $arrayidx3=(($5+8)|0);
  HEAPF64[(($arrayidx3)>>3)]=$mul2;
  return;
}
Module["_polar_to_xy"] = _polar_to_xy;
function _polygon_1_2d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $i;
      var $im1;
      var $result;
      $n_addr=$n;
      $v_addr=$v;
      $result=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((15192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((15120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((15088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$result;
      $retval=$6;
      label = 12; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $9=$i;
      var $cmp5=(($9)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$n_addr;
      var $sub=((($10)-(1))|0);
      $im1=$sub;
      label = 9; break;
    case 8: 
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      $im1=$sub7;
      label = 9; break;
    case 9: 
      var $12=$result;
      var $13=$i;
      var $mul=($13<<1);
      var $add=(($mul)|0);
      var $14=$v_addr;
      var $arrayidx=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$im1;
      var $mul9=($16<<1);
      var $add10=(($mul9)|0);
      var $17=$v_addr;
      var $arrayidx11=(($17+($add10<<3))|0);
      var $18=HEAPF64[(($arrayidx11)>>3)];
      var $add12=($15)+($18);
      var $mul13=($add12)*(0.5);
      var $19=$i;
      var $mul14=($19<<1);
      var $add15=((($mul14)+(1))|0);
      var $20=$v_addr;
      var $arrayidx16=(($20+($add15<<3))|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$im1;
      var $mul17=($22<<1);
      var $add18=((($mul17)+(1))|0);
      var $23=$v_addr;
      var $arrayidx19=(($23+($add18<<3))|0);
      var $24=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($21)-($24);
      var $mul21=($mul13)*($sub20);
      var $add22=($12)+($mul21);
      $result=$add22;
      label = 10; break;
    case 10: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $26=$result;
      $retval=$26;
      label = 12; break;
    case 12: 
      var $27=$retval;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_1_2d"] = _polygon_1_2d;
function _polygon_angles_2d($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $angle;
      var $i;
      var $im1;
      var $ip1;
      $n_addr=$n;
      $v_addr=$v;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $1=$n_addr;
      var $mul=($1<<3);
      var $call=_malloc($mul);
      var $2=$call;
      $angle=$2;
      var $3=$n_addr;
      var $cmp1=(($3)|(0)) <= 2;
      if ($cmp1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp3=(($4)|(0)) < (($5)|(0));
      if ($cmp3) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $6=$i;
      var $7=$angle;
      var $arrayidx=(($7+($6<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 8; break;
    case 8: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      var $9=$angle;
      $retval=$9;
      label = 15; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $10=$i;
      var $11=$n_addr;
      var $cmp6=(($10)|(0)) < (($11)|(0));
      if ($cmp6) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $12=$i;
      var $sub=((($12)-(1))|0);
      var $13=$n_addr;
      var $sub8=((($13)-(1))|0);
      var $call9=_i4_wrap($sub, 0, $sub8);
      $im1=$call9;
      var $14=$i;
      var $add=((($14)+(1))|0);
      var $15=$n_addr;
      var $sub10=((($15)-(1))|0);
      var $call11=_i4_wrap($add, 0, $sub10);
      $ip1=$call11;
      var $16=$v_addr;
      var $17=$im1;
      var $mul12=($17<<1);
      var $add_ptr=(($16+($mul12<<3))|0);
      var $18=$v_addr;
      var $19=$i;
      var $mul13=($19<<1);
      var $add_ptr14=(($18+($mul13<<3))|0);
      var $20=$v_addr;
      var $21=$ip1;
      var $mul15=($21<<1);
      var $add_ptr16=(($20+($mul15<<3))|0);
      var $call17=_angle_rad_2d($add_ptr, $add_ptr14, $add_ptr16);
      var $22=$i;
      var $23=$angle;
      var $arrayidx18=(($23+($22<<3))|0);
      HEAPF64[(($arrayidx18)>>3)]=$call17;
      label = 13; break;
    case 13: 
      var $24=$i;
      var $inc20=((($24)+(1))|0);
      $i=$inc20;
      label = 11; break;
    case 14: 
      var $25=$angle;
      $retval=$25;
      label = 15; break;
    case 15: 
      var $26=$retval;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_angles_2d"] = _polygon_angles_2d;
function _polygon_area_2d_2($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $area;
      var $area_triangle;
      var $i;
      var $t=__stackBase__;
      $n_addr=$n;
      $v_addr=$v;
      $area=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $sub=((($1)-(2))|0);
      var $cmp=(($0)|(0)) < (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $mul=($2<<1);
      var $add=(($mul)|0);
      var $3=$v_addr;
      var $arrayidx=(($3+($add<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($t)|0);
      HEAPF64[(($arrayidx1)>>3)]=$4;
      var $5=$i;
      var $mul2=($5<<1);
      var $add3=((($mul2)+(1))|0);
      var $6=$v_addr;
      var $arrayidx4=(($6+($add3<<3))|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t+8)|0);
      HEAPF64[(($arrayidx5)>>3)]=$7;
      var $8=$i;
      var $add6=((($8)+(1))|0);
      var $mul7=($add6<<1);
      var $add8=(($mul7)|0);
      var $9=$v_addr;
      var $arrayidx9=(($9+($add8<<3))|0);
      var $10=HEAPF64[(($arrayidx9)>>3)];
      var $arrayidx10=(($t+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$10;
      var $11=$i;
      var $add11=((($11)+(1))|0);
      var $mul12=($add11<<1);
      var $add13=((($mul12)+(1))|0);
      var $12=$v_addr;
      var $arrayidx14=(($12+($add13<<3))|0);
      var $13=HEAPF64[(($arrayidx14)>>3)];
      var $arrayidx15=(($t+24)|0);
      HEAPF64[(($arrayidx15)>>3)]=$13;
      var $14=$n_addr;
      var $sub16=((($14)-(1))|0);
      var $mul17=($sub16<<1);
      var $add18=(($mul17)|0);
      var $15=$v_addr;
      var $arrayidx19=(($15+($add18<<3))|0);
      var $16=HEAPF64[(($arrayidx19)>>3)];
      var $arrayidx20=(($t+32)|0);
      HEAPF64[(($arrayidx20)>>3)]=$16;
      var $17=$n_addr;
      var $sub21=((($17)-(1))|0);
      var $mul22=($sub21<<1);
      var $add23=((($mul22)+(1))|0);
      var $18=$v_addr;
      var $arrayidx24=(($18+($add23<<3))|0);
      var $19=HEAPF64[(($arrayidx24)>>3)];
      var $arrayidx25=(($t+40)|0);
      HEAPF64[(($arrayidx25)>>3)]=$19;
      var $arraydecay=(($t)|0);
      var $call=_triangle_area_2d($arraydecay);
      $area_triangle=$call;
      var $20=$area;
      var $21=$area_triangle;
      var $add26=($20)+($21);
      $area=$add26;
      label = 5; break;
    case 5: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $23=$area;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_area_2d_2"] = _polygon_area_2d_2;
function _polygon_area_3d($n, $v, $normal) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $normal_addr;
      var $area;
      var $i;
      var $ip1;
      $n_addr=$n;
      $v_addr=$v;
      $normal_addr=$normal;
      var $0=$normal_addr;
      var $arrayidx=(($0)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      var $1=$normal_addr;
      var $arrayidx1=(($1+8)|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      var $2=$normal_addr;
      var $arrayidx2=(($2+16)|0);
      HEAPF64[(($arrayidx2)>>3)]=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$n_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $5=$i;
      var $6=$n_addr;
      var $sub=((($6)-(1))|0);
      var $cmp3=(($5)|(0)) < (($sub)|(0));
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$i;
      var $add=((($7)+(1))|0);
      $ip1=$add;
      label = 7; break;
    case 6: 
      $ip1=0;
      label = 7; break;
    case 7: 
      var $8=$normal_addr;
      var $arrayidx4=(($8)|0);
      var $9=HEAPF64[(($arrayidx4)>>3)];
      var $10=$i;
      var $mul=((($10)*(3))&-1);
      var $add5=((($mul)+(1))|0);
      var $11=$v_addr;
      var $arrayidx6=(($11+($add5<<3))|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$ip1;
      var $mul7=((($13)*(3))&-1);
      var $add8=((($mul7)+(2))|0);
      var $14=$v_addr;
      var $arrayidx9=(($14+($add8<<3))|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $mul10=($12)*($15);
      var $add11=($9)+($mul10);
      var $16=$i;
      var $mul12=((($16)*(3))&-1);
      var $add13=((($mul12)+(2))|0);
      var $17=$v_addr;
      var $arrayidx14=(($17+($add13<<3))|0);
      var $18=HEAPF64[(($arrayidx14)>>3)];
      var $19=$ip1;
      var $mul15=((($19)*(3))&-1);
      var $add16=((($mul15)+(1))|0);
      var $20=$v_addr;
      var $arrayidx17=(($20+($add16<<3))|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $mul18=($18)*($21);
      var $sub19=($add11)-($mul18);
      var $22=$normal_addr;
      var $arrayidx20=(($22)|0);
      HEAPF64[(($arrayidx20)>>3)]=$sub19;
      var $23=$normal_addr;
      var $arrayidx21=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx21)>>3)];
      var $25=$i;
      var $mul22=((($25)*(3))&-1);
      var $add23=((($mul22)+(2))|0);
      var $26=$v_addr;
      var $arrayidx24=(($26+($add23<<3))|0);
      var $27=HEAPF64[(($arrayidx24)>>3)];
      var $28=$ip1;
      var $mul25=((($28)*(3))&-1);
      var $add26=(($mul25)|0);
      var $29=$v_addr;
      var $arrayidx27=(($29+($add26<<3))|0);
      var $30=HEAPF64[(($arrayidx27)>>3)];
      var $mul28=($27)*($30);
      var $add29=($24)+($mul28);
      var $31=$i;
      var $mul30=((($31)*(3))&-1);
      var $add31=(($mul30)|0);
      var $32=$v_addr;
      var $arrayidx32=(($32+($add31<<3))|0);
      var $33=HEAPF64[(($arrayidx32)>>3)];
      var $34=$ip1;
      var $mul33=((($34)*(3))&-1);
      var $add34=((($mul33)+(2))|0);
      var $35=$v_addr;
      var $arrayidx35=(($35+($add34<<3))|0);
      var $36=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($33)*($36);
      var $sub37=($add29)-($mul36);
      var $37=$normal_addr;
      var $arrayidx38=(($37+8)|0);
      HEAPF64[(($arrayidx38)>>3)]=$sub37;
      var $38=$normal_addr;
      var $arrayidx39=(($38+16)|0);
      var $39=HEAPF64[(($arrayidx39)>>3)];
      var $40=$i;
      var $mul40=((($40)*(3))&-1);
      var $add41=(($mul40)|0);
      var $41=$v_addr;
      var $arrayidx42=(($41+($add41<<3))|0);
      var $42=HEAPF64[(($arrayidx42)>>3)];
      var $43=$ip1;
      var $mul43=((($43)*(3))&-1);
      var $add44=((($mul43)+(1))|0);
      var $44=$v_addr;
      var $arrayidx45=(($44+($add44<<3))|0);
      var $45=HEAPF64[(($arrayidx45)>>3)];
      var $mul46=($42)*($45);
      var $add47=($39)+($mul46);
      var $46=$i;
      var $mul48=((($46)*(3))&-1);
      var $add49=((($mul48)+(1))|0);
      var $47=$v_addr;
      var $arrayidx50=(($47+($add49<<3))|0);
      var $48=HEAPF64[(($arrayidx50)>>3)];
      var $49=$ip1;
      var $mul51=((($49)*(3))&-1);
      var $add52=(($mul51)|0);
      var $50=$v_addr;
      var $arrayidx53=(($50+($add52<<3))|0);
      var $51=HEAPF64[(($arrayidx53)>>3)];
      var $mul54=($48)*($51);
      var $sub55=($add47)-($mul54);
      var $52=$normal_addr;
      var $arrayidx56=(($52+16)|0);
      HEAPF64[(($arrayidx56)>>3)]=$sub55;
      label = 8; break;
    case 8: 
      var $53=$i;
      var $inc=((($53)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 9: 
      var $54=$normal_addr;
      var $call=_r8vec_norm(3, $54);
      $area=$call;
      var $55=$area;
      var $cmp57=$55 != 0;
      if ($cmp57) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $56=$normal_addr;
      var $arrayidx59=(($56)|0);
      var $57=HEAPF64[(($arrayidx59)>>3)];
      var $58=$area;
      var $div=($57)/($58);
      var $59=$normal_addr;
      var $arrayidx60=(($59)|0);
      HEAPF64[(($arrayidx60)>>3)]=$div;
      var $60=$normal_addr;
      var $arrayidx61=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx61)>>3)];
      var $62=$area;
      var $div62=($61)/($62);
      var $63=$normal_addr;
      var $arrayidx63=(($63+8)|0);
      HEAPF64[(($arrayidx63)>>3)]=$div62;
      var $64=$normal_addr;
      var $arrayidx64=(($64+16)|0);
      var $65=HEAPF64[(($arrayidx64)>>3)];
      var $66=$area;
      var $div65=($65)/($66);
      var $67=$normal_addr;
      var $arrayidx66=(($67+16)|0);
      HEAPF64[(($arrayidx66)>>3)]=$div65;
      label = 12; break;
    case 11: 
      var $68=$normal_addr;
      var $arrayidx68=(($68)|0);
      HEAPF64[(($arrayidx68)>>3)]=1;
      var $69=$normal_addr;
      var $arrayidx69=(($69+8)|0);
      HEAPF64[(($arrayidx69)>>3)]=0;
      var $70=$normal_addr;
      var $arrayidx70=(($70+16)|0);
      HEAPF64[(($arrayidx70)>>3)]=0;
      label = 12; break;
    case 12: 
      var $71=$area;
      var $mul72=($71)*(0.5);
      $area=$mul72;
      var $72=$area;
      return $72;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_area_3d"] = _polygon_area_3d;
function _polygon_area_3d_2($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $area;
      var $area_vector=__stackBase__;
      var $area_vector_triangle;
      var $i;
      var $j;
      var $t=(__stackBase__)+(24);
      $n_addr=$n;
      $v_addr=$v;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $arrayidx=(($area_vector+($1<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $inc=((($2)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $3=$j;
      var $4=$n_addr;
      var $sub=((($4)-(2))|0);
      var $cmp2=(($3)|(0)) < (($sub)|(0));
      if ($cmp2) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $5=$j;
      var $mul=((($5)*(3))&-1);
      var $add=(($mul)|0);
      var $6=$v_addr;
      var $arrayidx4=(($6+($add<<3))|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t)|0);
      HEAPF64[(($arrayidx5)>>3)]=$7;
      var $8=$j;
      var $mul6=((($8)*(3))&-1);
      var $add7=((($mul6)+(1))|0);
      var $9=$v_addr;
      var $arrayidx8=(($9+($add7<<3))|0);
      var $10=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($t+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$10;
      var $11=$j;
      var $mul10=((($11)*(3))&-1);
      var $add11=((($mul10)+(2))|0);
      var $12=$v_addr;
      var $arrayidx12=(($12+($add11<<3))|0);
      var $13=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($t+16)|0);
      HEAPF64[(($arrayidx13)>>3)]=$13;
      var $14=$j;
      var $add14=((($14)+(1))|0);
      var $mul15=((($add14)*(3))&-1);
      var $add16=(($mul15)|0);
      var $15=$v_addr;
      var $arrayidx17=(($15+($add16<<3))|0);
      var $16=HEAPF64[(($arrayidx17)>>3)];
      var $arrayidx18=(($t+24)|0);
      HEAPF64[(($arrayidx18)>>3)]=$16;
      var $17=$j;
      var $add19=((($17)+(1))|0);
      var $mul20=((($add19)*(3))&-1);
      var $add21=((($mul20)+(1))|0);
      var $18=$v_addr;
      var $arrayidx22=(($18+($add21<<3))|0);
      var $19=HEAPF64[(($arrayidx22)>>3)];
      var $arrayidx23=(($t+32)|0);
      HEAPF64[(($arrayidx23)>>3)]=$19;
      var $20=$j;
      var $add24=((($20)+(1))|0);
      var $mul25=((($add24)*(3))&-1);
      var $add26=((($mul25)+(2))|0);
      var $21=$v_addr;
      var $arrayidx27=(($21+($add26<<3))|0);
      var $22=HEAPF64[(($arrayidx27)>>3)];
      var $arrayidx28=(($t+40)|0);
      HEAPF64[(($arrayidx28)>>3)]=$22;
      var $23=$n_addr;
      var $sub29=((($23)-(1))|0);
      var $mul30=((($sub29)*(3))&-1);
      var $add31=(($mul30)|0);
      var $24=$v_addr;
      var $arrayidx32=(($24+($add31<<3))|0);
      var $25=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($t+48)|0);
      HEAPF64[(($arrayidx33)>>3)]=$25;
      var $26=$n_addr;
      var $sub34=((($26)-(1))|0);
      var $mul35=((($sub34)*(3))&-1);
      var $add36=((($mul35)+(1))|0);
      var $27=$v_addr;
      var $arrayidx37=(($27+($add36<<3))|0);
      var $28=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($t+56)|0);
      HEAPF64[(($arrayidx38)>>3)]=$28;
      var $29=$n_addr;
      var $sub39=((($29)-(1))|0);
      var $mul40=((($sub39)*(3))&-1);
      var $add41=((($mul40)+(2))|0);
      var $30=$v_addr;
      var $arrayidx42=(($30+($add41<<3))|0);
      var $31=HEAPF64[(($arrayidx42)>>3)];
      var $arrayidx43=(($t+64)|0);
      HEAPF64[(($arrayidx43)>>3)]=$31;
      var $arraydecay=(($t)|0);
      var $call=_triangle_area_vector_3d($arraydecay);
      $area_vector_triangle=$call;
      $i=0;
      label = 9; break;
    case 9: 
      var $32=$i;
      var $cmp45=(($32)|(0)) < 3;
      if ($cmp45) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $33=$i;
      var $arrayidx47=(($area_vector+($33<<3))|0);
      var $34=HEAPF64[(($arrayidx47)>>3)];
      var $35=$i;
      var $36=$area_vector_triangle;
      var $arrayidx48=(($36+($35<<3))|0);
      var $37=HEAPF64[(($arrayidx48)>>3)];
      var $add49=($34)+($37);
      var $38=$i;
      var $arrayidx50=(($area_vector+($38<<3))|0);
      HEAPF64[(($arrayidx50)>>3)]=$add49;
      label = 11; break;
    case 11: 
      var $39=$i;
      var $inc52=((($39)+(1))|0);
      $i=$inc52;
      label = 9; break;
    case 12: 
      var $40=$area_vector_triangle;
      var $41=$40;
      _free($41);
      label = 13; break;
    case 13: 
      var $42=$j;
      var $inc55=((($42)+(1))|0);
      $j=$inc55;
      label = 7; break;
    case 14: 
      var $arraydecay57=(($area_vector)|0);
      var $call58=_r8vec_norm(3, $arraydecay57);
      var $mul59=($call58)*(0.5);
      $area=$mul59;
      var $43=$area;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_area_3d_2"] = _polygon_area_3d_2;
function _triangle_area_vector_3d($t) {
  var label = 0;
  var $t_addr;
  var $cross;
  $t_addr=$t;
  var $call=_malloc(24);
  var $0=$call;
  $cross=$0;
  var $1=$t_addr;
  var $arrayidx=(($1+32)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$t_addr;
  var $arrayidx1=(($3+8)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($2)-($4);
  var $5=$t_addr;
  var $arrayidx2=(($5+64)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$t_addr;
  var $arrayidx3=(($7+16)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $mul=($sub)*($sub4);
  var $9=$t_addr;
  var $arrayidx5=(($9+40)|0);
  var $10=HEAPF64[(($arrayidx5)>>3)];
  var $11=$t_addr;
  var $arrayidx6=(($11+16)|0);
  var $12=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($10)-($12);
  var $13=$t_addr;
  var $arrayidx8=(($13+56)|0);
  var $14=HEAPF64[(($arrayidx8)>>3)];
  var $15=$t_addr;
  var $arrayidx9=(($15+8)|0);
  var $16=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($14)-($16);
  var $mul11=($sub7)*($sub10);
  var $sub12=($mul)-($mul11);
  var $17=$cross;
  var $arrayidx13=(($17)|0);
  HEAPF64[(($arrayidx13)>>3)]=$sub12;
  var $18=$t_addr;
  var $arrayidx14=(($18+40)|0);
  var $19=HEAPF64[(($arrayidx14)>>3)];
  var $20=$t_addr;
  var $arrayidx15=(($20+16)|0);
  var $21=HEAPF64[(($arrayidx15)>>3)];
  var $sub16=($19)-($21);
  var $22=$t_addr;
  var $arrayidx17=(($22+48)|0);
  var $23=HEAPF64[(($arrayidx17)>>3)];
  var $24=$t_addr;
  var $arrayidx18=(($24)|0);
  var $25=HEAPF64[(($arrayidx18)>>3)];
  var $sub19=($23)-($25);
  var $mul20=($sub16)*($sub19);
  var $26=$t_addr;
  var $arrayidx21=(($26+24)|0);
  var $27=HEAPF64[(($arrayidx21)>>3)];
  var $28=$t_addr;
  var $arrayidx22=(($28)|0);
  var $29=HEAPF64[(($arrayidx22)>>3)];
  var $sub23=($27)-($29);
  var $30=$t_addr;
  var $arrayidx24=(($30+64)|0);
  var $31=HEAPF64[(($arrayidx24)>>3)];
  var $32=$t_addr;
  var $arrayidx25=(($32+16)|0);
  var $33=HEAPF64[(($arrayidx25)>>3)];
  var $sub26=($31)-($33);
  var $mul27=($sub23)*($sub26);
  var $sub28=($mul20)-($mul27);
  var $34=$cross;
  var $arrayidx29=(($34+8)|0);
  HEAPF64[(($arrayidx29)>>3)]=$sub28;
  var $35=$t_addr;
  var $arrayidx30=(($35+24)|0);
  var $36=HEAPF64[(($arrayidx30)>>3)];
  var $37=$t_addr;
  var $arrayidx31=(($37)|0);
  var $38=HEAPF64[(($arrayidx31)>>3)];
  var $sub32=($36)-($38);
  var $39=$t_addr;
  var $arrayidx33=(($39+56)|0);
  var $40=HEAPF64[(($arrayidx33)>>3)];
  var $41=$t_addr;
  var $arrayidx34=(($41+8)|0);
  var $42=HEAPF64[(($arrayidx34)>>3)];
  var $sub35=($40)-($42);
  var $mul36=($sub32)*($sub35);
  var $43=$t_addr;
  var $arrayidx37=(($43+32)|0);
  var $44=HEAPF64[(($arrayidx37)>>3)];
  var $45=$t_addr;
  var $arrayidx38=(($45+8)|0);
  var $46=HEAPF64[(($arrayidx38)>>3)];
  var $sub39=($44)-($46);
  var $47=$t_addr;
  var $arrayidx40=(($47+48)|0);
  var $48=HEAPF64[(($arrayidx40)>>3)];
  var $49=$t_addr;
  var $arrayidx41=(($49)|0);
  var $50=HEAPF64[(($arrayidx41)>>3)];
  var $sub42=($48)-($50);
  var $mul43=($sub39)*($sub42);
  var $sub44=($mul36)-($mul43);
  var $51=$cross;
  var $arrayidx45=(($51+16)|0);
  HEAPF64[(($arrayidx45)>>3)]=$sub44;
  var $52=$cross;
  return $52;
}
Module["_triangle_area_vector_3d"] = _triangle_area_vector_3d;
function _polygon_centroid_2d($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $area;
      var $centroid;
      var $i;
      var $ip1;
      var $j;
      var $temp;
      $n_addr=$n;
      $v_addr=$v;
      $area=0;
      var $call=_malloc(16);
      var $0=$call;
      $centroid=$0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $cmp=(($1)|(0)) < 2;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$j;
      var $3=$centroid;
      var $arrayidx=(($3+($2<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 5; break;
    case 5: 
      var $4=$j;
      var $inc=((($4)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $5=$i;
      var $6=$n_addr;
      var $cmp2=(($5)|(0)) < (($6)|(0));
      if ($cmp2) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $7=$i;
      var $8=$n_addr;
      var $sub=((($8)-(1))|0);
      var $cmp4=(($7)|(0)) < (($sub)|(0));
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $9=$i;
      var $add=((($9)+(1))|0);
      $ip1=$add;
      label = 11; break;
    case 10: 
      $ip1=0;
      label = 11; break;
    case 11: 
      var $10=$i;
      var $mul=($10<<1);
      var $add5=(($mul)|0);
      var $11=$v_addr;
      var $arrayidx6=(($11+($add5<<3))|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$ip1;
      var $mul7=($13<<1);
      var $add8=((($mul7)+(1))|0);
      var $14=$v_addr;
      var $arrayidx9=(($14+($add8<<3))|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $mul10=($12)*($15);
      var $16=$ip1;
      var $mul11=($16<<1);
      var $add12=(($mul11)|0);
      var $17=$v_addr;
      var $arrayidx13=(($17+($add12<<3))|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      var $19=$i;
      var $mul14=($19<<1);
      var $add15=((($mul14)+(1))|0);
      var $20=$v_addr;
      var $arrayidx16=(($20+($add15<<3))|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $mul17=($18)*($21);
      var $sub18=($mul10)-($mul17);
      $temp=$sub18;
      var $22=$area;
      var $23=$temp;
      var $add19=($22)+($23);
      $area=$add19;
      var $24=$centroid;
      var $arrayidx20=(($24)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$ip1;
      var $mul21=($26<<1);
      var $add22=(($mul21)|0);
      var $27=$v_addr;
      var $arrayidx23=(($27+($add22<<3))|0);
      var $28=HEAPF64[(($arrayidx23)>>3)];
      var $29=$i;
      var $mul24=($29<<1);
      var $add25=(($mul24)|0);
      var $30=$v_addr;
      var $arrayidx26=(($30+($add25<<3))|0);
      var $31=HEAPF64[(($arrayidx26)>>3)];
      var $add27=($28)+($31);
      var $32=$temp;
      var $mul28=($add27)*($32);
      var $add29=($25)+($mul28);
      var $33=$centroid;
      var $arrayidx30=(($33)|0);
      HEAPF64[(($arrayidx30)>>3)]=$add29;
      var $34=$centroid;
      var $arrayidx31=(($34+8)|0);
      var $35=HEAPF64[(($arrayidx31)>>3)];
      var $36=$ip1;
      var $mul32=($36<<1);
      var $add33=((($mul32)+(1))|0);
      var $37=$v_addr;
      var $arrayidx34=(($37+($add33<<3))|0);
      var $38=HEAPF64[(($arrayidx34)>>3)];
      var $39=$i;
      var $mul35=($39<<1);
      var $add36=((($mul35)+(1))|0);
      var $40=$v_addr;
      var $arrayidx37=(($40+($add36<<3))|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $add38=($38)+($41);
      var $42=$temp;
      var $mul39=($add38)*($42);
      var $add40=($35)+($mul39);
      var $43=$centroid;
      var $arrayidx41=(($43+8)|0);
      HEAPF64[(($arrayidx41)>>3)]=$add40;
      label = 12; break;
    case 12: 
      var $44=$i;
      var $inc43=((($44)+(1))|0);
      $i=$inc43;
      label = 7; break;
    case 13: 
      var $45=$area;
      var $div=($45)/(2);
      $area=$div;
      $j=0;
      label = 14; break;
    case 14: 
      var $46=$j;
      var $cmp46=(($46)|(0)) < 2;
      if ($cmp46) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $47=$j;
      var $48=$centroid;
      var $arrayidx48=(($48+($47<<3))|0);
      var $49=HEAPF64[(($arrayidx48)>>3)];
      var $50=$area;
      var $mul49=($50)*(6);
      var $div50=($49)/($mul49);
      var $51=$j;
      var $52=$centroid;
      var $arrayidx51=(($52+($51<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$div50;
      label = 16; break;
    case 16: 
      var $53=$j;
      var $inc53=((($53)+(1))|0);
      $j=$inc53;
      label = 14; break;
    case 17: 
      var $54=$centroid;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_centroid_2d"] = _polygon_centroid_2d;
function _polygon_centroid_2d_2($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $area;
      var $area_triangle;
      var $centroid;
      var $i;
      var $j;
      var $t=__stackBase__;
      $n_addr=$n;
      $v_addr=$v;
      $area=0;
      var $call=_malloc(16);
      var $0=$call;
      $centroid=$0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $cmp=(($1)|(0)) < 2;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$j;
      var $3=$centroid;
      var $arrayidx=(($3+($2<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 5; break;
    case 5: 
      var $4=$j;
      var $inc=((($4)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $5=$i;
      var $6=$n_addr;
      var $sub=((($6)-(2))|0);
      var $cmp2=(($5)|(0)) < (($sub)|(0));
      if ($cmp2) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $7=$i;
      var $mul=($7<<1);
      var $add=(($mul)|0);
      var $8=$v_addr;
      var $arrayidx4=(($8+($add<<3))|0);
      var $9=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t)|0);
      HEAPF64[(($arrayidx5)>>3)]=$9;
      var $10=$i;
      var $mul6=($10<<1);
      var $add7=((($mul6)+(1))|0);
      var $11=$v_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($t+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$12;
      var $13=$i;
      var $add10=((($13)+(1))|0);
      var $mul11=($add10<<1);
      var $add12=(($mul11)|0);
      var $14=$v_addr;
      var $arrayidx13=(($14+($add12<<3))|0);
      var $15=HEAPF64[(($arrayidx13)>>3)];
      var $arrayidx14=(($t+16)|0);
      HEAPF64[(($arrayidx14)>>3)]=$15;
      var $16=$i;
      var $add15=((($16)+(1))|0);
      var $mul16=($add15<<1);
      var $add17=((($mul16)+(1))|0);
      var $17=$v_addr;
      var $arrayidx18=(($17+($add17<<3))|0);
      var $18=HEAPF64[(($arrayidx18)>>3)];
      var $arrayidx19=(($t+24)|0);
      HEAPF64[(($arrayidx19)>>3)]=$18;
      var $19=$n_addr;
      var $sub20=((($19)-(1))|0);
      var $mul21=($sub20<<1);
      var $add22=(($mul21)|0);
      var $20=$v_addr;
      var $arrayidx23=(($20+($add22<<3))|0);
      var $21=HEAPF64[(($arrayidx23)>>3)];
      var $arrayidx24=(($t+32)|0);
      HEAPF64[(($arrayidx24)>>3)]=$21;
      var $22=$n_addr;
      var $sub25=((($22)-(1))|0);
      var $mul26=($sub25<<1);
      var $add27=((($mul26)+(1))|0);
      var $23=$v_addr;
      var $arrayidx28=(($23+($add27<<3))|0);
      var $24=HEAPF64[(($arrayidx28)>>3)];
      var $arrayidx29=(($t+40)|0);
      HEAPF64[(($arrayidx29)>>3)]=$24;
      var $arraydecay=(($t)|0);
      var $call30=_triangle_area_2d($arraydecay);
      $area_triangle=$call30;
      var $25=$area;
      var $26=$area_triangle;
      var $add31=($25)+($26);
      $area=$add31;
      var $27=$centroid;
      var $arrayidx32=(($27)|0);
      var $28=HEAPF64[(($arrayidx32)>>3)];
      var $29=$area_triangle;
      var $30=$i;
      var $mul33=($30<<1);
      var $add34=(($mul33)|0);
      var $31=$v_addr;
      var $arrayidx35=(($31+($add34<<3))|0);
      var $32=HEAPF64[(($arrayidx35)>>3)];
      var $33=$i;
      var $add36=((($33)+(1))|0);
      var $mul37=($add36<<1);
      var $add38=(($mul37)|0);
      var $34=$v_addr;
      var $arrayidx39=(($34+($add38<<3))|0);
      var $35=HEAPF64[(($arrayidx39)>>3)];
      var $add40=($32)+($35);
      var $36=$n_addr;
      var $sub41=((($36)-(1))|0);
      var $mul42=($sub41<<1);
      var $add43=(($mul42)|0);
      var $37=$v_addr;
      var $arrayidx44=(($37+($add43<<3))|0);
      var $38=HEAPF64[(($arrayidx44)>>3)];
      var $add45=($add40)+($38);
      var $mul46=($29)*($add45);
      var $div=($mul46)/(3);
      var $add47=($28)+($div);
      var $39=$centroid;
      var $arrayidx48=(($39)|0);
      HEAPF64[(($arrayidx48)>>3)]=$add47;
      var $40=$centroid;
      var $arrayidx49=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx49)>>3)];
      var $42=$area_triangle;
      var $43=$i;
      var $mul50=($43<<1);
      var $add51=((($mul50)+(1))|0);
      var $44=$v_addr;
      var $arrayidx52=(($44+($add51<<3))|0);
      var $45=HEAPF64[(($arrayidx52)>>3)];
      var $46=$i;
      var $add53=((($46)+(1))|0);
      var $mul54=($add53<<1);
      var $add55=((($mul54)+(1))|0);
      var $47=$v_addr;
      var $arrayidx56=(($47+($add55<<3))|0);
      var $48=HEAPF64[(($arrayidx56)>>3)];
      var $add57=($45)+($48);
      var $49=$n_addr;
      var $sub58=((($49)-(1))|0);
      var $mul59=($sub58<<1);
      var $add60=((($mul59)+(1))|0);
      var $50=$v_addr;
      var $arrayidx61=(($50+($add60<<3))|0);
      var $51=HEAPF64[(($arrayidx61)>>3)];
      var $add62=($add57)+($51);
      var $mul63=($42)*($add62);
      var $div64=($mul63)/(3);
      var $add65=($41)+($div64);
      var $52=$centroid;
      var $arrayidx66=(($52+8)|0);
      HEAPF64[(($arrayidx66)>>3)]=$add65;
      label = 9; break;
    case 9: 
      var $53=$i;
      var $inc68=((($53)+(1))|0);
      $i=$inc68;
      label = 7; break;
    case 10: 
      $j=0;
      label = 11; break;
    case 11: 
      var $54=$j;
      var $cmp71=(($54)|(0)) < 2;
      if ($cmp71) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $55=$j;
      var $56=$centroid;
      var $arrayidx73=(($56+($55<<3))|0);
      var $57=HEAPF64[(($arrayidx73)>>3)];
      var $58=$area;
      var $div74=($57)/($58);
      var $59=$j;
      var $60=$centroid;
      var $arrayidx75=(($60+($59<<3))|0);
      HEAPF64[(($arrayidx75)>>3)]=$div74;
      label = 13; break;
    case 13: 
      var $61=$j;
      var $inc77=((($61)+(1))|0);
      $j=$inc77;
      label = 11; break;
    case 14: 
      var $62=$centroid;
      STACKTOP = __stackBase__;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_centroid_2d_2"] = _polygon_centroid_2d_2;
function _polygon_centroid_3d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $area;
      var $area_triangle;
      var $centroid;
      var $i;
      var $j;
      var $t=__stackBase__;
      $n_addr=$n;
      $v_addr=$v;
      $area=0;
      var $call=_malloc(24);
      var $0=$call;
      $centroid=$0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$j;
      var $3=$centroid;
      var $arrayidx=(($3+($2<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      label = 5; break;
    case 5: 
      var $4=$j;
      var $inc=((($4)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $5=$i;
      var $6=$n_addr;
      var $sub=((($6)-(2))|0);
      var $cmp2=(($5)|(0)) < (($sub)|(0));
      if ($cmp2) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $7=$i;
      var $mul=((($7)*(3))&-1);
      var $add=(($mul)|0);
      var $8=$v_addr;
      var $arrayidx4=(($8+($add<<3))|0);
      var $9=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t)|0);
      HEAPF64[(($arrayidx5)>>3)]=$9;
      var $10=$i;
      var $mul6=((($10)*(3))&-1);
      var $add7=((($mul6)+(1))|0);
      var $11=$v_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($t+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$12;
      var $13=$i;
      var $mul10=((($13)*(3))&-1);
      var $add11=((($mul10)+(2))|0);
      var $14=$v_addr;
      var $arrayidx12=(($14+($add11<<3))|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($t+16)|0);
      HEAPF64[(($arrayidx13)>>3)]=$15;
      var $16=$i;
      var $add14=((($16)+(1))|0);
      var $mul15=((($add14)*(3))&-1);
      var $add16=(($mul15)|0);
      var $17=$v_addr;
      var $arrayidx17=(($17+($add16<<3))|0);
      var $18=HEAPF64[(($arrayidx17)>>3)];
      var $arrayidx18=(($t+24)|0);
      HEAPF64[(($arrayidx18)>>3)]=$18;
      var $19=$i;
      var $add19=((($19)+(1))|0);
      var $mul20=((($add19)*(3))&-1);
      var $add21=((($mul20)+(1))|0);
      var $20=$v_addr;
      var $arrayidx22=(($20+($add21<<3))|0);
      var $21=HEAPF64[(($arrayidx22)>>3)];
      var $arrayidx23=(($t+32)|0);
      HEAPF64[(($arrayidx23)>>3)]=$21;
      var $22=$i;
      var $add24=((($22)+(1))|0);
      var $mul25=((($add24)*(3))&-1);
      var $add26=((($mul25)+(2))|0);
      var $23=$v_addr;
      var $arrayidx27=(($23+($add26<<3))|0);
      var $24=HEAPF64[(($arrayidx27)>>3)];
      var $arrayidx28=(($t+40)|0);
      HEAPF64[(($arrayidx28)>>3)]=$24;
      var $25=$n_addr;
      var $sub29=((($25)-(1))|0);
      var $mul30=((($sub29)*(3))&-1);
      var $add31=(($mul30)|0);
      var $26=$v_addr;
      var $arrayidx32=(($26+($add31<<3))|0);
      var $27=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($t+48)|0);
      HEAPF64[(($arrayidx33)>>3)]=$27;
      var $28=$n_addr;
      var $sub34=((($28)-(1))|0);
      var $mul35=((($sub34)*(3))&-1);
      var $add36=((($mul35)+(1))|0);
      var $29=$v_addr;
      var $arrayidx37=(($29+($add36<<3))|0);
      var $30=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($t+56)|0);
      HEAPF64[(($arrayidx38)>>3)]=$30;
      var $31=$n_addr;
      var $sub39=((($31)-(1))|0);
      var $mul40=((($sub39)*(3))&-1);
      var $add41=((($mul40)+(2))|0);
      var $32=$v_addr;
      var $arrayidx42=(($32+($add41<<3))|0);
      var $33=HEAPF64[(($arrayidx42)>>3)];
      var $arrayidx43=(($t+64)|0);
      HEAPF64[(($arrayidx43)>>3)]=$33;
      var $arraydecay=(($t)|0);
      var $call44=_triangle_area_3d($arraydecay);
      $area_triangle=$call44;
      var $34=$area;
      var $35=$area_triangle;
      var $add45=($34)+($35);
      $area=$add45;
      var $36=$centroid;
      var $arrayidx46=(($36)|0);
      var $37=HEAPF64[(($arrayidx46)>>3)];
      var $38=$area_triangle;
      var $39=$i;
      var $mul47=((($39)*(3))&-1);
      var $add48=(($mul47)|0);
      var $40=$v_addr;
      var $arrayidx49=(($40+($add48<<3))|0);
      var $41=HEAPF64[(($arrayidx49)>>3)];
      var $42=$i;
      var $add50=((($42)+(1))|0);
      var $mul51=((($add50)*(3))&-1);
      var $add52=(($mul51)|0);
      var $43=$v_addr;
      var $arrayidx53=(($43+($add52<<3))|0);
      var $44=HEAPF64[(($arrayidx53)>>3)];
      var $add54=($41)+($44);
      var $45=$n_addr;
      var $sub55=((($45)-(1))|0);
      var $mul56=((($sub55)*(3))&-1);
      var $add57=(($mul56)|0);
      var $46=$v_addr;
      var $arrayidx58=(($46+($add57<<3))|0);
      var $47=HEAPF64[(($arrayidx58)>>3)];
      var $add59=($add54)+($47);
      var $mul60=($38)*($add59);
      var $div=($mul60)/(3);
      var $add61=($37)+($div);
      var $48=$centroid;
      var $arrayidx62=(($48)|0);
      HEAPF64[(($arrayidx62)>>3)]=$add61;
      var $49=$centroid;
      var $arrayidx63=(($49+8)|0);
      var $50=HEAPF64[(($arrayidx63)>>3)];
      var $51=$area_triangle;
      var $52=$i;
      var $mul64=((($52)*(3))&-1);
      var $add65=((($mul64)+(1))|0);
      var $53=$v_addr;
      var $arrayidx66=(($53+($add65<<3))|0);
      var $54=HEAPF64[(($arrayidx66)>>3)];
      var $55=$i;
      var $add67=((($55)+(1))|0);
      var $mul68=((($add67)*(3))&-1);
      var $add69=((($mul68)+(1))|0);
      var $56=$v_addr;
      var $arrayidx70=(($56+($add69<<3))|0);
      var $57=HEAPF64[(($arrayidx70)>>3)];
      var $add71=($54)+($57);
      var $58=$n_addr;
      var $sub72=((($58)-(1))|0);
      var $mul73=((($sub72)*(3))&-1);
      var $add74=((($mul73)+(1))|0);
      var $59=$v_addr;
      var $arrayidx75=(($59+($add74<<3))|0);
      var $60=HEAPF64[(($arrayidx75)>>3)];
      var $add76=($add71)+($60);
      var $mul77=($51)*($add76);
      var $div78=($mul77)/(3);
      var $add79=($50)+($div78);
      var $61=$centroid;
      var $arrayidx80=(($61+8)|0);
      HEAPF64[(($arrayidx80)>>3)]=$add79;
      var $62=$centroid;
      var $arrayidx81=(($62+16)|0);
      var $63=HEAPF64[(($arrayidx81)>>3)];
      var $64=$area_triangle;
      var $65=$i;
      var $mul82=((($65)*(3))&-1);
      var $add83=((($mul82)+(2))|0);
      var $66=$v_addr;
      var $arrayidx84=(($66+($add83<<3))|0);
      var $67=HEAPF64[(($arrayidx84)>>3)];
      var $68=$i;
      var $add85=((($68)+(1))|0);
      var $mul86=((($add85)*(3))&-1);
      var $add87=((($mul86)+(2))|0);
      var $69=$v_addr;
      var $arrayidx88=(($69+($add87<<3))|0);
      var $70=HEAPF64[(($arrayidx88)>>3)];
      var $add89=($67)+($70);
      var $71=$n_addr;
      var $sub90=((($71)-(1))|0);
      var $mul91=((($sub90)*(3))&-1);
      var $add92=((($mul91)+(2))|0);
      var $72=$v_addr;
      var $arrayidx93=(($72+($add92<<3))|0);
      var $73=HEAPF64[(($arrayidx93)>>3)];
      var $add94=($add89)+($73);
      var $mul95=($64)*($add94);
      var $div96=($mul95)/(3);
      var $add97=($63)+($div96);
      var $74=$centroid;
      var $arrayidx98=(($74+16)|0);
      HEAPF64[(($arrayidx98)>>3)]=$add97;
      label = 9; break;
    case 9: 
      var $75=$i;
      var $inc100=((($75)+(1))|0);
      $i=$inc100;
      label = 7; break;
    case 10: 
      $j=0;
      label = 11; break;
    case 11: 
      var $76=$j;
      var $cmp103=(($76)|(0)) < 3;
      if ($cmp103) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $77=$j;
      var $78=$centroid;
      var $arrayidx105=(($78+($77<<3))|0);
      var $79=HEAPF64[(($arrayidx105)>>3)];
      var $80=$area;
      var $div106=($79)/($80);
      var $81=$j;
      var $82=$centroid;
      var $arrayidx107=(($82+($81<<3))|0);
      HEAPF64[(($arrayidx107)>>3)]=$div106;
      label = 13; break;
    case 13: 
      var $83=$j;
      var $inc109=((($83)+(1))|0);
      $j=$inc109;
      label = 11; break;
    case 14: 
      var $84=$centroid;
      STACKTOP = __stackBase__;
      return $84;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_centroid_3d"] = _polygon_centroid_3d;
function _polygon_lattice_area_2d($i, $b) {
  var label = 0;
  var $i_addr;
  var $b_addr;
  var $value;
  $i_addr=$i;
  $b_addr=$b;
  var $0=$i_addr;
  var $conv=(($0)|(0));
  var $1=$b_addr;
  var $conv1=(($1)|(0));
  var $div=($conv1)/(2);
  var $add=($conv)+($div);
  var $sub=($add)-(1);
  $value=$sub;
  var $2=$value;
  return $2;
}
Module["_polygon_lattice_area_2d"] = _polygon_lattice_area_2d;
function _polygon_contains_point_2d($n, $v, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $p_addr;
      var $i;
      var $value;
      var $x1;
      var $x2;
      var $y1;
      var $y2;
      $n_addr=$n;
      $v_addr=$v;
      $p_addr=$p;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $2=$i;
      var $mul=($2<<1);
      var $add=(($mul)|0);
      var $3=$v_addr;
      var $arrayidx=(($3+($add<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      $x1=$4;
      var $5=$i;
      var $mul1=($5<<1);
      var $add2=((($mul1)+(1))|0);
      var $6=$v_addr;
      var $arrayidx3=(($6+($add2<<3))|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      $y1=$7;
      var $8=$i;
      var $9=$n_addr;
      var $sub=((($9)-(1))|0);
      var $cmp4=(($8)|(0)) < (($sub)|(0));
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $10=$i;
      var $add5=((($10)+(1))|0);
      var $mul6=($add5<<1);
      var $add7=(($mul6)|0);
      var $11=$v_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      $x2=$12;
      var $13=$i;
      var $add9=((($13)+(1))|0);
      var $mul10=($add9<<1);
      var $add11=((($mul10)+(1))|0);
      var $14=$v_addr;
      var $arrayidx12=(($14+($add11<<3))|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      $y2=$15;
      label = 7; break;
    case 6: 
      var $16=$v_addr;
      var $arrayidx13=(($16)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      $x2=$17;
      var $18=$v_addr;
      var $arrayidx14=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      $y2=$19;
      label = 7; break;
    case 7: 
      var $20=$y1;
      var $21=$p_addr;
      var $arrayidx15=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx15)>>3)];
      var $cmp16=$20 < $22;
      if ($cmp16) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $23=$p_addr;
      var $arrayidx17=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $25=$y2;
      var $cmp18=$24 <= $25;
      if ($cmp18) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $26=$p_addr;
      var $arrayidx19=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx19)>>3)];
      var $28=$y1;
      var $cmp20=$27 <= $28;
      if ($cmp20) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $29=$y2;
      var $30=$p_addr;
      var $arrayidx22=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx22)>>3)];
      var $cmp23=$29 < $31;
      if ($cmp23) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $32=$p_addr;
      var $arrayidx25=(($32)|0);
      var $33=HEAPF64[(($arrayidx25)>>3)];
      var $34=$x1;
      var $sub26=($33)-($34);
      var $35=$p_addr;
      var $arrayidx27=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx27)>>3)];
      var $37=$y1;
      var $sub28=($36)-($37);
      var $38=$x2;
      var $39=$x1;
      var $sub29=($38)-($39);
      var $mul30=($sub28)*($sub29);
      var $40=$y2;
      var $41=$y1;
      var $sub31=($40)-($41);
      var $div=($mul30)/($sub31);
      var $sub32=($sub26)-($div);
      var $cmp33=$sub32 < 0;
      if ($cmp33) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $42=$value;
      var $tobool=(($42)|(0))!=0;
      var $lnot=$tobool ^ 1;
      var $lnot_ext=(($lnot)&(1));
      $value=$lnot_ext;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $43=$i;
      var $inc=((($43)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 16: 
      var $44=$value;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_contains_point_2d"] = _polygon_contains_point_2d;
function _polygon_contains_point_2d_2($n, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $p_addr;
      var $i;
      var $t=__stackBase__;
      $n_addr=$n;
      $v_addr=$v;
      $p_addr=$p;
      var $0=$v_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($t)|0);
      HEAPF64[(($arrayidx1)>>3)]=$1;
      var $2=$v_addr;
      var $arrayidx2=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx2)>>3)];
      var $arrayidx3=(($t+8)|0);
      HEAPF64[(($arrayidx3)>>3)]=$3;
      $i=1;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $sub=((($5)-(1))|0);
      var $cmp=(($4)|(0)) < (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $6=$i;
      var $mul=($6<<1);
      var $add=(($mul)|0);
      var $7=$v_addr;
      var $arrayidx4=(($7+($add<<3))|0);
      var $8=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($t+16)|0);
      HEAPF64[(($arrayidx5)>>3)]=$8;
      var $9=$i;
      var $mul6=($9<<1);
      var $add7=((($mul6)+(1))|0);
      var $10=$v_addr;
      var $arrayidx8=(($10+($add7<<3))|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($t+24)|0);
      HEAPF64[(($arrayidx9)>>3)]=$11;
      var $12=$i;
      var $add10=((($12)+(1))|0);
      var $mul11=($add10<<1);
      var $add12=(($mul11)|0);
      var $13=$v_addr;
      var $arrayidx13=(($13+($add12<<3))|0);
      var $14=HEAPF64[(($arrayidx13)>>3)];
      var $arrayidx14=(($t+32)|0);
      HEAPF64[(($arrayidx14)>>3)]=$14;
      var $15=$i;
      var $add15=((($15)+(1))|0);
      var $mul16=($add15<<1);
      var $add17=((($mul16)+(1))|0);
      var $16=$v_addr;
      var $arrayidx18=(($16+($add17<<3))|0);
      var $17=HEAPF64[(($arrayidx18)>>3)];
      var $arrayidx19=(($t+40)|0);
      HEAPF64[(($arrayidx19)>>3)]=$17;
      var $arraydecay=(($t)|0);
      var $18=$p_addr;
      var $call=_triangle_contains_point_2d_1($arraydecay, $18);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      $retval=0;
      label = 9; break;
    case 9: 
      var $20=$retval;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_contains_point_2d_2"] = _polygon_contains_point_2d_2;
function _triangle_contains_point_2d_1($t, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p_addr;
      var $c;
      var $i;
      var $value;
      $t_addr=$t;
      $p_addr=$p;
      var $0=$t_addr;
      var $1=$p_addr;
      var $call=_triangle_barycentric_2d($0, $1);
      $c=$call;
      $value=1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $cmp=(($2)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $3=$i;
      var $4=$c;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $cmp1=$5 < 0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $value=0;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $7=$c;
      var $8=$7;
      _free($8);
      var $9=$value;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_contains_point_2d_1"] = _triangle_contains_point_2d_1;
function _polygon_diameter_2d($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $diameter;
      var $i;
      var $j;
      $n_addr=$n;
      $v_addr=$v;
      $diameter=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $2=$i;
      var $add=((($2)+(1))|0);
      $j=$add;
      label = 5; break;
    case 5: 
      var $3=$j;
      var $4=$n_addr;
      var $cmp2=(($3)|(0)) < (($4)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $5=$diameter;
      var $6=$i;
      var $mul=($6<<1);
      var $add4=(($mul)|0);
      var $7=$v_addr;
      var $arrayidx=(($7+($add4<<3))|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$j;
      var $mul5=($9<<1);
      var $add6=(($mul5)|0);
      var $10=$v_addr;
      var $arrayidx7=(($10+($add6<<3))|0);
      var $11=HEAPF64[(($arrayidx7)>>3)];
      var $sub=($8)-($11);
      var $12=$i;
      var $mul8=($12<<1);
      var $add9=(($mul8)|0);
      var $13=$v_addr;
      var $arrayidx10=(($13+($add9<<3))|0);
      var $14=HEAPF64[(($arrayidx10)>>3)];
      var $15=$j;
      var $mul11=($15<<1);
      var $add12=(($mul11)|0);
      var $16=$v_addr;
      var $arrayidx13=(($16+($add12<<3))|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($14)-($17);
      var $mul15=($sub)*($sub14);
      var $18=$i;
      var $mul16=($18<<1);
      var $add17=((($mul16)+(1))|0);
      var $19=$v_addr;
      var $arrayidx18=(($19+($add17<<3))|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$j;
      var $mul19=($21<<1);
      var $add20=((($mul19)+(1))|0);
      var $22=$v_addr;
      var $arrayidx21=(($22+($add20<<3))|0);
      var $23=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($20)-($23);
      var $24=$i;
      var $mul23=($24<<1);
      var $add24=((($mul23)+(1))|0);
      var $25=$v_addr;
      var $arrayidx25=(($25+($add24<<3))|0);
      var $26=HEAPF64[(($arrayidx25)>>3)];
      var $27=$j;
      var $mul26=($27<<1);
      var $add27=((($mul26)+(1))|0);
      var $28=$v_addr;
      var $arrayidx28=(($28+($add27<<3))|0);
      var $29=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($26)-($29);
      var $mul30=($sub22)*($sub29);
      var $add31=($mul15)+($mul30);
      var $call=Math.sqrt($add31);
      var $call32=_r8_max($5, $call);
      $diameter=$call32;
      label = 7; break;
    case 7: 
      var $30=$j;
      var $inc=((($30)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $31=$i;
      var $inc34=((($31)+(1))|0);
      $i=$inc34;
      label = 3; break;
    case 10: 
      var $32=$diameter;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_diameter_2d"] = _polygon_diameter_2d;
function _polygon_expand_2d($n, $v, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $h_addr;
      var $angle;
      var $h2;
      var $i;
      var $j;
      var $jm1;
      var $jp1;
      var $p4;
      var $w;
      $n_addr=$n;
      $v_addr=$v;
      $h_addr=$h;
      var $0=$n_addr;
      var $mul=($0<<1);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $1=$call;
      $w=$1;
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $4=$j;
      var $sub=((($4)-(1))|0);
      var $5=$n_addr;
      var $sub2=((($5)-(1))|0);
      var $call3=_i4_wrap($sub, 0, $sub2);
      $jm1=$call3;
      var $6=$j;
      var $add=((($6)+(1))|0);
      var $7=$n_addr;
      var $sub4=((($7)-(1))|0);
      var $call5=_i4_wrap($add, 0, $sub4);
      $jp1=$call5;
      var $8=$v_addr;
      var $9=$jm1;
      var $mul6=($9<<1);
      var $add_ptr=(($8+($mul6<<3))|0);
      var $10=$v_addr;
      var $11=$j;
      var $mul7=($11<<1);
      var $add_ptr8=(($10+($mul7<<3))|0);
      var $12=$v_addr;
      var $13=$jp1;
      var $mul9=($13<<1);
      var $add_ptr10=(($12+($mul9<<3))|0);
      var $call11=_angle_half_2d($add_ptr, $add_ptr8, $add_ptr10);
      $p4=$call11;
      var $14=$v_addr;
      var $15=$jm1;
      var $mul12=($15<<1);
      var $add_ptr13=(($14+($mul12<<3))|0);
      var $16=$v_addr;
      var $17=$j;
      var $mul14=($17<<1);
      var $add_ptr15=(($16+($mul14<<3))|0);
      var $18=$p4;
      var $call16=_angle_rad_2d($add_ptr13, $add_ptr15, $18);
      $angle=$call16;
      var $19=$h_addr;
      var $20=$angle;
      var $call17=Math.sin($20);
      var $div=($19)/($call17);
      $h2=$div;
      $i=0;
      label = 5; break;
    case 5: 
      var $21=$i;
      var $cmp19=(($21)|(0)) < 2;
      if ($cmp19) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $22=$i;
      var $23=$j;
      var $mul21=($23<<1);
      var $add22=((($22)+($mul21))|0);
      var $24=$v_addr;
      var $arrayidx=(($24+($add22<<3))|0);
      var $25=HEAPF64[(($arrayidx)>>3)];
      var $26=$h2;
      var $27=$i;
      var $28=$p4;
      var $arrayidx23=(($28+($27<<3))|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$i;
      var $31=$j;
      var $mul24=($31<<1);
      var $add25=((($30)+($mul24))|0);
      var $32=$v_addr;
      var $arrayidx26=(($32+($add25<<3))|0);
      var $33=HEAPF64[(($arrayidx26)>>3)];
      var $sub27=($29)-($33);
      var $mul28=($26)*($sub27);
      var $sub29=($25)-($mul28);
      var $34=$i;
      var $35=$j;
      var $mul30=($35<<1);
      var $add31=((($34)+($mul30))|0);
      var $36=$w;
      var $arrayidx32=(($36+($add31<<3))|0);
      HEAPF64[(($arrayidx32)>>3)]=$sub29;
      label = 7; break;
    case 7: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $38=$p4;
      var $39=$38;
      _free($39);
      label = 9; break;
    case 9: 
      var $40=$j;
      var $inc34=((($40)+(1))|0);
      $j=$inc34;
      label = 3; break;
    case 10: 
      var $41=$w;
      return $41;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_expand_2d"] = _polygon_expand_2d;
function _polygon_is_convex($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $angle;
      var $cross;
      var $dot;
      var $exterior_total;
      var $i;
      var $ip1;
      var $ip2;
      var $sense;
      var $TOL;
      var $value;
      $n_addr=$n;
      $v_addr=$v;
      $TOL=1;
      $value=0;
      $exterior_total=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 33; break;
    case 4: 
      $sense=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $1=$i;
      var $2=$n_addr;
      var $cmp1=(($1)|(0)) < (($2)|(0));
      if ($cmp1) { label = 6; break; } else { label = 27; break; }
    case 6: 
      var $3=$i;
      var $add=((($3)+(1))|0);
      var $4=$n_addr;
      var $sub=((($4)-(1))|0);
      var $call=_i4_wrap($add, 0, $sub);
      $ip1=$call;
      var $5=$i;
      var $add2=((($5)+(2))|0);
      var $6=$n_addr;
      var $sub3=((($6)-(1))|0);
      var $call4=_i4_wrap($add2, 0, $sub3);
      $ip2=$call4;
      var $7=$ip2;
      var $mul=($7<<1);
      var $add5=(($mul)|0);
      var $8=$v_addr;
      var $arrayidx=(($8+($add5<<3))|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$ip1;
      var $mul6=($10<<1);
      var $add7=(($mul6)|0);
      var $11=$v_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($12);
      var $13=$i;
      var $mul10=($13<<1);
      var $add11=(($mul10)|0);
      var $14=$v_addr;
      var $arrayidx12=(($14+($add11<<3))|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $16=$ip1;
      var $mul13=($16<<1);
      var $add14=(($mul13)|0);
      var $17=$v_addr;
      var $arrayidx15=(($17+($add14<<3))|0);
      var $18=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($15)-($18);
      var $mul17=($sub9)*($sub16);
      var $19=$ip2;
      var $mul18=($19<<1);
      var $add19=((($mul18)+(1))|0);
      var $20=$v_addr;
      var $arrayidx20=(($20+($add19<<3))|0);
      var $21=HEAPF64[(($arrayidx20)>>3)];
      var $22=$ip1;
      var $mul21=($22<<1);
      var $add22=((($mul21)+(1))|0);
      var $23=$v_addr;
      var $arrayidx23=(($23+($add22<<3))|0);
      var $24=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($21)-($24);
      var $25=$i;
      var $mul25=($25<<1);
      var $add26=((($mul25)+(1))|0);
      var $26=$v_addr;
      var $arrayidx27=(($26+($add26<<3))|0);
      var $27=HEAPF64[(($arrayidx27)>>3)];
      var $28=$ip1;
      var $mul28=($28<<1);
      var $add29=((($mul28)+(1))|0);
      var $29=$v_addr;
      var $arrayidx30=(($29+($add29<<3))|0);
      var $30=HEAPF64[(($arrayidx30)>>3)];
      var $sub31=($27)-($30);
      var $mul32=($sub24)*($sub31);
      var $add33=($mul17)+($mul32);
      $dot=$add33;
      var $31=$ip2;
      var $mul34=($31<<1);
      var $add35=(($mul34)|0);
      var $32=$v_addr;
      var $arrayidx36=(($32+($add35<<3))|0);
      var $33=HEAPF64[(($arrayidx36)>>3)];
      var $34=$ip1;
      var $mul37=($34<<1);
      var $add38=(($mul37)|0);
      var $35=$v_addr;
      var $arrayidx39=(($35+($add38<<3))|0);
      var $36=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($33)-($36);
      var $37=$i;
      var $mul41=($37<<1);
      var $add42=((($mul41)+(1))|0);
      var $38=$v_addr;
      var $arrayidx43=(($38+($add42<<3))|0);
      var $39=HEAPF64[(($arrayidx43)>>3)];
      var $40=$ip1;
      var $mul44=($40<<1);
      var $add45=((($mul44)+(1))|0);
      var $41=$v_addr;
      var $arrayidx46=(($41+($add45<<3))|0);
      var $42=HEAPF64[(($arrayidx46)>>3)];
      var $sub47=($39)-($42);
      var $mul48=($sub40)*($sub47);
      var $43=$i;
      var $mul49=($43<<1);
      var $add50=(($mul49)|0);
      var $44=$v_addr;
      var $arrayidx51=(($44+($add50<<3))|0);
      var $45=HEAPF64[(($arrayidx51)>>3)];
      var $46=$ip1;
      var $mul52=($46<<1);
      var $add53=(($mul52)|0);
      var $47=$v_addr;
      var $arrayidx54=(($47+($add53<<3))|0);
      var $48=HEAPF64[(($arrayidx54)>>3)];
      var $sub55=($45)-($48);
      var $49=$ip2;
      var $mul56=($49<<1);
      var $add57=((($mul56)+(1))|0);
      var $50=$v_addr;
      var $arrayidx58=(($50+($add57<<3))|0);
      var $51=HEAPF64[(($arrayidx58)>>3)];
      var $52=$ip1;
      var $mul59=($52<<1);
      var $add60=((($mul59)+(1))|0);
      var $53=$v_addr;
      var $arrayidx61=(($53+($add60<<3))|0);
      var $54=HEAPF64[(($arrayidx61)>>3)];
      var $sub62=($51)-($54);
      var $mul63=($sub55)*($sub62);
      var $sub64=($mul48)-($mul63);
      $cross=$sub64;
      var $55=$cross;
      var $56=$dot;
      var $call65=Math.atan2($55, $56);
      $angle=$call65;
      var $57=$sense;
      var $cmp66=$57 == 0;
      if ($cmp66) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $58=$angle;
      var $cmp68=$58 < 0;
      if ($cmp68) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $sense=-1;
      label = 12; break;
    case 9: 
      var $59=$angle;
      var $cmp70=0 < $59;
      if ($cmp70) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $sense=1;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 23; break;
    case 13: 
      var $60=$sense;
      var $cmp75=$60 == 1;
      if ($cmp75) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $61=$angle;
      var $cmp77=$61 < 0;
      if ($cmp77) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=-1;
      label = 33; break;
    case 16: 
      label = 22; break;
    case 17: 
      var $62=$sense;
      var $cmp81=$62 == -1;
      if ($cmp81) { label = 18; break; } else { label = 21; break; }
    case 18: 
      var $63=$angle;
      var $cmp83=0 < $63;
      if ($cmp83) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $retval=-1;
      label = 33; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $64=$cross;
      var $sub89=(-$64);
      var $65=$dot;
      var $sub90=(-$65);
      var $call91=Math.atan2($sub89, $sub90);
      $angle=$call91;
      var $66=$exterior_total;
      var $67=$angle;
      var $add92=($66)+($67);
      $exterior_total=$add92;
      var $68=$TOL;
      var $add93=($68)+(360);
      var $69=$exterior_total;
      var $call94=_r8_abs($69);
      var $call95=_radians_to_degrees($call94);
      var $cmp96=$add93 < $call95;
      if ($cmp96) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $retval=-1;
      label = 33; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $70=$i;
      var $inc=((($70)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 27: 
      var $71=$sense;
      var $cmp99=$71 == 1;
      if ($cmp99) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $value=1;
      label = 32; break;
    case 29: 
      var $72=$sense;
      var $cmp102=$72 == -1;
      if ($cmp102) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $value=2;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $73=$value;
      $retval=$73;
      label = 33; break;
    case 33: 
      var $74=$retval;
      return $74;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_is_convex"] = _polygon_is_convex;
function _polygon_inrad_data_2d($n, $radin, $area, $radout, $side) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $radin_addr;
      var $area_addr;
      var $radout_addr;
      var $side_addr;
      var $angle;
      var $pi;
      $n_addr=$n;
      $radin_addr=$radin;
      $area_addr=$area;
      $radout_addr=$radout;
      $side_addr=$side;
      $pi=3.141592653589793;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((15008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((14928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$pi;
      var $7=$n_addr;
      var $conv=(($7)|(0));
      var $div=($6)/($conv);
      $angle=$div;
      var $8=$n_addr;
      var $conv4=(($8)|(0));
      var $9=$radin_addr;
      var $mul=($conv4)*($9);
      var $10=$radin_addr;
      var $mul5=($mul)*($10);
      var $11=$angle;
      var $call6=Math.tan($11);
      var $mul7=($mul5)*($call6);
      var $12=$area_addr;
      HEAPF64[(($12)>>3)]=$mul7;
      var $13=$radin_addr;
      var $mul8=($13)*(2);
      var $14=$angle;
      var $call9=Math.tan($14);
      var $mul10=($mul8)*($call9);
      var $15=$side_addr;
      HEAPF64[(($15)>>3)]=$mul10;
      var $16=$side_addr;
      var $17=HEAPF64[(($16)>>3)];
      var $mul11=($17)*(0.5);
      var $18=$angle;
      var $call12=Math.sin($18);
      var $div13=($mul11)/($call12);
      var $19=$radout_addr;
      HEAPF64[(($19)>>3)]=$div13;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_inrad_data_2d"] = _polygon_inrad_data_2d;
function _polygon_normal_3d($n, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v_addr;
      var $i;
      var $j;
      var $normal;
      var $normal_norm;
      var $p;
      var $v1;
      var $v2;
      $n_addr=$n;
      $v_addr=$v;
      var $call=_malloc(24);
      var $0=$call;
      $normal=$0;
      var $call1=_malloc(24);
      var $1=$call1;
      $v1=$1;
      var $call2=_malloc(24);
      var $2=$call2;
      $v2=$2;
      var $3=$normal;
      _r8vec_zero(3, $3);
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $cmp=(($4)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$i;
      var $add=((($5)+(3))|0);
      var $6=$v_addr;
      var $arrayidx=(($6+($add<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $add3=(($8)|0);
      var $9=$v_addr;
      var $arrayidx4=(($9+($add3<<3))|0);
      var $10=HEAPF64[(($arrayidx4)>>3)];
      var $sub=($7)-($10);
      var $11=$i;
      var $12=$v1;
      var $arrayidx5=(($12+($11<<3))|0);
      HEAPF64[(($arrayidx5)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $j=2;
      label = 7; break;
    case 7: 
      var $14=$j;
      var $15=$n_addr;
      var $cmp7=(($14)|(0)) < (($15)|(0));
      if ($cmp7) { label = 8; break; } else { label = 18; break; }
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $16=$i;
      var $cmp10=(($16)|(0)) < 3;
      if ($cmp10) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $17=$i;
      var $18=$j;
      var $mul=((($18)*(3))&-1);
      var $add12=((($17)+($mul))|0);
      var $19=$v_addr;
      var $arrayidx13=(($19+($add12<<3))|0);
      var $20=HEAPF64[(($arrayidx13)>>3)];
      var $21=$i;
      var $add14=(($21)|0);
      var $22=$v_addr;
      var $arrayidx15=(($22+($add14<<3))|0);
      var $23=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($20)-($23);
      var $24=$i;
      var $25=$v2;
      var $arrayidx17=(($25+($24<<3))|0);
      HEAPF64[(($arrayidx17)>>3)]=$sub16;
      label = 11; break;
    case 11: 
      var $26=$i;
      var $inc19=((($26)+(1))|0);
      $i=$inc19;
      label = 9; break;
    case 12: 
      var $27=$v1;
      var $28=$v2;
      var $call21=_r8vec_cross_product_3d($27, $28);
      $p=$call21;
      $i=0;
      label = 13; break;
    case 13: 
      var $29=$i;
      var $cmp23=(($29)|(0)) < 3;
      if ($cmp23) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $30=$i;
      var $31=$normal;
      var $arrayidx25=(($31+($30<<3))|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $33=$i;
      var $34=$p;
      var $arrayidx26=(($34+($33<<3))|0);
      var $35=HEAPF64[(($arrayidx26)>>3)];
      var $add27=($32)+($35);
      var $36=$i;
      var $37=$normal;
      var $arrayidx28=(($37+($36<<3))|0);
      HEAPF64[(($arrayidx28)>>3)]=$add27;
      label = 15; break;
    case 15: 
      var $38=$i;
      var $inc30=((($38)+(1))|0);
      $i=$inc30;
      label = 13; break;
    case 16: 
      var $39=$v2;
      var $40=$v1;
      _r8vec_copy(3, $39, $40);
      var $41=$p;
      var $42=$41;
      _free($42);
      label = 17; break;
    case 17: 
      var $43=$j;
      var $inc33=((($43)+(1))|0);
      $j=$inc33;
      label = 7; break;
    case 18: 
      var $44=$normal;
      var $call35=_r8vec_norm(3, $44);
      $normal_norm=$call35;
      var $45=$normal_norm;
      var $cmp36=$45 != 0;
      if ($cmp36) { label = 19; break; } else { label = 24; break; }
    case 19: 
      $i=0;
      label = 20; break;
    case 20: 
      var $46=$i;
      var $cmp38=(($46)|(0)) < 3;
      if ($cmp38) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $47=$i;
      var $48=$normal;
      var $arrayidx40=(($48+($47<<3))|0);
      var $49=HEAPF64[(($arrayidx40)>>3)];
      var $50=$normal_norm;
      var $div=($49)/($50);
      var $51=$i;
      var $52=$normal;
      var $arrayidx41=(($52+($51<<3))|0);
      HEAPF64[(($arrayidx41)>>3)]=$div;
      label = 22; break;
    case 22: 
      var $53=$i;
      var $inc43=((($53)+(1))|0);
      $i=$inc43;
      label = 20; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $54=$v1;
      var $55=$54;
      _free($55);
      var $56=$v2;
      var $57=$56;
      _free($57);
      var $58=$normal;
      return $58;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_normal_3d"] = _polygon_normal_3d;
function _polygon_solid_angle_3d($n, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $p_addr;
      var $a=__stackBase__;
      var $angle;
      var $area;
      var $b=(__stackBase__)+(24);
      var $j;
      var $jp1;
      var $normal1;
      var $normal1_norm;
      var $normal2;
      var $normal2_norm;
      var $pi;
      var $plane;
      var $r1=(__stackBase__)+(48);
      var $s;
      var $value;
      $n_addr=$n;
      $v_addr=$v;
      $p_addr=$p;
      $area=0;
      $pi=3.141592653589793;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 15; break;
    case 4: 
      var $1=$n_addr;
      var $2=$v_addr;
      var $call=_polygon_normal_3d($1, $2);
      $plane=$call;
      var $3=$n_addr;
      var $sub=((($3)-(1))|0);
      var $mul=((($sub)*(3))&-1);
      var $add=(($mul)|0);
      var $4=$v_addr;
      var $arrayidx=(($4+($add<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$v_addr;
      var $arrayidx1=(($6)|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $sub2=($5)-($7);
      var $arrayidx3=(($a)|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub2;
      var $8=$n_addr;
      var $sub4=((($8)-(1))|0);
      var $mul5=((($sub4)*(3))&-1);
      var $add6=((($mul5)+(1))|0);
      var $9=$v_addr;
      var $arrayidx7=(($9+($add6<<3))|0);
      var $10=HEAPF64[(($arrayidx7)>>3)];
      var $11=$v_addr;
      var $arrayidx8=(($11+8)|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($10)-($12);
      var $arrayidx10=(($a+8)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $13=$n_addr;
      var $sub11=((($13)-(1))|0);
      var $mul12=((($sub11)*(3))&-1);
      var $add13=((($mul12)+(2))|0);
      var $14=$v_addr;
      var $arrayidx14=(($14+($add13<<3))|0);
      var $15=HEAPF64[(($arrayidx14)>>3)];
      var $16=$v_addr;
      var $arrayidx15=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($15)-($17);
      var $arrayidx17=(($a+16)|0);
      HEAPF64[(($arrayidx17)>>3)]=$sub16;
      $j=0;
      label = 5; break;
    case 5: 
      var $18=$j;
      var $19=$n_addr;
      var $cmp18=(($18)|(0)) < (($19)|(0));
      if ($cmp18) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $20=$j;
      var $mul19=((($20)*(3))&-1);
      var $add20=(($mul19)|0);
      var $21=$v_addr;
      var $arrayidx21=(($21+($add20<<3))|0);
      var $22=HEAPF64[(($arrayidx21)>>3)];
      var $23=$p_addr;
      var $arrayidx22=(($23)|0);
      var $24=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($22)-($24);
      var $arrayidx24=(($r1)|0);
      HEAPF64[(($arrayidx24)>>3)]=$sub23;
      var $25=$j;
      var $mul25=((($25)*(3))&-1);
      var $add26=((($mul25)+(1))|0);
      var $26=$v_addr;
      var $arrayidx27=(($26+($add26<<3))|0);
      var $27=HEAPF64[(($arrayidx27)>>3)];
      var $28=$p_addr;
      var $arrayidx28=(($28+8)|0);
      var $29=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($27)-($29);
      var $arrayidx30=(($r1+8)|0);
      HEAPF64[(($arrayidx30)>>3)]=$sub29;
      var $30=$j;
      var $mul31=((($30)*(3))&-1);
      var $add32=((($mul31)+(2))|0);
      var $31=$v_addr;
      var $arrayidx33=(($31+($add32<<3))|0);
      var $32=HEAPF64[(($arrayidx33)>>3)];
      var $33=$p_addr;
      var $arrayidx34=(($33+16)|0);
      var $34=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($32)-($34);
      var $arrayidx36=(($r1+16)|0);
      HEAPF64[(($arrayidx36)>>3)]=$sub35;
      var $35=$j;
      var $add37=((($35)+(1))|0);
      var $36=$n_addr;
      var $sub38=((($36)-(1))|0);
      var $call39=_i4_wrap($add37, 0, $sub38);
      $jp1=$call39;
      var $37=$jp1;
      var $mul40=((($37)*(3))&-1);
      var $add41=(($mul40)|0);
      var $38=$v_addr;
      var $arrayidx42=(($38+($add41<<3))|0);
      var $39=HEAPF64[(($arrayidx42)>>3)];
      var $40=$j;
      var $mul43=((($40)*(3))&-1);
      var $add44=(($mul43)|0);
      var $41=$v_addr;
      var $arrayidx45=(($41+($add44<<3))|0);
      var $42=HEAPF64[(($arrayidx45)>>3)];
      var $sub46=($39)-($42);
      var $arrayidx47=(($b)|0);
      HEAPF64[(($arrayidx47)>>3)]=$sub46;
      var $43=$jp1;
      var $mul48=((($43)*(3))&-1);
      var $add49=((($mul48)+(1))|0);
      var $44=$v_addr;
      var $arrayidx50=(($44+($add49<<3))|0);
      var $45=HEAPF64[(($arrayidx50)>>3)];
      var $46=$j;
      var $mul51=((($46)*(3))&-1);
      var $add52=((($mul51)+(1))|0);
      var $47=$v_addr;
      var $arrayidx53=(($47+($add52<<3))|0);
      var $48=HEAPF64[(($arrayidx53)>>3)];
      var $sub54=($45)-($48);
      var $arrayidx55=(($b+8)|0);
      HEAPF64[(($arrayidx55)>>3)]=$sub54;
      var $49=$jp1;
      var $mul56=((($49)*(3))&-1);
      var $add57=((($mul56)+(2))|0);
      var $50=$v_addr;
      var $arrayidx58=(($50+($add57<<3))|0);
      var $51=HEAPF64[(($arrayidx58)>>3)];
      var $52=$j;
      var $mul59=((($52)*(3))&-1);
      var $add60=((($mul59)+(2))|0);
      var $53=$v_addr;
      var $arrayidx61=(($53+($add60<<3))|0);
      var $54=HEAPF64[(($arrayidx61)>>3)];
      var $sub62=($51)-($54);
      var $arrayidx63=(($b+16)|0);
      HEAPF64[(($arrayidx63)>>3)]=$sub62;
      var $arraydecay=(($a)|0);
      var $arraydecay64=(($r1)|0);
      var $call65=_r8vec_cross_product_3d($arraydecay, $arraydecay64);
      $normal1=$call65;
      var $55=$normal1;
      var $call66=_r8vec_norm(3, $55);
      $normal1_norm=$call66;
      var $arraydecay67=(($r1)|0);
      var $arraydecay68=(($b)|0);
      var $call69=_r8vec_cross_product_3d($arraydecay67, $arraydecay68);
      $normal2=$call69;
      var $56=$normal2;
      var $call70=_r8vec_norm(3, $56);
      $normal2_norm=$call70;
      var $57=$normal1;
      var $58=$normal2;
      var $call71=_r8vec_dot_product(3, $57, $58);
      var $59=$normal1_norm;
      var $60=$normal2_norm;
      var $mul72=($59)*($60);
      var $div=($call71)/($mul72);
      $s=$div;
      var $61=$s;
      var $call73=_r8_acos($61);
      $angle=$call73;
      var $arraydecay74=(($b)|0);
      var $arraydecay75=(($a)|0);
      var $62=$plane;
      var $call76=_r8vec_scalar_triple_product($arraydecay74, $arraydecay75, $62);
      $s=$call76;
      var $63=$s;
      var $cmp77=0 < $63;
      if ($cmp77) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $64=$area;
      var $65=$pi;
      var $add79=($64)+($65);
      var $66=$angle;
      var $sub80=($add79)-($66);
      $area=$sub80;
      label = 9; break;
    case 8: 
      var $67=$area;
      var $68=$pi;
      var $add81=($67)+($68);
      var $69=$angle;
      var $add82=($add81)+($69);
      $area=$add82;
      label = 9; break;
    case 9: 
      var $arrayidx84=(($b)|0);
      var $70=HEAPF64[(($arrayidx84)>>3)];
      var $sub85=(-$70);
      var $arrayidx86=(($a)|0);
      HEAPF64[(($arrayidx86)>>3)]=$sub85;
      var $arrayidx87=(($b+8)|0);
      var $71=HEAPF64[(($arrayidx87)>>3)];
      var $sub88=(-$71);
      var $arrayidx89=(($a+8)|0);
      HEAPF64[(($arrayidx89)>>3)]=$sub88;
      var $arrayidx90=(($b+16)|0);
      var $72=HEAPF64[(($arrayidx90)>>3)];
      var $sub91=(-$72);
      var $arrayidx92=(($a+16)|0);
      HEAPF64[(($arrayidx92)>>3)]=$sub91;
      var $73=$normal1;
      var $74=$73;
      _free($74);
      var $75=$normal2;
      var $76=$75;
      _free($76);
      label = 10; break;
    case 10: 
      var $77=$j;
      var $inc=((($77)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 11: 
      var $78=$area;
      var $79=$pi;
      var $80=$n_addr;
      var $sub93=((($80)-(2))|0);
      var $conv=(($sub93)|(0));
      var $mul94=($79)*($conv);
      var $sub95=($78)-($mul94);
      $area=$sub95;
      var $81=$plane;
      var $arraydecay96=(($r1)|0);
      var $call97=_r8vec_dot_product(3, $81, $arraydecay96);
      var $cmp98=0 < $call97;
      if ($cmp98) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $82=$area;
      var $sub101=(-$82);
      $value=$sub101;
      label = 14; break;
    case 13: 
      var $83=$area;
      $value=$83;
      label = 14; break;
    case 14: 
      var $84=$plane;
      var $85=$84;
      _free($85);
      var $86=$value;
      $retval=$86;
      label = 15; break;
    case 15: 
      var $87=$retval;
      STACKTOP = __stackBase__;
      return $87;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_solid_angle_3d"] = _polygon_solid_angle_3d;
function _r8vec_scalar_triple_product($v1, $v2, $v3) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $v4;
  var $value;
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  var $0=$v2_addr;
  var $1=$v3_addr;
  var $call=_r8vec_cross_product_3d($0, $1);
  $v4=$call;
  var $2=$v1_addr;
  var $3=$v4;
  var $call1=_r8vec_dot_product(3, $2, $3);
  $value=$call1;
  var $4=$v4;
  var $5=$4;
  _free($5);
  var $6=$value;
  return $6;
}
Module["_r8vec_scalar_triple_product"] = _r8vec_scalar_triple_product;
function _polygon_x_2d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $i;
      var $im1;
      var $result;
      $n_addr=$n;
      $v_addr=$v;
      $result=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((15120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((15088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$result;
      $retval=$6;
      label = 12; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $9=$i;
      var $cmp5=(($9)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$n_addr;
      var $sub=((($10)-(1))|0);
      $im1=$sub;
      label = 9; break;
    case 8: 
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      $im1=$sub7;
      label = 9; break;
    case 9: 
      var $12=$result;
      var $13=$i;
      var $mul=($13<<1);
      var $add=(($mul)|0);
      var $14=$v_addr;
      var $arrayidx=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$i;
      var $mul9=($16<<1);
      var $add10=(($mul9)|0);
      var $17=$v_addr;
      var $arrayidx11=(($17+($add10<<3))|0);
      var $18=HEAPF64[(($arrayidx11)>>3)];
      var $mul12=($15)*($18);
      var $19=$i;
      var $mul13=($19<<1);
      var $add14=(($mul13)|0);
      var $20=$v_addr;
      var $arrayidx15=(($20+($add14<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$im1;
      var $mul16=($22<<1);
      var $add17=(($mul16)|0);
      var $23=$v_addr;
      var $arrayidx18=(($23+($add17<<3))|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $mul19=($21)*($24);
      var $add20=($mul12)+($mul19);
      var $25=$im1;
      var $mul21=($25<<1);
      var $add22=(($mul21)|0);
      var $26=$v_addr;
      var $arrayidx23=(($26+($add22<<3))|0);
      var $27=HEAPF64[(($arrayidx23)>>3)];
      var $28=$im1;
      var $mul24=($28<<1);
      var $add25=(($mul24)|0);
      var $29=$v_addr;
      var $arrayidx26=(($29+($add25<<3))|0);
      var $30=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($27)*($30);
      var $add28=($add20)+($mul27);
      var $31=$i;
      var $mul29=($31<<1);
      var $add30=((($mul29)+(1))|0);
      var $32=$v_addr;
      var $arrayidx31=(($32+($add30<<3))|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $34=$im1;
      var $mul32=($34<<1);
      var $add33=((($mul32)+(1))|0);
      var $35=$v_addr;
      var $arrayidx34=(($35+($add33<<3))|0);
      var $36=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($33)-($36);
      var $mul36=($add28)*($sub35);
      var $add37=($12)+($mul36);
      $result=$add37;
      label = 10; break;
    case 10: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $38=$result;
      var $div=($38)/(6);
      $result=$div;
      var $39=$result;
      $retval=$39;
      label = 12; break;
    case 12: 
      var $40=$retval;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_x_2d"] = _polygon_x_2d;
function _polygon_y_2d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $i;
      var $im1;
      var $result;
      $n_addr=$n;
      $v_addr=$v;
      $result=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((15120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((15088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$result;
      $retval=$6;
      label = 12; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $9=$i;
      var $cmp5=(($9)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$n_addr;
      var $sub=((($10)-(1))|0);
      $im1=$sub;
      label = 9; break;
    case 8: 
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      $im1=$sub7;
      label = 9; break;
    case 9: 
      var $12=$result;
      var $13=$i;
      var $mul=($13<<1);
      var $add=((($mul)+(1))|0);
      var $14=$v_addr;
      var $arrayidx=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$i;
      var $mul9=($16<<1);
      var $add10=((($mul9)+(1))|0);
      var $17=$v_addr;
      var $arrayidx11=(($17+($add10<<3))|0);
      var $18=HEAPF64[(($arrayidx11)>>3)];
      var $mul12=($15)*($18);
      var $19=$i;
      var $mul13=($19<<1);
      var $add14=((($mul13)+(1))|0);
      var $20=$v_addr;
      var $arrayidx15=(($20+($add14<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$im1;
      var $mul16=($22<<1);
      var $add17=((($mul16)+(1))|0);
      var $23=$v_addr;
      var $arrayidx18=(($23+($add17<<3))|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $mul19=($21)*($24);
      var $add20=($mul12)+($mul19);
      var $25=$im1;
      var $mul21=($25<<1);
      var $add22=((($mul21)+(1))|0);
      var $26=$v_addr;
      var $arrayidx23=(($26+($add22<<3))|0);
      var $27=HEAPF64[(($arrayidx23)>>3)];
      var $28=$im1;
      var $mul24=($28<<1);
      var $add25=((($mul24)+(1))|0);
      var $29=$v_addr;
      var $arrayidx26=(($29+($add25<<3))|0);
      var $30=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($27)*($30);
      var $add28=($add20)+($mul27);
      var $31=$i;
      var $mul29=($31<<1);
      var $add30=(($mul29)|0);
      var $32=$v_addr;
      var $arrayidx31=(($32+($add30<<3))|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $34=$im1;
      var $mul32=($34<<1);
      var $add33=(($mul32)|0);
      var $35=$v_addr;
      var $arrayidx34=(($35+($add33<<3))|0);
      var $36=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($33)-($36);
      var $mul36=($add28)*($sub35);
      var $sub37=($12)-($mul36);
      $result=$sub37;
      label = 10; break;
    case 10: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $38=$result;
      var $div=($38)/(6);
      $result=$div;
      var $39=$result;
      $retval=$39;
      label = 12; break;
    case 12: 
      var $40=$retval;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_y_2d"] = _polygon_y_2d;
function _polygon_outrad_data_2d($n, $radout, $area, $radin, $side) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $radout_addr;
      var $area_addr;
      var $radin_addr;
      var $side_addr;
      var $angle;
      var $pi;
      $n_addr=$n;
      $radout_addr=$radout;
      $area_addr=$area;
      $radin_addr=$radin;
      $side_addr=$side;
      $pi=3.141592653589793;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((14928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$pi;
      var $7=$n_addr;
      var $conv=(($7)|(0));
      var $div=($6)/($conv);
      $angle=$div;
      var $8=$n_addr;
      var $conv4=(($8)|(0));
      var $mul=($conv4)*(0.5);
      var $9=$radout_addr;
      var $mul5=($mul)*($9);
      var $10=$radout_addr;
      var $mul6=($mul5)*($10);
      var $11=$angle;
      var $mul7=($11)*(2);
      var $call8=Math.sin($mul7);
      var $mul9=($mul6)*($call8);
      var $12=$area_addr;
      HEAPF64[(($12)>>3)]=$mul9;
      var $13=$radout_addr;
      var $mul10=($13)*(2);
      var $14=$angle;
      var $call11=Math.sin($14);
      var $mul12=($mul10)*($call11);
      var $15=$side_addr;
      HEAPF64[(($15)>>3)]=$mul12;
      var $16=$side_addr;
      var $17=HEAPF64[(($16)>>3)];
      var $mul13=($17)*(0.5);
      var $18=$angle;
      var $call14=Math.tan($18);
      var $div15=($mul13)/($call14);
      var $19=$radin_addr;
      HEAPF64[(($19)>>3)]=$div15;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_outrad_data_2d"] = _polygon_outrad_data_2d;
function _polygon_side_data_2d($n, $side, $area, $radin, $radout) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $side_addr;
      var $area_addr;
      var $radin_addr;
      var $radout_addr;
      var $angle;
      var $pi;
      $n_addr=$n;
      $side_addr=$side;
      $area_addr=$area;
      $radin_addr=$radin;
      $radout_addr=$radout;
      $pi=3.141592653589793;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((14928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$pi;
      var $7=$n_addr;
      var $conv=(($7)|(0));
      var $div=($6)/($conv);
      $angle=$div;
      var $8=$n_addr;
      var $conv4=(($8)|(0));
      var $mul=($conv4)*(0.25);
      var $9=$side_addr;
      var $mul5=($mul)*($9);
      var $10=$side_addr;
      var $mul6=($mul5)*($10);
      var $11=$angle;
      var $call7=Math.tan($11);
      var $div8=($mul6)/($call7);
      var $12=$area_addr;
      HEAPF64[(($12)>>3)]=$div8;
      var $13=$side_addr;
      var $mul9=($13)*(0.5);
      var $14=$angle;
      var $call10=Math.tan($14);
      var $div11=($mul9)/($call10);
      var $15=$radin_addr;
      HEAPF64[(($15)>>3)]=$div11;
      var $16=$side_addr;
      var $mul12=($16)*(0.5);
      var $17=$angle;
      var $call13=Math.sin($17);
      var $div14=($mul12)/($call13);
      var $18=$radout_addr;
      HEAPF64[(($18)>>3)]=$div14;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_side_data_2d"] = _polygon_side_data_2d;
function _polygon_xx_2d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $i;
      var $im1;
      var $result;
      $n_addr=$n;
      $v_addr=$v;
      $result=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((15120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((15088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$result;
      $retval=$6;
      label = 12; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $9=$i;
      var $cmp5=(($9)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$n_addr;
      var $sub=((($10)-(1))|0);
      $im1=$sub;
      label = 9; break;
    case 8: 
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      $im1=$sub7;
      label = 9; break;
    case 9: 
      var $12=$result;
      var $13=$i;
      var $mul=($13<<1);
      var $add=(($mul)|0);
      var $14=$v_addr;
      var $arrayidx=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$i;
      var $mul9=($16<<1);
      var $add10=(($mul9)|0);
      var $17=$v_addr;
      var $arrayidx11=(($17+($add10<<3))|0);
      var $18=HEAPF64[(($arrayidx11)>>3)];
      var $mul12=($15)*($18);
      var $19=$i;
      var $mul13=($19<<1);
      var $add14=(($mul13)|0);
      var $20=$v_addr;
      var $arrayidx15=(($20+($add14<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($mul12)*($21);
      var $22=$i;
      var $mul17=($22<<1);
      var $add18=(($mul17)|0);
      var $23=$v_addr;
      var $arrayidx19=(($23+($add18<<3))|0);
      var $24=HEAPF64[(($arrayidx19)>>3)];
      var $25=$i;
      var $mul20=($25<<1);
      var $add21=(($mul20)|0);
      var $26=$v_addr;
      var $arrayidx22=(($26+($add21<<3))|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $mul23=($24)*($27);
      var $28=$im1;
      var $mul24=($28<<1);
      var $add25=(($mul24)|0);
      var $29=$v_addr;
      var $arrayidx26=(($29+($add25<<3))|0);
      var $30=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($mul23)*($30);
      var $add28=($mul16)+($mul27);
      var $31=$i;
      var $mul29=($31<<1);
      var $add30=(($mul29)|0);
      var $32=$v_addr;
      var $arrayidx31=(($32+($add30<<3))|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $34=$im1;
      var $mul32=($34<<1);
      var $add33=(($mul32)|0);
      var $35=$v_addr;
      var $arrayidx34=(($35+($add33<<3))|0);
      var $36=HEAPF64[(($arrayidx34)>>3)];
      var $mul35=($33)*($36);
      var $37=$im1;
      var $mul36=($37<<1);
      var $add37=(($mul36)|0);
      var $38=$v_addr;
      var $arrayidx38=(($38+($add37<<3))|0);
      var $39=HEAPF64[(($arrayidx38)>>3)];
      var $mul39=($mul35)*($39);
      var $add40=($add28)+($mul39);
      var $40=$im1;
      var $mul41=($40<<1);
      var $add42=(($mul41)|0);
      var $41=$v_addr;
      var $arrayidx43=(($41+($add42<<3))|0);
      var $42=HEAPF64[(($arrayidx43)>>3)];
      var $43=$im1;
      var $mul44=($43<<1);
      var $add45=(($mul44)|0);
      var $44=$v_addr;
      var $arrayidx46=(($44+($add45<<3))|0);
      var $45=HEAPF64[(($arrayidx46)>>3)];
      var $mul47=($42)*($45);
      var $46=$im1;
      var $mul48=($46<<1);
      var $add49=(($mul48)|0);
      var $47=$v_addr;
      var $arrayidx50=(($47+($add49<<3))|0);
      var $48=HEAPF64[(($arrayidx50)>>3)];
      var $mul51=($mul47)*($48);
      var $add52=($add40)+($mul51);
      var $49=$i;
      var $mul53=($49<<1);
      var $add54=((($mul53)+(1))|0);
      var $50=$v_addr;
      var $arrayidx55=(($50+($add54<<3))|0);
      var $51=HEAPF64[(($arrayidx55)>>3)];
      var $52=$im1;
      var $mul56=($52<<1);
      var $add57=((($mul56)+(1))|0);
      var $53=$v_addr;
      var $arrayidx58=(($53+($add57<<3))|0);
      var $54=HEAPF64[(($arrayidx58)>>3)];
      var $sub59=($51)-($54);
      var $mul60=($add52)*($sub59);
      var $add61=($12)+($mul60);
      $result=$add61;
      label = 10; break;
    case 10: 
      var $55=$i;
      var $inc=((($55)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $56=$result;
      var $div=($56)/(12);
      $result=$div;
      var $57=$result;
      $retval=$57;
      label = 12; break;
    case 12: 
      var $58=$retval;
      STACKTOP = __stackBase__;
      return $58;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_xx_2d"] = _polygon_xx_2d;
function _polygon_xy_2d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $i;
      var $im1;
      var $result;
      $n_addr=$n;
      $v_addr=$v;
      $result=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((15120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((15088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$result;
      $retval=$6;
      label = 12; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $9=$i;
      var $cmp5=(($9)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$n_addr;
      var $sub=((($10)-(1))|0);
      $im1=$sub;
      label = 9; break;
    case 8: 
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      $im1=$sub7;
      label = 9; break;
    case 9: 
      var $12=$result;
      var $13=$i;
      var $mul=($13<<1);
      var $add=((($mul)+(1))|0);
      var $14=$v_addr;
      var $arrayidx=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$i;
      var $mul9=($16<<1);
      var $add10=(($mul9)|0);
      var $17=$v_addr;
      var $arrayidx11=(($17+($add10<<3))|0);
      var $18=HEAPF64[(($arrayidx11)>>3)];
      var $mul12=($18)*(3);
      var $19=$i;
      var $mul13=($19<<1);
      var $add14=(($mul13)|0);
      var $20=$v_addr;
      var $arrayidx15=(($20+($add14<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($mul12)*($21);
      var $22=$i;
      var $mul17=($22<<1);
      var $add18=(($mul17)|0);
      var $23=$v_addr;
      var $arrayidx19=(($23+($add18<<3))|0);
      var $24=HEAPF64[(($arrayidx19)>>3)];
      var $mul20=($24)*(2);
      var $25=$im1;
      var $mul21=($25<<1);
      var $add22=(($mul21)|0);
      var $26=$v_addr;
      var $arrayidx23=(($26+($add22<<3))|0);
      var $27=HEAPF64[(($arrayidx23)>>3)];
      var $mul24=($mul20)*($27);
      var $add25=($mul16)+($mul24);
      var $28=$im1;
      var $mul26=($28<<1);
      var $add27=(($mul26)|0);
      var $29=$v_addr;
      var $arrayidx28=(($29+($add27<<3))|0);
      var $30=HEAPF64[(($arrayidx28)>>3)];
      var $31=$im1;
      var $mul29=($31<<1);
      var $add30=(($mul29)|0);
      var $32=$v_addr;
      var $arrayidx31=(($32+($add30<<3))|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $mul32=($30)*($33);
      var $add33=($add25)+($mul32);
      var $mul34=($15)*($add33);
      var $34=$im1;
      var $mul35=($34<<1);
      var $add36=((($mul35)+(1))|0);
      var $35=$v_addr;
      var $arrayidx37=(($35+($add36<<3))|0);
      var $36=HEAPF64[(($arrayidx37)>>3)];
      var $37=$i;
      var $mul38=($37<<1);
      var $add39=(($mul38)|0);
      var $38=$v_addr;
      var $arrayidx40=(($38+($add39<<3))|0);
      var $39=HEAPF64[(($arrayidx40)>>3)];
      var $40=$i;
      var $mul41=($40<<1);
      var $add42=(($mul41)|0);
      var $41=$v_addr;
      var $arrayidx43=(($41+($add42<<3))|0);
      var $42=HEAPF64[(($arrayidx43)>>3)];
      var $mul44=($39)*($42);
      var $43=$i;
      var $mul45=($43<<1);
      var $add46=(($mul45)|0);
      var $44=$v_addr;
      var $arrayidx47=(($44+($add46<<3))|0);
      var $45=HEAPF64[(($arrayidx47)>>3)];
      var $mul48=($45)*(2);
      var $46=$im1;
      var $mul49=($46<<1);
      var $add50=(($mul49)|0);
      var $47=$v_addr;
      var $arrayidx51=(($47+($add50<<3))|0);
      var $48=HEAPF64[(($arrayidx51)>>3)];
      var $mul52=($mul48)*($48);
      var $add53=($mul44)+($mul52);
      var $49=$im1;
      var $mul54=($49<<1);
      var $add55=(($mul54)|0);
      var $50=$v_addr;
      var $arrayidx56=(($50+($add55<<3))|0);
      var $51=HEAPF64[(($arrayidx56)>>3)];
      var $mul57=($51)*(3);
      var $52=$im1;
      var $mul58=($52<<1);
      var $add59=(($mul58)|0);
      var $53=$v_addr;
      var $arrayidx60=(($53+($add59<<3))|0);
      var $54=HEAPF64[(($arrayidx60)>>3)];
      var $mul61=($mul57)*($54);
      var $add62=($add53)+($mul61);
      var $mul63=($36)*($add62);
      var $add64=($mul34)+($mul63);
      var $55=$i;
      var $mul65=($55<<1);
      var $add66=((($mul65)+(1))|0);
      var $56=$v_addr;
      var $arrayidx67=(($56+($add66<<3))|0);
      var $57=HEAPF64[(($arrayidx67)>>3)];
      var $58=$im1;
      var $mul68=($58<<1);
      var $add69=((($mul68)+(1))|0);
      var $59=$v_addr;
      var $arrayidx70=(($59+($add69<<3))|0);
      var $60=HEAPF64[(($arrayidx70)>>3)];
      var $sub71=($57)-($60);
      var $mul72=($add64)*($sub71);
      var $add73=($12)+($mul72);
      $result=$add73;
      label = 10; break;
    case 10: 
      var $61=$i;
      var $inc=((($61)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $62=$result;
      var $div=($62)/(24);
      $result=$div;
      var $63=$result;
      $retval=$63;
      label = 12; break;
    case 12: 
      var $64=$retval;
      STACKTOP = __stackBase__;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_xy_2d"] = _polygon_xy_2d;
function _polygon_yy_2d($n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $v_addr;
      var $i;
      var $im1;
      var $result;
      $n_addr=$n;
      $v_addr=$v;
      $result=0;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((15120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((15088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=$result;
      $retval=$6;
      label = 12; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp4=(($7)|(0)) < (($8)|(0));
      if ($cmp4) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $9=$i;
      var $cmp5=(($9)|(0))==0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $10=$n_addr;
      var $sub=((($10)-(1))|0);
      $im1=$sub;
      label = 9; break;
    case 8: 
      var $11=$i;
      var $sub7=((($11)-(1))|0);
      $im1=$sub7;
      label = 9; break;
    case 9: 
      var $12=$result;
      var $13=$i;
      var $mul=($13<<1);
      var $add=((($mul)+(1))|0);
      var $14=$v_addr;
      var $arrayidx=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx)>>3)];
      var $16=$i;
      var $mul9=($16<<1);
      var $add10=((($mul9)+(1))|0);
      var $17=$v_addr;
      var $arrayidx11=(($17+($add10<<3))|0);
      var $18=HEAPF64[(($arrayidx11)>>3)];
      var $mul12=($15)*($18);
      var $19=$i;
      var $mul13=($19<<1);
      var $add14=((($mul13)+(1))|0);
      var $20=$v_addr;
      var $arrayidx15=(($20+($add14<<3))|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($mul12)*($21);
      var $22=$i;
      var $mul17=($22<<1);
      var $add18=((($mul17)+(1))|0);
      var $23=$v_addr;
      var $arrayidx19=(($23+($add18<<3))|0);
      var $24=HEAPF64[(($arrayidx19)>>3)];
      var $25=$i;
      var $mul20=($25<<1);
      var $add21=((($mul20)+(1))|0);
      var $26=$v_addr;
      var $arrayidx22=(($26+($add21<<3))|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $mul23=($24)*($27);
      var $28=$im1;
      var $mul24=($28<<1);
      var $add25=((($mul24)+(1))|0);
      var $29=$v_addr;
      var $arrayidx26=(($29+($add25<<3))|0);
      var $30=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($mul23)*($30);
      var $add28=($mul16)+($mul27);
      var $31=$i;
      var $mul29=($31<<1);
      var $add30=((($mul29)+(1))|0);
      var $32=$v_addr;
      var $arrayidx31=(($32+($add30<<3))|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $34=$im1;
      var $mul32=($34<<1);
      var $add33=((($mul32)+(1))|0);
      var $35=$v_addr;
      var $arrayidx34=(($35+($add33<<3))|0);
      var $36=HEAPF64[(($arrayidx34)>>3)];
      var $mul35=($33)*($36);
      var $37=$im1;
      var $mul36=($37<<1);
      var $add37=((($mul36)+(1))|0);
      var $38=$v_addr;
      var $arrayidx38=(($38+($add37<<3))|0);
      var $39=HEAPF64[(($arrayidx38)>>3)];
      var $mul39=($mul35)*($39);
      var $add40=($add28)+($mul39);
      var $40=$im1;
      var $mul41=($40<<1);
      var $add42=((($mul41)+(1))|0);
      var $41=$v_addr;
      var $arrayidx43=(($41+($add42<<3))|0);
      var $42=HEAPF64[(($arrayidx43)>>3)];
      var $43=$im1;
      var $mul44=($43<<1);
      var $add45=((($mul44)+(1))|0);
      var $44=$v_addr;
      var $arrayidx46=(($44+($add45<<3))|0);
      var $45=HEAPF64[(($arrayidx46)>>3)];
      var $mul47=($42)*($45);
      var $46=$im1;
      var $mul48=($46<<1);
      var $add49=((($mul48)+(1))|0);
      var $47=$v_addr;
      var $arrayidx50=(($47+($add49<<3))|0);
      var $48=HEAPF64[(($arrayidx50)>>3)];
      var $mul51=($mul47)*($48);
      var $add52=($add40)+($mul51);
      var $49=$i;
      var $mul53=($49<<1);
      var $add54=(($mul53)|0);
      var $50=$v_addr;
      var $arrayidx55=(($50+($add54<<3))|0);
      var $51=HEAPF64[(($arrayidx55)>>3)];
      var $52=$im1;
      var $mul56=($52<<1);
      var $add57=(($mul56)|0);
      var $53=$v_addr;
      var $arrayidx58=(($53+($add57<<3))|0);
      var $54=HEAPF64[(($arrayidx58)>>3)];
      var $sub59=($51)-($54);
      var $mul60=($add52)*($sub59);
      var $sub61=($12)-($mul60);
      $result=$sub61;
      label = 10; break;
    case 10: 
      var $55=$i;
      var $inc=((($55)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $56=$result;
      var $div=($56)/(12);
      $result=$div;
      var $57=$result;
      $retval=$57;
      label = 12; break;
    case 12: 
      var $58=$retval;
      STACKTOP = __stackBase__;
      return $58;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polygon_yy_2d"] = _polygon_yy_2d;
function _polyhedron_area_3d($coord, $order_max, $face_num, $node, $node_num, $order) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $coord_addr;
      var $order_max_addr;
      var $face_num_addr;
      var $node_addr;
      var $node_num_addr;
      var $order_addr;
      var $ainc;
      var $area;
      var $face;
      var $j;
      var $k;
      var $p1=__stackBase__;
      var $p2=(__stackBase__)+(24);
      var $p3;
      var $p4=(__stackBase__)+(48);
      $coord_addr=$coord;
      $order_max_addr=$order_max;
      $face_num_addr=$face_num;
      $node_addr=$node;
      $node_num_addr=$node_num;
      $order_addr=$order;
      $area=0;
      $face=0;
      label = 3; break;
    case 3: 
      var $0=$face;
      var $1=$face_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $arraydecay=(($p4)|0);
      _r8vec_zero(3, $arraydecay);
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $3=$face;
      var $4=$order_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $cmp2=(($2)|(0)) < (($5)|(0));
      if ($cmp2) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $6=$j;
      var $7=$face;
      var $8=$order_max_addr;
      var $mul=(Math.imul($7,$8)|0);
      var $add=((($6)+($mul))|0);
      var $9=$node_addr;
      var $arrayidx4=(($9+($add<<2))|0);
      var $10=HEAP32[(($arrayidx4)>>2)];
      $k=$10;
      var $11=$k;
      var $mul5=((($11)*(3))&-1);
      var $add6=(($mul5)|0);
      var $12=$coord_addr;
      var $arrayidx7=(($12+($add6<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $arrayidx8=(($p1)|0);
      HEAPF64[(($arrayidx8)>>3)]=$13;
      var $14=$k;
      var $mul9=((($14)*(3))&-1);
      var $add10=((($mul9)+(1))|0);
      var $15=$coord_addr;
      var $arrayidx11=(($15+($add10<<3))|0);
      var $16=HEAPF64[(($arrayidx11)>>3)];
      var $arrayidx12=(($p1+8)|0);
      HEAPF64[(($arrayidx12)>>3)]=$16;
      var $17=$k;
      var $mul13=((($17)*(3))&-1);
      var $add14=((($mul13)+(2))|0);
      var $18=$coord_addr;
      var $arrayidx15=(($18+($add14<<3))|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $arrayidx16=(($p1+16)|0);
      HEAPF64[(($arrayidx16)>>3)]=$19;
      var $20=$j;
      var $add17=((($20)+(1))|0);
      var $21=$face;
      var $22=$order_addr;
      var $arrayidx18=(($22+($21<<2))|0);
      var $23=HEAP32[(($arrayidx18)>>2)];
      var $cmp19=(($add17)|(0)) < (($23)|(0));
      if ($cmp19) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$j;
      var $add20=((($24)+(1))|0);
      var $25=$face;
      var $26=$order_max_addr;
      var $mul21=(Math.imul($25,$26)|0);
      var $add22=((($add20)+($mul21))|0);
      var $27=$node_addr;
      var $arrayidx23=(($27+($add22<<2))|0);
      var $28=HEAP32[(($arrayidx23)>>2)];
      $k=$28;
      label = 9; break;
    case 8: 
      var $29=$face;
      var $30=$order_max_addr;
      var $mul24=(Math.imul($29,$30)|0);
      var $add25=(($mul24)|0);
      var $31=$node_addr;
      var $arrayidx26=(($31+($add25<<2))|0);
      var $32=HEAP32[(($arrayidx26)>>2)];
      $k=$32;
      label = 9; break;
    case 9: 
      var $33=$k;
      var $mul27=((($33)*(3))&-1);
      var $add28=(($mul27)|0);
      var $34=$coord_addr;
      var $arrayidx29=(($34+($add28<<3))|0);
      var $35=HEAPF64[(($arrayidx29)>>3)];
      var $arrayidx30=(($p2)|0);
      HEAPF64[(($arrayidx30)>>3)]=$35;
      var $36=$k;
      var $mul31=((($36)*(3))&-1);
      var $add32=((($mul31)+(1))|0);
      var $37=$coord_addr;
      var $arrayidx33=(($37+($add32<<3))|0);
      var $38=HEAPF64[(($arrayidx33)>>3)];
      var $arrayidx34=(($p2+8)|0);
      HEAPF64[(($arrayidx34)>>3)]=$38;
      var $39=$k;
      var $mul35=((($39)*(3))&-1);
      var $add36=((($mul35)+(2))|0);
      var $40=$coord_addr;
      var $arrayidx37=(($40+($add36<<3))|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($p2+16)|0);
      HEAPF64[(($arrayidx38)>>3)]=$41;
      var $arraydecay39=(($p1)|0);
      var $arraydecay40=(($p2)|0);
      var $call=_r8vec_cross_product_3d($arraydecay39, $arraydecay40);
      $p3=$call;
      var $arrayidx41=(($p4)|0);
      var $42=HEAPF64[(($arrayidx41)>>3)];
      var $43=$p3;
      var $arrayidx42=(($43)|0);
      var $44=HEAPF64[(($arrayidx42)>>3)];
      var $add43=($42)+($44);
      var $arrayidx44=(($p4)|0);
      HEAPF64[(($arrayidx44)>>3)]=$add43;
      var $arrayidx45=(($p4+8)|0);
      var $45=HEAPF64[(($arrayidx45)>>3)];
      var $46=$p3;
      var $arrayidx46=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx46)>>3)];
      var $add47=($45)+($47);
      var $arrayidx48=(($p4+8)|0);
      HEAPF64[(($arrayidx48)>>3)]=$add47;
      var $arrayidx49=(($p4+16)|0);
      var $48=HEAPF64[(($arrayidx49)>>3)];
      var $49=$p3;
      var $arrayidx50=(($49+16)|0);
      var $50=HEAPF64[(($arrayidx50)>>3)];
      var $add51=($48)+($50);
      var $arrayidx52=(($p4+16)|0);
      HEAPF64[(($arrayidx52)>>3)]=$add51;
      var $51=$p3;
      var $52=$51;
      _free($52);
      label = 10; break;
    case 10: 
      var $53=$j;
      var $inc=((($53)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 11: 
      var $arraydecay53=(($p4)|0);
      var $call54=_r8vec_norm(3, $arraydecay53);
      $ainc=$call54;
      var $54=$area;
      var $55=$ainc;
      var $add55=($54)+($55);
      $area=$add55;
      label = 12; break;
    case 12: 
      var $56=$face;
      var $inc57=((($56)+(1))|0);
      $face=$inc57;
      label = 3; break;
    case 13: 
      var $57=$area;
      var $mul59=($57)*(0.5);
      $area=$mul59;
      var $58=$area;
      STACKTOP = __stackBase__;
      return $58;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyhedron_area_3d"] = _polyhedron_area_3d;
function _polyhedron_volume_3d($coord, $order_max, $face_num, $node, $node_num, $order) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $coord_addr;
      var $order_max_addr;
      var $face_num_addr;
      var $node_addr;
      var $node_num_addr;
      var $order_addr;
      var $face;
      var $n1;
      var $n2;
      var $n3;
      var $term;
      var $v;
      var $volume;
      var $x1;
      var $x2;
      var $x3;
      var $y1;
      var $y2;
      var $y3;
      var $z1;
      var $z2;
      var $z3;
      $coord_addr=$coord;
      $order_max_addr=$order_max;
      $face_num_addr=$face_num;
      $node_addr=$node;
      $node_num_addr=$node_num;
      $order_addr=$order;
      $volume=0;
      $face=0;
      label = 3; break;
    case 3: 
      var $0=$face;
      var $1=$face_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $2=$face;
      var $3=$order_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $sub=((($4)-(1))|0);
      var $5=$face;
      var $6=$order_max_addr;
      var $mul=(Math.imul($5,$6)|0);
      var $add=((($sub)+($mul))|0);
      var $7=$node_addr;
      var $arrayidx1=(($7+($add<<2))|0);
      var $8=HEAP32[(($arrayidx1)>>2)];
      $n3=$8;
      var $9=$n3;
      var $mul2=((($9)*(3))&-1);
      var $add3=(($mul2)|0);
      var $10=$coord_addr;
      var $arrayidx4=(($10+($add3<<3))|0);
      var $11=HEAPF64[(($arrayidx4)>>3)];
      $x3=$11;
      var $12=$n3;
      var $mul5=((($12)*(3))&-1);
      var $add6=((($mul5)+(1))|0);
      var $13=$coord_addr;
      var $arrayidx7=(($13+($add6<<3))|0);
      var $14=HEAPF64[(($arrayidx7)>>3)];
      $y3=$14;
      var $15=$n3;
      var $mul8=((($15)*(3))&-1);
      var $add9=((($mul8)+(2))|0);
      var $16=$coord_addr;
      var $arrayidx10=(($16+($add9<<3))|0);
      var $17=HEAPF64[(($arrayidx10)>>3)];
      $z3=$17;
      $v=0;
      label = 5; break;
    case 5: 
      var $18=$v;
      var $19=$face;
      var $20=$order_addr;
      var $arrayidx12=(($20+($19<<2))|0);
      var $21=HEAP32[(($arrayidx12)>>2)];
      var $sub13=((($21)-(2))|0);
      var $cmp14=(($18)|(0)) < (($sub13)|(0));
      if ($cmp14) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $22=$v;
      var $23=$face;
      var $24=$order_max_addr;
      var $mul16=(Math.imul($23,$24)|0);
      var $add17=((($22)+($mul16))|0);
      var $25=$node_addr;
      var $arrayidx18=(($25+($add17<<2))|0);
      var $26=HEAP32[(($arrayidx18)>>2)];
      $n1=$26;
      var $27=$n1;
      var $mul19=((($27)*(3))&-1);
      var $add20=(($mul19)|0);
      var $28=$coord_addr;
      var $arrayidx21=(($28+($add20<<3))|0);
      var $29=HEAPF64[(($arrayidx21)>>3)];
      $x1=$29;
      var $30=$n1;
      var $mul22=((($30)*(3))&-1);
      var $add23=((($mul22)+(1))|0);
      var $31=$coord_addr;
      var $arrayidx24=(($31+($add23<<3))|0);
      var $32=HEAPF64[(($arrayidx24)>>3)];
      $y1=$32;
      var $33=$n1;
      var $mul25=((($33)*(3))&-1);
      var $add26=((($mul25)+(2))|0);
      var $34=$coord_addr;
      var $arrayidx27=(($34+($add26<<3))|0);
      var $35=HEAPF64[(($arrayidx27)>>3)];
      $z1=$35;
      var $36=$v;
      var $add28=((($36)+(1))|0);
      var $37=$face;
      var $38=$order_max_addr;
      var $mul29=(Math.imul($37,$38)|0);
      var $add30=((($add28)+($mul29))|0);
      var $39=$node_addr;
      var $arrayidx31=(($39+($add30<<2))|0);
      var $40=HEAP32[(($arrayidx31)>>2)];
      $n2=$40;
      var $41=$n2;
      var $mul32=((($41)*(3))&-1);
      var $add33=(($mul32)|0);
      var $42=$coord_addr;
      var $arrayidx34=(($42+($add33<<3))|0);
      var $43=HEAPF64[(($arrayidx34)>>3)];
      $x2=$43;
      var $44=$n2;
      var $mul35=((($44)*(3))&-1);
      var $add36=((($mul35)+(1))|0);
      var $45=$coord_addr;
      var $arrayidx37=(($45+($add36<<3))|0);
      var $46=HEAPF64[(($arrayidx37)>>3)];
      $y2=$46;
      var $47=$n2;
      var $mul38=((($47)*(3))&-1);
      var $add39=((($mul38)+(2))|0);
      var $48=$coord_addr;
      var $arrayidx40=(($48+($add39<<3))|0);
      var $49=HEAPF64[(($arrayidx40)>>3)];
      $z2=$49;
      var $50=$x1;
      var $51=$y2;
      var $mul41=($50)*($51);
      var $52=$z3;
      var $mul42=($mul41)*($52);
      var $53=$x1;
      var $54=$y3;
      var $mul43=($53)*($54);
      var $55=$z2;
      var $mul44=($mul43)*($55);
      var $sub45=($mul42)-($mul44);
      var $56=$x2;
      var $57=$y3;
      var $mul46=($56)*($57);
      var $58=$z1;
      var $mul47=($mul46)*($58);
      var $add48=($sub45)+($mul47);
      var $59=$x2;
      var $60=$y1;
      var $mul49=($59)*($60);
      var $61=$z3;
      var $mul50=($mul49)*($61);
      var $sub51=($add48)-($mul50);
      var $62=$x3;
      var $63=$y1;
      var $mul52=($62)*($63);
      var $64=$z2;
      var $mul53=($mul52)*($64);
      var $add54=($sub51)+($mul53);
      var $65=$x3;
      var $66=$y2;
      var $mul55=($65)*($66);
      var $67=$z1;
      var $mul56=($mul55)*($67);
      var $sub57=($add54)-($mul56);
      $term=$sub57;
      var $68=$volume;
      var $69=$term;
      var $add58=($68)+($69);
      $volume=$add58;
      label = 7; break;
    case 7: 
      var $70=$v;
      var $inc=((($70)+(1))|0);
      $v=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $71=$face;
      var $inc60=((($71)+(1))|0);
      $face=$inc60;
      label = 3; break;
    case 10: 
      var $72=$volume;
      var $div=($72)/(6);
      $volume=$div;
      var $73=$volume;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyhedron_volume_3d"] = _polyhedron_volume_3d;
function _polyhedron_centroid_3d($coord, $order_max, $face_num, $node, $node_num, $order) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $coord_addr;
      var $order_max_addr;
      var $face_num_addr;
      var $node_addr;
      var $node_num_addr;
      var $order_addr;
      var $area;
      var $centroid;
      var $face;
      var $i;
      var $j;
      var $n;
      var $n1;
      var $n2;
      var $n3;
      var $normal=__stackBase__;
      var $point=(__stackBase__)+(24);
      var $polygon_area;
      var $polygon_centroid;
      var $tet=(__stackBase__)+(48);
      var $tetrahedron_centroid;
      var $tetrahedron_volume;
      var $v;
      var $vert;
      var $vert_num;
      var $volume;
      $coord_addr=$coord;
      $order_max_addr=$order_max;
      $face_num_addr=$face_num;
      $node_addr=$node;
      $node_num_addr=$node_num;
      $order_addr=$order;
      var $arraydecay=(($point)|0);
      _r8vec_zero(3, $arraydecay);
      var $0=$order_max_addr;
      var $mul=((($0)*(3))&-1);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $1=$call;
      $vert=$1;
      $area=0;
      $face=0;
      label = 3; break;
    case 3: 
      var $2=$face;
      var $3=$face_num_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $4=$face;
      var $5=$order_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $vert_num=$6;
      $j=0;
      label = 5; break;
    case 5: 
      var $7=$j;
      var $8=$vert_num;
      var $cmp3=(($7)|(0)) < (($8)|(0));
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$j;
      var $10=$face;
      var $11=$order_max_addr;
      var $mul5=(Math.imul($10,$11)|0);
      var $add=((($9)+($mul5))|0);
      var $12=$node_addr;
      var $arrayidx6=(($12+($add<<2))|0);
      var $13=HEAP32[(($arrayidx6)>>2)];
      $n=$13;
      var $14=$n;
      var $sub=((($14)-(1))|0);
      var $mul7=((($sub)*(3))&-1);
      var $add8=(($mul7)|0);
      var $15=$coord_addr;
      var $arrayidx9=(($15+($add8<<3))|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$j;
      var $mul10=((($17)*(3))&-1);
      var $add11=(($mul10)|0);
      var $18=$vert;
      var $arrayidx12=(($18+($add11<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$16;
      var $19=$n;
      var $sub13=((($19)-(1))|0);
      var $mul14=((($sub13)*(3))&-1);
      var $add15=((($mul14)+(1))|0);
      var $20=$coord_addr;
      var $arrayidx16=(($20+($add15<<3))|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$j;
      var $mul17=((($22)*(3))&-1);
      var $add18=((($mul17)+(1))|0);
      var $23=$vert;
      var $arrayidx19=(($23+($add18<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$21;
      var $24=$n;
      var $sub20=((($24)-(1))|0);
      var $mul21=((($sub20)*(3))&-1);
      var $add22=((($mul21)+(2))|0);
      var $25=$coord_addr;
      var $arrayidx23=(($25+($add22<<3))|0);
      var $26=HEAPF64[(($arrayidx23)>>3)];
      var $27=$j;
      var $mul24=((($27)*(3))&-1);
      var $add25=((($mul24)+(2))|0);
      var $28=$vert;
      var $arrayidx26=(($28+($add25<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$26;
      label = 7; break;
    case 7: 
      var $29=$j;
      var $inc=((($29)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $30=$vert_num;
      var $31=$vert;
      var $arraydecay27=(($normal)|0);
      var $call28=_polygon_area_3d($30, $31, $arraydecay27);
      $polygon_area=$call28;
      var $32=$vert_num;
      var $33=$vert;
      var $call29=_polygon_centroid_3d($32, $33);
      $polygon_centroid=$call29;
      $i=0;
      label = 9; break;
    case 9: 
      var $34=$i;
      var $cmp31=(($34)|(0)) < 3;
      if ($cmp31) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $35=$i;
      var $arrayidx33=(($point+($35<<3))|0);
      var $36=HEAPF64[(($arrayidx33)>>3)];
      var $37=$polygon_area;
      var $38=$i;
      var $39=$polygon_centroid;
      var $arrayidx34=(($39+($38<<3))|0);
      var $40=HEAPF64[(($arrayidx34)>>3)];
      var $mul35=($37)*($40);
      var $add36=($36)+($mul35);
      var $41=$i;
      var $arrayidx37=(($point+($41<<3))|0);
      HEAPF64[(($arrayidx37)>>3)]=$add36;
      label = 11; break;
    case 11: 
      var $42=$i;
      var $inc39=((($42)+(1))|0);
      $i=$inc39;
      label = 9; break;
    case 12: 
      var $43=$area;
      var $44=$polygon_area;
      var $add41=($43)+($44);
      $area=$add41;
      var $45=$polygon_centroid;
      var $46=$45;
      _free($46);
      label = 13; break;
    case 13: 
      var $47=$face;
      var $inc43=((($47)+(1))|0);
      $face=$inc43;
      label = 3; break;
    case 14: 
      var $48=$vert;
      var $49=$48;
      _free($49);
      var $arrayidx45=(($point)|0);
      var $50=HEAPF64[(($arrayidx45)>>3)];
      var $51=$area;
      var $div=($50)/($51);
      var $arrayidx46=(($point)|0);
      HEAPF64[(($arrayidx46)>>3)]=$div;
      var $arrayidx47=(($point+8)|0);
      var $52=HEAPF64[(($arrayidx47)>>3)];
      var $53=$area;
      var $div48=($52)/($53);
      var $arrayidx49=(($point+8)|0);
      HEAPF64[(($arrayidx49)>>3)]=$div48;
      var $arrayidx50=(($point+16)|0);
      var $54=HEAPF64[(($arrayidx50)>>3)];
      var $55=$area;
      var $div51=($54)/($55);
      var $arrayidx52=(($point+16)|0);
      HEAPF64[(($arrayidx52)>>3)]=$div51;
      var $call53=_malloc(24);
      var $56=$call53;
      $centroid=$56;
      var $57=$centroid;
      _r8vec_zero(3, $57);
      $volume=0;
      $face=0;
      label = 15; break;
    case 15: 
      var $58=$face;
      var $59=$face_num_addr;
      var $cmp55=(($58)|(0)) < (($59)|(0));
      if ($cmp55) { label = 16; break; } else { label = 26; break; }
    case 16: 
      var $60=$face;
      var $61=$order_addr;
      var $arrayidx57=(($61+($60<<2))|0);
      var $62=HEAP32[(($arrayidx57)>>2)];
      var $sub58=((($62)-(1))|0);
      var $63=$face;
      var $64=$order_max_addr;
      var $mul59=(Math.imul($63,$64)|0);
      var $add60=((($sub58)+($mul59))|0);
      var $65=$node_addr;
      var $arrayidx61=(($65+($add60<<2))|0);
      var $66=HEAP32[(($arrayidx61)>>2)];
      $n3=$66;
      var $67=$coord_addr;
      var $68=$n3;
      var $sub62=((($68)-(1))|0);
      var $mul63=((($sub62)*(3))&-1);
      var $add_ptr=(($67+($mul63<<3))|0);
      var $arraydecay64=(($tet)|0);
      var $add_ptr65=(($arraydecay64+48)|0);
      _r8vec_copy(3, $add_ptr, $add_ptr65);
      $v=0;
      label = 17; break;
    case 17: 
      var $69=$v;
      var $70=$face;
      var $71=$order_addr;
      var $arrayidx67=(($71+($70<<2))|0);
      var $72=HEAP32[(($arrayidx67)>>2)];
      var $sub68=((($72)-(2))|0);
      var $cmp69=(($69)|(0)) < (($sub68)|(0));
      if ($cmp69) { label = 18; break; } else { label = 24; break; }
    case 18: 
      var $73=$v;
      var $74=$face;
      var $75=$order_max_addr;
      var $mul71=(Math.imul($74,$75)|0);
      var $add72=((($73)+($mul71))|0);
      var $76=$node_addr;
      var $arrayidx73=(($76+($add72<<2))|0);
      var $77=HEAP32[(($arrayidx73)>>2)];
      $n1=$77;
      var $78=$v;
      var $add74=((($78)+(1))|0);
      var $79=$face;
      var $80=$order_max_addr;
      var $mul75=(Math.imul($79,$80)|0);
      var $add76=((($add74)+($mul75))|0);
      var $81=$node_addr;
      var $arrayidx77=(($81+($add76<<2))|0);
      var $82=HEAP32[(($arrayidx77)>>2)];
      $n2=$82;
      var $83=$coord_addr;
      var $84=$n1;
      var $sub78=((($84)-(1))|0);
      var $mul79=((($sub78)*(3))&-1);
      var $add_ptr80=(($83+($mul79<<3))|0);
      var $arraydecay81=(($tet)|0);
      var $add_ptr82=(($arraydecay81)|0);
      _r8vec_copy(3, $add_ptr80, $add_ptr82);
      var $85=$coord_addr;
      var $86=$n2;
      var $sub83=((($86)-(1))|0);
      var $mul84=((($sub83)*(3))&-1);
      var $add_ptr85=(($85+($mul84<<3))|0);
      var $arraydecay86=(($tet)|0);
      var $add_ptr87=(($arraydecay86+24)|0);
      _r8vec_copy(3, $add_ptr85, $add_ptr87);
      var $arraydecay88=(($point)|0);
      var $arraydecay89=(($tet)|0);
      var $add_ptr90=(($arraydecay89+72)|0);
      _r8vec_copy(3, $arraydecay88, $add_ptr90);
      var $arraydecay91=(($tet)|0);
      var $call92=_tetrahedron_volume_3d($arraydecay91);
      $tetrahedron_volume=$call92;
      var $arraydecay93=(($tet)|0);
      var $call94=_tetrahedron_centroid_3d($arraydecay93);
      $tetrahedron_centroid=$call94;
      $i=0;
      label = 19; break;
    case 19: 
      var $87=$i;
      var $cmp96=(($87)|(0)) < 3;
      if ($cmp96) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $88=$i;
      var $89=$centroid;
      var $arrayidx98=(($89+($88<<3))|0);
      var $90=HEAPF64[(($arrayidx98)>>3)];
      var $91=$tetrahedron_volume;
      var $92=$i;
      var $93=$tetrahedron_centroid;
      var $arrayidx99=(($93+($92<<3))|0);
      var $94=HEAPF64[(($arrayidx99)>>3)];
      var $mul100=($91)*($94);
      var $add101=($90)+($mul100);
      var $95=$i;
      var $96=$centroid;
      var $arrayidx102=(($96+($95<<3))|0);
      HEAPF64[(($arrayidx102)>>3)]=$add101;
      label = 21; break;
    case 21: 
      var $97=$i;
      var $inc104=((($97)+(1))|0);
      $i=$inc104;
      label = 19; break;
    case 22: 
      var $98=$volume;
      var $99=$tetrahedron_volume;
      var $add106=($98)+($99);
      $volume=$add106;
      var $100=$tetrahedron_centroid;
      var $101=$100;
      _free($101);
      label = 23; break;
    case 23: 
      var $102=$v;
      var $inc108=((($102)+(1))|0);
      $v=$inc108;
      label = 17; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $103=$face;
      var $inc111=((($103)+(1))|0);
      $face=$inc111;
      label = 15; break;
    case 26: 
      $i=0;
      label = 27; break;
    case 27: 
      var $104=$i;
      var $cmp114=(($104)|(0)) < 3;
      if ($cmp114) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $105=$i;
      var $106=$centroid;
      var $arrayidx116=(($106+($105<<3))|0);
      var $107=HEAPF64[(($arrayidx116)>>3)];
      var $108=$volume;
      var $div117=($107)/($108);
      var $109=$i;
      var $110=$centroid;
      var $arrayidx118=(($110+($109<<3))|0);
      HEAPF64[(($arrayidx118)>>3)]=$div117;
      label = 29; break;
    case 29: 
      var $111=$i;
      var $inc120=((($111)+(1))|0);
      $i=$inc120;
      label = 27; break;
    case 30: 
      var $112=$centroid;
      STACKTOP = __stackBase__;
      return $112;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyhedron_centroid_3d"] = _polyhedron_centroid_3d;
function _tetrahedron_volume_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $a=__stackBase__;
      var $i;
      var $j;
      var $volume;
      $tetra_addr=$tetra;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $1=$j;
      var $cmp2=(($1)|(0)) < 4;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $2=$i;
      var $3=$j;
      var $mul=((($3)*(3))&-1);
      var $add=((($2)+($mul))|0);
      var $4=$tetra_addr;
      var $arrayidx=(($4+($add<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$j;
      var $mul4=($7<<2);
      var $add5=((($6)+($mul4))|0);
      var $arrayidx6=(($a+($add5<<3))|0);
      HEAPF64[(($arrayidx6)>>3)]=$5;
      label = 7; break;
    case 7: 
      var $8=$j;
      var $inc=((($8)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $9=$i;
      var $inc8=((($9)+(1))|0);
      $i=$inc8;
      label = 3; break;
    case 10: 
      $i=3;
      $j=0;
      label = 11; break;
    case 11: 
      var $10=$j;
      var $cmp11=(($10)|(0)) < 4;
      if ($cmp11) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $11=$i;
      var $12=$j;
      var $mul13=($12<<2);
      var $add14=((($11)+($mul13))|0);
      var $arrayidx15=(($a+($add14<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=1;
      label = 13; break;
    case 13: 
      var $13=$j;
      var $inc17=((($13)+(1))|0);
      $j=$inc17;
      label = 11; break;
    case 14: 
      var $arraydecay=(($a)|0);
      var $call=_r8mat_det_4d($arraydecay);
      var $call19=_r8_abs($call);
      var $div=($call19)/(6);
      $volume=$div;
      var $14=$volume;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_volume_3d"] = _tetrahedron_volume_3d;
function _tetrahedron_centroid_3d($tetra) {
  var label = 0;
  var $tetra_addr;
  var $centroid;
  $tetra_addr=$tetra;
  var $call=_malloc(24);
  var $0=$call;
  $centroid=$0;
  var $1=$tetra_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$tetra_addr;
  var $arrayidx1=(($3+24)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $add=($2)+($4);
  var $5=$tetra_addr;
  var $arrayidx2=(($5+48)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $add3=($add)+($6);
  var $7=$tetra_addr;
  var $arrayidx4=(($7+72)|0);
  var $8=HEAPF64[(($arrayidx4)>>3)];
  var $add5=($add3)+($8);
  var $mul=($add5)*(0.25);
  var $9=$centroid;
  var $arrayidx6=(($9)|0);
  HEAPF64[(($arrayidx6)>>3)]=$mul;
  var $10=$tetra_addr;
  var $arrayidx7=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx7)>>3)];
  var $12=$tetra_addr;
  var $arrayidx8=(($12+32)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $add9=($11)+($13);
  var $14=$tetra_addr;
  var $arrayidx10=(($14+56)|0);
  var $15=HEAPF64[(($arrayidx10)>>3)];
  var $add11=($add9)+($15);
  var $16=$tetra_addr;
  var $arrayidx12=(($16+80)|0);
  var $17=HEAPF64[(($arrayidx12)>>3)];
  var $add13=($add11)+($17);
  var $mul14=($add13)*(0.25);
  var $18=$centroid;
  var $arrayidx15=(($18+8)|0);
  HEAPF64[(($arrayidx15)>>3)]=$mul14;
  var $19=$tetra_addr;
  var $arrayidx16=(($19+16)|0);
  var $20=HEAPF64[(($arrayidx16)>>3)];
  var $21=$tetra_addr;
  var $arrayidx17=(($21+40)|0);
  var $22=HEAPF64[(($arrayidx17)>>3)];
  var $add18=($20)+($22);
  var $23=$tetra_addr;
  var $arrayidx19=(($23+64)|0);
  var $24=HEAPF64[(($arrayidx19)>>3)];
  var $add20=($add18)+($24);
  var $25=$tetra_addr;
  var $arrayidx21=(($25+88)|0);
  var $26=HEAPF64[(($arrayidx21)>>3)];
  var $add22=($add20)+($26);
  var $mul23=($add22)*(0.25);
  var $27=$centroid;
  var $arrayidx24=(($27+16)|0);
  HEAPF64[(($arrayidx24)>>3)]=$mul23;
  var $28=$centroid;
  return $28;
}
Module["_tetrahedron_centroid_3d"] = _tetrahedron_centroid_3d;
function _polyhedron_contains_point_3d($node_num, $face_num, $face_order_max, $v, $face_order, $face_point, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $node_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $v_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $p_addr;
      var $area;
      var $face;
      var $i;
      var $inside;
      var $k;
      var $node;
      var $node_num_face;
      var $pi;
      var $v_face;
      $node_num_addr=$node_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $v_addr=$v;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      $p_addr=$p;
      $pi=3.141592653589793;
      var $0=$face_order_max_addr;
      var $mul=((($0)*(3))&-1);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $1=$call;
      $v_face=$1;
      $area=0;
      $face=0;
      label = 3; break;
    case 3: 
      var $2=$face;
      var $3=$face_num_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $4=$face;
      var $5=$face_order_addr;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $node_num_face=$6;
      $k=0;
      label = 5; break;
    case 5: 
      var $7=$k;
      var $8=$node_num_face;
      var $cmp3=(($7)|(0)) < (($8)|(0));
      if ($cmp3) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $9=$k;
      var $10=$face;
      var $11=$face_order_max_addr;
      var $mul5=(Math.imul($10,$11)|0);
      var $add=((($9)+($mul5))|0);
      var $12=$face_point_addr;
      var $arrayidx6=(($12+($add<<2))|0);
      var $13=HEAP32[(($arrayidx6)>>2)];
      $node=$13;
      $i=0;
      label = 7; break;
    case 7: 
      var $14=$i;
      var $cmp8=(($14)|(0)) < 3;
      if ($cmp8) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $15=$i;
      var $16=$node;
      var $sub=((($16)-(1))|0);
      var $mul10=((($sub)*(3))&-1);
      var $add11=((($15)+($mul10))|0);
      var $17=$v_addr;
      var $arrayidx12=(($17+($add11<<3))|0);
      var $18=HEAPF64[(($arrayidx12)>>3)];
      var $19=$i;
      var $20=$k;
      var $mul13=((($20)*(3))&-1);
      var $add14=((($19)+($mul13))|0);
      var $21=$v_face;
      var $arrayidx15=(($21+($add14<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=$18;
      label = 9; break;
    case 9: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $23=$k;
      var $inc17=((($23)+(1))|0);
      $k=$inc17;
      label = 5; break;
    case 12: 
      var $24=$area;
      var $25=$node_num_face;
      var $26=$v_face;
      var $27=$p_addr;
      var $call19=_polygon_solid_angle_3d($25, $26, $27);
      var $add20=($24)+($call19);
      $area=$add20;
      label = 13; break;
    case 13: 
      var $28=$face;
      var $inc22=((($28)+(1))|0);
      $face=$inc22;
      label = 3; break;
    case 14: 
      var $29=$area;
      var $30=$pi;
      var $mul24=($30)*(-2);
      var $cmp25=$29 < $mul24;
      if ($cmp25) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $31=$pi;
      var $mul26=($31)*(2);
      var $32=$area;
      var $cmp27=$mul26 < $32;
      if ($cmp27) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $inside=1;
      label = 18; break;
    case 17: 
      $inside=0;
      label = 18; break;
    case 18: 
      var $33=$v_face;
      var $34=$33;
      _free($34);
      var $35=$inside;
      return $35;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyhedron_contains_point_3d"] = _polyhedron_contains_point_3d;
function _polyhedron_volume_3d_2($coord, $order_max, $face_num, $node, $node_num, $order) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $coord_addr;
      var $order_max_addr;
      var $face_num_addr;
      var $node_addr;
      var $node_num_addr;
      var $order_addr;
      var $face;
      var $j;
      var $k;
      var $volume;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(24);
      var $v3;
      var $v4=(__stackBase__)+(48);
      $coord_addr=$coord;
      $order_max_addr=$order_max;
      $face_num_addr=$face_num;
      $node_addr=$node;
      $node_num_addr=$node_num;
      $order_addr=$order;
      $volume=0;
      $face=0;
      label = 3; break;
    case 3: 
      var $0=$face;
      var $1=$face_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $arraydecay=(($v4)|0);
      _r8vec_zero(3, $arraydecay);
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $3=$face;
      var $4=$order_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $cmp2=(($2)|(0)) < (($5)|(0));
      if ($cmp2) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $6=$j;
      var $7=$face;
      var $8=$order_max_addr;
      var $mul=(Math.imul($7,$8)|0);
      var $add=((($6)+($mul))|0);
      var $9=$node_addr;
      var $arrayidx4=(($9+($add<<2))|0);
      var $10=HEAP32[(($arrayidx4)>>2)];
      $k=$10;
      var $11=$k;
      var $mul5=((($11)*(3))&-1);
      var $add6=(($mul5)|0);
      var $12=$coord_addr;
      var $arrayidx7=(($12+($add6<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $arrayidx8=(($v1)|0);
      HEAPF64[(($arrayidx8)>>3)]=$13;
      var $14=$k;
      var $mul9=((($14)*(3))&-1);
      var $add10=((($mul9)+(1))|0);
      var $15=$coord_addr;
      var $arrayidx11=(($15+($add10<<3))|0);
      var $16=HEAPF64[(($arrayidx11)>>3)];
      var $arrayidx12=(($v1+8)|0);
      HEAPF64[(($arrayidx12)>>3)]=$16;
      var $17=$k;
      var $mul13=((($17)*(3))&-1);
      var $add14=((($mul13)+(2))|0);
      var $18=$coord_addr;
      var $arrayidx15=(($18+($add14<<3))|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $arrayidx16=(($v1+16)|0);
      HEAPF64[(($arrayidx16)>>3)]=$19;
      var $20=$j;
      var $add17=((($20)+(1))|0);
      var $21=$face;
      var $22=$order_addr;
      var $arrayidx18=(($22+($21<<2))|0);
      var $23=HEAP32[(($arrayidx18)>>2)];
      var $cmp19=(($add17)|(0)) < (($23)|(0));
      if ($cmp19) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$j;
      var $add20=((($24)+(1))|0);
      var $25=$face;
      var $26=$order_max_addr;
      var $mul21=(Math.imul($25,$26)|0);
      var $add22=((($add20)+($mul21))|0);
      var $27=$node_addr;
      var $arrayidx23=(($27+($add22<<2))|0);
      var $28=HEAP32[(($arrayidx23)>>2)];
      $k=$28;
      label = 9; break;
    case 8: 
      var $29=$face;
      var $30=$order_max_addr;
      var $mul24=(Math.imul($29,$30)|0);
      var $add25=(($mul24)|0);
      var $31=$node_addr;
      var $arrayidx26=(($31+($add25<<2))|0);
      var $32=HEAP32[(($arrayidx26)>>2)];
      $k=$32;
      label = 9; break;
    case 9: 
      var $33=$k;
      var $mul27=((($33)*(3))&-1);
      var $add28=(($mul27)|0);
      var $34=$coord_addr;
      var $arrayidx29=(($34+($add28<<3))|0);
      var $35=HEAPF64[(($arrayidx29)>>3)];
      var $arrayidx30=(($v2)|0);
      HEAPF64[(($arrayidx30)>>3)]=$35;
      var $36=$k;
      var $mul31=((($36)*(3))&-1);
      var $add32=((($mul31)+(1))|0);
      var $37=$coord_addr;
      var $arrayidx33=(($37+($add32<<3))|0);
      var $38=HEAPF64[(($arrayidx33)>>3)];
      var $arrayidx34=(($v2+8)|0);
      HEAPF64[(($arrayidx34)>>3)]=$38;
      var $39=$k;
      var $mul35=((($39)*(3))&-1);
      var $add36=((($mul35)+(2))|0);
      var $40=$coord_addr;
      var $arrayidx37=(($40+($add36<<3))|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($v2+16)|0);
      HEAPF64[(($arrayidx38)>>3)]=$41;
      var $arraydecay39=(($v1)|0);
      var $arraydecay40=(($v2)|0);
      var $call=_r8vec_cross_product_3d($arraydecay39, $arraydecay40);
      $v3=$call;
      var $arrayidx41=(($v4)|0);
      var $42=HEAPF64[(($arrayidx41)>>3)];
      var $43=$v3;
      var $arrayidx42=(($43)|0);
      var $44=HEAPF64[(($arrayidx42)>>3)];
      var $add43=($42)+($44);
      var $arrayidx44=(($v4)|0);
      HEAPF64[(($arrayidx44)>>3)]=$add43;
      var $arrayidx45=(($v4+8)|0);
      var $45=HEAPF64[(($arrayidx45)>>3)];
      var $46=$v3;
      var $arrayidx46=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx46)>>3)];
      var $add47=($45)+($47);
      var $arrayidx48=(($v4+8)|0);
      HEAPF64[(($arrayidx48)>>3)]=$add47;
      var $arrayidx49=(($v4+16)|0);
      var $48=HEAPF64[(($arrayidx49)>>3)];
      var $49=$v3;
      var $arrayidx50=(($49+16)|0);
      var $50=HEAPF64[(($arrayidx50)>>3)];
      var $add51=($48)+($50);
      var $arrayidx52=(($v4+16)|0);
      HEAPF64[(($arrayidx52)>>3)]=$add51;
      var $51=$v3;
      var $52=$51;
      _free($52);
      label = 10; break;
    case 10: 
      var $53=$j;
      var $inc=((($53)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 11: 
      var $54=$face;
      var $55=$order_max_addr;
      var $mul53=(Math.imul($54,$55)|0);
      var $add54=(($mul53)|0);
      var $56=$node_addr;
      var $arrayidx55=(($56+($add54<<2))|0);
      var $57=HEAP32[(($arrayidx55)>>2)];
      $k=$57;
      var $58=$volume;
      var $arrayidx56=(($v4)|0);
      var $59=HEAPF64[(($arrayidx56)>>3)];
      var $60=$k;
      var $mul57=((($60)*(3))&-1);
      var $add58=(($mul57)|0);
      var $61=$coord_addr;
      var $arrayidx59=(($61+($add58<<3))|0);
      var $62=HEAPF64[(($arrayidx59)>>3)];
      var $mul60=($59)*($62);
      var $add61=($58)+($mul60);
      var $arrayidx62=(($v4+8)|0);
      var $63=HEAPF64[(($arrayidx62)>>3)];
      var $64=$k;
      var $mul63=((($64)*(3))&-1);
      var $add64=((($mul63)+(1))|0);
      var $65=$coord_addr;
      var $arrayidx65=(($65+($add64<<3))|0);
      var $66=HEAPF64[(($arrayidx65)>>3)];
      var $mul66=($63)*($66);
      var $add67=($add61)+($mul66);
      var $arrayidx68=(($v4+16)|0);
      var $67=HEAPF64[(($arrayidx68)>>3)];
      var $68=$k;
      var $mul69=((($68)*(3))&-1);
      var $add70=((($mul69)+(2))|0);
      var $69=$coord_addr;
      var $arrayidx71=(($69+($add70<<3))|0);
      var $70=HEAPF64[(($arrayidx71)>>3)];
      var $mul72=($67)*($70);
      var $add73=($add67)+($mul72);
      $volume=$add73;
      label = 12; break;
    case 12: 
      var $71=$face;
      var $inc75=((($71)+(1))|0);
      $face=$inc75;
      label = 3; break;
    case 13: 
      var $72=$volume;
      var $div=($72)/(6);
      $volume=$div;
      var $73=$volume;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyhedron_volume_3d_2"] = _polyhedron_volume_3d_2;
function _polyline_arclength_nd($dim_num, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $n_addr;
      var $p_addr;
      var $i;
      var $j;
      var $s;
      var $temp;
      $dim_num_addr=$dim_num;
      $n_addr=$n;
      $p_addr=$p;
      var $0=$n_addr;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $s=$1;
      var $2=$s;
      var $arrayidx=(($2)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $j=1;
      label = 3; break;
    case 3: 
      var $3=$j;
      var $4=$n_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $temp=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $6=$dim_num_addr;
      var $cmp2=(($5)|(0)) < (($6)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$temp;
      var $8=$i;
      var $9=$j;
      var $10=$dim_num_addr;
      var $mul4=(Math.imul($9,$10)|0);
      var $add=((($8)+($mul4))|0);
      var $11=$p_addr;
      var $arrayidx5=(($11+($add<<3))|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $13=$i;
      var $14=$j;
      var $sub=((($14)-(1))|0);
      var $15=$dim_num_addr;
      var $mul6=(Math.imul($sub,$15)|0);
      var $add7=((($13)+($mul6))|0);
      var $16=$p_addr;
      var $arrayidx8=(($16+($add7<<3))|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($12)-($17);
      var $18=Math.pow($sub9, 2);
      var $add10=($7)+($18);
      $temp=$add10;
      label = 7; break;
    case 7: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $20=$temp;
      var $call11=Math.sqrt($20);
      $temp=$call11;
      var $21=$j;
      var $sub12=((($21)-(1))|0);
      var $22=$s;
      var $arrayidx13=(($22+($sub12<<3))|0);
      var $23=HEAPF64[(($arrayidx13)>>3)];
      var $24=$temp;
      var $add14=($23)+($24);
      var $25=$j;
      var $26=$s;
      var $arrayidx15=(($26+($25<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=$add14;
      label = 9; break;
    case 9: 
      var $27=$j;
      var $inc17=((($27)+(1))|0);
      $j=$inc17;
      label = 3; break;
    case 10: 
      var $28=$s;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyline_arclength_nd"] = _polyline_arclength_nd;
function _polyline_length_nd($dim_num, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $n_addr;
      var $p_addr;
      var $i;
      var $j;
      var $length;
      var $step;
      $dim_num_addr=$dim_num;
      $n_addr=$n;
      $p_addr=$p;
      $length=0;
      $j=1;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $step=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$dim_num_addr;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$step;
      var $5=$i;
      var $6=$j;
      var $7=$dim_num_addr;
      var $mul=(Math.imul($6,$7)|0);
      var $add=((($5)+($mul))|0);
      var $8=$p_addr;
      var $arrayidx=(($8+($add<<3))|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$i;
      var $11=$j;
      var $sub=((($11)-(1))|0);
      var $12=$dim_num_addr;
      var $mul4=(Math.imul($sub,$12)|0);
      var $add5=((($10)+($mul4))|0);
      var $13=$p_addr;
      var $arrayidx6=(($13+($add5<<3))|0);
      var $14=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($14);
      var $15=$i;
      var $16=$j;
      var $17=$dim_num_addr;
      var $mul8=(Math.imul($16,$17)|0);
      var $add9=((($15)+($mul8))|0);
      var $18=$p_addr;
      var $arrayidx10=(($18+($add9<<3))|0);
      var $19=HEAPF64[(($arrayidx10)>>3)];
      var $20=$i;
      var $21=$j;
      var $sub11=((($21)-(1))|0);
      var $22=$dim_num_addr;
      var $mul12=(Math.imul($sub11,$22)|0);
      var $add13=((($20)+($mul12))|0);
      var $23=$p_addr;
      var $arrayidx14=(($23+($add13<<3))|0);
      var $24=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($19)-($24);
      var $mul16=($sub7)*($sub15);
      var $add17=($4)+($mul16);
      $step=$add17;
      label = 7; break;
    case 7: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $26=$length;
      var $27=$step;
      var $call=Math.sqrt($27);
      var $add18=($26)+($call);
      $length=$add18;
      label = 9; break;
    case 9: 
      var $28=$j;
      var $inc20=((($28)+(1))|0);
      $j=$inc20;
      label = 3; break;
    case 10: 
      var $29=$length;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyline_length_nd"] = _polyline_length_nd;
function _polyline_points_nd($dim_num, $n, $p, $nt) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $n_addr;
      var $p_addr;
      var $nt_addr;
      var $i;
      var $it;
      var $j;
      var $pt;
      var $s;
      var $st;
      $dim_num_addr=$dim_num;
      $n_addr=$n;
      $p_addr=$p;
      $nt_addr=$nt;
      var $0=$dim_num_addr;
      var $1=$nt_addr;
      var $mul=(Math.imul($0,$1)|0);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $2=$call;
      $pt=$2;
      var $3=$dim_num_addr;
      var $4=$n_addr;
      var $5=$p_addr;
      var $call2=_polyline_arclength_nd($3, $4, $5);
      $s=$call2;
      $j=1;
      $it=1;
      label = 3; break;
    case 3: 
      var $6=$it;
      var $7=$nt_addr;
      var $cmp=(($6)|(0)) <= (($7)|(0));
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $8=$nt_addr;
      var $9=$it;
      var $sub=((($8)-($9))|0);
      var $conv=(($sub)|(0));
      var $mul3=0;
      var $10=$it;
      var $sub4=((($10)-(1))|0);
      var $conv5=(($sub4)|(0));
      var $11=$n_addr;
      var $sub6=((($11)-(1))|0);
      var $12=$s;
      var $arrayidx=(($12+($sub6<<3))|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $mul7=($conv5)*($13);
      var $add=($mul3)+($mul7);
      var $14=$nt_addr;
      var $sub8=((($14)-(1))|0);
      var $conv9=(($sub8)|(0));
      var $div=($add)/($conv9);
      $st=$div;
      label = 5; break;
    case 5: 
      var $15=$j;
      var $sub11=((($15)-(1))|0);
      var $16=$s;
      var $arrayidx12=(($16+($sub11<<3))|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $18=$st;
      var $cmp13=$17 <= $18;
      if ($cmp13) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $19=$st;
      var $20=$j;
      var $21=$s;
      var $arrayidx15=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx15)>>3)];
      var $cmp16=$19 <= $22;
      if ($cmp16) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $23=$n_addr;
      var $sub18=((($23)-(1))|0);
      var $24=$j;
      var $cmp19=(($sub18)|(0)) <= (($24)|(0));
      if ($cmp19) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $25=$j;
      var $add23=((($25)+(1))|0);
      $j=$add23;
      label = 5; break;
    case 11: 
      $i=0;
      label = 12; break;
    case 12: 
      var $26=$i;
      var $27=$dim_num_addr;
      var $cmp25=(($26)|(0)) < (($27)|(0));
      if ($cmp25) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $28=$j;
      var $29=$s;
      var $arrayidx28=(($29+($28<<3))|0);
      var $30=HEAPF64[(($arrayidx28)>>3)];
      var $31=$st;
      var $sub29=($30)-($31);
      var $32=$i;
      var $33=$j;
      var $sub30=((($33)-(1))|0);
      var $34=$dim_num_addr;
      var $mul31=(Math.imul($sub30,$34)|0);
      var $add32=((($32)+($mul31))|0);
      var $35=$p_addr;
      var $arrayidx33=(($35+($add32<<3))|0);
      var $36=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($sub29)*($36);
      var $37=$st;
      var $38=$j;
      var $sub35=((($38)-(1))|0);
      var $39=$s;
      var $arrayidx36=(($39+($sub35<<3))|0);
      var $40=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($37)-($40);
      var $41=$i;
      var $42=$j;
      var $43=$dim_num_addr;
      var $mul38=(Math.imul($42,$43)|0);
      var $add39=((($41)+($mul38))|0);
      var $44=$p_addr;
      var $arrayidx40=(($44+($add39<<3))|0);
      var $45=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($sub37)*($45);
      var $add42=($mul34)+($mul41);
      var $46=$j;
      var $47=$s;
      var $arrayidx43=(($47+($46<<3))|0);
      var $48=HEAPF64[(($arrayidx43)>>3)];
      var $49=$j;
      var $sub44=((($49)-(1))|0);
      var $50=$s;
      var $arrayidx45=(($50+($sub44<<3))|0);
      var $51=HEAPF64[(($arrayidx45)>>3)];
      var $sub46=($48)-($51);
      var $div47=($add42)/($sub46);
      var $52=$i;
      var $53=$it;
      var $sub48=((($53)-(1))|0);
      var $54=$dim_num_addr;
      var $mul49=(Math.imul($sub48,$54)|0);
      var $add50=((($52)+($mul49))|0);
      var $55=$pt;
      var $arrayidx51=(($55+($add50<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$div47;
      label = 14; break;
    case 14: 
      var $56=$i;
      var $inc=((($56)+(1))|0);
      $i=$inc;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $57=$it;
      var $inc54=((($57)+(1))|0);
      $it=$inc54;
      label = 3; break;
    case 17: 
      var $58=$s;
      var $59=$58;
      _free($59);
      var $60=$pt;
      return $60;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyline_points_nd"] = _polyline_points_nd;
function _polyloop_arclength_nd($dim_num, $nk, $pk) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $nk_addr;
      var $pk_addr;
      var $i;
      var $j;
      var $j2;
      var $sk;
      var $temp;
      $dim_num_addr=$dim_num;
      $nk_addr=$nk;
      $pk_addr=$pk;
      var $0=$nk_addr;
      var $add=((($0)+(1))|0);
      var $mul=($add<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $sk=$1;
      var $2=$sk;
      var $arrayidx=(($2)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $j=1;
      label = 3; break;
    case 3: 
      var $3=$j;
      var $4=$nk_addr;
      var $cmp=(($3)|(0)) <= (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $5=$j;
      var $6=$nk_addr;
      var $cmp1=(($5)|(0))==(($6)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $j2=0;
      label = 7; break;
    case 6: 
      var $7=$j;
      $j2=$7;
      label = 7; break;
    case 7: 
      $temp=0;
      $i=0;
      label = 8; break;
    case 8: 
      var $8=$i;
      var $9=$dim_num_addr;
      var $cmp3=(($8)|(0)) < (($9)|(0));
      if ($cmp3) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $10=$temp;
      var $11=$i;
      var $12=$j2;
      var $13=$dim_num_addr;
      var $mul5=(Math.imul($12,$13)|0);
      var $add6=((($11)+($mul5))|0);
      var $14=$pk_addr;
      var $arrayidx7=(($14+($add6<<3))|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $16=$i;
      var $17=$j;
      var $sub=((($17)-(1))|0);
      var $18=$dim_num_addr;
      var $mul8=(Math.imul($sub,$18)|0);
      var $add9=((($16)+($mul8))|0);
      var $19=$pk_addr;
      var $arrayidx10=(($19+($add9<<3))|0);
      var $20=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($15)-($20);
      var $21=Math.pow($sub11, 2);
      var $add12=($10)+($21);
      $temp=$add12;
      label = 10; break;
    case 10: 
      var $22=$i;
      var $inc=((($22)+(1))|0);
      $i=$inc;
      label = 8; break;
    case 11: 
      var $23=$j;
      var $sub13=((($23)-(1))|0);
      var $24=$sk;
      var $arrayidx14=(($24+($sub13<<3))|0);
      var $25=HEAPF64[(($arrayidx14)>>3)];
      var $26=$temp;
      var $call15=Math.sqrt($26);
      var $add16=($25)+($call15);
      var $27=$j;
      var $28=$sk;
      var $arrayidx17=(($28+($27<<3))|0);
      HEAPF64[(($arrayidx17)>>3)]=$add16;
      label = 12; break;
    case 12: 
      var $29=$j;
      var $inc19=((($29)+(1))|0);
      $j=$inc19;
      label = 3; break;
    case 13: 
      var $30=$sk;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyloop_arclength_nd"] = _polyloop_arclength_nd;
function _polyline_index_point_nd($dim_num, $n, $p, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $n_addr;
      var $p_addr;
      var $t_addr;
      var $i;
      var $j;
      var $s;
      var $temp;
      var $tleft;
      var $trite;
      var $pt;
      $dim_num_addr=$dim_num;
      $n_addr=$n;
      $p_addr=$p;
      $t_addr=$t;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((14552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $6=$dim_num_addr;
      var $mul=($6<<3);
      var $call4=_malloc($mul);
      var $7=$call4;
      $pt=$7;
      var $8=$n_addr;
      var $cmp5=(($8)|(0))==1;
      if ($cmp5) { label = 5; break; } else { label = 10; break; }
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $9=$i;
      var $10=$dim_num_addr;
      var $cmp7=(($9)|(0)) < (($10)|(0));
      if ($cmp7) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $11=$i;
      var $12=$dim_num_addr;
      var $mul8=0;
      var $add=((($11)+($mul8))|0);
      var $13=$p_addr;
      var $arrayidx=(($13+($add<<3))|0);
      var $14=HEAPF64[(($arrayidx)>>3)];
      var $15=$i;
      var $16=$pt;
      var $arrayidx9=(($16+($15<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$14;
      label = 8; break;
    case 8: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 6; break;
    case 9: 
      label = 26; break;
    case 10: 
      $trite=0;
      $i=1;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $19=$n_addr;
      var $sub=((($19)-(1))|0);
      var $cmp11=(($18)|(0)) <= (($sub)|(0));
      if ($cmp11) { label = 12; break; } else { label = 25; break; }
    case 12: 
      var $20=$trite;
      $tleft=$20;
      $temp=0;
      $j=0;
      label = 13; break;
    case 13: 
      var $21=$j;
      var $22=$dim_num_addr;
      var $cmp14=(($21)|(0)) < (($22)|(0));
      if ($cmp14) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $23=$temp;
      var $24=$j;
      var $25=$i;
      var $26=$dim_num_addr;
      var $mul16=(Math.imul($25,$26)|0);
      var $add17=((($24)+($mul16))|0);
      var $27=$p_addr;
      var $arrayidx18=(($27+($add17<<3))|0);
      var $28=HEAPF64[(($arrayidx18)>>3)];
      var $29=$j;
      var $30=$i;
      var $sub19=((($30)-(1))|0);
      var $31=$dim_num_addr;
      var $mul20=(Math.imul($sub19,$31)|0);
      var $add21=((($29)+($mul20))|0);
      var $32=$p_addr;
      var $arrayidx22=(($32+($add21<<3))|0);
      var $33=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($28)-($33);
      var $34=$j;
      var $35=$i;
      var $36=$dim_num_addr;
      var $mul24=(Math.imul($35,$36)|0);
      var $add25=((($34)+($mul24))|0);
      var $37=$p_addr;
      var $arrayidx26=(($37+($add25<<3))|0);
      var $38=HEAPF64[(($arrayidx26)>>3)];
      var $39=$j;
      var $40=$i;
      var $sub27=((($40)-(1))|0);
      var $41=$dim_num_addr;
      var $mul28=(Math.imul($sub27,$41)|0);
      var $add29=((($39)+($mul28))|0);
      var $42=$p_addr;
      var $arrayidx30=(($42+($add29<<3))|0);
      var $43=HEAPF64[(($arrayidx30)>>3)];
      var $sub31=($38)-($43);
      var $mul32=($sub23)*($sub31);
      var $add33=($23)+($mul32);
      $temp=$add33;
      label = 15; break;
    case 15: 
      var $44=$j;
      var $inc35=((($44)+(1))|0);
      $j=$inc35;
      label = 13; break;
    case 16: 
      var $45=$trite;
      var $46=$temp;
      var $call37=Math.sqrt($46);
      var $add38=($45)+($call37);
      $trite=$add38;
      var $47=$t_addr;
      var $48=$trite;
      var $cmp39=$47 <= $48;
      if ($cmp39) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $49=$i;
      var $50=$n_addr;
      var $sub40=((($50)-(1))|0);
      var $cmp41=(($49)|(0))==(($sub40)|(0));
      if ($cmp41) { label = 18; break; } else { label = 23; break; }
    case 18: 
      var $51=$t_addr;
      var $52=$tleft;
      var $sub43=($51)-($52);
      var $53=$trite;
      var $54=$tleft;
      var $sub44=($53)-($54);
      var $div=($sub43)/($sub44);
      $s=$div;
      $j=0;
      label = 19; break;
    case 19: 
      var $55=$j;
      var $56=$dim_num_addr;
      var $cmp46=(($55)|(0)) < (($56)|(0));
      if ($cmp46) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $57=$s;
      var $sub48=(1)-($57);
      var $58=$j;
      var $59=$i;
      var $sub49=((($59)-(1))|0);
      var $60=$dim_num_addr;
      var $mul50=(Math.imul($sub49,$60)|0);
      var $add51=((($58)+($mul50))|0);
      var $61=$p_addr;
      var $arrayidx52=(($61+($add51<<3))|0);
      var $62=HEAPF64[(($arrayidx52)>>3)];
      var $mul53=($sub48)*($62);
      var $63=$s;
      var $64=$j;
      var $65=$i;
      var $66=$dim_num_addr;
      var $mul54=(Math.imul($65,$66)|0);
      var $add55=((($64)+($mul54))|0);
      var $67=$p_addr;
      var $arrayidx56=(($67+($add55<<3))|0);
      var $68=HEAPF64[(($arrayidx56)>>3)];
      var $mul57=($63)*($68);
      var $add58=($mul53)+($mul57);
      var $69=$j;
      var $70=$pt;
      var $arrayidx59=(($70+($69<<3))|0);
      HEAPF64[(($arrayidx59)>>3)]=$add58;
      label = 21; break;
    case 21: 
      var $71=$j;
      var $inc61=((($71)+(1))|0);
      $j=$inc61;
      label = 19; break;
    case 22: 
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $72=$i;
      var $inc65=((($72)+(1))|0);
      $i=$inc65;
      label = 11; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $73=$pt;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyline_index_point_nd"] = _polyline_index_point_nd;
function _pyramid_volume_3d($h, $s) {
  var label = 0;
  var $h_addr;
  var $s_addr;
  var $value;
  $h_addr=$h;
  $s_addr=$s;
  var $0=$s_addr;
  var $1=$s_addr;
  var $mul=($0)*($1);
  var $2=$h_addr;
  var $mul1=($mul)*($2);
  var $div=($mul1)/(3);
  $value=$div;
  var $3=$value;
  return $3;
}
Module["_pyramid_volume_3d"] = _pyramid_volume_3d;
function _polyloop_points_nd($dim_num, $nk, $pk, $nt) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $nk_addr;
      var $pk_addr;
      var $nt_addr;
      var $i;
      var $it;
      var $j;
      var $jp1;
      var $pt;
      var $sk;
      var $st;
      $dim_num_addr=$dim_num;
      $nk_addr=$nk;
      $pk_addr=$pk;
      $nt_addr=$nt;
      var $0=$dim_num_addr;
      var $1=$nt_addr;
      var $mul=(Math.imul($0,$1)|0);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $2=$call;
      $pt=$2;
      var $3=$dim_num_addr;
      var $4=$nk_addr;
      var $5=$pk_addr;
      var $call2=_polyloop_arclength_nd($3, $4, $5);
      $sk=$call2;
      $j=1;
      $it=1;
      label = 3; break;
    case 3: 
      var $6=$it;
      var $7=$nt_addr;
      var $cmp=(($6)|(0)) <= (($7)|(0));
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      var $8=$nt_addr;
      var $9=$it;
      var $sub=((($8)-($9))|0);
      var $conv=(($sub)|(0));
      var $mul3=0;
      var $10=$it;
      var $sub4=((($10)-(1))|0);
      var $conv5=(($sub4)|(0));
      var $11=$nk_addr;
      var $12=$sk;
      var $arrayidx=(($12+($11<<3))|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $mul6=($conv5)*($13);
      var $add=($mul3)+($mul6);
      var $14=$nt_addr;
      var $sub7=((($14)-(1))|0);
      var $conv8=(($sub7)|(0));
      var $div=($add)/($conv8);
      $st=$div;
      label = 5; break;
    case 5: 
      var $15=$j;
      var $sub10=((($15)-(1))|0);
      var $16=$sk;
      var $arrayidx11=(($16+($sub10<<3))|0);
      var $17=HEAPF64[(($arrayidx11)>>3)];
      var $18=$st;
      var $cmp12=$17 <= $18;
      if ($cmp12) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $19=$st;
      var $20=$j;
      var $21=$sk;
      var $arrayidx14=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx14)>>3)];
      var $cmp15=$19 <= $22;
      if ($cmp15) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $23=$nk_addr;
      var $24=$j;
      var $cmp17=(($23)|(0)) <= (($24)|(0));
      if ($cmp17) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $25=$j;
      var $add21=((($25)+(1))|0);
      $j=$add21;
      label = 5; break;
    case 11: 
      var $26=$j;
      var $add22=((($26)+(1))|0);
      var $27=$nk_addr;
      var $call23=_i4_wrap($add22, 1, $27);
      $jp1=$call23;
      $i=0;
      label = 12; break;
    case 12: 
      var $28=$i;
      var $29=$dim_num_addr;
      var $cmp25=(($28)|(0)) < (($29)|(0));
      if ($cmp25) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $30=$j;
      var $31=$sk;
      var $arrayidx28=(($31+($30<<3))|0);
      var $32=HEAPF64[(($arrayidx28)>>3)];
      var $33=$st;
      var $sub29=($32)-($33);
      var $34=$i;
      var $35=$j;
      var $sub30=((($35)-(1))|0);
      var $36=$dim_num_addr;
      var $mul31=(Math.imul($sub30,$36)|0);
      var $add32=((($34)+($mul31))|0);
      var $37=$pk_addr;
      var $arrayidx33=(($37+($add32<<3))|0);
      var $38=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($sub29)*($38);
      var $39=$st;
      var $40=$j;
      var $sub35=((($40)-(1))|0);
      var $41=$sk;
      var $arrayidx36=(($41+($sub35<<3))|0);
      var $42=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($39)-($42);
      var $43=$i;
      var $44=$jp1;
      var $sub38=((($44)-(1))|0);
      var $45=$dim_num_addr;
      var $mul39=(Math.imul($sub38,$45)|0);
      var $add40=((($43)+($mul39))|0);
      var $46=$pk_addr;
      var $arrayidx41=(($46+($add40<<3))|0);
      var $47=HEAPF64[(($arrayidx41)>>3)];
      var $mul42=($sub37)*($47);
      var $add43=($mul34)+($mul42);
      var $48=$j;
      var $49=$sk;
      var $arrayidx44=(($49+($48<<3))|0);
      var $50=HEAPF64[(($arrayidx44)>>3)];
      var $51=$j;
      var $sub45=((($51)-(1))|0);
      var $52=$sk;
      var $arrayidx46=(($52+($sub45<<3))|0);
      var $53=HEAPF64[(($arrayidx46)>>3)];
      var $sub47=($50)-($53);
      var $div48=($add43)/($sub47);
      var $54=$i;
      var $55=$it;
      var $sub49=((($55)-(1))|0);
      var $56=$dim_num_addr;
      var $mul50=(Math.imul($sub49,$56)|0);
      var $add51=((($54)+($mul50))|0);
      var $57=$pt;
      var $arrayidx52=(($57+($add51<<3))|0);
      HEAPF64[(($arrayidx52)>>3)]=$div48;
      label = 14; break;
    case 14: 
      var $58=$i;
      var $inc=((($58)+(1))|0);
      $i=$inc;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $59=$it;
      var $inc55=((($59)+(1))|0);
      $it=$inc55;
      label = 3; break;
    case 17: 
      var $60=$sk;
      var $61=$60;
      _free($61);
      var $62=$pt;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
Module["_polyloop_points_nd"] = _polyloop_points_nd;
function _provec($m, $n, $base, $vecm, $vecn, $vecnm) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $base_addr;
      var $vecm_addr;
      var $vecn_addr;
      var $vecnm_addr;
      var $i;
      var $j;
      var $k;
      var $temp;
      $m_addr=$m;
      $n_addr=$n;
      $base_addr=$base;
      $vecm_addr=$vecm;
      $vecn_addr=$vecn;
      $vecnm_addr=$vecnm;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 24; break; }
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $2=$k;
      var $3=$j;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $4=$m_addr;
      var $5=$base_addr;
      var $6=$k;
      var $7=$m_addr;
      var $mul=(Math.imul($6,$7)|0);
      var $add_ptr=(($5+($mul<<3))|0);
      var $8=$base_addr;
      var $9=$j;
      var $10=$m_addr;
      var $mul4=(Math.imul($9,$10)|0);
      var $add_ptr5=(($8+($mul4<<3))|0);
      var $call=_r8vec_dot_product($4, $add_ptr, $add_ptr5);
      $temp=$call;
      $i=0;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $12=$m_addr;
      var $cmp7=(($11)|(0)) < (($12)|(0));
      if ($cmp7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $13=$i;
      var $14=$j;
      var $15=$m_addr;
      var $mul9=(Math.imul($14,$15)|0);
      var $add=((($13)+($mul9))|0);
      var $16=$base_addr;
      var $arrayidx=(($16+($add<<3))|0);
      var $17=HEAPF64[(($arrayidx)>>3)];
      var $18=$temp;
      var $19=$i;
      var $20=$k;
      var $21=$m_addr;
      var $mul10=(Math.imul($20,$21)|0);
      var $add11=((($19)+($mul10))|0);
      var $22=$base_addr;
      var $arrayidx12=(($22+($add11<<3))|0);
      var $23=HEAPF64[(($arrayidx12)>>3)];
      var $mul13=($18)*($23);
      var $sub=($17)-($mul13);
      var $24=$i;
      var $25=$j;
      var $26=$m_addr;
      var $mul14=(Math.imul($25,$26)|0);
      var $add15=((($24)+($mul14))|0);
      var $27=$base_addr;
      var $arrayidx16=(($27+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$sub;
      label = 9; break;
    case 9: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $29=$k;
      var $inc18=((($29)+(1))|0);
      $k=$inc18;
      label = 5; break;
    case 12: 
      $temp=0;
      $i=0;
      label = 13; break;
    case 13: 
      var $30=$i;
      var $31=$m_addr;
      var $cmp21=(($30)|(0)) < (($31)|(0));
      if ($cmp21) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $32=$temp;
      var $33=$i;
      var $34=$j;
      var $35=$m_addr;
      var $mul23=(Math.imul($34,$35)|0);
      var $add24=((($33)+($mul23))|0);
      var $36=$base_addr;
      var $arrayidx25=(($36+($add24<<3))|0);
      var $37=HEAPF64[(($arrayidx25)>>3)];
      var $38=Math.pow($37, 2);
      var $add26=($32)+($38);
      $temp=$add26;
      label = 15; break;
    case 15: 
      var $39=$i;
      var $inc28=((($39)+(1))|0);
      $i=$inc28;
      label = 13; break;
    case 16: 
      var $40=$temp;
      var $call30=Math.sqrt($40);
      $temp=$call30;
      var $41=$temp;
      var $cmp31=0 < $41;
      if ($cmp31) { label = 17; break; } else { label = 22; break; }
    case 17: 
      $i=0;
      label = 18; break;
    case 18: 
      var $42=$i;
      var $43=$m_addr;
      var $cmp33=(($42)|(0)) < (($43)|(0));
      if ($cmp33) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $44=$i;
      var $45=$j;
      var $46=$m_addr;
      var $mul35=(Math.imul($45,$46)|0);
      var $add36=((($44)+($mul35))|0);
      var $47=$base_addr;
      var $arrayidx37=(($47+($add36<<3))|0);
      var $48=HEAPF64[(($arrayidx37)>>3)];
      var $49=$temp;
      var $div=($48)/($49);
      var $50=$i;
      var $51=$j;
      var $52=$m_addr;
      var $mul38=(Math.imul($51,$52)|0);
      var $add39=((($50)+($mul38))|0);
      var $53=$base_addr;
      var $arrayidx40=(($53+($add39<<3))|0);
      HEAPF64[(($arrayidx40)>>3)]=$div;
      label = 20; break;
    case 20: 
      var $54=$i;
      var $inc42=((($54)+(1))|0);
      $i=$inc42;
      label = 18; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $55=$j;
      var $inc45=((($55)+(1))|0);
      $j=$inc45;
      label = 3; break;
    case 24: 
      $j=0;
      label = 25; break;
    case 25: 
      var $56=$j;
      var $57=$n_addr;
      var $cmp48=(($56)|(0)) < (($57)|(0));
      if ($cmp48) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $58=$m_addr;
      var $59=$vecm_addr;
      var $60=$base_addr;
      var $61=$j;
      var $62=$m_addr;
      var $mul50=(Math.imul($61,$62)|0);
      var $add_ptr51=(($60+($mul50<<3))|0);
      var $call52=_r8vec_dot_product($58, $59, $add_ptr51);
      var $63=$j;
      var $64=$vecn_addr;
      var $arrayidx53=(($64+($63<<3))|0);
      HEAPF64[(($arrayidx53)>>3)]=$call52;
      label = 27; break;
    case 27: 
      var $65=$j;
      var $inc55=((($65)+(1))|0);
      $j=$inc55;
      label = 25; break;
    case 28: 
      $i=0;
      label = 29; break;
    case 29: 
      var $66=$i;
      var $67=$m_addr;
      var $cmp58=(($66)|(0)) < (($67)|(0));
      if ($cmp58) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $68=$i;
      var $69=$vecnm_addr;
      var $arrayidx60=(($69+($68<<3))|0);
      HEAPF64[(($arrayidx60)>>3)]=0;
      $j=0;
      label = 31; break;
    case 31: 
      var $70=$j;
      var $71=$n_addr;
      var $cmp62=(($70)|(0)) < (($71)|(0));
      if ($cmp62) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $72=$i;
      var $73=$vecnm_addr;
      var $arrayidx64=(($73+($72<<3))|0);
      var $74=HEAPF64[(($arrayidx64)>>3)];
      var $75=$i;
      var $76=$j;
      var $77=$n_addr;
      var $mul65=(Math.imul($76,$77)|0);
      var $add66=((($75)+($mul65))|0);
      var $78=$base_addr;
      var $arrayidx67=(($78+($add66<<3))|0);
      var $79=HEAPF64[(($arrayidx67)>>3)];
      var $80=$j;
      var $81=$vecn_addr;
      var $arrayidx68=(($81+($80<<3))|0);
      var $82=HEAPF64[(($arrayidx68)>>3)];
      var $mul69=($79)*($82);
      var $add70=($74)+($mul69);
      var $83=$i;
      var $84=$vecnm_addr;
      var $arrayidx71=(($84+($83<<3))|0);
      HEAPF64[(($arrayidx71)>>3)]=$add70;
      label = 33; break;
    case 33: 
      var $85=$j;
      var $inc73=((($85)+(1))|0);
      $j=$inc73;
      label = 31; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $86=$i;
      var $inc76=((($86)+(1))|0);
      $i=$inc76;
      label = 29; break;
    case 36: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_provec"] = _provec;
function _quad_area_2d($q) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $q_addr;
  var $area;
  var $t=__stackBase__;
  $q_addr=$q;
  $area=0;
  var $0=$q_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $arrayidx1=(($t)|0);
  HEAPF64[(($arrayidx1)>>3)]=$1;
  var $2=$q_addr;
  var $arrayidx2=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx2)>>3)];
  var $arrayidx3=(($t+8)|0);
  HEAPF64[(($arrayidx3)>>3)]=$3;
  var $4=$q_addr;
  var $arrayidx4=(($4+16)|0);
  var $5=HEAPF64[(($arrayidx4)>>3)];
  var $arrayidx5=(($t+16)|0);
  HEAPF64[(($arrayidx5)>>3)]=$5;
  var $6=$q_addr;
  var $arrayidx6=(($6+24)|0);
  var $7=HEAPF64[(($arrayidx6)>>3)];
  var $arrayidx7=(($t+24)|0);
  HEAPF64[(($arrayidx7)>>3)]=$7;
  var $8=$q_addr;
  var $arrayidx8=(($8+32)|0);
  var $9=HEAPF64[(($arrayidx8)>>3)];
  var $arrayidx9=(($t+32)|0);
  HEAPF64[(($arrayidx9)>>3)]=$9;
  var $10=$q_addr;
  var $arrayidx10=(($10+40)|0);
  var $11=HEAPF64[(($arrayidx10)>>3)];
  var $arrayidx11=(($t+40)|0);
  HEAPF64[(($arrayidx11)>>3)]=$11;
  var $12=$area;
  var $arraydecay=(($t)|0);
  var $call=_triangle_area_2d($arraydecay);
  var $add=($12)+($call);
  $area=$add;
  var $13=$q_addr;
  var $arrayidx12=(($13+32)|0);
  var $14=HEAPF64[(($arrayidx12)>>3)];
  var $arrayidx13=(($t)|0);
  HEAPF64[(($arrayidx13)>>3)]=$14;
  var $15=$q_addr;
  var $arrayidx14=(($15+40)|0);
  var $16=HEAPF64[(($arrayidx14)>>3)];
  var $arrayidx15=(($t+8)|0);
  HEAPF64[(($arrayidx15)>>3)]=$16;
  var $17=$q_addr;
  var $arrayidx16=(($17+48)|0);
  var $18=HEAPF64[(($arrayidx16)>>3)];
  var $arrayidx17=(($t+16)|0);
  HEAPF64[(($arrayidx17)>>3)]=$18;
  var $19=$q_addr;
  var $arrayidx18=(($19+56)|0);
  var $20=HEAPF64[(($arrayidx18)>>3)];
  var $arrayidx19=(($t+24)|0);
  HEAPF64[(($arrayidx19)>>3)]=$20;
  var $21=$q_addr;
  var $arrayidx20=(($21)|0);
  var $22=HEAPF64[(($arrayidx20)>>3)];
  var $arrayidx21=(($t+32)|0);
  HEAPF64[(($arrayidx21)>>3)]=$22;
  var $23=$q_addr;
  var $arrayidx22=(($23+8)|0);
  var $24=HEAPF64[(($arrayidx22)>>3)];
  var $arrayidx23=(($t+40)|0);
  HEAPF64[(($arrayidx23)>>3)]=$24;
  var $25=$area;
  var $arraydecay24=(($t)|0);
  var $call25=_triangle_area_2d($arraydecay24);
  var $add26=($25)+($call25);
  $area=$add26;
  var $26=$area;
  STACKTOP = __stackBase__;
  return $26;
}
Module["_quad_area_2d"] = _quad_area_2d;
function _quad_area2_2d($q) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $area;
      var $i;
      var $j;
      var $p;
      $q_addr=$q;
      var $call=_malloc(64);
      var $0=$call;
      $p=$0;
      $j=0;
      label = 3; break;
    case 3: 
      var $1=$j;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp2=(($2)|(0)) < 2;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $3=$i;
      var $4=$j;
      var $mul=($4<<1);
      var $add=((($3)+($mul))|0);
      var $5=$q_addr;
      var $arrayidx=(($5+($add<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$i;
      var $8=$j;
      var $add4=((($8)+(1))|0);
      var $mul5=($add4<<1);
      var $add6=((($7)+($mul5))|0);
      var $9=$q_addr;
      var $arrayidx7=(($9+($add6<<3))|0);
      var $10=HEAPF64[(($arrayidx7)>>3)];
      var $add8=($6)+($10);
      var $div=($add8)/(2);
      var $11=$i;
      var $12=$j;
      var $mul9=($12<<1);
      var $add10=((($11)+($mul9))|0);
      var $13=$p;
      var $arrayidx11=(($13+($add10<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$div;
      label = 7; break;
    case 7: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $15=$j;
      var $inc13=((($15)+(1))|0);
      $j=$inc13;
      label = 3; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $16=$i;
      var $cmp16=(($16)|(0)) < 2;
      if ($cmp16) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $17=$i;
      var $add18=((($17)+(6))|0);
      var $18=$q_addr;
      var $arrayidx19=(($18+($add18<<3))|0);
      var $19=HEAPF64[(($arrayidx19)>>3)];
      var $20=$i;
      var $add20=(($20)|0);
      var $21=$q_addr;
      var $arrayidx21=(($21+($add20<<3))|0);
      var $22=HEAPF64[(($arrayidx21)>>3)];
      var $add22=($19)+($22);
      var $div23=($add22)/(2);
      var $23=$i;
      var $add24=((($23)+(6))|0);
      var $24=$p;
      var $arrayidx25=(($24+($add24<<3))|0);
      HEAPF64[(($arrayidx25)>>3)]=$div23;
      label = 13; break;
    case 13: 
      var $25=$i;
      var $inc27=((($25)+(1))|0);
      $i=$inc27;
      label = 11; break;
    case 14: 
      var $26=$p;
      var $call29=_parallelogram_area_2d($26);
      $area=$call29;
      var $27=$area;
      var $mul30=($27)*(2);
      $area=$mul30;
      var $28=$p;
      var $29=$28;
      _free($29);
      var $30=$area;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_area2_2d"] = _quad_area2_2d;
function _quad_contains_point_2d($q, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $q_addr;
      var $p_addr;
      $q_addr=$q;
      $p_addr=$p;
      var $0=$q_addr;
      var $add_ptr=(($0)|0);
      var $1=$q_addr;
      var $add_ptr1=(($1+16)|0);
      var $2=$q_addr;
      var $add_ptr2=(($2+32)|0);
      var $call=_anglei_rad_2d($add_ptr, $add_ptr1, $add_ptr2);
      var $3=$q_addr;
      var $add_ptr3=(($3)|0);
      var $4=$q_addr;
      var $add_ptr4=(($4+16)|0);
      var $5=$p_addr;
      var $call5=_anglei_rad_2d($add_ptr3, $add_ptr4, $5);
      var $cmp=$call < $call5;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 11; break;
    case 4: 
      var $6=$q_addr;
      var $add_ptr6=(($6+16)|0);
      var $7=$q_addr;
      var $add_ptr7=(($7+32)|0);
      var $8=$q_addr;
      var $add_ptr8=(($8+48)|0);
      var $call9=_anglei_rad_2d($add_ptr6, $add_ptr7, $add_ptr8);
      var $9=$q_addr;
      var $add_ptr10=(($9+16)|0);
      var $10=$q_addr;
      var $add_ptr11=(($10+32)|0);
      var $11=$p_addr;
      var $call12=_anglei_rad_2d($add_ptr10, $add_ptr11, $11);
      var $cmp13=$call9 < $call12;
      if ($cmp13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 11; break;
    case 6: 
      var $12=$q_addr;
      var $add_ptr16=(($12+32)|0);
      var $13=$q_addr;
      var $add_ptr17=(($13+48)|0);
      var $14=$q_addr;
      var $add_ptr18=(($14)|0);
      var $call19=_anglei_rad_2d($add_ptr16, $add_ptr17, $add_ptr18);
      var $15=$q_addr;
      var $add_ptr20=(($15+32)|0);
      var $16=$q_addr;
      var $add_ptr21=(($16+48)|0);
      var $17=$p_addr;
      var $call22=_anglei_rad_2d($add_ptr20, $add_ptr21, $17);
      var $cmp23=$call19 < $call22;
      if ($cmp23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 11; break;
    case 8: 
      var $18=$q_addr;
      var $add_ptr26=(($18+48)|0);
      var $19=$q_addr;
      var $add_ptr27=(($19)|0);
      var $20=$q_addr;
      var $add_ptr28=(($20+16)|0);
      var $call29=_anglei_rad_2d($add_ptr26, $add_ptr27, $add_ptr28);
      var $21=$q_addr;
      var $add_ptr30=(($21+48)|0);
      var $22=$q_addr;
      var $add_ptr31=(($22)|0);
      var $23=$p_addr;
      var $call32=_anglei_rad_2d($add_ptr30, $add_ptr31, $23);
      var $cmp33=$call29 < $call32;
      if ($cmp33) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $retval=0;
      label = 11; break;
    case 10: 
      $retval=1;
      label = 11; break;
    case 11: 
      var $24=$retval;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_contains_point_2d"] = _quad_contains_point_2d;
function _quad_convex_random($seed, $xy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $seed_addr;
      var $xy_addr;
      var $hull=__stackBase__;
      var $hull_num=(__stackBase__)+(16);
      var $i;
      var $j;
      var $xy_random;
      $seed_addr=$seed;
      $xy_addr=$xy;
      label = 3; break;
    case 3: 
      var $0=$seed_addr;
      var $call=_r8mat_uniform_01_new(2, 4, $0);
      $xy_random=$call;
      var $1=$xy_random;
      var $arraydecay=(($hull)|0);
      _points_hull_2d(4, $1, $hull_num, $arraydecay);
      var $2=HEAP32[(($hull_num)>>2)];
      var $cmp=(($2)|(0))==4;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 6; break;
    case 5: 
      label = 3; break;
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $3=$j;
      var $cmp2=(($3)|(0)) < 4;
      if ($cmp2) { label = 8; break; } else { label = 14; break; }
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $4=$i;
      var $cmp4=(($4)|(0)) < 2;
      if ($cmp4) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $5=$i;
      var $6=$j;
      var $arrayidx=(($hull+($6<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $sub=((($7)-(1))|0);
      var $mul=($sub<<1);
      var $add=((($5)+($mul))|0);
      var $8=$xy_random;
      var $arrayidx6=(($8+($add<<3))|0);
      var $9=HEAPF64[(($arrayidx6)>>3)];
      var $10=$i;
      var $11=$j;
      var $mul7=($11<<1);
      var $add8=((($10)+($mul7))|0);
      var $12=$xy_addr;
      var $arrayidx9=(($12+($add8<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$9;
      label = 11; break;
    case 11: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $14=$j;
      var $inc12=((($14)+(1))|0);
      $j=$inc12;
      label = 7; break;
    case 14: 
      var $15=$xy_random;
      var $16=$15;
      _free($16);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_convex_random"] = _quad_convex_random;
function _quad_point_dist_2d($q, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $p_addr;
      var $dist;
      var $dist2;
      var $j;
      var $jp1;
      var $side_num;
      $q_addr=$q;
      $p_addr=$p;
      $side_num=4;
      var $call=_r8_huge();
      $dist=$call;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$side_num;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$j;
      var $add=((($2)+(1))|0);
      var $3=$side_num;
      var $sub=((($3)-(1))|0);
      var $call1=_i4_wrap($add, 0, $sub);
      $jp1=$call1;
      var $4=$q_addr;
      var $5=$j;
      var $mul=($5<<1);
      var $add_ptr=(($4+($mul<<3))|0);
      var $6=$q_addr;
      var $7=$jp1;
      var $mul2=($7<<1);
      var $add_ptr3=(($6+($mul2<<3))|0);
      var $8=$p_addr;
      var $call4=_segment_point_dist_2d($add_ptr, $add_ptr3, $8);
      $dist2=$call4;
      var $9=$dist2;
      var $10=$dist;
      var $cmp5=$9 < $10;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $11=$dist2;
      $dist=$11;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $12=$j;
      var $inc=((($12)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 8: 
      var $13=$dist;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_point_dist_2d"] = _quad_point_dist_2d;
function _segment_point_dist_2d($p1, $p2, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $bot;
      var $dist;
      var $i;
      var $t;
      var $pn=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $t=0;
      label = 13; break;
    case 4: 
      $bot=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp=(($2)|(0)) < 2;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $3=$bot;
      var $4=$i;
      var $5=$p2_addr;
      var $arrayidx=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$i;
      var $8=$p1_addr;
      var $arrayidx1=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($6)-($9);
      var $10=Math.pow($sub, 2);
      var $add=($3)+($10);
      $bot=$add;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      $t=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $12=$i;
      var $cmp3=(($12)|(0)) < 2;
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $13=$t;
      var $14=$i;
      var $15=$p_addr;
      var $arrayidx5=(($15+($14<<3))|0);
      var $16=HEAPF64[(($arrayidx5)>>3)];
      var $17=$i;
      var $18=$p1_addr;
      var $arrayidx6=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($16)-($19);
      var $20=$i;
      var $21=$p2_addr;
      var $arrayidx8=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx8)>>3)];
      var $23=$i;
      var $24=$p1_addr;
      var $arrayidx9=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($22)-($25);
      var $mul=($sub7)*($sub10);
      var $add11=($13)+($mul);
      $t=$add11;
      label = 11; break;
    case 11: 
      var $26=$i;
      var $inc13=((($26)+(1))|0);
      $i=$inc13;
      label = 9; break;
    case 12: 
      var $27=$t;
      var $28=$bot;
      var $div=($27)/($28);
      $t=$div;
      var $29=$t;
      var $call15=_r8_max($29, 0);
      $t=$call15;
      var $30=$t;
      var $call16=_r8_min($30, 1);
      $t=$call16;
      label = 13; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $31=$i;
      var $cmp18=(($31)|(0)) < 2;
      if ($cmp18) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $32=$i;
      var $33=$p1_addr;
      var $arrayidx20=(($33+($32<<3))|0);
      var $34=HEAPF64[(($arrayidx20)>>3)];
      var $35=$t;
      var $36=$i;
      var $37=$p2_addr;
      var $arrayidx21=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx21)>>3)];
      var $39=$i;
      var $40=$p1_addr;
      var $arrayidx22=(($40+($39<<3))|0);
      var $41=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($38)-($41);
      var $mul24=($35)*($sub23);
      var $add25=($34)+($mul24);
      var $42=$i;
      var $arrayidx26=(($pn+($42<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$add25;
      label = 16; break;
    case 16: 
      var $43=$i;
      var $inc28=((($43)+(1))|0);
      $i=$inc28;
      label = 14; break;
    case 17: 
      $dist=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $44=$i;
      var $cmp31=(($44)|(0)) < 2;
      if ($cmp31) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $45=$dist;
      var $46=$i;
      var $47=$p_addr;
      var $arrayidx33=(($47+($46<<3))|0);
      var $48=HEAPF64[(($arrayidx33)>>3)];
      var $49=$i;
      var $arrayidx34=(($pn+($49<<3))|0);
      var $50=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($48)-($50);
      var $51=Math.pow($sub35, 2);
      var $add36=($45)+($51);
      $dist=$add36;
      label = 20; break;
    case 20: 
      var $52=$i;
      var $inc38=((($52)+(1))|0);
      $i=$inc38;
      label = 18; break;
    case 21: 
      var $53=$dist;
      var $call40=Math.sqrt($53);
      $dist=$call40;
      var $54=$dist;
      STACKTOP = __stackBase__;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_point_dist_2d"] = _segment_point_dist_2d;
function _quad_point_dist_signed_2d($q, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $p_addr;
      var $dis1;
      var $dis2;
      var $dist_signed;
      var $pm=__stackBase__;
      $q_addr=$q;
      $p_addr=$p;
      var $0=$q_addr;
      var $add_ptr=(($0)|0);
      var $1=$q_addr;
      var $add_ptr1=(($1+16)|0);
      var $2=$p_addr;
      var $call=_line_exp_point_dist_signed_2d($add_ptr, $add_ptr1, $2);
      $dis1=$call;
      var $3=$q_addr;
      var $arrayidx=(($3+32)|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$q_addr;
      var $arrayidx2=(($5+48)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $add=($4)+($6);
      var $mul=($add)*(0.5);
      var $arrayidx3=(($pm)|0);
      HEAPF64[(($arrayidx3)>>3)]=$mul;
      var $7=$q_addr;
      var $arrayidx4=(($7+40)|0);
      var $8=HEAPF64[(($arrayidx4)>>3)];
      var $9=$q_addr;
      var $arrayidx5=(($9+56)|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $add6=($8)+($10);
      var $mul7=($add6)*(0.5);
      var $arrayidx8=(($pm+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$mul7;
      var $11=$q_addr;
      var $add_ptr9=(($11)|0);
      var $12=$q_addr;
      var $add_ptr10=(($12+16)|0);
      var $arraydecay=(($pm)|0);
      var $call11=_line_exp_point_dist_signed_2d($add_ptr9, $add_ptr10, $arraydecay);
      $dis2=$call11;
      var $13=$dis2;
      var $cmp=0 < $13;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$dis1;
      var $sub=(-$14);
      $dis1=$sub;
      label = 4; break;
    case 4: 
      var $15=$dis1;
      $dist_signed=$15;
      var $16=$q_addr;
      var $add_ptr12=(($16+16)|0);
      var $17=$q_addr;
      var $add_ptr13=(($17+32)|0);
      var $18=$p_addr;
      var $call14=_line_exp_point_dist_signed_2d($add_ptr12, $add_ptr13, $18);
      $dis1=$call14;
      var $19=$q_addr;
      var $arrayidx15=(($19+48)|0);
      var $20=HEAPF64[(($arrayidx15)>>3)];
      var $21=$q_addr;
      var $arrayidx16=(($21)|0);
      var $22=HEAPF64[(($arrayidx16)>>3)];
      var $add17=($20)+($22);
      var $mul18=($add17)*(0.5);
      var $arrayidx19=(($pm)|0);
      HEAPF64[(($arrayidx19)>>3)]=$mul18;
      var $23=$q_addr;
      var $arrayidx20=(($23+56)|0);
      var $24=HEAPF64[(($arrayidx20)>>3)];
      var $25=$q_addr;
      var $arrayidx21=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx21)>>3)];
      var $add22=($24)+($26);
      var $mul23=($add22)*(0.5);
      var $arrayidx24=(($pm+8)|0);
      HEAPF64[(($arrayidx24)>>3)]=$mul23;
      var $27=$q_addr;
      var $add_ptr25=(($27+16)|0);
      var $28=$q_addr;
      var $add_ptr26=(($28+32)|0);
      var $arraydecay27=(($pm)|0);
      var $call28=_line_exp_point_dist_signed_2d($add_ptr25, $add_ptr26, $arraydecay27);
      $dis2=$call28;
      var $29=$dis2;
      var $cmp29=0 < $29;
      if ($cmp29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $30=$dis1;
      var $sub31=(-$30);
      $dis1=$sub31;
      label = 6; break;
    case 6: 
      var $31=$dist_signed;
      var $32=$dis1;
      var $call33=_r8_max($31, $32);
      $dist_signed=$call33;
      var $33=$q_addr;
      var $add_ptr34=(($33+32)|0);
      var $34=$q_addr;
      var $add_ptr35=(($34+48)|0);
      var $35=$p_addr;
      var $call36=_line_exp_point_dist_signed_2d($add_ptr34, $add_ptr35, $35);
      $dis1=$call36;
      var $36=$q_addr;
      var $arrayidx37=(($36)|0);
      var $37=HEAPF64[(($arrayidx37)>>3)];
      var $38=$q_addr;
      var $arrayidx38=(($38+16)|0);
      var $39=HEAPF64[(($arrayidx38)>>3)];
      var $add39=($37)+($39);
      var $mul40=($add39)*(0.5);
      var $arrayidx41=(($pm)|0);
      HEAPF64[(($arrayidx41)>>3)]=$mul40;
      var $40=$q_addr;
      var $arrayidx42=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx42)>>3)];
      var $42=$q_addr;
      var $arrayidx43=(($42+24)|0);
      var $43=HEAPF64[(($arrayidx43)>>3)];
      var $add44=($41)+($43);
      var $mul45=($add44)*(0.5);
      var $arrayidx46=(($pm+8)|0);
      HEAPF64[(($arrayidx46)>>3)]=$mul45;
      var $44=$q_addr;
      var $add_ptr47=(($44+32)|0);
      var $45=$q_addr;
      var $add_ptr48=(($45+48)|0);
      var $arraydecay49=(($pm)|0);
      var $call50=_line_exp_point_dist_signed_2d($add_ptr47, $add_ptr48, $arraydecay49);
      $dis2=$call50;
      var $46=$dis2;
      var $cmp51=0 < $46;
      if ($cmp51) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $47=$dis1;
      var $sub53=(-$47);
      $dis1=$sub53;
      label = 8; break;
    case 8: 
      var $48=$dist_signed;
      var $49=$dis1;
      var $call55=_r8_max($48, $49);
      $dist_signed=$call55;
      var $50=$q_addr;
      var $add_ptr56=(($50+48)|0);
      var $51=$q_addr;
      var $add_ptr57=(($51)|0);
      var $52=$p_addr;
      var $call58=_line_exp_point_dist_signed_2d($add_ptr56, $add_ptr57, $52);
      $dis1=$call58;
      var $53=$q_addr;
      var $arrayidx59=(($53+16)|0);
      var $54=HEAPF64[(($arrayidx59)>>3)];
      var $55=$q_addr;
      var $arrayidx60=(($55+32)|0);
      var $56=HEAPF64[(($arrayidx60)>>3)];
      var $add61=($54)+($56);
      var $mul62=($add61)*(0.5);
      var $arrayidx63=(($pm)|0);
      HEAPF64[(($arrayidx63)>>3)]=$mul62;
      var $57=$q_addr;
      var $arrayidx64=(($57+24)|0);
      var $58=HEAPF64[(($arrayidx64)>>3)];
      var $59=$q_addr;
      var $arrayidx65=(($59+40)|0);
      var $60=HEAPF64[(($arrayidx65)>>3)];
      var $add66=($58)+($60);
      var $mul67=($add66)*(0.5);
      var $arrayidx68=(($pm+8)|0);
      HEAPF64[(($arrayidx68)>>3)]=$mul67;
      var $61=$q_addr;
      var $add_ptr69=(($61+48)|0);
      var $62=$q_addr;
      var $add_ptr70=(($62)|0);
      var $arraydecay71=(($pm)|0);
      var $call72=_line_exp_point_dist_signed_2d($add_ptr69, $add_ptr70, $arraydecay71);
      $dis2=$call72;
      var $63=$dis2;
      var $cmp73=0 < $63;
      if ($cmp73) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $64=$dis1;
      var $sub75=(-$64);
      $dis1=$sub75;
      label = 10; break;
    case 10: 
      var $65=$dist_signed;
      var $66=$dis1;
      var $call77=_r8_max($65, $66);
      $dist_signed=$call77;
      var $67=$dist_signed;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_point_dist_signed_2d"] = _quad_point_dist_signed_2d;
function _quad_point_near_2d($q, $p, $pn, $dist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $dist2=__stackBase__;
      var $j;
      var $jp1;
      var $pn2=(__stackBase__)+(8);
      var $side_num;
      var $tval=(__stackBase__)+(24);
      $q_addr=$q;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $side_num=4;
      var $call=_r8_huge();
      var $0=$dist_addr;
      HEAPF64[(($0)>>3)]=$call;
      var $1=$pn_addr;
      _r8vec_zero(2, $1);
      $j=0;
      label = 3; break;
    case 3: 
      var $2=$j;
      var $3=$side_num;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$j;
      var $add=((($4)+(1))|0);
      var $5=$side_num;
      var $sub=((($5)-(1))|0);
      var $call1=_i4_wrap($add, 0, $sub);
      $jp1=$call1;
      var $6=$q_addr;
      var $7=$j;
      var $mul=($7<<1);
      var $add_ptr=(($6+($mul<<3))|0);
      var $8=$q_addr;
      var $9=$jp1;
      var $mul2=($9<<1);
      var $add_ptr3=(($8+($mul2<<3))|0);
      var $10=$p_addr;
      var $arraydecay=(($pn2)|0);
      _segment_point_near_2d($add_ptr, $add_ptr3, $10, $arraydecay, $dist2, $tval);
      var $11=HEAPF64[(($dist2)>>3)];
      var $12=$dist_addr;
      var $13=HEAPF64[(($12)>>3)];
      var $cmp4=$11 < $13;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=HEAPF64[(($dist2)>>3)];
      var $15=$dist_addr;
      HEAPF64[(($15)>>3)]=$14;
      var $arraydecay5=(($pn2)|0);
      var $16=$pn_addr;
      _r8vec_copy(2, $arraydecay5, $16);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $17=$j;
      var $inc=((($17)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_quad_point_near_2d"] = _quad_point_near_2d;
function _segment_point_near_2d($p1, $p2, $p, $pn, $dist, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $t_addr;
      var $bot;
      var $i;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $t_addr=$t;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$t_addr;
      HEAPF64[(($2)>>3)]=0;
      label = 13; break;
    case 4: 
      $bot=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp=(($3)|(0)) < 2;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$bot;
      var $5=$i;
      var $6=$p2_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$p1_addr;
      var $arrayidx1=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($7)-($10);
      var $11=Math.pow($sub, 2);
      var $add=($4)+($11);
      $bot=$add;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $13=$t_addr;
      HEAPF64[(($13)>>3)]=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $cmp3=(($14)|(0)) < 2;
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $15=$t_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $17=$i;
      var $18=$p_addr;
      var $arrayidx5=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx5)>>3)];
      var $20=$i;
      var $21=$p1_addr;
      var $arrayidx6=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($19)-($22);
      var $23=$i;
      var $24=$p2_addr;
      var $arrayidx8=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx8)>>3)];
      var $26=$i;
      var $27=$p1_addr;
      var $arrayidx9=(($27+($26<<3))|0);
      var $28=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($25)-($28);
      var $mul=($sub7)*($sub10);
      var $add11=($16)+($mul);
      var $29=$t_addr;
      HEAPF64[(($29)>>3)]=$add11;
      label = 11; break;
    case 11: 
      var $30=$i;
      var $inc13=((($30)+(1))|0);
      $i=$inc13;
      label = 9; break;
    case 12: 
      var $31=$t_addr;
      var $32=HEAPF64[(($31)>>3)];
      var $33=$bot;
      var $div=($32)/($33);
      var $34=$t_addr;
      HEAPF64[(($34)>>3)]=$div;
      var $35=$t_addr;
      var $36=HEAPF64[(($35)>>3)];
      var $call15=_r8_max($36, 0);
      var $37=$t_addr;
      HEAPF64[(($37)>>3)]=$call15;
      var $38=$t_addr;
      var $39=HEAPF64[(($38)>>3)];
      var $call16=_r8_min($39, 1);
      var $40=$t_addr;
      HEAPF64[(($40)>>3)]=$call16;
      label = 13; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $41=$i;
      var $cmp18=(($41)|(0)) < 2;
      if ($cmp18) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $42=$i;
      var $43=$p1_addr;
      var $arrayidx20=(($43+($42<<3))|0);
      var $44=HEAPF64[(($arrayidx20)>>3)];
      var $45=$t_addr;
      var $46=HEAPF64[(($45)>>3)];
      var $47=$i;
      var $48=$p2_addr;
      var $arrayidx21=(($48+($47<<3))|0);
      var $49=HEAPF64[(($arrayidx21)>>3)];
      var $50=$i;
      var $51=$p1_addr;
      var $arrayidx22=(($51+($50<<3))|0);
      var $52=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($49)-($52);
      var $mul24=($46)*($sub23);
      var $add25=($44)+($mul24);
      var $53=$i;
      var $54=$pn_addr;
      var $arrayidx26=(($54+($53<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$add25;
      label = 16; break;
    case 16: 
      var $55=$i;
      var $inc28=((($55)+(1))|0);
      $i=$inc28;
      label = 14; break;
    case 17: 
      var $56=$dist_addr;
      HEAPF64[(($56)>>3)]=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $57=$i;
      var $cmp31=(($57)|(0)) < 2;
      if ($cmp31) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $58=$dist_addr;
      var $59=HEAPF64[(($58)>>3)];
      var $60=$i;
      var $61=$p_addr;
      var $arrayidx33=(($61+($60<<3))|0);
      var $62=HEAPF64[(($arrayidx33)>>3)];
      var $63=$i;
      var $64=$pn_addr;
      var $arrayidx34=(($64+($63<<3))|0);
      var $65=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($62)-($65);
      var $66=Math.pow($sub35, 2);
      var $add36=($59)+($66);
      var $67=$dist_addr;
      HEAPF64[(($67)>>3)]=$add36;
      label = 20; break;
    case 20: 
      var $68=$i;
      var $inc38=((($68)+(1))|0);
      $i=$inc38;
      label = 18; break;
    case 21: 
      var $69=$dist_addr;
      var $70=HEAPF64[(($69)>>3)];
      var $call40=Math.sqrt($70);
      var $71=$dist_addr;
      HEAPF64[(($71)>>3)]=$call40;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_point_near_2d"] = _segment_point_near_2d;
function _quat_conj($q) {
  var label = 0;
  var $q_addr;
  var $q2;
  $q_addr=$q;
  var $call=_malloc(32);
  var $0=$call;
  $q2=$0;
  var $1=$q_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$q2;
  var $arrayidx1=(($3)|0);
  HEAPF64[(($arrayidx1)>>3)]=$2;
  var $4=$q_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $sub=(-$5);
  var $6=$q2;
  var $arrayidx3=(($6+8)|0);
  HEAPF64[(($arrayidx3)>>3)]=$sub;
  var $7=$q_addr;
  var $arrayidx4=(($7+16)|0);
  var $8=HEAPF64[(($arrayidx4)>>3)];
  var $sub5=(-$8);
  var $9=$q2;
  var $arrayidx6=(($9+16)|0);
  HEAPF64[(($arrayidx6)>>3)]=$sub5;
  var $10=$q_addr;
  var $arrayidx7=(($10+24)|0);
  var $11=HEAPF64[(($arrayidx7)>>3)];
  var $sub8=(-$11);
  var $12=$q2;
  var $arrayidx9=(($12+24)|0);
  HEAPF64[(($arrayidx9)>>3)]=$sub8;
  var $13=$q2;
  return $13;
}
Module["_quat_conj"] = _quat_conj;
function _quat_inv($q) {
  var label = 0;
  var $q_addr;
  var $norm;
  var $q2;
  $q_addr=$q;
  var $call=_malloc(32);
  var $0=$call;
  $q2=$0;
  var $1=$q_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$q_addr;
  var $arrayidx1=(($3)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($2)*($4);
  var $5=$q_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$q_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($6)*($8);
  var $add=($mul)+($mul4);
  var $9=$q_addr;
  var $arrayidx5=(($9+16)|0);
  var $10=HEAPF64[(($arrayidx5)>>3)];
  var $11=$q_addr;
  var $arrayidx6=(($11+16)|0);
  var $12=HEAPF64[(($arrayidx6)>>3)];
  var $mul7=($10)*($12);
  var $add8=($add)+($mul7);
  var $13=$q_addr;
  var $arrayidx9=(($13+24)|0);
  var $14=HEAPF64[(($arrayidx9)>>3)];
  var $15=$q_addr;
  var $arrayidx10=(($15+24)|0);
  var $16=HEAPF64[(($arrayidx10)>>3)];
  var $mul11=($14)*($16);
  var $add12=($add8)+($mul11);
  $norm=$add12;
  var $17=$q_addr;
  var $arrayidx13=(($17)|0);
  var $18=HEAPF64[(($arrayidx13)>>3)];
  var $19=$norm;
  var $div=($18)/($19);
  var $20=$q2;
  var $arrayidx14=(($20)|0);
  HEAPF64[(($arrayidx14)>>3)]=$div;
  var $21=$q_addr;
  var $arrayidx15=(($21+8)|0);
  var $22=HEAPF64[(($arrayidx15)>>3)];
  var $sub=(-$22);
  var $23=$norm;
  var $div16=($sub)/($23);
  var $24=$q2;
  var $arrayidx17=(($24+8)|0);
  HEAPF64[(($arrayidx17)>>3)]=$div16;
  var $25=$q_addr;
  var $arrayidx18=(($25+16)|0);
  var $26=HEAPF64[(($arrayidx18)>>3)];
  var $sub19=(-$26);
  var $27=$norm;
  var $div20=($sub19)/($27);
  var $28=$q2;
  var $arrayidx21=(($28+16)|0);
  HEAPF64[(($arrayidx21)>>3)]=$div20;
  var $29=$q_addr;
  var $arrayidx22=(($29+24)|0);
  var $30=HEAPF64[(($arrayidx22)>>3)];
  var $sub23=(-$30);
  var $31=$norm;
  var $div24=($sub23)/($31);
  var $32=$q2;
  var $arrayidx25=(($32+24)|0);
  HEAPF64[(($arrayidx25)>>3)]=$div24;
  var $33=$q2;
  return $33;
}
Module["_quat_inv"] = _quat_inv;
function _r8mat_uniform_01_new($m, $n, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $seed_addr;
      var $i;
      var $i4_huge;
      var $j;
      var $k;
      var $r;
      $m_addr=$m;
      $n_addr=$n;
      $seed_addr=$seed;
      $i4_huge=2147483647;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((13856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((10840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $2=$m_addr;
      var $3=$n_addr;
      var $mul=(Math.imul($2,$3)|0);
      var $mul3=($mul<<3);
      var $call4=_malloc($mul3);
      var $4=$call4;
      $r=$4;
      $j=0;
      label = 5; break;
    case 5: 
      var $5=$j;
      var $6=$n_addr;
      var $cmp5=(($5)|(0)) < (($6)|(0));
      if ($cmp5) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $7=$i;
      var $8=$m_addr;
      var $cmp7=(($7)|(0)) < (($8)|(0));
      if ($cmp7) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $9=$seed_addr;
      var $10=HEAP32[(($9)>>2)];
      var $div=((((($10)|(0)))/(127773))&-1);
      $k=$div;
      var $11=$seed_addr;
      var $12=HEAP32[(($11)>>2)];
      var $13=$k;
      var $mul9=((($13)*(127773))&-1);
      var $sub=((($12)-($mul9))|0);
      var $mul10=((($sub)*(16807))&-1);
      var $14=$k;
      var $mul11=((($14)*(2836))&-1);
      var $sub12=((($mul10)-($mul11))|0);
      var $15=$seed_addr;
      HEAP32[(($15)>>2)]=$sub12;
      var $16=$seed_addr;
      var $17=HEAP32[(($16)>>2)];
      var $cmp13=(($17)|(0)) < 0;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $18=$seed_addr;
      var $19=HEAP32[(($18)>>2)];
      var $20=$i4_huge;
      var $add=((($19)+($20))|0);
      var $21=$seed_addr;
      HEAP32[(($21)>>2)]=$add;
      label = 10; break;
    case 10: 
      var $22=$seed_addr;
      var $23=HEAP32[(($22)>>2)];
      var $conv=(($23)|(0));
      var $mul16=($conv)*(4.656612875e-10);
      var $24=$i;
      var $25=$j;
      var $26=$m_addr;
      var $mul17=(Math.imul($25,$26)|0);
      var $add18=((($24)+($mul17))|0);
      var $27=$r;
      var $arrayidx=(($27+($add18<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=$mul16;
      label = 11; break;
    case 11: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $29=$j;
      var $inc20=((($29)+(1))|0);
      $j=$inc20;
      label = 5; break;
    case 14: 
      var $30=$r;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_uniform_01_new"] = _r8mat_uniform_01_new;
function _r8_pi() {
  var label = 0;
  var $value;
  $value=3.141592653589793;
  var $0=$value;
  return $0;
}
Module["_r8_pi"] = _r8_pi;
function _r4_abs($x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $value;
      $x_addr=$x;
      var $0=$x_addr;
      var $conv=$0;
      var $cmp=0 <= $conv;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$x_addr;
      $value=$1;
      label = 5; break;
    case 4: 
      var $2=$x_addr;
      var $sub=(-$2);
      $value=$sub;
      label = 5; break;
    case 5: 
      var $3=$value;
      return $3;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r4_abs"] = _r4_abs;
function _r8vec_gt($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $2=$i;
      var $3=$a2_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$a1_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $cmp2=$4 < $7;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 12; break;
    case 6: 
      var $8=$i;
      var $9=$a1_addr;
      var $arrayidx3=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx3)>>3)];
      var $11=$i;
      var $12=$a2_addr;
      var $arrayidx4=(($12+($11<<3))|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $cmp5=$10 < $13;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 12; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_gt"] = _r8vec_gt;
function _r8vec_swap($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      var $temp;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$a1_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      $temp=$4;
      var $5=$i;
      var $6=$a2_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $8=$i;
      var $9=$a1_addr;
      var $arrayidx2=(($9+($8<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$7;
      var $10=$temp;
      var $11=$i;
      var $12=$a2_addr;
      var $arrayidx3=(($12+($11<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$10;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_swap"] = _r8vec_swap;
function _r8vec_lt($n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $2=$i;
      var $3=$a1_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$a2_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $cmp2=$4 < $7;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=1;
      label = 12; break;
    case 6: 
      var $8=$i;
      var $9=$a2_addr;
      var $arrayidx3=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx3)>>3)];
      var $11=$i;
      var $12=$a1_addr;
      var $arrayidx4=(($12+($11<<3))|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $cmp5=$10 < $13;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 12; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 11: 
      $retval=0;
      label = 12; break;
    case 12: 
      var $15=$retval;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_lt"] = _r8vec_lt;
function _quat_mul($q1, $q2) {
  var label = 0;
  var $q1_addr;
  var $q2_addr;
  var $q3;
  $q1_addr=$q1;
  $q2_addr=$q2;
  var $call=_malloc(32);
  var $0=$call;
  $q3=$0;
  var $1=$q1_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$q2_addr;
  var $arrayidx1=(($3)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($2)*($4);
  var $5=$q1_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$q2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($6)*($8);
  var $sub=($mul)-($mul4);
  var $9=$q1_addr;
  var $arrayidx5=(($9+16)|0);
  var $10=HEAPF64[(($arrayidx5)>>3)];
  var $11=$q2_addr;
  var $arrayidx6=(($11+16)|0);
  var $12=HEAPF64[(($arrayidx6)>>3)];
  var $mul7=($10)*($12);
  var $sub8=($sub)-($mul7);
  var $13=$q1_addr;
  var $arrayidx9=(($13+24)|0);
  var $14=HEAPF64[(($arrayidx9)>>3)];
  var $15=$q2_addr;
  var $arrayidx10=(($15+24)|0);
  var $16=HEAPF64[(($arrayidx10)>>3)];
  var $mul11=($14)*($16);
  var $sub12=($sub8)-($mul11);
  var $17=$q3;
  var $arrayidx13=(($17)|0);
  HEAPF64[(($arrayidx13)>>3)]=$sub12;
  var $18=$q1_addr;
  var $arrayidx14=(($18)|0);
  var $19=HEAPF64[(($arrayidx14)>>3)];
  var $20=$q2_addr;
  var $arrayidx15=(($20+8)|0);
  var $21=HEAPF64[(($arrayidx15)>>3)];
  var $mul16=($19)*($21);
  var $22=$q1_addr;
  var $arrayidx17=(($22+8)|0);
  var $23=HEAPF64[(($arrayidx17)>>3)];
  var $24=$q2_addr;
  var $arrayidx18=(($24)|0);
  var $25=HEAPF64[(($arrayidx18)>>3)];
  var $mul19=($23)*($25);
  var $add=($mul16)+($mul19);
  var $26=$q1_addr;
  var $arrayidx20=(($26+16)|0);
  var $27=HEAPF64[(($arrayidx20)>>3)];
  var $28=$q2_addr;
  var $arrayidx21=(($28+24)|0);
  var $29=HEAPF64[(($arrayidx21)>>3)];
  var $mul22=($27)*($29);
  var $add23=($add)+($mul22);
  var $30=$q1_addr;
  var $arrayidx24=(($30+24)|0);
  var $31=HEAPF64[(($arrayidx24)>>3)];
  var $32=$q2_addr;
  var $arrayidx25=(($32+16)|0);
  var $33=HEAPF64[(($arrayidx25)>>3)];
  var $mul26=($31)*($33);
  var $sub27=($add23)-($mul26);
  var $34=$q3;
  var $arrayidx28=(($34+8)|0);
  HEAPF64[(($arrayidx28)>>3)]=$sub27;
  var $35=$q1_addr;
  var $arrayidx29=(($35)|0);
  var $36=HEAPF64[(($arrayidx29)>>3)];
  var $37=$q2_addr;
  var $arrayidx30=(($37+16)|0);
  var $38=HEAPF64[(($arrayidx30)>>3)];
  var $mul31=($36)*($38);
  var $39=$q1_addr;
  var $arrayidx32=(($39+8)|0);
  var $40=HEAPF64[(($arrayidx32)>>3)];
  var $41=$q2_addr;
  var $arrayidx33=(($41+24)|0);
  var $42=HEAPF64[(($arrayidx33)>>3)];
  var $mul34=($40)*($42);
  var $sub35=($mul31)-($mul34);
  var $43=$q1_addr;
  var $arrayidx36=(($43+16)|0);
  var $44=HEAPF64[(($arrayidx36)>>3)];
  var $45=$q2_addr;
  var $arrayidx37=(($45)|0);
  var $46=HEAPF64[(($arrayidx37)>>3)];
  var $mul38=($44)*($46);
  var $add39=($sub35)+($mul38);
  var $47=$q1_addr;
  var $arrayidx40=(($47+24)|0);
  var $48=HEAPF64[(($arrayidx40)>>3)];
  var $49=$q2_addr;
  var $arrayidx41=(($49+8)|0);
  var $50=HEAPF64[(($arrayidx41)>>3)];
  var $mul42=($48)*($50);
  var $add43=($add39)+($mul42);
  var $51=$q3;
  var $arrayidx44=(($51+16)|0);
  HEAPF64[(($arrayidx44)>>3)]=$add43;
  var $52=$q1_addr;
  var $arrayidx45=(($52)|0);
  var $53=HEAPF64[(($arrayidx45)>>3)];
  var $54=$q2_addr;
  var $arrayidx46=(($54+24)|0);
  var $55=HEAPF64[(($arrayidx46)>>3)];
  var $mul47=($53)*($55);
  var $56=$q1_addr;
  var $arrayidx48=(($56+8)|0);
  var $57=HEAPF64[(($arrayidx48)>>3)];
  var $58=$q2_addr;
  var $arrayidx49=(($58+16)|0);
  var $59=HEAPF64[(($arrayidx49)>>3)];
  var $mul50=($57)*($59);
  var $add51=($mul47)+($mul50);
  var $60=$q1_addr;
  var $arrayidx52=(($60+16)|0);
  var $61=HEAPF64[(($arrayidx52)>>3)];
  var $62=$q2_addr;
  var $arrayidx53=(($62+8)|0);
  var $63=HEAPF64[(($arrayidx53)>>3)];
  var $mul54=($61)*($63);
  var $sub55=($add51)-($mul54);
  var $64=$q1_addr;
  var $arrayidx56=(($64+24)|0);
  var $65=HEAPF64[(($arrayidx56)>>3)];
  var $66=$q2_addr;
  var $arrayidx57=(($66)|0);
  var $67=HEAPF64[(($arrayidx57)>>3)];
  var $mul58=($65)*($67);
  var $add59=($sub55)+($mul58);
  var $68=$q3;
  var $arrayidx60=(($68+24)|0);
  HEAPF64[(($arrayidx60)>>3)]=$add59;
  var $69=$q3;
  return $69;
}
Module["_quat_mul"] = _quat_mul;
function _quat_norm($q) {
  var label = 0;
  var $q_addr;
  var $norm;
  $q_addr=$q;
  var $0=$q_addr;
  var $call=_r8vec_norm(4, $0);
  $norm=$call;
  var $1=$norm;
  return $1;
}
Module["_quat_norm"] = _quat_norm;
function _r8_asin($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $s_addr;
      var $angle;
      var $pi;
      $s_addr=$s;
      $pi=3.141592653589793;
      var $0=$s_addr;
      var $cmp=$0 <= -1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$pi;
      var $sub=(-$1);
      var $div=($sub)/(2);
      $angle=$div;
      label = 8; break;
    case 4: 
      var $2=$s_addr;
      var $cmp1=1 <= $2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$pi;
      var $div3=($3)/(2);
      $angle=$div3;
      label = 7; break;
    case 6: 
      var $4=$s_addr;
      var $call=Math.asin($4);
      $angle=$call;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $5=$angle;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_asin"] = _r8_asin;
function _r8_normal_01($seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $seed_addr;
      var $pi;
      var $r1;
      var $r2;
      var $x;
      $seed_addr=$seed;
      $pi=3.141592653589793;
      var $0=HEAP32[((4784)>>2)];
      var $cmp=(($0)|(0))==-1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      HEAP32[((4784)>>2)]=0;
      label = 4; break;
    case 4: 
      var $1=HEAP32[((4784)>>2)];
      var $rem=((((($1)|(0)))%(2))&-1);
      var $cmp1=(($rem)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $2=$seed_addr;
      var $call=_r8_uniform_01($2);
      $r1=$call;
      var $3=$r1;
      var $cmp3=$3 != 0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      label = 6; break;
    case 9: 
      var $4=$seed_addr;
      var $call6=_r8_uniform_01($4);
      $r2=$call6;
      var $5=$r1;
      var $call7=Math.log($5);
      var $mul=($call7)*(-2);
      var $call8=Math.sqrt($mul);
      var $6=$pi;
      var $mul9=($6)*(2);
      var $7=$r2;
      var $mul10=($mul9)*($7);
      var $call11=Math.cos($mul10);
      var $mul12=($call8)*($call11);
      $x=$mul12;
      var $8=$r1;
      var $call13=Math.log($8);
      var $mul14=($call13)*(-2);
      var $call15=Math.sqrt($mul14);
      var $9=$pi;
      var $mul16=($9)*(2);
      var $10=$r2;
      var $mul17=($mul16)*($10);
      var $call18=Math.sin($mul17);
      var $mul19=($call15)*($call18);
      HEAPF64[((4776)>>3)]=$mul19;
      label = 11; break;
    case 10: 
      var $11=HEAPF64[((4776)>>3)];
      $x=$11;
      label = 11; break;
    case 11: 
      var $12=HEAP32[((4784)>>2)];
      var $add=((($12)+(1))|0);
      HEAP32[((4784)>>2)]=$add;
      var $13=$x;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8_normal_01"] = _r8_normal_01;
function _r8_uniform($b, $c, $seed) {
  var label = 0;
  var $b_addr;
  var $c_addr;
  var $seed_addr;
  var $value;
  $b_addr=$b;
  $c_addr=$c;
  $seed_addr=$seed;
  var $0=$b_addr;
  var $1=$c_addr;
  var $2=$b_addr;
  var $sub=($1)-($2);
  var $3=$seed_addr;
  var $call=_r8_uniform_01($3);
  var $mul=($sub)*($call);
  var $add=($0)+($mul);
  $value=$add;
  var $4=$value;
  return $4;
}
Module["_r8_uniform"] = _r8_uniform;
function _r82vec_part_quick_a($n, $a, $l, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $l_addr;
      var $r_addr;
      var $i;
      var $j;
      var $key=__stackBase__;
      var $ll;
      var $m;
      var $rr;
      $n_addr=$n;
      $a_addr=$a;
      $l_addr=$l;
      $r_addr=$r;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $4=$n_addr;
      var $cmp3=(($4)|(0))==1;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$l_addr;
      HEAP32[(($5)>>2)]=0;
      var $6=$r_addr;
      HEAP32[(($6)>>2)]=2;
      label = 35; break;
    case 6: 
      var $7=$a_addr;
      var $arrayidx=(($7)|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx6=(($key)|0);
      HEAPF64[(($arrayidx6)>>3)]=$8;
      var $9=$a_addr;
      var $arrayidx7=(($9+8)|0);
      var $10=HEAPF64[(($arrayidx7)>>3)];
      var $arrayidx8=(($key+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$10;
      $m=1;
      $ll=1;
      var $11=$n_addr;
      var $add=((($11)+(1))|0);
      $rr=$add;
      $i=2;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $13=$n_addr;
      var $cmp9=(($12)|(0)) <= (($13)|(0));
      if ($cmp9) { label = 8; break; } else { label = 18; break; }
    case 8: 
      var $14=$a_addr;
      var $15=$ll;
      var $mul=($15<<1);
      var $add_ptr=(($14+($mul<<3))|0);
      var $arraydecay=(($key)|0);
      var $call10=_r8vec_gt(2, $add_ptr, $arraydecay);
      var $tobool=(($call10)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $16=$rr;
      var $sub=((($16)-(1))|0);
      $rr=$sub;
      var $17=$a_addr;
      var $18=$rr;
      var $sub12=((($18)-(1))|0);
      var $mul13=($sub12<<1);
      var $add_ptr14=(($17+($mul13<<3))|0);
      var $19=$a_addr;
      var $20=$ll;
      var $mul15=($20<<1);
      var $add_ptr16=(($19+($mul15<<3))|0);
      _r8vec_swap(2, $add_ptr14, $add_ptr16);
      label = 16; break;
    case 10: 
      var $21=$a_addr;
      var $22=$ll;
      var $mul17=($22<<1);
      var $add_ptr18=(($21+($mul17<<3))|0);
      var $arraydecay19=(($key)|0);
      var $call20=_r8vec_eq(2, $add_ptr18, $arraydecay19);
      var $tobool21=(($call20)|(0))!=0;
      if ($tobool21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $23=$m;
      var $add23=((($23)+(1))|0);
      $m=$add23;
      var $24=$a_addr;
      var $25=$m;
      var $sub24=((($25)-(1))|0);
      var $mul25=($sub24<<1);
      var $add_ptr26=(($24+($mul25<<3))|0);
      var $26=$a_addr;
      var $27=$ll;
      var $mul27=($27<<1);
      var $add_ptr28=(($26+($mul27<<3))|0);
      _r8vec_swap(2, $add_ptr26, $add_ptr28);
      var $28=$ll;
      var $add29=((($28)+(1))|0);
      $ll=$add29;
      label = 15; break;
    case 12: 
      var $29=$a_addr;
      var $30=$ll;
      var $mul31=($30<<1);
      var $add_ptr32=(($29+($mul31<<3))|0);
      var $arraydecay33=(($key)|0);
      var $call34=_r8vec_lt(2, $add_ptr32, $arraydecay33);
      var $tobool35=(($call34)|(0))!=0;
      if ($tobool35) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $31=$ll;
      var $add37=((($31)+(1))|0);
      $ll=$add37;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$i;
      var $inc=((($32)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 18: 
      $i=0;
      label = 19; break;
    case 19: 
      var $33=$i;
      var $34=$ll;
      var $35=$m;
      var $sub42=((($34)-($35))|0);
      var $cmp43=(($33)|(0)) < (($sub42)|(0));
      if ($cmp43) { label = 20; break; } else { label = 26; break; }
    case 20: 
      $j=0;
      label = 21; break;
    case 21: 
      var $36=$j;
      var $cmp46=(($36)|(0)) < 2;
      if ($cmp46) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $37=$i;
      var $38=$m;
      var $add48=((($37)+($38))|0);
      var $mul49=($add48<<1);
      var $39=$j;
      var $add50=((($mul49)+($39))|0);
      var $40=$a_addr;
      var $arrayidx51=(($40+($add50<<3))|0);
      var $41=HEAPF64[(($arrayidx51)>>3)];
      var $42=$i;
      var $mul52=($42<<1);
      var $43=$j;
      var $add53=((($mul52)+($43))|0);
      var $44=$a_addr;
      var $arrayidx54=(($44+($add53<<3))|0);
      HEAPF64[(($arrayidx54)>>3)]=$41;
      label = 23; break;
    case 23: 
      var $45=$j;
      var $inc56=((($45)+(1))|0);
      $j=$inc56;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $46=$i;
      var $inc59=((($46)+(1))|0);
      $i=$inc59;
      label = 19; break;
    case 26: 
      var $47=$ll;
      var $48=$m;
      var $sub61=((($47)-($48))|0);
      $ll=$sub61;
      var $49=$ll;
      $i=$49;
      label = 27; break;
    case 27: 
      var $50=$i;
      var $51=$ll;
      var $52=$m;
      var $add63=((($51)+($52))|0);
      var $cmp64=(($50)|(0)) < (($add63)|(0));
      if ($cmp64) { label = 28; break; } else { label = 34; break; }
    case 28: 
      $j=0;
      label = 29; break;
    case 29: 
      var $53=$j;
      var $cmp67=(($53)|(0)) < 2;
      if ($cmp67) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $54=$j;
      var $arrayidx69=(($key+($54<<3))|0);
      var $55=HEAPF64[(($arrayidx69)>>3)];
      var $56=$i;
      var $mul70=($56<<1);
      var $57=$j;
      var $add71=((($mul70)+($57))|0);
      var $58=$a_addr;
      var $arrayidx72=(($58+($add71<<3))|0);
      HEAPF64[(($arrayidx72)>>3)]=$55;
      label = 31; break;
    case 31: 
      var $59=$j;
      var $inc74=((($59)+(1))|0);
      $j=$inc74;
      label = 29; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $60=$i;
      var $inc77=((($60)+(1))|0);
      $i=$inc77;
      label = 27; break;
    case 34: 
      var $61=$ll;
      var $62=$l_addr;
      HEAP32[(($62)>>2)]=$61;
      var $63=$rr;
      var $64=$r_addr;
      HEAP32[(($64)>>2)]=$63;
      label = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r82vec_part_quick_a"] = _r82vec_part_quick_a;
function _r8mat_copy($m, $n, $a1, $a2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a1_addr;
      var $a2_addr;
      var $i;
      var $j;
      $m_addr=$m;
      $n_addr=$n;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$m_addr;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$i;
      var $5=$j;
      var $6=$m_addr;
      var $mul=(Math.imul($5,$6)|0);
      var $add=((($4)+($mul))|0);
      var $7=$a1_addr;
      var $arrayidx=(($7+($add<<3))|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$i;
      var $10=$j;
      var $11=$m_addr;
      var $mul4=(Math.imul($10,$11)|0);
      var $add5=((($9)+($mul4))|0);
      var $12=$a2_addr;
      var $arrayidx6=(($12+($add5<<3))|0);
      HEAPF64[(($arrayidx6)>>3)]=$8;
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $14=$j;
      var $inc8=((($14)+(1))|0);
      $j=$inc8;
      label = 3; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_copy"] = _r8mat_copy;
function _r8mat_det_2d($a) {
  var label = 0;
  var $a_addr;
  var $det;
  $a_addr=$a;
  var $0=$a_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$a_addr;
  var $arrayidx1=(($2+24)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($1)*($3);
  var $4=$a_addr;
  var $arrayidx2=(($4+16)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$a_addr;
  var $arrayidx3=(($6+8)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($5)*($7);
  var $sub=($mul)-($mul4);
  $det=$sub;
  var $8=$det;
  return $8;
}
Module["_r8mat_det_2d"] = _r8mat_det_2d;
function _r8mat_det_3d($a) {
  var label = 0;
  var $a_addr;
  var $det;
  $a_addr=$a;
  var $0=$a_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$a_addr;
  var $arrayidx1=(($2+32)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $4=$a_addr;
  var $arrayidx2=(($4+64)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $mul=($3)*($5);
  var $6=$a_addr;
  var $arrayidx3=(($6+56)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $8=$a_addr;
  var $arrayidx4=(($8+40)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $mul5=($7)*($9);
  var $sub=($mul)-($mul5);
  var $mul6=($1)*($sub);
  var $10=$a_addr;
  var $arrayidx7=(($10+24)|0);
  var $11=HEAPF64[(($arrayidx7)>>3)];
  var $12=$a_addr;
  var $arrayidx8=(($12+56)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$a_addr;
  var $arrayidx9=(($14+16)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $mul10=($13)*($15);
  var $16=$a_addr;
  var $arrayidx11=(($16+8)|0);
  var $17=HEAPF64[(($arrayidx11)>>3)];
  var $18=$a_addr;
  var $arrayidx12=(($18+64)|0);
  var $19=HEAPF64[(($arrayidx12)>>3)];
  var $mul13=($17)*($19);
  var $sub14=($mul10)-($mul13);
  var $mul15=($11)*($sub14);
  var $add=($mul6)+($mul15);
  var $20=$a_addr;
  var $arrayidx16=(($20+48)|0);
  var $21=HEAPF64[(($arrayidx16)>>3)];
  var $22=$a_addr;
  var $arrayidx17=(($22+8)|0);
  var $23=HEAPF64[(($arrayidx17)>>3)];
  var $24=$a_addr;
  var $arrayidx18=(($24+40)|0);
  var $25=HEAPF64[(($arrayidx18)>>3)];
  var $mul19=($23)*($25);
  var $26=$a_addr;
  var $arrayidx20=(($26+32)|0);
  var $27=HEAPF64[(($arrayidx20)>>3)];
  var $28=$a_addr;
  var $arrayidx21=(($28+16)|0);
  var $29=HEAPF64[(($arrayidx21)>>3)];
  var $mul22=($27)*($29);
  var $sub23=($mul19)-($mul22);
  var $mul24=($21)*($sub23);
  var $add25=($add)+($mul24);
  $det=$add25;
  var $30=$det;
  return $30;
}
Module["_r8mat_det_3d"] = _r8mat_det_3d;
function _r82vec_print($n, $a, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $title_addr;
      var $i;
      $n_addr=$n;
      $a_addr=$a;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((14184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$n_addr;
      var $sub=((($5)-(1))|0);
      var $cmp=(($4)|(0)) <= (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=HEAP32[((_stdout)>>2)];
      var $7=$i;
      var $8=$i;
      var $mul=($8<<1);
      var $add=(($mul)|0);
      var $9=$a_addr;
      var $arrayidx=(($9+($add<<3))|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $11=$i;
      var $mul3=($11<<1);
      var $add4=((($mul3)+(1))|0);
      var $12=$a_addr;
      var $arrayidx5=(($12+($add4<<3))|0);
      var $13=HEAPF64[(($arrayidx5)>>3)];
      var $call6=_fprintf($6, ((14160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,HEAPF64[(((tempInt)+(8))>>3)]=$10,HEAPF64[(((tempInt)+(16))>>3)]=$13,tempInt));
      label = 5; break;
    case 5: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r82vec_print"] = _r82vec_print;
function _r82vec_sort_heap_index_a($n, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $a_addr;
      var $aval=__stackBase__;
      var $i;
      var $indx;
      var $indxt;
      var $ir;
      var $j;
      var $l;
      $n_addr=$n;
      $a_addr=$a;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 28; break;
    case 4: 
      var $1=$n_addr;
      var $cmp1=(($1)|(0))==1;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $call=_malloc(4);
      var $2=$call;
      $indx=$2;
      var $3=$indx;
      var $arrayidx=(($3)|0);
      HEAP32[(($arrayidx)>>2)]=1;
      var $4=$indx;
      $retval=$4;
      label = 28; break;
    case 6: 
      var $5=$n_addr;
      var $call4=_i4vec_indicator_new($5);
      $indx=$call4;
      var $6=$n_addr;
      var $div=((((($6)|(0)))/(2))&-1);
      var $add=((($div)+(1))|0);
      $l=$add;
      var $7=$n_addr;
      $ir=$7;
      label = 7; break;
    case 7: 
      var $8=$l;
      var $cmp5=1 < (($8)|(0));
      if ($cmp5) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $9=$l;
      var $sub=((($9)-(1))|0);
      $l=$sub;
      var $10=$l;
      var $sub7=((($10)-(1))|0);
      var $11=$indx;
      var $arrayidx8=(($11+($sub7<<2))|0);
      var $12=HEAP32[(($arrayidx8)>>2)];
      $indxt=$12;
      var $13=$indxt;
      var $sub9=((($13)-(1))|0);
      var $mul=($sub9<<1);
      var $add10=(($mul)|0);
      var $14=$a_addr;
      var $arrayidx11=(($14+($add10<<3))|0);
      var $15=HEAPF64[(($arrayidx11)>>3)];
      var $arrayidx12=(($aval)|0);
      HEAPF64[(($arrayidx12)>>3)]=$15;
      var $16=$indxt;
      var $sub13=((($16)-(1))|0);
      var $mul14=($sub13<<1);
      var $add15=((($mul14)+(1))|0);
      var $17=$a_addr;
      var $arrayidx16=(($17+($add15<<3))|0);
      var $18=HEAPF64[(($arrayidx16)>>3)];
      var $arrayidx17=(($aval+8)|0);
      HEAPF64[(($arrayidx17)>>3)]=$18;
      label = 12; break;
    case 9: 
      var $19=$ir;
      var $sub18=((($19)-(1))|0);
      var $20=$indx;
      var $arrayidx19=(($20+($sub18<<2))|0);
      var $21=HEAP32[(($arrayidx19)>>2)];
      $indxt=$21;
      var $22=$indxt;
      var $sub20=((($22)-(1))|0);
      var $mul21=($sub20<<1);
      var $add22=(($mul21)|0);
      var $23=$a_addr;
      var $arrayidx23=(($23+($add22<<3))|0);
      var $24=HEAPF64[(($arrayidx23)>>3)];
      var $arrayidx24=(($aval)|0);
      HEAPF64[(($arrayidx24)>>3)]=$24;
      var $25=$indxt;
      var $sub25=((($25)-(1))|0);
      var $mul26=($sub25<<1);
      var $add27=((($mul26)+(1))|0);
      var $26=$a_addr;
      var $arrayidx28=(($26+($add27<<3))|0);
      var $27=HEAPF64[(($arrayidx28)>>3)];
      var $arrayidx29=(($aval+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$27;
      var $28=$indx;
      var $arrayidx30=(($28)|0);
      var $29=HEAP32[(($arrayidx30)>>2)];
      var $30=$ir;
      var $sub31=((($30)-(1))|0);
      var $31=$indx;
      var $arrayidx32=(($31+($sub31<<2))|0);
      HEAP32[(($arrayidx32)>>2)]=$29;
      var $32=$ir;
      var $sub33=((($32)-(1))|0);
      $ir=$sub33;
      var $33=$ir;
      var $cmp34=(($33)|(0))==1;
      if ($cmp34) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=$indxt;
      var $35=$indx;
      var $arrayidx36=(($35)|0);
      HEAP32[(($arrayidx36)>>2)]=$34;
      label = 27; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$l;
      $i=$36;
      var $37=$l;
      var $38=$l;
      var $add39=((($37)+($38))|0);
      $j=$add39;
      label = 13; break;
    case 13: 
      var $39=$j;
      var $40=$ir;
      var $cmp40=(($39)|(0)) <= (($40)|(0));
      if ($cmp40) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $41=$j;
      var $42=$ir;
      var $cmp41=(($41)|(0)) < (($42)|(0));
      if ($cmp41) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $43=$j;
      var $sub43=((($43)-(1))|0);
      var $44=$indx;
      var $arrayidx44=(($44+($sub43<<2))|0);
      var $45=HEAP32[(($arrayidx44)>>2)];
      var $sub45=((($45)-(1))|0);
      var $mul46=($sub45<<1);
      var $add47=(($mul46)|0);
      var $46=$a_addr;
      var $arrayidx48=(($46+($add47<<3))|0);
      var $47=HEAPF64[(($arrayidx48)>>3)];
      var $48=$j;
      var $49=$indx;
      var $arrayidx49=(($49+($48<<2))|0);
      var $50=HEAP32[(($arrayidx49)>>2)];
      var $sub50=((($50)-(1))|0);
      var $mul51=($sub50<<1);
      var $add52=(($mul51)|0);
      var $51=$a_addr;
      var $arrayidx53=(($51+($add52<<3))|0);
      var $52=HEAPF64[(($arrayidx53)>>3)];
      var $cmp54=$47 < $52;
      if ($cmp54) { label = 18; break; } else { label = 16; break; }
    case 16: 
      var $53=$j;
      var $sub55=((($53)-(1))|0);
      var $54=$indx;
      var $arrayidx56=(($54+($sub55<<2))|0);
      var $55=HEAP32[(($arrayidx56)>>2)];
      var $sub57=((($55)-(1))|0);
      var $mul58=($sub57<<1);
      var $add59=(($mul58)|0);
      var $56=$a_addr;
      var $arrayidx60=(($56+($add59<<3))|0);
      var $57=HEAPF64[(($arrayidx60)>>3)];
      var $58=$j;
      var $59=$indx;
      var $arrayidx61=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx61)>>2)];
      var $sub62=((($60)-(1))|0);
      var $mul63=($sub62<<1);
      var $add64=(($mul63)|0);
      var $61=$a_addr;
      var $arrayidx65=(($61+($add64<<3))|0);
      var $62=HEAPF64[(($arrayidx65)>>3)];
      var $cmp66=$57 == $62;
      if ($cmp66) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $63=$j;
      var $sub67=((($63)-(1))|0);
      var $64=$indx;
      var $arrayidx68=(($64+($sub67<<2))|0);
      var $65=HEAP32[(($arrayidx68)>>2)];
      var $sub69=((($65)-(1))|0);
      var $mul70=($sub69<<1);
      var $add71=((($mul70)+(1))|0);
      var $66=$a_addr;
      var $arrayidx72=(($66+($add71<<3))|0);
      var $67=HEAPF64[(($arrayidx72)>>3)];
      var $68=$j;
      var $69=$indx;
      var $arrayidx73=(($69+($68<<2))|0);
      var $70=HEAP32[(($arrayidx73)>>2)];
      var $sub74=((($70)-(1))|0);
      var $mul75=($sub74<<1);
      var $add76=((($mul75)+(1))|0);
      var $71=$a_addr;
      var $arrayidx77=(($71+($add76<<3))|0);
      var $72=HEAPF64[(($arrayidx77)>>3)];
      var $cmp78=$67 < $72;
      if ($cmp78) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $73=$j;
      var $add80=((($73)+(1))|0);
      $j=$add80;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $arrayidx83=(($aval)|0);
      var $74=HEAPF64[(($arrayidx83)>>3)];
      var $75=$j;
      var $sub84=((($75)-(1))|0);
      var $76=$indx;
      var $arrayidx85=(($76+($sub84<<2))|0);
      var $77=HEAP32[(($arrayidx85)>>2)];
      var $sub86=((($77)-(1))|0);
      var $mul87=($sub86<<1);
      var $add88=(($mul87)|0);
      var $78=$a_addr;
      var $arrayidx89=(($78+($add88<<3))|0);
      var $79=HEAPF64[(($arrayidx89)>>3)];
      var $cmp90=$74 < $79;
      if ($cmp90) { label = 23; break; } else { label = 21; break; }
    case 21: 
      var $arrayidx92=(($aval)|0);
      var $80=HEAPF64[(($arrayidx92)>>3)];
      var $81=$j;
      var $sub93=((($81)-(1))|0);
      var $82=$indx;
      var $arrayidx94=(($82+($sub93<<2))|0);
      var $83=HEAP32[(($arrayidx94)>>2)];
      var $sub95=((($83)-(1))|0);
      var $mul96=($sub95<<1);
      var $add97=(($mul96)|0);
      var $84=$a_addr;
      var $arrayidx98=(($84+($add97<<3))|0);
      var $85=HEAPF64[(($arrayidx98)>>3)];
      var $cmp99=$80 == $85;
      if ($cmp99) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $arrayidx101=(($aval+8)|0);
      var $86=HEAPF64[(($arrayidx101)>>3)];
      var $87=$j;
      var $sub102=((($87)-(1))|0);
      var $88=$indx;
      var $arrayidx103=(($88+($sub102<<2))|0);
      var $89=HEAP32[(($arrayidx103)>>2)];
      var $sub104=((($89)-(1))|0);
      var $mul105=($sub104<<1);
      var $add106=((($mul105)+(1))|0);
      var $90=$a_addr;
      var $arrayidx107=(($90+($add106<<3))|0);
      var $91=HEAPF64[(($arrayidx107)>>3)];
      var $cmp108=$86 < $91;
      if ($cmp108) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $92=$j;
      var $sub110=((($92)-(1))|0);
      var $93=$indx;
      var $arrayidx111=(($93+($sub110<<2))|0);
      var $94=HEAP32[(($arrayidx111)>>2)];
      var $95=$i;
      var $sub112=((($95)-(1))|0);
      var $96=$indx;
      var $arrayidx113=(($96+($sub112<<2))|0);
      HEAP32[(($arrayidx113)>>2)]=$94;
      var $97=$j;
      $i=$97;
      var $98=$j;
      var $99=$j;
      var $add114=((($98)+($99))|0);
      $j=$add114;
      label = 25; break;
    case 24: 
      var $100=$ir;
      var $add116=((($100)+(1))|0);
      $j=$add116;
      label = 25; break;
    case 25: 
      label = 13; break;
    case 26: 
      var $101=$indxt;
      var $102=$i;
      var $sub118=((($102)-(1))|0);
      var $103=$indx;
      var $arrayidx119=(($103+($sub118<<2))|0);
      HEAP32[(($arrayidx119)>>2)]=$101;
      label = 7; break;
    case 27: 
      var $104=$indx;
      $retval=$104;
      label = 28; break;
    case 28: 
      var $105=$retval;
      STACKTOP = __stackBase__;
      return $105;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r82vec_sort_heap_index_a"] = _r82vec_sort_heap_index_a;
function _r82vec_permute($n, $a, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $p_addr;
      var $a_temp=__stackBase__;
      var $i;
      var $iget;
      var $iput;
      var $istart;
      $n_addr=$n;
      $a_addr=$a;
      $p_addr=$p;
      var $0=$n_addr;
      var $1=$p_addr;
      var $call=_perm_check($0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((7016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($5, ((6936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=$n_addr;
      var $7=$p_addr;
      _i4vec_print($6, $7, ((14304)|0));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      $istart=1;
      label = 5; break;
    case 5: 
      var $8=$istart;
      var $9=$n_addr;
      var $cmp=(($8)|(0)) <= (($9)|(0));
      if ($cmp) { label = 6; break; } else { label = 21; break; }
    case 6: 
      var $10=$istart;
      var $sub=((($10)-(1))|0);
      var $11=$p_addr;
      var $arrayidx=(($11+($sub<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $cmp5=(($12)|(0)) < 0;
      if ($cmp5) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 20; break;
    case 8: 
      var $13=$istart;
      var $sub7=((($13)-(1))|0);
      var $14=$p_addr;
      var $arrayidx8=(($14+($sub7<<2))|0);
      var $15=HEAP32[(($arrayidx8)>>2)];
      var $16=$istart;
      var $cmp9=(($15)|(0))==(($16)|(0));
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$istart;
      var $sub11=((($17)-(1))|0);
      var $18=$p_addr;
      var $arrayidx12=(($18+($sub11<<2))|0);
      var $19=HEAP32[(($arrayidx12)>>2)];
      var $sub13=(((-$19))|0);
      var $20=$istart;
      var $sub14=((($20)-(1))|0);
      var $21=$p_addr;
      var $arrayidx15=(($21+($sub14<<2))|0);
      HEAP32[(($arrayidx15)>>2)]=$sub13;
      label = 20; break;
    case 10: 
      var $22=$istart;
      var $sub17=((($22)-(1))|0);
      var $mul=($sub17<<1);
      var $add=(($mul)|0);
      var $23=$a_addr;
      var $arrayidx18=(($23+($add<<3))|0);
      var $24=HEAPF64[(($arrayidx18)>>3)];
      var $arrayidx19=(($a_temp)|0);
      HEAPF64[(($arrayidx19)>>3)]=$24;
      var $25=$istart;
      var $sub20=((($25)-(1))|0);
      var $mul21=($sub20<<1);
      var $add22=((($mul21)+(1))|0);
      var $26=$a_addr;
      var $arrayidx23=(($26+($add22<<3))|0);
      var $27=HEAPF64[(($arrayidx23)>>3)];
      var $arrayidx24=(($a_temp+8)|0);
      HEAPF64[(($arrayidx24)>>3)]=$27;
      var $28=$istart;
      $iget=$28;
      label = 11; break;
    case 11: 
      var $29=$iget;
      $iput=$29;
      var $30=$iget;
      var $sub26=((($30)-(1))|0);
      var $31=$p_addr;
      var $arrayidx27=(($31+($sub26<<2))|0);
      var $32=HEAP32[(($arrayidx27)>>2)];
      $iget=$32;
      var $33=$iput;
      var $sub28=((($33)-(1))|0);
      var $34=$p_addr;
      var $arrayidx29=(($34+($sub28<<2))|0);
      var $35=HEAP32[(($arrayidx29)>>2)];
      var $sub30=(((-$35))|0);
      var $36=$iput;
      var $sub31=((($36)-(1))|0);
      var $37=$p_addr;
      var $arrayidx32=(($37+($sub31<<2))|0);
      HEAP32[(($arrayidx32)>>2)]=$sub30;
      var $38=$iget;
      var $cmp33=(($38)|(0)) < 1;
      if ($cmp33) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $39=$n_addr;
      var $40=$iget;
      var $cmp34=(($39)|(0)) < (($40)|(0));
      if ($cmp34) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $41=HEAP32[((_stderr)>>2)];
      var $call36=_fprintf($41, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $42=HEAP32[((_stderr)>>2)];
      var $call37=_fprintf($42, ((14400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $43=HEAP32[((_stderr)>>2)];
      var $44=$iput;
      var $call38=_fprintf($43, ((14256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$44,tempInt));
      var $45=HEAP32[((_stderr)>>2)];
      var $46=$iget;
      var $call39=_fprintf($45, ((14192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$46,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 14: 
      var $47=$iget;
      var $48=$istart;
      var $cmp41=(($47)|(0))==(($48)|(0));
      if ($cmp41) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $arrayidx43=(($a_temp)|0);
      var $49=HEAPF64[(($arrayidx43)>>3)];
      var $50=$iput;
      var $sub44=((($50)-(1))|0);
      var $mul45=($sub44<<1);
      var $add46=(($mul45)|0);
      var $51=$a_addr;
      var $arrayidx47=(($51+($add46<<3))|0);
      HEAPF64[(($arrayidx47)>>3)]=$49;
      var $arrayidx48=(($a_temp+8)|0);
      var $52=HEAPF64[(($arrayidx48)>>3)];
      var $53=$iput;
      var $sub49=((($53)-(1))|0);
      var $mul50=($sub49<<1);
      var $add51=((($mul50)+(1))|0);
      var $54=$a_addr;
      var $arrayidx52=(($54+($add51<<3))|0);
      HEAPF64[(($arrayidx52)>>3)]=$52;
      label = 17; break;
    case 16: 
      var $55=$iget;
      var $sub54=((($55)-(1))|0);
      var $mul55=($sub54<<1);
      var $add56=(($mul55)|0);
      var $56=$a_addr;
      var $arrayidx57=(($56+($add56<<3))|0);
      var $57=HEAPF64[(($arrayidx57)>>3)];
      var $58=$iput;
      var $sub58=((($58)-(1))|0);
      var $mul59=($sub58<<1);
      var $add60=(($mul59)|0);
      var $59=$a_addr;
      var $arrayidx61=(($59+($add60<<3))|0);
      HEAPF64[(($arrayidx61)>>3)]=$57;
      var $60=$iget;
      var $sub62=((($60)-(1))|0);
      var $mul63=($sub62<<1);
      var $add64=((($mul63)+(1))|0);
      var $61=$a_addr;
      var $arrayidx65=(($61+($add64<<3))|0);
      var $62=HEAPF64[(($arrayidx65)>>3)];
      var $63=$iput;
      var $sub66=((($63)-(1))|0);
      var $mul67=($sub66<<1);
      var $add68=((($mul67)+(1))|0);
      var $64=$a_addr;
      var $arrayidx69=(($64+($add68<<3))|0);
      HEAPF64[(($arrayidx69)>>3)]=$62;
      label = 11; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $65=$istart;
      var $inc=((($65)+(1))|0);
      $istart=$inc;
      label = 5; break;
    case 21: 
      $i=0;
      label = 22; break;
    case 22: 
      var $66=$i;
      var $67=$n_addr;
      var $cmp74=(($66)|(0)) < (($67)|(0));
      if ($cmp74) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $68=$i;
      var $69=$p_addr;
      var $arrayidx76=(($69+($68<<2))|0);
      var $70=HEAP32[(($arrayidx76)>>2)];
      var $sub77=(((-$70))|0);
      var $71=$i;
      var $72=$p_addr;
      var $arrayidx78=(($72+($71<<2))|0);
      HEAP32[(($arrayidx78)>>2)]=$sub77;
      label = 24; break;
    case 24: 
      var $73=$i;
      var $inc80=((($73)+(1))|0);
      $i=$inc80;
      label = 22; break;
    case 25: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r82vec_permute"] = _r82vec_permute;
function _r82vec_sort_quick_a($n, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $base;
      var $l_segment=__stackBase__;
      var $level;
      var $n_segment;
      var $rsave=(__stackBase__)+(8);
      var $r_segment=(__stackBase__)+(112);
      $n_addr=$n;
      $a_addr=$a;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 1;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((14120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((14432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $4=$n_addr;
      var $cmp3=(($4)|(0))==1;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 24; break;
    case 6: 
      $level=1;
      var $5=$n_addr;
      var $add=((($5)+(1))|0);
      var $6=$level;
      var $sub=((($6)-(1))|0);
      var $arrayidx=(($rsave+($sub<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$add;
      $base=1;
      var $7=$n_addr;
      $n_segment=$7;
      label = 7; break;
    case 7: 
      var $8=$n_segment;
      var $cmp6=0 < (($8)|(0));
      if ($cmp6) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $9=$n_segment;
      var $10=$a_addr;
      var $11=$base;
      var $sub7=((($11)-(1))|0);
      var $mul=($sub7<<1);
      var $add_ptr=(($10+($mul<<3))|0);
      var $add_ptr8=(($add_ptr)|0);
      _r82vec_part_quick_a($9, $add_ptr8, $l_segment, $r_segment);
      var $12=HEAP32[(($l_segment)>>2)];
      var $cmp9=1 < (($12)|(0));
      if ($cmp9) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $13=$level;
      var $cmp11=25 < (($13)|(0));
      if ($cmp11) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $14=HEAP32[((_stderr)>>2)];
      var $call13=_fprintf($14, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $15=HEAP32[((_stderr)>>2)];
      var $call14=_fprintf($15, ((14120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $16=HEAP32[((_stderr)>>2)];
      var $call15=_fprintf($16, ((14080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=25,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 11: 
      var $17=$level;
      var $add17=((($17)+(1))|0);
      $level=$add17;
      var $18=HEAP32[(($l_segment)>>2)];
      $n_segment=$18;
      var $19=HEAP32[(($r_segment)>>2)];
      var $20=$base;
      var $add18=((($19)+($20))|0);
      var $sub19=((($add18)-(1))|0);
      var $21=$level;
      var $sub20=((($21)-(1))|0);
      var $arrayidx21=(($rsave+($sub20<<2))|0);
      HEAP32[(($arrayidx21)>>2)]=$sub19;
      label = 22; break;
    case 12: 
      var $22=HEAP32[(($r_segment)>>2)];
      var $23=$n_segment;
      var $cmp22=(($22)|(0)) < (($23)|(0));
      if ($cmp22) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $24=$n_segment;
      var $add24=((($24)+(1))|0);
      var $25=HEAP32[(($r_segment)>>2)];
      var $sub25=((($add24)-($25))|0);
      $n_segment=$sub25;
      var $26=$base;
      var $27=HEAP32[(($r_segment)>>2)];
      var $add26=((($26)+($27))|0);
      var $sub27=((($add26)-(1))|0);
      $base=$sub27;
      label = 21; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $28=$level;
      var $cmp29=(($28)|(0)) <= 1;
      if ($cmp29) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $n_segment=0;
      label = 20; break;
    case 17: 
      var $29=$level;
      var $sub32=((($29)-(1))|0);
      var $arrayidx33=(($rsave+($sub32<<2))|0);
      var $30=HEAP32[(($arrayidx33)>>2)];
      $base=$30;
      var $31=$level;
      var $sub34=((($31)-(2))|0);
      var $arrayidx35=(($rsave+($sub34<<2))|0);
      var $32=HEAP32[(($arrayidx35)>>2)];
      var $33=$level;
      var $sub36=((($33)-(1))|0);
      var $arrayidx37=(($rsave+($sub36<<2))|0);
      var $34=HEAP32[(($arrayidx37)>>2)];
      var $sub38=((($32)-($34))|0);
      $n_segment=$sub38;
      var $35=$level;
      var $sub39=((($35)-(1))|0);
      $level=$sub39;
      var $36=$n_segment;
      var $cmp40=0 < (($36)|(0));
      if ($cmp40) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      label = 15; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 7; break;
    case 23: 
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r82vec_sort_quick_a"] = _r82vec_sort_quick_a;
function _r8vec_bracket($n, $x, $xval, $left, $right) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $x_addr;
      var $xval_addr;
      var $left_addr;
      var $right_addr;
      var $i;
      $n_addr=$n;
      $x_addr=$x;
      $xval_addr=$xval;
      $left_addr=$left;
      $right_addr=$right;
      $i=2;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $sub=((($1)-(1))|0);
      var $cmp=(($0)|(0)) <= (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $2=$xval_addr;
      var $3=$i;
      var $sub1=((($3)-(1))|0);
      var $4=$x_addr;
      var $arrayidx=(($4+($sub1<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $cmp2=$2 < $5;
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$i;
      var $sub3=((($6)-(1))|0);
      var $7=$left_addr;
      HEAP32[(($7)>>2)]=$sub3;
      var $8=$i;
      var $9=$right_addr;
      HEAP32[(($9)>>2)]=$8;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $11=$n_addr;
      var $sub4=((($11)-(1))|0);
      var $12=$left_addr;
      HEAP32[(($12)>>2)]=$sub4;
      var $13=$n_addr;
      var $14=$right_addr;
      HEAP32[(($14)>>2)]=$13;
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_bracket"] = _r8vec_bracket;
function _r8vec_cross_product_2d($v1, $v2) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $value;
  $v1_addr=$v1;
  $v2_addr=$v2;
  var $0=$v1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$v2_addr;
  var $arrayidx1=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($1)*($3);
  var $4=$v1_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$v2_addr;
  var $arrayidx3=(($6)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($5)*($7);
  var $sub=($mul)-($mul4);
  $value=$sub;
  var $8=$value;
  return $8;
}
Module["_r8vec_cross_product_2d"] = _r8vec_cross_product_2d;
function _r8vec_dot_product_affine($n, $v0, $v1, $v2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v0_addr;
      var $v1_addr;
      var $v2_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $v0_addr=$v0;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$v1_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$v0_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=$i;
      var $10=$v2_addr;
      var $arrayidx2=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx2)>>3)];
      var $12=$i;
      var $13=$v0_addr;
      var $arrayidx3=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($11)-($14);
      var $mul=($sub)*($sub4);
      var $add=($2)+($mul);
      $value=$add;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $16=$value;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_dot_product_affine"] = _r8vec_dot_product_affine;
function _r8mat_det_5d($a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b=__stackBase__;
      var $det;
      var $i;
      var $inc;
      var $j;
      var $k;
      var $sign;
      $a_addr=$a;
      $det=0;
      $sign=1;
      $k=0;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $cmp=(($0)|(0)) < 5;
      if ($cmp) { label = 4; break; } else { label = 17; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $1=$i;
      var $cmp2=(($1)|(0)) < 4;
      if ($cmp2) { label = 6; break; } else { label = 15; break; }
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $2=$j;
      var $cmp5=(($2)|(0)) < 4;
      if ($cmp5) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $3=$j;
      var $4=$k;
      var $cmp7=(($3)|(0)) < (($4)|(0));
      if ($cmp7) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $inc=0;
      label = 11; break;
    case 10: 
      $inc=1;
      label = 11; break;
    case 11: 
      var $5=$i;
      var $add=((($5)+(1))|0);
      var $6=$j;
      var $7=$inc;
      var $add8=((($6)+($7))|0);
      var $mul=((($add8)*(5))&-1);
      var $add9=((($add)+($mul))|0);
      var $8=$a_addr;
      var $arrayidx=(($8+($add9<<3))|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$i;
      var $11=$j;
      var $mul10=($11<<2);
      var $add11=((($10)+($mul10))|0);
      var $arrayidx12=(($b+($add11<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$9;
      label = 12; break;
    case 12: 
      var $12=$j;
      var $inc13=((($12)+(1))|0);
      $j=$inc13;
      label = 7; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $13=$i;
      var $inc15=((($13)+(1))|0);
      $i=$inc15;
      label = 5; break;
    case 15: 
      var $14=$det;
      var $15=$sign;
      var $16=$k;
      var $mul17=((($16)*(5))&-1);
      var $add18=(($mul17)|0);
      var $17=$a_addr;
      var $arrayidx19=(($17+($add18<<3))|0);
      var $18=HEAPF64[(($arrayidx19)>>3)];
      var $mul20=($15)*($18);
      var $arraydecay=(($b)|0);
      var $call=_r8mat_det_4d($arraydecay);
      var $mul21=($mul20)*($call);
      var $add22=($14)+($mul21);
      $det=$add22;
      var $19=$sign;
      var $sub=(-$19);
      $sign=$sub;
      label = 16; break;
    case 16: 
      var $20=$k;
      var $inc24=((($20)+(1))|0);
      $k=$inc24;
      label = 3; break;
    case 17: 
      var $21=$det;
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_det_5d"] = _r8mat_det_5d;
function _r8mat_mv($m, $n, $a, $x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $x_addr;
      var $i;
      var $j;
      var $y;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $x_addr=$x;
      var $0=$m_addr;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $y=$1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$m_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $4=$i;
      var $5=$y;
      var $arrayidx=(($5+($4<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $j=0;
      label = 5; break;
    case 5: 
      var $6=$j;
      var $7=$n_addr;
      var $cmp2=(($6)|(0)) < (($7)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $8=$i;
      var $9=$y;
      var $arrayidx4=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx4)>>3)];
      var $11=$i;
      var $12=$j;
      var $13=$n_addr;
      var $mul5=(Math.imul($12,$13)|0);
      var $add=((($11)+($mul5))|0);
      var $14=$a_addr;
      var $arrayidx6=(($14+($add<<3))|0);
      var $15=HEAPF64[(($arrayidx6)>>3)];
      var $16=$j;
      var $17=$x_addr;
      var $arrayidx7=(($17+($16<<3))|0);
      var $18=HEAPF64[(($arrayidx7)>>3)];
      var $mul8=($15)*($18);
      var $add9=($10)+($mul8);
      var $19=$i;
      var $20=$y;
      var $arrayidx10=(($20+($19<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$add9;
      label = 7; break;
    case 7: 
      var $21=$j;
      var $inc=((($21)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $22=$i;
      var $inc12=((($22)+(1))|0);
      $i=$inc12;
      label = 3; break;
    case 10: 
      var $23=$y;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_mv"] = _r8mat_mv;
function _r8mat_print($m, $n, $a, $title) {
  var label = 0;
  var $m_addr;
  var $n_addr;
  var $a_addr;
  var $title_addr;
  $m_addr=$m;
  $n_addr=$n;
  $a_addr=$a;
  $title_addr=$title;
  var $0=$m_addr;
  var $1=$n_addr;
  var $2=$a_addr;
  var $3=$m_addr;
  var $4=$n_addr;
  var $5=$title_addr;
  _r8mat_print_some($0, $1, $2, 1, 1, $3, $4, $5);
  return;
}
Module["_r8mat_print"] = _r8mat_print;
function _r8mat_print_some($m, $n, $a, $ilo, $jlo, $ihi, $jhi, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $ilo_addr;
      var $jlo_addr;
      var $ihi_addr;
      var $jhi_addr;
      var $title_addr;
      var $i;
      var $i2hi;
      var $i2lo;
      var $j;
      var $j2hi;
      var $j2lo;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $ilo_addr=$ilo;
      $jlo_addr=$jlo;
      $ihi_addr=$ihi;
      $jhi_addr=$jhi;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=$jlo_addr;
      $j2lo=$3;
      label = 3; break;
    case 3: 
      var $4=$j2lo;
      var $5=$jhi_addr;
      var $cmp=(($4)|(0)) <= (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $6=$j2lo;
      var $add=((($6)+(5))|0);
      var $sub=((($add)-(1))|0);
      $j2hi=$sub;
      var $7=$j2hi;
      var $8=$n_addr;
      var $call2=_i4_min($7, $8);
      $j2hi=$call2;
      var $9=$j2hi;
      var $10=$jhi_addr;
      var $call3=_i4_min($9, $10);
      $j2hi=$call3;
      var $11=HEAP32[((_stdout)>>2)];
      var $call4=_fprintf($11, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $12=HEAP32[((_stdout)>>2)];
      var $call5=_fprintf($12, ((14064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $13=$j2lo;
      $j=$13;
      label = 5; break;
    case 5: 
      var $14=$j;
      var $15=$j2hi;
      var $cmp7=(($14)|(0)) <= (($15)|(0));
      if ($cmp7) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $16=HEAP32[((_stdout)>>2)];
      var $17=$j;
      var $call9=_fprintf($16, ((14048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$17,tempInt));
      label = 7; break;
    case 7: 
      var $18=$j;
      var $inc=((($18)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $19=HEAP32[((_stdout)>>2)];
      var $call10=_fprintf($19, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=HEAP32[((_stdout)>>2)];
      var $call11=_fprintf($20, ((10096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAP32[((_stdout)>>2)];
      var $call12=_fprintf($21, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $22=$ilo_addr;
      var $call13=_i4_max($22, 1);
      $i2lo=$call13;
      var $23=$ihi_addr;
      var $24=$m_addr;
      var $call14=_i4_min($23, $24);
      $i2hi=$call14;
      var $25=$i2lo;
      $i=$25;
      label = 9; break;
    case 9: 
      var $26=$i;
      var $27=$i2hi;
      var $cmp16=(($26)|(0)) <= (($27)|(0));
      if ($cmp16) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $28=HEAP32[((_stdout)>>2)];
      var $29=$i;
      var $call18=_fprintf($28, ((14040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$29,tempInt));
      var $30=$j2lo;
      $j=$30;
      label = 11; break;
    case 11: 
      var $31=$j;
      var $32=$j2hi;
      var $cmp20=(($31)|(0)) <= (($32)|(0));
      if ($cmp20) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $33=HEAP32[((_stdout)>>2)];
      var $34=$i;
      var $sub22=((($34)-(1))|0);
      var $35=$j;
      var $sub23=((($35)-(1))|0);
      var $36=$m_addr;
      var $mul=(Math.imul($sub23,$36)|0);
      var $add24=((($sub22)+($mul))|0);
      var $37=$a_addr;
      var $arrayidx=(($37+($add24<<3))|0);
      var $38=HEAPF64[(($arrayidx)>>3)];
      var $call25=_fprintf($33, ((14016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$38,tempInt));
      label = 13; break;
    case 13: 
      var $39=$j;
      var $inc27=((($39)+(1))|0);
      $j=$inc27;
      label = 11; break;
    case 14: 
      var $40=HEAP32[((_stdout)>>2)];
      var $call29=_fprintf($40, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $41=$i;
      var $inc31=((($41)+(1))|0);
      $i=$inc31;
      label = 9; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $42=$j2lo;
      var $add34=((($42)+(5))|0);
      $j2lo=$add34;
      label = 3; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_print_some"] = _r8mat_print_some;
function _r8mat_transpose_print($m, $n, $a, $title) {
  var label = 0;
  var $m_addr;
  var $n_addr;
  var $a_addr;
  var $title_addr;
  $m_addr=$m;
  $n_addr=$n;
  $a_addr=$a;
  $title_addr=$title;
  var $0=$m_addr;
  var $1=$n_addr;
  var $2=$a_addr;
  var $3=$m_addr;
  var $4=$n_addr;
  var $5=$title_addr;
  _r8mat_transpose_print_some($0, $1, $2, 1, 1, $3, $4, $5);
  return;
}
Module["_r8mat_transpose_print"] = _r8mat_transpose_print;
function _r8mat_transpose_print_some($m, $n, $a, $ilo, $jlo, $ihi, $jhi, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $a_addr;
      var $ilo_addr;
      var $jlo_addr;
      var $ihi_addr;
      var $jhi_addr;
      var $title_addr;
      var $i;
      var $i2;
      var $i2hi;
      var $i2lo;
      var $inc;
      var $j;
      var $j2hi;
      var $j2lo;
      $m_addr=$m;
      $n_addr=$n;
      $a_addr=$a;
      $ilo_addr=$ilo;
      $jlo_addr=$jlo;
      $ihi_addr=$ihi;
      $jhi_addr=$jhi;
      $title_addr=$title;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$title_addr;
      var $call1=_fprintf($1, ((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2,tempInt));
      var $3=$ilo_addr;
      var $call2=_i4_max($3, 1);
      $i2lo=$call2;
      label = 3; break;
    case 3: 
      var $4=$i2lo;
      var $5=$ihi_addr;
      var $6=$m_addr;
      var $call3=_i4_min($5, $6);
      var $cmp=(($4)|(0)) <= (($call3)|(0));
      if ($cmp) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $7=$i2lo;
      var $add=((($7)+(5))|0);
      var $sub=((($add)-(1))|0);
      $i2hi=$sub;
      var $8=$i2hi;
      var $9=$m_addr;
      var $call4=_i4_min($8, $9);
      $i2hi=$call4;
      var $10=$i2hi;
      var $11=$ihi_addr;
      var $call5=_i4_min($10, $11);
      $i2hi=$call5;
      var $12=$i2hi;
      var $add6=((($12)+(1))|0);
      var $13=$i2lo;
      var $sub7=((($add6)-($13))|0);
      $inc=$sub7;
      var $14=HEAP32[((_stdout)>>2)];
      var $call8=_fprintf($14, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $15=HEAP32[((_stdout)>>2)];
      var $call9=_fprintf($15, ((14008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $16=$i2lo;
      $i=$16;
      label = 5; break;
    case 5: 
      var $17=$i;
      var $18=$i2hi;
      var $cmp11=(($17)|(0)) <= (($18)|(0));
      if ($cmp11) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $19=HEAP32[((_stdout)>>2)];
      var $20=$i;
      var $call13=_fprintf($19, ((14048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$20,tempInt));
      label = 7; break;
    case 7: 
      var $21=$i;
      var $inc14=((($21)+(1))|0);
      $i=$inc14;
      label = 5; break;
    case 8: 
      var $22=HEAP32[((_stdout)>>2)];
      var $call15=_fprintf($22, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $23=HEAP32[((_stdout)>>2)];
      var $call16=_fprintf($23, ((9952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $24=HEAP32[((_stdout)>>2)];
      var $call17=_fprintf($24, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $25=$jlo_addr;
      var $call18=_i4_max($25, 1);
      $j2lo=$call18;
      var $26=$jhi_addr;
      var $27=$n_addr;
      var $call19=_i4_min($26, $27);
      $j2hi=$call19;
      var $28=$j2lo;
      $j=$28;
      label = 9; break;
    case 9: 
      var $29=$j;
      var $30=$j2hi;
      var $cmp21=(($29)|(0)) <= (($30)|(0));
      if ($cmp21) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $31=HEAP32[((_stdout)>>2)];
      var $32=$j;
      var $call23=_fprintf($31, ((14040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$32,tempInt));
      $i2=1;
      label = 11; break;
    case 11: 
      var $33=$i2;
      var $34=$inc;
      var $cmp25=(($33)|(0)) <= (($34)|(0));
      if ($cmp25) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $35=$i2lo;
      var $sub27=((($35)-(1))|0);
      var $36=$i2;
      var $add28=((($sub27)+($36))|0);
      $i=$add28;
      var $37=HEAP32[((_stdout)>>2)];
      var $38=$i;
      var $sub29=((($38)-(1))|0);
      var $39=$j;
      var $sub30=((($39)-(1))|0);
      var $40=$m_addr;
      var $mul=(Math.imul($sub30,$40)|0);
      var $add31=((($sub29)+($mul))|0);
      var $41=$a_addr;
      var $arrayidx=(($41+($add31<<3))|0);
      var $42=HEAPF64[(($arrayidx)>>3)];
      var $call32=_fprintf($37, ((14016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$42,tempInt));
      label = 13; break;
    case 13: 
      var $43=$i2;
      var $inc34=((($43)+(1))|0);
      $i2=$inc34;
      label = 11; break;
    case 14: 
      var $44=HEAP32[((_stdout)>>2)];
      var $call36=_fprintf($44, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 15; break;
    case 15: 
      var $45=$j;
      var $inc38=((($45)+(1))|0);
      $j=$inc38;
      label = 9; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $46=$i2lo;
      var $add41=((($46)+(5))|0);
      $i2lo=$add41;
      label = 3; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_transpose_print_some"] = _r8mat_transpose_print_some;
function _r8vec_angle_3d($u, $v) {
  var label = 0;
  var $u_addr;
  var $v_addr;
  var $angle;
  var $angle_cos;
  var $u_norm;
  var $uv_dot;
  var $v_norm;
  $u_addr=$u;
  $v_addr=$v;
  var $0=$u_addr;
  var $1=$v_addr;
  var $call=_r8vec_dot_product(3, $0, $1);
  $uv_dot=$call;
  var $2=$u_addr;
  var $3=$u_addr;
  var $call1=_r8vec_dot_product(3, $2, $3);
  var $call2=Math.sqrt($call1);
  $u_norm=$call2;
  var $4=$v_addr;
  var $5=$v_addr;
  var $call3=_r8vec_dot_product(3, $4, $5);
  var $call4=Math.sqrt($call3);
  $v_norm=$call4;
  var $6=$uv_dot;
  var $7=$u_norm;
  var $div=($6)/($7);
  var $8=$v_norm;
  var $div5=($div)/($8);
  $angle_cos=$div5;
  var $9=$angle_cos;
  var $call6=_r8_acos($9);
  $angle=$call6;
  var $10=$angle;
  return $10;
}
Module["_r8vec_angle_3d"] = _r8vec_angle_3d;
function _r8mat_uniform_new($m, $n, $b, $c, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $b_addr;
      var $c_addr;
      var $seed_addr;
      var $i;
      var $i4_huge;
      var $j;
      var $k;
      var $r;
      $m_addr=$m;
      $n_addr=$n;
      $b_addr=$b;
      $c_addr=$c;
      $seed_addr=$seed;
      $i4_huge=2147483647;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((13936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((10840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $2=$m_addr;
      var $3=$n_addr;
      var $mul=(Math.imul($2,$3)|0);
      var $mul3=($mul<<3);
      var $call4=_malloc($mul3);
      var $4=$call4;
      $r=$4;
      $j=0;
      label = 5; break;
    case 5: 
      var $5=$j;
      var $6=$n_addr;
      var $cmp5=(($5)|(0)) < (($6)|(0));
      if ($cmp5) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $7=$i;
      var $8=$m_addr;
      var $cmp7=(($7)|(0)) < (($8)|(0));
      if ($cmp7) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $9=$seed_addr;
      var $10=HEAP32[(($9)>>2)];
      var $div=((((($10)|(0)))/(127773))&-1);
      $k=$div;
      var $11=$seed_addr;
      var $12=HEAP32[(($11)>>2)];
      var $13=$k;
      var $mul9=((($13)*(127773))&-1);
      var $sub=((($12)-($mul9))|0);
      var $mul10=((($sub)*(16807))&-1);
      var $14=$k;
      var $mul11=((($14)*(2836))&-1);
      var $sub12=((($mul10)-($mul11))|0);
      var $15=$seed_addr;
      HEAP32[(($15)>>2)]=$sub12;
      var $16=$seed_addr;
      var $17=HEAP32[(($16)>>2)];
      var $cmp13=(($17)|(0)) < 0;
      if ($cmp13) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $18=$seed_addr;
      var $19=HEAP32[(($18)>>2)];
      var $20=$i4_huge;
      var $add=((($19)+($20))|0);
      var $21=$seed_addr;
      HEAP32[(($21)>>2)]=$add;
      label = 10; break;
    case 10: 
      var $22=$b_addr;
      var $23=$c_addr;
      var $24=$b_addr;
      var $sub16=($23)-($24);
      var $25=$seed_addr;
      var $26=HEAP32[(($25)>>2)];
      var $conv=(($26)|(0));
      var $mul17=($sub16)*($conv);
      var $mul18=($mul17)*(4.656612875e-10);
      var $add19=($22)+($mul18);
      var $27=$i;
      var $28=$j;
      var $29=$m_addr;
      var $mul20=(Math.imul($28,$29)|0);
      var $add21=((($27)+($mul20))|0);
      var $30=$r;
      var $arrayidx=(($30+($add21<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=$add19;
      label = 11; break;
    case 11: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $32=$j;
      var $inc23=((($32)+(1))|0);
      $j=$inc23;
      label = 5; break;
    case 14: 
      var $33=$r;
      STACKTOP = __stackBase__;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_uniform_new"] = _r8mat_uniform_new;
function _r8mat_uniform_01($m, $n, $seed, $r) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $n_addr;
      var $seed_addr;
      var $r_addr;
      var $i;
      var $i4_huge;
      var $j;
      var $k;
      $m_addr=$m;
      $n_addr=$n;
      $seed_addr=$seed;
      $r_addr=$r;
      $i4_huge=2147483647;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((13896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((10840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $3=$n_addr;
      var $cmp3=(($2)|(0)) < (($3)|(0));
      if ($cmp3) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $4=$i;
      var $5=$m_addr;
      var $cmp5=(($4)|(0)) < (($5)|(0));
      if ($cmp5) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $6=$seed_addr;
      var $7=HEAP32[(($6)>>2)];
      var $div=((((($7)|(0)))/(127773))&-1);
      $k=$div;
      var $8=$seed_addr;
      var $9=HEAP32[(($8)>>2)];
      var $10=$k;
      var $mul=((($10)*(127773))&-1);
      var $sub=((($9)-($mul))|0);
      var $mul7=((($sub)*(16807))&-1);
      var $11=$k;
      var $mul8=((($11)*(2836))&-1);
      var $sub9=((($mul7)-($mul8))|0);
      var $12=$seed_addr;
      HEAP32[(($12)>>2)]=$sub9;
      var $13=$seed_addr;
      var $14=HEAP32[(($13)>>2)];
      var $cmp10=(($14)|(0)) < 0;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $15=$seed_addr;
      var $16=HEAP32[(($15)>>2)];
      var $17=$i4_huge;
      var $add=((($16)+($17))|0);
      var $18=$seed_addr;
      HEAP32[(($18)>>2)]=$add;
      label = 10; break;
    case 10: 
      var $19=$seed_addr;
      var $20=HEAP32[(($19)>>2)];
      var $conv=(($20)|(0));
      var $mul13=($conv)*(4.656612875e-10);
      var $21=$i;
      var $22=$j;
      var $23=$m_addr;
      var $mul14=(Math.imul($22,$23)|0);
      var $add15=((($21)+($mul14))|0);
      var $24=$r_addr;
      var $arrayidx=(($24+($add15<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=$mul13;
      label = 11; break;
    case 11: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $26=$j;
      var $inc17=((($26)+(1))|0);
      $j=$inc17;
      label = 5; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8mat_uniform_01"] = _r8mat_uniform_01;
function _r8vec_mean($n, $x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $x_addr;
      var $i;
      var $mean;
      $n_addr=$n;
      $x_addr=$x;
      $mean=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$mean;
      var $3=$i;
      var $4=$x_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $add=($2)+($5);
      $mean=$add;
      label = 5; break;
    case 5: 
      var $6=$i;
      var $inc=((($6)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $7=$mean;
      var $8=$n_addr;
      var $conv=(($8)|(0));
      var $div=($7)/($conv);
      $mean=$div;
      var $9=$mean;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_mean"] = _r8vec_mean;
function _r8vec_normsq($n, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $a_addr;
      var $i;
      var $v;
      $n_addr=$n;
      $a_addr=$a;
      $v=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$v;
      var $3=$i;
      var $4=$a_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$a_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($5)*($8);
      var $add=($2)+($mul);
      $v=$add;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $10=$v;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_normsq"] = _r8vec_normsq;
function _r8vec_normsq_affine($n, $v0, $v1) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v0_addr;
      var $v1_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $v0_addr=$v0;
      $v1_addr=$v1;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$v1_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$v0_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=$i;
      var $10=$v1_addr;
      var $arrayidx2=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx2)>>3)];
      var $12=$i;
      var $13=$v0_addr;
      var $arrayidx3=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($11)-($14);
      var $mul=($sub)*($sub4);
      var $add=($2)+($mul);
      $value=$add;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $16=$value;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_normsq_affine"] = _r8vec_normsq_affine;
function _r8vec_max($n, $r8vec) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $r8vec_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $r8vec_addr=$r8vec;
      var $call=_r8_huge();
      var $sub=(-$call);
      $value=$sub;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$value;
      $retval=$1;
      label = 11; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp1=(($2)|(0)) < (($3)|(0));
      if ($cmp1) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $4=$value;
      var $5=$i;
      var $6=$r8vec_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $cmp2=$4 < $7;
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$i;
      var $9=$r8vec_addr;
      var $arrayidx4=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx4)>>3)];
      $value=$10;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $12=$value;
      $retval=$12;
      label = 11; break;
    case 11: 
      var $13=$retval;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_max"] = _r8vec_max;
function _r8vec_min($n, $r8vec) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $n_addr;
      var $r8vec_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $r8vec_addr=$r8vec;
      var $call=_r8_huge();
      $value=$call;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$value;
      $retval=$1;
      label = 11; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp1=(($2)|(0)) < (($3)|(0));
      if ($cmp1) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $4=$i;
      var $5=$r8vec_addr;
      var $arrayidx=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$value;
      var $cmp2=$6 < $7;
      if ($cmp2) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$i;
      var $9=$r8vec_addr;
      var $arrayidx4=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx4)>>3)];
      $value=$10;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $12=$value;
      $retval=$12;
      label = 11; break;
    case 11: 
      var $13=$retval;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_min"] = _r8vec_min;
function _r8vec_norm_affine($n, $v0, $v1) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $v0_addr;
      var $v1_addr;
      var $i;
      var $value;
      $n_addr=$n;
      $v0_addr=$v0;
      $v1_addr=$v1;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$v1_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$v0_addr;
      var $arrayidx1=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($8);
      var $9=$i;
      var $10=$v1_addr;
      var $arrayidx2=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx2)>>3)];
      var $12=$i;
      var $13=$v0_addr;
      var $arrayidx3=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($11)-($14);
      var $mul=($sub)*($sub4);
      var $add=($2)+($mul);
      $value=$add;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $16=$value;
      var $call=Math.sqrt($16);
      $value=$call;
      var $17=$value;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_norm_affine"] = _r8vec_norm_affine;
function _r8vec_uniform_01_new($n, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $seed_addr;
      var $i;
      var $k;
      var $r;
      $n_addr=$n;
      $seed_addr=$seed;
      var $0=$n_addr;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $r=$1;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $4=$seed_addr;
      var $5=HEAP32[(($4)>>2)];
      var $div=((((($5)|(0)))/(127773))&-1);
      $k=$div;
      var $6=$seed_addr;
      var $7=HEAP32[(($6)>>2)];
      var $8=$k;
      var $mul1=((($8)*(127773))&-1);
      var $sub=((($7)-($mul1))|0);
      var $mul2=((($sub)*(16807))&-1);
      var $9=$k;
      var $mul3=((($9)*(2836))&-1);
      var $sub4=((($mul2)-($mul3))|0);
      var $10=$seed_addr;
      HEAP32[(($10)>>2)]=$sub4;
      var $11=$seed_addr;
      var $12=HEAP32[(($11)>>2)];
      var $cmp5=(($12)|(0)) < 0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$seed_addr;
      var $14=HEAP32[(($13)>>2)];
      var $add=((($14)+(2147483647))|0);
      var $15=$seed_addr;
      HEAP32[(($15)>>2)]=$add;
      label = 6; break;
    case 6: 
      var $16=$seed_addr;
      var $17=HEAP32[(($16)>>2)];
      var $conv=(($17)|(0));
      var $mul6=($conv)*(4.656612875e-10);
      var $18=$i;
      var $19=$r;
      var $arrayidx=(($19+($18<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=$mul6;
      label = 7; break;
    case 7: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 8: 
      var $21=$r;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_uniform_01_new"] = _r8vec_uniform_01_new;
function _r8vec_print_2d($x, $y, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $y_addr;
      var $title_addr;
      $x_addr=$x;
      $y_addr=$y;
      $title_addr=$title;
      var $0=$title_addr;
      var $call=_s_len_trim($0);
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$x_addr;
      var $3=$y_addr;
      var $call1=_fprintf($1, ((13752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$2,HEAPF64[(((tempInt)+(8))>>3)]=$3,tempInt));
      label = 5; break;
    case 4: 
      var $4=HEAP32[((_stdout)>>2)];
      var $5=$title_addr;
      var $6=$x_addr;
      var $7=$y_addr;
      var $call2=_fprintf($4, ((13728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,HEAPF64[(((tempInt)+(8))>>3)]=$6,HEAPF64[(((tempInt)+(16))>>3)]=$7,tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_print_2d"] = _r8vec_print_2d;
function _s_len_trim($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $n;
      var $t;
      $s_addr=$s;
      var $0=$s_addr;
      var $call=_strlen($0);
      $n=$call;
      var $1=$s_addr;
      var $2=$s_addr;
      var $call1=_strlen($2);
      var $add_ptr=(($1+$call1)|0);
      var $add_ptr2=((($add_ptr)-(1))|0);
      $t=$add_ptr2;
      label = 3; break;
    case 3: 
      var $3=$n;
      var $cmp=0 < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $4=$t;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $cmp3=(($conv)|(0))!=32;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=$n;
      $retval=$6;
      label = 8; break;
    case 6: 
      var $7=$t;
      var $incdec_ptr=((($7)-(1))|0);
      $t=$incdec_ptr;
      var $8=$n;
      var $dec=((($8)-(1))|0);
      $n=$dec;
      label = 3; break;
    case 7: 
      var $9=$n;
      $retval=$9;
      label = 8; break;
    case 8: 
      var $10=$retval;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_s_len_trim"] = _s_len_trim;
function _r8vec_print_3d($x, $y, $z, $title) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $x_addr;
      var $y_addr;
      var $z_addr;
      var $title_addr;
      $x_addr=$x;
      $y_addr=$y;
      $z_addr=$z;
      $title_addr=$title;
      var $0=$title_addr;
      var $call=_s_len_trim($0);
      var $cmp=(($call)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stdout)>>2)];
      var $2=$x_addr;
      var $3=$y_addr;
      var $4=$z_addr;
      var $call1=_fprintf($1, ((13672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$2,HEAPF64[(((tempInt)+(8))>>3)]=$3,HEAPF64[(((tempInt)+(16))>>3)]=$4,tempInt));
      label = 5; break;
    case 4: 
      var $5=HEAP32[((_stdout)>>2)];
      var $6=$title_addr;
      var $7=$x_addr;
      var $8=$y_addr;
      var $9=$z_addr;
      var $call2=_fprintf($5, ((13648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,HEAPF64[(((tempInt)+(8))>>3)]=$7,HEAPF64[(((tempInt)+(16))>>3)]=$8,HEAPF64[(((tempInt)+(24))>>3)]=$9,tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_print_3d"] = _r8vec_print_3d;
function _r8vec_uniform_unit_new($m, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $seed_addr;
      var $a;
      var $i;
      var $norm;
      $m_addr=$m;
      $seed_addr=$seed;
      var $0=$m_addr;
      var $1=$seed_addr;
      var $call=_r8vec_normal_01_new($0, $1);
      $a=$call;
      $norm=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$m_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$norm;
      var $5=$i;
      var $6=$a;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$a;
      var $arrayidx1=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($7)*($10);
      var $add=($4)+($mul);
      $norm=$add;
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $12=$norm;
      var $call2=Math.sqrt($12);
      $norm=$call2;
      $i=0;
      label = 7; break;
    case 7: 
      var $13=$i;
      var $14=$m_addr;
      var $cmp4=(($13)|(0)) < (($14)|(0));
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $15=$i;
      var $16=$a;
      var $arrayidx6=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx6)>>3)];
      var $18=$norm;
      var $div=($17)/($18);
      var $19=$i;
      var $20=$a;
      var $arrayidx7=(($20+($19<<3))|0);
      HEAPF64[(($arrayidx7)>>3)]=$div;
      label = 9; break;
    case 9: 
      var $21=$i;
      var $inc9=((($21)+(1))|0);
      $i=$inc9;
      label = 7; break;
    case 10: 
      var $22=$a;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_uniform_unit_new"] = _r8vec_uniform_unit_new;
function _r8vec_variance($n, $x) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $x_addr;
      var $i;
      var $mean;
      var $variance;
      $n_addr=$n;
      $x_addr=$x;
      var $0=$n_addr;
      var $1=$x_addr;
      var $call=_r8vec_mean($0, $1);
      $mean=$call;
      $variance=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $2=$i;
      var $3=$n_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$variance;
      var $5=$i;
      var $6=$x_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$mean;
      var $sub=($7)-($8);
      var $9=$i;
      var $10=$x_addr;
      var $arrayidx1=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx1)>>3)];
      var $12=$mean;
      var $sub2=($11)-($12);
      var $mul=($sub)*($sub2);
      var $add=($4)+($mul);
      $variance=$add;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $14=$n_addr;
      var $cmp3=1 < (($14)|(0));
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$variance;
      var $16=$n_addr;
      var $sub4=((($16)-(1))|0);
      var $conv=(($sub4)|(0));
      var $div=($15)/($conv);
      $variance=$div;
      label = 9; break;
    case 8: 
      $variance=0;
      label = 9; break;
    case 9: 
      var $17=$variance;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_variance"] = _r8vec_variance;
function _radec_distance_3d($ra1, $dec1, $ra2, $dec2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $ra1_addr;
      var $dec1_addr;
      var $ra2_addr;
      var $dec2_addr;
      var $cos_theta;
      var $i;
      var $norm_v1;
      var $norm_v2;
      var $phi1;
      var $phi2;
      var $theta1;
      var $theta2;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(24);
      var $value;
      $ra1_addr=$ra1;
      $dec1_addr=$dec1;
      $ra2_addr=$ra2;
      $dec2_addr=$dec2;
      var $0=$ra1_addr;
      var $mul=($0)*(15);
      var $call=_degrees_to_radians($mul);
      $theta1=$call;
      var $1=$dec1_addr;
      var $call1=_degrees_to_radians($1);
      $phi1=$call1;
      var $2=$theta1;
      var $call2=Math.cos($2);
      var $3=$phi1;
      var $call3=Math.cos($3);
      var $mul4=($call2)*($call3);
      var $arrayidx=(($v1)|0);
      HEAPF64[(($arrayidx)>>3)]=$mul4;
      var $4=$theta1;
      var $call5=Math.sin($4);
      var $5=$phi1;
      var $call6=Math.cos($5);
      var $mul7=($call5)*($call6);
      var $arrayidx8=(($v1+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$mul7;
      var $6=$phi1;
      var $call9=Math.sin($6);
      var $arrayidx10=(($v1+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$call9;
      var $arraydecay=(($v1)|0);
      var $call11=_r8vec_norm(3, $arraydecay);
      $norm_v1=$call11;
      var $7=$ra2_addr;
      var $mul12=($7)*(15);
      var $call13=_degrees_to_radians($mul12);
      $theta2=$call13;
      var $8=$dec2_addr;
      var $call14=_degrees_to_radians($8);
      $phi2=$call14;
      var $9=$theta2;
      var $call15=Math.cos($9);
      var $10=$phi2;
      var $call16=Math.cos($10);
      var $mul17=($call15)*($call16);
      var $arrayidx18=(($v2)|0);
      HEAPF64[(($arrayidx18)>>3)]=$mul17;
      var $11=$theta2;
      var $call19=Math.sin($11);
      var $12=$phi2;
      var $call20=Math.cos($12);
      var $mul21=($call19)*($call20);
      var $arrayidx22=(($v2+8)|0);
      HEAPF64[(($arrayidx22)>>3)]=$mul21;
      var $13=$phi2;
      var $call23=Math.sin($13);
      var $arrayidx24=(($v2+16)|0);
      HEAPF64[(($arrayidx24)>>3)]=$call23;
      var $arraydecay25=(($v2)|0);
      var $call26=_r8vec_norm(3, $arraydecay25);
      $norm_v2=$call26;
      $cos_theta=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $14=$i;
      var $cmp=(($14)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $15=$cos_theta;
      var $16=$i;
      var $arrayidx27=(($v2+($16<<3))|0);
      var $17=HEAPF64[(($arrayidx27)>>3)];
      var $18=$i;
      var $arrayidx28=(($v2+($18<<3))|0);
      var $19=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($17)*($19);
      var $add=($15)+($mul29);
      $cos_theta=$add;
      label = 5; break;
    case 5: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $21=$cos_theta;
      var $call30=Math.sqrt($21);
      $cos_theta=$call30;
      var $22=$cos_theta;
      var $23=$norm_v1;
      var $24=$norm_v2;
      var $mul31=($23)*($24);
      var $div=($22)/($mul31);
      $cos_theta=$div;
      var $25=$cos_theta;
      var $call32=_r8_acos($25);
      $value=$call32;
      var $26=$value;
      STACKTOP = __stackBase__;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
Module["_radec_distance_3d"] = _radec_distance_3d;
function _radec_to_xyz($ra, $dec) {
  var label = 0;
  var $ra_addr;
  var $dec_addr;
  var $p;
  var $phi;
  var $theta;
  $ra_addr=$ra;
  $dec_addr=$dec;
  var $0=$ra_addr;
  var $mul=($0)*(15);
  var $call=_degrees_to_radians($mul);
  $theta=$call;
  var $1=$dec_addr;
  var $call1=_degrees_to_radians($1);
  $phi=$call1;
  var $call2=_malloc(24);
  var $2=$call2;
  $p=$2;
  var $3=$theta;
  var $call3=Math.cos($3);
  var $4=$phi;
  var $call4=Math.cos($4);
  var $mul5=($call3)*($call4);
  var $5=$p;
  var $arrayidx=(($5)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul5;
  var $6=$theta;
  var $call6=Math.sin($6);
  var $7=$phi;
  var $call7=Math.cos($7);
  var $mul8=($call6)*($call7);
  var $8=$p;
  var $arrayidx9=(($8+8)|0);
  HEAPF64[(($arrayidx9)>>3)]=$mul8;
  var $9=$phi;
  var $call10=Math.sin($9);
  var $10=$p;
  var $arrayidx11=(($10+16)|0);
  HEAPF64[(($arrayidx11)>>3)]=$call10;
  var $11=$p;
  return $11;
}
Module["_radec_to_xyz"] = _radec_to_xyz;
function _r8vec_uniform_new($n, $b, $c, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $b_addr;
      var $c_addr;
      var $seed_addr;
      var $i;
      var $i4_huge;
      var $k;
      var $r;
      $n_addr=$n;
      $b_addr=$b;
      $c_addr=$c;
      $seed_addr=$seed;
      $i4_huge=2147483647;
      var $0=$seed_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call=_printf(((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call1=_printf(((13568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $call2=_printf(((10840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $2=$n_addr;
      var $mul=($2<<3);
      var $call3=_malloc($mul);
      var $3=$call3;
      $r=$3;
      $i=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp4=(($4)|(0)) < (($5)|(0));
      if ($cmp4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$seed_addr;
      var $7=HEAP32[(($6)>>2)];
      var $div=((((($7)|(0)))/(127773))&-1);
      $k=$div;
      var $8=$seed_addr;
      var $9=HEAP32[(($8)>>2)];
      var $10=$k;
      var $mul5=((($10)*(127773))&-1);
      var $sub=((($9)-($mul5))|0);
      var $mul6=((($sub)*(16807))&-1);
      var $11=$k;
      var $mul7=((($11)*(2836))&-1);
      var $sub8=((($mul6)-($mul7))|0);
      var $12=$seed_addr;
      HEAP32[(($12)>>2)]=$sub8;
      var $13=$seed_addr;
      var $14=HEAP32[(($13)>>2)];
      var $cmp9=(($14)|(0)) < 0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $15=$seed_addr;
      var $16=HEAP32[(($15)>>2)];
      var $17=$i4_huge;
      var $add=((($16)+($17))|0);
      var $18=$seed_addr;
      HEAP32[(($18)>>2)]=$add;
      label = 8; break;
    case 8: 
      var $19=$b_addr;
      var $20=$c_addr;
      var $21=$b_addr;
      var $sub12=($20)-($21);
      var $22=$seed_addr;
      var $23=HEAP32[(($22)>>2)];
      var $conv=(($23)|(0));
      var $mul13=($sub12)*($conv);
      var $mul14=($mul13)*(4.656612875e-10);
      var $add15=($19)+($mul14);
      var $24=$i;
      var $25=$r;
      var $arrayidx=(($25+($24<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=$add15;
      label = 9; break;
    case 9: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 10: 
      var $27=$r;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_r8vec_uniform_new"] = _r8vec_uniform_new;
function _rotation_mat_vector_3d($a, $v, $w) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $v_addr;
      var $w_addr;
      var $i;
      var $j;
      $a_addr=$a;
      $v_addr=$v;
      $w_addr=$w;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $1=$i;
      var $2=$w_addr;
      var $arrayidx=(($2+($1<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $j=0;
      label = 5; break;
    case 5: 
      var $3=$j;
      var $cmp2=(($3)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$i;
      var $5=$w_addr;
      var $arrayidx4=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx4)>>3)];
      var $7=$i;
      var $8=$j;
      var $mul=((($8)*(3))&-1);
      var $add=((($7)+($mul))|0);
      var $9=$a_addr;
      var $arrayidx5=(($9+($add<<3))|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$j;
      var $12=$v_addr;
      var $arrayidx6=(($12+($11<<3))|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($10)*($13);
      var $add8=($6)+($mul7);
      var $14=$i;
      var $15=$w_addr;
      var $arrayidx9=(($15+($14<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$add8;
      label = 7; break;
    case 7: 
      var $16=$j;
      var $inc=((($16)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc11=((($17)+(1))|0);
      $i=$inc11;
      label = 3; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_mat_vector_3d"] = _rotation_mat_vector_3d;
function _radians_to_dms($radians, $degrees, $minutes, $seconds) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $radians_addr;
      var $degrees_addr;
      var $minutes_addr;
      var $seconds_addr;
      var $angle;
      var $pi;
      $radians_addr=$radians;
      $degrees_addr=$degrees;
      $minutes_addr=$minutes;
      $seconds_addr=$seconds;
      $pi=3.141592653589793;
      var $0=$radians_addr;
      var $call=_r8_abs($0);
      var $mul=($call)*(180);
      var $1=$pi;
      var $div=($mul)/($1);
      $angle=$div;
      var $2=$angle;
      var $conv=(($2)&-1);
      var $3=$degrees_addr;
      HEAP32[(($3)>>2)]=$conv;
      var $4=$angle;
      var $5=$degrees_addr;
      var $6=HEAP32[(($5)>>2)];
      var $conv1=(($6)|(0));
      var $sub=($4)-($conv1);
      var $mul2=($sub)*(60);
      $angle=$mul2;
      var $7=$angle;
      var $conv3=(($7)&-1);
      var $8=$minutes_addr;
      HEAP32[(($8)>>2)]=$conv3;
      var $9=$angle;
      var $10=$minutes_addr;
      var $11=HEAP32[(($10)>>2)];
      var $conv4=(($11)|(0));
      var $sub5=($9)-($conv4);
      var $mul6=($sub5)*(60);
      $angle=$mul6;
      var $12=$angle;
      var $conv7=(($12)&-1);
      var $13=$seconds_addr;
      HEAP32[(($13)>>2)]=$conv7;
      var $14=$radians_addr;
      var $cmp=$14 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$degrees_addr;
      var $16=HEAP32[(($15)>>2)];
      var $sub9=(((-$16))|0);
      var $17=$degrees_addr;
      HEAP32[(($17)>>2)]=$sub9;
      var $18=$minutes_addr;
      var $19=HEAP32[(($18)>>2)];
      var $sub10=(((-$19))|0);
      var $20=$minutes_addr;
      HEAP32[(($20)>>2)]=$sub10;
      var $21=$seconds_addr;
      var $22=HEAP32[(($21)>>2)];
      var $sub11=(((-$22))|0);
      var $23=$seconds_addr;
      HEAP32[(($23)>>2)]=$sub11;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_radians_to_dms"] = _radians_to_dms;
function _random_initialize($seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $seed_addr;
      $seed_addr=$seed;
      var $0=$seed_addr;
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((13544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $4=$seed_addr;
      var $call2=_fprintf($3, ((13496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4,tempInt));
      label = 5; break;
    case 4: 
      var $call3=_get_seed();
      $seed_addr=$call3;
      var $5=HEAP32[((_stderr)>>2)];
      var $call4=_fprintf($5, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $6=HEAP32[((_stderr)>>2)];
      var $call5=_fprintf($6, ((13544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=HEAP32[((_stderr)>>2)];
      var $8=$seed_addr;
      var $call6=_fprintf($7, ((13448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      label = 5; break;
    case 5: 
      var $9=$seed_addr;
      var $call7=_srandom($9);
      var $10=$seed_addr;
      STACKTOP = __stackBase__;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_random_initialize"] = _random_initialize;
function _rotation_axis_vector_3d($axis, $angle, $v, $w) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $axis_addr;
      var $angle_addr;
      var $v_addr;
      var $w_addr;
      var $axis_norm;
      var $dot;
      var $norm;
      var $normal=__stackBase__;
      var $normal_component;
      var $normal2;
      var $parallel=(__stackBase__)+(24);
      var $rot=(__stackBase__)+(48);
      var $u=(__stackBase__)+(72);
      $axis_addr=$axis;
      $angle_addr=$angle;
      $v_addr=$v;
      $w_addr=$w;
      var $0=$axis_addr;
      var $arraydecay=(($u)|0);
      _r8vec_copy(3, $0, $arraydecay);
      var $arraydecay1=(($u)|0);
      var $call=_r8vec_norm(3, $arraydecay1);
      $axis_norm=$call;
      var $1=$axis_norm;
      var $cmp=$1 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$w_addr;
      _r8vec_zero(3, $2);
      label = 7; break;
    case 4: 
      var $arrayidx=(($u)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$axis_norm;
      var $div=($3)/($4);
      var $arrayidx2=(($u)|0);
      HEAPF64[(($arrayidx2)>>3)]=$div;
      var $arrayidx3=(($u+8)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$axis_norm;
      var $div4=($5)/($6);
      var $arrayidx5=(($u+8)|0);
      HEAPF64[(($arrayidx5)>>3)]=$div4;
      var $arrayidx6=(($u+16)|0);
      var $7=HEAPF64[(($arrayidx6)>>3)];
      var $8=$axis_norm;
      var $div7=($7)/($8);
      var $arrayidx8=(($u+16)|0);
      HEAPF64[(($arrayidx8)>>3)]=$div7;
      var $arraydecay9=(($u)|0);
      var $9=$v_addr;
      var $call10=_r8vec_dot_product(3, $arraydecay9, $9);
      $dot=$call10;
      var $10=$dot;
      var $arrayidx11=(($u)|0);
      var $11=HEAPF64[(($arrayidx11)>>3)];
      var $mul=($10)*($11);
      var $arrayidx12=(($parallel)|0);
      HEAPF64[(($arrayidx12)>>3)]=$mul;
      var $12=$dot;
      var $arrayidx13=(($u+8)|0);
      var $13=HEAPF64[(($arrayidx13)>>3)];
      var $mul14=($12)*($13);
      var $arrayidx15=(($parallel+8)|0);
      HEAPF64[(($arrayidx15)>>3)]=$mul14;
      var $14=$dot;
      var $arrayidx16=(($u+16)|0);
      var $15=HEAPF64[(($arrayidx16)>>3)];
      var $mul17=($14)*($15);
      var $arrayidx18=(($parallel+16)|0);
      HEAPF64[(($arrayidx18)>>3)]=$mul17;
      var $16=$v_addr;
      var $arrayidx19=(($16)|0);
      var $17=HEAPF64[(($arrayidx19)>>3)];
      var $arrayidx20=(($parallel)|0);
      var $18=HEAPF64[(($arrayidx20)>>3)];
      var $sub=($17)-($18);
      var $arrayidx21=(($normal)|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub;
      var $19=$v_addr;
      var $arrayidx22=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx22)>>3)];
      var $arrayidx23=(($parallel+8)|0);
      var $21=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($20)-($21);
      var $arrayidx25=(($normal+8)|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub24;
      var $22=$v_addr;
      var $arrayidx26=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx26)>>3)];
      var $arrayidx27=(($parallel+16)|0);
      var $24=HEAPF64[(($arrayidx27)>>3)];
      var $sub28=($23)-($24);
      var $arrayidx29=(($normal+16)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $arraydecay30=(($normal)|0);
      var $call31=_r8vec_norm(3, $arraydecay30);
      $normal_component=$call31;
      var $25=$normal_component;
      var $cmp32=$25 == 0;
      if ($cmp32) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $arraydecay34=(($parallel)|0);
      var $26=$w_addr;
      _r8vec_copy(3, $arraydecay34, $26);
      label = 7; break;
    case 6: 
      var $arrayidx36=(($normal)|0);
      var $27=HEAPF64[(($arrayidx36)>>3)];
      var $28=$normal_component;
      var $div37=($27)/($28);
      var $arrayidx38=(($normal)|0);
      HEAPF64[(($arrayidx38)>>3)]=$div37;
      var $arrayidx39=(($normal+8)|0);
      var $29=HEAPF64[(($arrayidx39)>>3)];
      var $30=$normal_component;
      var $div40=($29)/($30);
      var $arrayidx41=(($normal+8)|0);
      HEAPF64[(($arrayidx41)>>3)]=$div40;
      var $arrayidx42=(($normal+16)|0);
      var $31=HEAPF64[(($arrayidx42)>>3)];
      var $32=$normal_component;
      var $div43=($31)/($32);
      var $arrayidx44=(($normal+16)|0);
      HEAPF64[(($arrayidx44)>>3)]=$div43;
      var $arraydecay45=(($u)|0);
      var $arraydecay46=(($normal)|0);
      var $call47=_r8vec_cross_product_3d($arraydecay45, $arraydecay46);
      $normal2=$call47;
      var $33=$normal2;
      var $call48=_r8vec_norm(3, $33);
      $norm=$call48;
      var $34=$normal2;
      var $arrayidx49=(($34)|0);
      var $35=HEAPF64[(($arrayidx49)>>3)];
      var $36=$norm;
      var $div50=($35)/($36);
      var $37=$normal2;
      var $arrayidx51=(($37)|0);
      HEAPF64[(($arrayidx51)>>3)]=$div50;
      var $38=$normal2;
      var $arrayidx52=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx52)>>3)];
      var $40=$norm;
      var $div53=($39)/($40);
      var $41=$normal2;
      var $arrayidx54=(($41+8)|0);
      HEAPF64[(($arrayidx54)>>3)]=$div53;
      var $42=$normal2;
      var $arrayidx55=(($42+16)|0);
      var $43=HEAPF64[(($arrayidx55)>>3)];
      var $44=$norm;
      var $div56=($43)/($44);
      var $45=$normal2;
      var $arrayidx57=(($45+16)|0);
      HEAPF64[(($arrayidx57)>>3)]=$div56;
      var $46=$normal_component;
      var $47=$angle_addr;
      var $call58=Math.cos($47);
      var $arrayidx59=(($normal)|0);
      var $48=HEAPF64[(($arrayidx59)>>3)];
      var $mul60=($call58)*($48);
      var $49=$angle_addr;
      var $call61=Math.sin($49);
      var $50=$normal2;
      var $arrayidx62=(($50)|0);
      var $51=HEAPF64[(($arrayidx62)>>3)];
      var $mul63=($call61)*($51);
      var $add=($mul60)+($mul63);
      var $mul64=($46)*($add);
      var $arrayidx65=(($rot)|0);
      HEAPF64[(($arrayidx65)>>3)]=$mul64;
      var $52=$normal_component;
      var $53=$angle_addr;
      var $call66=Math.cos($53);
      var $arrayidx67=(($normal+8)|0);
      var $54=HEAPF64[(($arrayidx67)>>3)];
      var $mul68=($call66)*($54);
      var $55=$angle_addr;
      var $call69=Math.sin($55);
      var $56=$normal2;
      var $arrayidx70=(($56+8)|0);
      var $57=HEAPF64[(($arrayidx70)>>3)];
      var $mul71=($call69)*($57);
      var $add72=($mul68)+($mul71);
      var $mul73=($52)*($add72);
      var $arrayidx74=(($rot+8)|0);
      HEAPF64[(($arrayidx74)>>3)]=$mul73;
      var $58=$normal_component;
      var $59=$angle_addr;
      var $call75=Math.cos($59);
      var $arrayidx76=(($normal+16)|0);
      var $60=HEAPF64[(($arrayidx76)>>3)];
      var $mul77=($call75)*($60);
      var $61=$angle_addr;
      var $call78=Math.sin($61);
      var $62=$normal2;
      var $arrayidx79=(($62+16)|0);
      var $63=HEAPF64[(($arrayidx79)>>3)];
      var $mul80=($call78)*($63);
      var $add81=($mul77)+($mul80);
      var $mul82=($58)*($add81);
      var $arrayidx83=(($rot+16)|0);
      HEAPF64[(($arrayidx83)>>3)]=$mul82;
      var $64=$normal2;
      var $65=$64;
      _free($65);
      var $arrayidx84=(($parallel)|0);
      var $66=HEAPF64[(($arrayidx84)>>3)];
      var $arrayidx85=(($rot)|0);
      var $67=HEAPF64[(($arrayidx85)>>3)];
      var $add86=($66)+($67);
      var $68=$w_addr;
      var $arrayidx87=(($68)|0);
      HEAPF64[(($arrayidx87)>>3)]=$add86;
      var $arrayidx88=(($parallel+8)|0);
      var $69=HEAPF64[(($arrayidx88)>>3)];
      var $arrayidx89=(($rot+8)|0);
      var $70=HEAPF64[(($arrayidx89)>>3)];
      var $add90=($69)+($70);
      var $71=$w_addr;
      var $arrayidx91=(($71+8)|0);
      HEAPF64[(($arrayidx91)>>3)]=$add90;
      var $arrayidx92=(($parallel+16)|0);
      var $72=HEAPF64[(($arrayidx92)>>3)];
      var $arrayidx93=(($rot+16)|0);
      var $73=HEAPF64[(($arrayidx93)>>3)];
      var $add94=($72)+($73);
      var $74=$w_addr;
      var $arrayidx95=(($74+16)|0);
      HEAPF64[(($arrayidx95)>>3)]=$add94;
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_axis_vector_3d"] = _rotation_axis_vector_3d;
function _rotation_axis2mat_3d($axis, $angle, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $axis_addr;
      var $angle_addr;
      var $a_addr;
      var $ca;
      var $norm;
      var $sa;
      var $v1;
      var $v2;
      var $v3;
      $axis_addr=$axis;
      $angle_addr=$angle;
      $a_addr=$a;
      var $0=$axis_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      $v1=$1;
      var $2=$axis_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      $v2=$3;
      var $4=$axis_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      $v3=$5;
      var $6=$v1;
      var $7=$v1;
      var $mul=($6)*($7);
      var $8=$v2;
      var $9=$v2;
      var $mul3=($8)*($9);
      var $add=($mul)+($mul3);
      var $10=$v3;
      var $11=$v3;
      var $mul4=($10)*($11);
      var $add5=($add)+($mul4);
      var $call=Math.sqrt($add5);
      $norm=$call;
      var $12=$norm;
      var $cmp=$12 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 5; break;
    case 4: 
      var $13=$v1;
      var $14=$norm;
      var $div=($13)/($14);
      $v1=$div;
      var $15=$v2;
      var $16=$norm;
      var $div6=($15)/($16);
      $v2=$div6;
      var $17=$v3;
      var $18=$norm;
      var $div7=($17)/($18);
      $v3=$div7;
      var $19=$angle_addr;
      var $call8=Math.cos($19);
      $ca=$call8;
      var $20=$angle_addr;
      var $call9=Math.sin($20);
      $sa=$call9;
      var $21=$v1;
      var $22=$v1;
      var $mul10=($21)*($22);
      var $23=$ca;
      var $24=$v1;
      var $25=$v1;
      var $mul11=($24)*($25);
      var $sub=(1)-($mul11);
      var $mul12=($23)*($sub);
      var $add13=($mul10)+($mul12);
      var $26=$a_addr;
      var $arrayidx14=(($26)|0);
      HEAPF64[(($arrayidx14)>>3)]=$add13;
      var $27=$ca;
      var $sub15=(1)-($27);
      var $28=$v2;
      var $mul16=($sub15)*($28);
      var $29=$v1;
      var $mul17=($mul16)*($29);
      var $30=$sa;
      var $31=$v3;
      var $mul18=($30)*($31);
      var $add19=($mul17)+($mul18);
      var $32=$a_addr;
      var $arrayidx20=(($32+8)|0);
      HEAPF64[(($arrayidx20)>>3)]=$add19;
      var $33=$ca;
      var $sub21=(1)-($33);
      var $34=$v3;
      var $mul22=($sub21)*($34);
      var $35=$v1;
      var $mul23=($mul22)*($35);
      var $36=$sa;
      var $37=$v2;
      var $mul24=($36)*($37);
      var $sub25=($mul23)-($mul24);
      var $38=$a_addr;
      var $arrayidx26=(($38+16)|0);
      HEAPF64[(($arrayidx26)>>3)]=$sub25;
      var $39=$ca;
      var $sub27=(1)-($39);
      var $40=$v1;
      var $mul28=($sub27)*($40);
      var $41=$v2;
      var $mul29=($mul28)*($41);
      var $42=$sa;
      var $43=$v3;
      var $mul30=($42)*($43);
      var $sub31=($mul29)-($mul30);
      var $44=$a_addr;
      var $arrayidx32=(($44+24)|0);
      HEAPF64[(($arrayidx32)>>3)]=$sub31;
      var $45=$v2;
      var $46=$v2;
      var $mul33=($45)*($46);
      var $47=$ca;
      var $48=$v2;
      var $49=$v2;
      var $mul34=($48)*($49);
      var $sub35=(1)-($mul34);
      var $mul36=($47)*($sub35);
      var $add37=($mul33)+($mul36);
      var $50=$a_addr;
      var $arrayidx38=(($50+32)|0);
      HEAPF64[(($arrayidx38)>>3)]=$add37;
      var $51=$ca;
      var $sub39=(1)-($51);
      var $52=$v3;
      var $mul40=($sub39)*($52);
      var $53=$v2;
      var $mul41=($mul40)*($53);
      var $54=$sa;
      var $55=$v1;
      var $mul42=($54)*($55);
      var $add43=($mul41)+($mul42);
      var $56=$a_addr;
      var $arrayidx44=(($56+40)|0);
      HEAPF64[(($arrayidx44)>>3)]=$add43;
      var $57=$ca;
      var $sub45=(1)-($57);
      var $58=$v1;
      var $mul46=($sub45)*($58);
      var $59=$v3;
      var $mul47=($mul46)*($59);
      var $60=$sa;
      var $61=$v2;
      var $mul48=($60)*($61);
      var $add49=($mul47)+($mul48);
      var $62=$a_addr;
      var $arrayidx50=(($62+48)|0);
      HEAPF64[(($arrayidx50)>>3)]=$add49;
      var $63=$ca;
      var $sub51=(1)-($63);
      var $64=$v2;
      var $mul52=($sub51)*($64);
      var $65=$v3;
      var $mul53=($mul52)*($65);
      var $66=$sa;
      var $67=$v1;
      var $mul54=($66)*($67);
      var $sub55=($mul53)-($mul54);
      var $68=$a_addr;
      var $arrayidx56=(($68+56)|0);
      HEAPF64[(($arrayidx56)>>3)]=$sub55;
      var $69=$v3;
      var $70=$v3;
      var $mul57=($69)*($70);
      var $71=$ca;
      var $72=$v3;
      var $73=$v3;
      var $mul58=($72)*($73);
      var $sub59=(1)-($mul58);
      var $mul60=($71)*($sub59);
      var $add61=($mul57)+($mul60);
      var $74=$a_addr;
      var $arrayidx62=(($74+64)|0);
      HEAPF64[(($arrayidx62)>>3)]=$add61;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_axis2mat_3d"] = _rotation_axis2mat_3d;
function _rotation_axis2quat_3d($axis, $angle, $q) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $axis_addr;
      var $angle_addr;
      var $q_addr;
      var $norm;
      $axis_addr=$axis;
      $angle_addr=$angle;
      $q_addr=$q;
      var $0=$axis_addr;
      var $call=_r8vec_norm(3, $0);
      $norm=$call;
      var $1=$norm;
      var $cmp=$1 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((13408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((13376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$angle_addr;
      var $mul=($5)*(0.5);
      var $call4=Math.cos($mul);
      var $6=$q_addr;
      var $arrayidx=(($6)|0);
      HEAPF64[(($arrayidx)>>3)]=$call4;
      var $7=$axis_addr;
      var $arrayidx5=(($7)|0);
      var $8=HEAPF64[(($arrayidx5)>>3)];
      var $9=$angle_addr;
      var $mul6=($9)*(0.5);
      var $call7=Math.sin($mul6);
      var $mul8=($8)*($call7);
      var $10=$norm;
      var $div=($mul8)/($10);
      var $11=$q_addr;
      var $arrayidx9=(($11+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$div;
      var $12=$axis_addr;
      var $arrayidx10=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx10)>>3)];
      var $14=$angle_addr;
      var $mul11=($14)*(0.5);
      var $call12=Math.sin($mul11);
      var $mul13=($13)*($call12);
      var $15=$norm;
      var $div14=($mul13)/($15);
      var $16=$q_addr;
      var $arrayidx15=(($16+16)|0);
      HEAPF64[(($arrayidx15)>>3)]=$div14;
      var $17=$axis_addr;
      var $arrayidx16=(($17+16)|0);
      var $18=HEAPF64[(($arrayidx16)>>3)];
      var $19=$angle_addr;
      var $mul17=($19)*(0.5);
      var $call18=Math.sin($mul17);
      var $mul19=($18)*($call18);
      var $20=$norm;
      var $div20=($mul19)/($20);
      var $21=$q_addr;
      var $arrayidx21=(($21+24)|0);
      HEAPF64[(($arrayidx21)>>3)]=$div20;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_axis2quat_3d"] = _rotation_axis2quat_3d;
function _rotation_mat2axis_3d($a, $axis, $angle) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $axis_addr;
      var $angle_addr;
      var $norm;
      $a_addr=$a;
      $axis_addr=$axis;
      $angle_addr=$angle;
      var $0=$a_addr;
      var $arrayidx=(($0+40)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$a_addr;
      var $arrayidx1=(($2+56)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$a_addr;
      var $arrayidx2=(($4+40)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$a_addr;
      var $arrayidx3=(($6+56)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$a_addr;
      var $arrayidx5=(($8+48)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$a_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$a_addr;
      var $arrayidx8=(($12+48)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$a_addr;
      var $arrayidx9=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $16=$a_addr;
      var $arrayidx12=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $18=$a_addr;
      var $arrayidx13=(($18+24)|0);
      var $19=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($19);
      var $20=$a_addr;
      var $arrayidx15=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$a_addr;
      var $arrayidx16=(($22+24)|0);
      var $23=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($21)-($23);
      var $mul18=($sub14)*($sub17);
      var $add19=($add)+($mul18);
      var $call=Math.sqrt($add19);
      $norm=$call;
      var $24=$norm;
      var $cmp=$24 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=HEAP32[((_stderr)>>2)];
      var $call20=_fprintf($25, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=HEAP32[((_stderr)>>2)];
      var $call21=_fprintf($26, ((13336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=HEAP32[((_stderr)>>2)];
      var $call22=_fprintf($27, ((13304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $28=HEAP32[((_stderr)>>2)];
      var $call23=_fprintf($28, ((13240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $29=$a_addr;
      var $arrayidx24=(($29+40)|0);
      var $30=HEAPF64[(($arrayidx24)>>3)];
      var $31=$a_addr;
      var $arrayidx25=(($31+56)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($30)-($32);
      var $33=$norm;
      var $div=($sub26)/($33);
      var $34=$axis_addr;
      var $arrayidx27=(($34)|0);
      HEAPF64[(($arrayidx27)>>3)]=$div;
      var $35=$a_addr;
      var $arrayidx28=(($35+48)|0);
      var $36=HEAPF64[(($arrayidx28)>>3)];
      var $37=$a_addr;
      var $arrayidx29=(($37+16)|0);
      var $38=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($36)-($38);
      var $39=$norm;
      var $div31=($sub30)/($39);
      var $40=$axis_addr;
      var $arrayidx32=(($40+8)|0);
      HEAPF64[(($arrayidx32)>>3)]=$div31;
      var $41=$a_addr;
      var $arrayidx33=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx33)>>3)];
      var $43=$a_addr;
      var $arrayidx34=(($43+24)|0);
      var $44=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($42)-($44);
      var $45=$norm;
      var $div36=($sub35)/($45);
      var $46=$axis_addr;
      var $arrayidx37=(($46+16)|0);
      HEAPF64[(($arrayidx37)>>3)]=$div36;
      var $47=$a_addr;
      var $arrayidx38=(($47)|0);
      var $48=HEAPF64[(($arrayidx38)>>3)];
      var $49=$a_addr;
      var $arrayidx39=(($49+32)|0);
      var $50=HEAPF64[(($arrayidx39)>>3)];
      var $add40=($48)+($50);
      var $51=$a_addr;
      var $arrayidx41=(($51+64)|0);
      var $52=HEAPF64[(($arrayidx41)>>3)];
      var $add42=($add40)+($52);
      var $sub43=($add42)-(1);
      var $mul44=($sub43)*(0.5);
      var $call45=_r8_acos($mul44);
      var $53=$angle_addr;
      HEAPF64[(($53)>>3)]=$call45;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_mat2axis_3d"] = _rotation_mat2axis_3d;
function _rotation_mat2quat_3d($a, $q) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $q_addr;
      var $angle;
      var $cos_phi;
      var $norm;
      var $sin_phi;
      $a_addr=$a;
      $q_addr=$q;
      var $0=$a_addr;
      var $arrayidx=(($0+40)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$a_addr;
      var $arrayidx1=(($2+56)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$a_addr;
      var $arrayidx2=(($4+40)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$a_addr;
      var $arrayidx3=(($6+56)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$a_addr;
      var $arrayidx5=(($8+48)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$a_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$a_addr;
      var $arrayidx8=(($12+48)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$a_addr;
      var $arrayidx9=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $16=$a_addr;
      var $arrayidx12=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $18=$a_addr;
      var $arrayidx13=(($18+24)|0);
      var $19=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($19);
      var $20=$a_addr;
      var $arrayidx15=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$a_addr;
      var $arrayidx16=(($22+24)|0);
      var $23=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($21)-($23);
      var $mul18=($sub14)*($sub17);
      var $add19=($add)+($mul18);
      var $call=Math.sqrt($add19);
      $norm=$call;
      var $24=$norm;
      var $cmp=$24 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=HEAP32[((_stderr)>>2)];
      var $call20=_fprintf($25, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=HEAP32[((_stderr)>>2)];
      var $call21=_fprintf($26, ((13200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=HEAP32[((_stderr)>>2)];
      var $call22=_fprintf($27, ((13304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $28=HEAP32[((_stderr)>>2)];
      var $call23=_fprintf($28, ((13240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $29=$a_addr;
      var $arrayidx24=(($29)|0);
      var $30=HEAPF64[(($arrayidx24)>>3)];
      var $31=$a_addr;
      var $arrayidx25=(($31+32)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $add26=($30)+($32);
      var $33=$a_addr;
      var $arrayidx27=(($33+64)|0);
      var $34=HEAPF64[(($arrayidx27)>>3)];
      var $add28=($add26)+($34);
      var $sub29=($add28)-(1);
      var $mul30=($sub29)*(0.5);
      var $call31=_r8_acos($mul30);
      $angle=$call31;
      var $35=$angle;
      var $mul32=($35)*(0.5);
      var $call33=Math.cos($mul32);
      $cos_phi=$call33;
      var $36=$cos_phi;
      var $37=$cos_phi;
      var $mul34=($36)*($37);
      var $sub35=(1)-($mul34);
      var $call36=Math.sqrt($sub35);
      $sin_phi=$call36;
      var $38=$cos_phi;
      var $39=$q_addr;
      var $arrayidx37=(($39)|0);
      HEAPF64[(($arrayidx37)>>3)]=$38;
      var $40=$sin_phi;
      var $41=$a_addr;
      var $arrayidx38=(($41+40)|0);
      var $42=HEAPF64[(($arrayidx38)>>3)];
      var $43=$a_addr;
      var $arrayidx39=(($43+56)|0);
      var $44=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($42)-($44);
      var $mul41=($40)*($sub40);
      var $45=$norm;
      var $div=($mul41)/($45);
      var $46=$q_addr;
      var $arrayidx42=(($46+8)|0);
      HEAPF64[(($arrayidx42)>>3)]=$div;
      var $47=$sin_phi;
      var $48=$a_addr;
      var $arrayidx43=(($48+48)|0);
      var $49=HEAPF64[(($arrayidx43)>>3)];
      var $50=$a_addr;
      var $arrayidx44=(($50+16)|0);
      var $51=HEAPF64[(($arrayidx44)>>3)];
      var $sub45=($49)-($51);
      var $mul46=($47)*($sub45);
      var $52=$norm;
      var $div47=($mul46)/($52);
      var $53=$q_addr;
      var $arrayidx48=(($53+16)|0);
      HEAPF64[(($arrayidx48)>>3)]=$div47;
      var $54=$sin_phi;
      var $55=$a_addr;
      var $arrayidx49=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx49)>>3)];
      var $57=$a_addr;
      var $arrayidx50=(($57+24)|0);
      var $58=HEAPF64[(($arrayidx50)>>3)];
      var $sub51=($56)-($58);
      var $mul52=($54)*($sub51);
      var $59=$norm;
      var $div53=($mul52)/($59);
      var $60=$q_addr;
      var $arrayidx54=(($60+24)|0);
      HEAPF64[(($arrayidx54)>>3)]=$div53;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_mat2quat_3d"] = _rotation_mat2quat_3d;
function _rotation_quat_vector_3d($q, $v, $w) {
  var label = 0;
  var $q_addr;
  var $v_addr;
  var $w_addr;
  $q_addr=$q;
  $v_addr=$v;
  $w_addr=$w;
  var $0=$q_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$q_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($1)*($3);
  var $4=$q_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$q_addr;
  var $arrayidx3=(($6+8)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($5)*($7);
  var $add=($mul)+($mul4);
  var $mul5=($add)*(2);
  var $sub=($mul5)-(1);
  var $8=$v_addr;
  var $arrayidx6=(($8)|0);
  var $9=HEAPF64[(($arrayidx6)>>3)];
  var $mul7=($sub)*($9);
  var $10=$q_addr;
  var $arrayidx8=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx8)>>3)];
  var $12=$q_addr;
  var $arrayidx9=(($12+16)|0);
  var $13=HEAPF64[(($arrayidx9)>>3)];
  var $mul10=($11)*($13);
  var $14=$q_addr;
  var $arrayidx11=(($14)|0);
  var $15=HEAPF64[(($arrayidx11)>>3)];
  var $16=$q_addr;
  var $arrayidx12=(($16+24)|0);
  var $17=HEAPF64[(($arrayidx12)>>3)];
  var $mul13=($15)*($17);
  var $sub14=($mul10)-($mul13);
  var $mul15=($sub14)*(2);
  var $18=$v_addr;
  var $arrayidx16=(($18+8)|0);
  var $19=HEAPF64[(($arrayidx16)>>3)];
  var $mul17=($mul15)*($19);
  var $add18=($mul7)+($mul17);
  var $20=$q_addr;
  var $arrayidx19=(($20+8)|0);
  var $21=HEAPF64[(($arrayidx19)>>3)];
  var $22=$q_addr;
  var $arrayidx20=(($22+24)|0);
  var $23=HEAPF64[(($arrayidx20)>>3)];
  var $mul21=($21)*($23);
  var $24=$q_addr;
  var $arrayidx22=(($24)|0);
  var $25=HEAPF64[(($arrayidx22)>>3)];
  var $26=$q_addr;
  var $arrayidx23=(($26+16)|0);
  var $27=HEAPF64[(($arrayidx23)>>3)];
  var $mul24=($25)*($27);
  var $add25=($mul21)+($mul24);
  var $mul26=($add25)*(2);
  var $28=$v_addr;
  var $arrayidx27=(($28+16)|0);
  var $29=HEAPF64[(($arrayidx27)>>3)];
  var $mul28=($mul26)*($29);
  var $add29=($add18)+($mul28);
  var $30=$w_addr;
  var $arrayidx30=(($30)|0);
  HEAPF64[(($arrayidx30)>>3)]=$add29;
  var $31=$q_addr;
  var $arrayidx31=(($31+8)|0);
  var $32=HEAPF64[(($arrayidx31)>>3)];
  var $33=$q_addr;
  var $arrayidx32=(($33+16)|0);
  var $34=HEAPF64[(($arrayidx32)>>3)];
  var $mul33=($32)*($34);
  var $35=$q_addr;
  var $arrayidx34=(($35)|0);
  var $36=HEAPF64[(($arrayidx34)>>3)];
  var $37=$q_addr;
  var $arrayidx35=(($37+24)|0);
  var $38=HEAPF64[(($arrayidx35)>>3)];
  var $mul36=($36)*($38);
  var $add37=($mul33)+($mul36);
  var $mul38=($add37)*(2);
  var $39=$v_addr;
  var $arrayidx39=(($39)|0);
  var $40=HEAPF64[(($arrayidx39)>>3)];
  var $mul40=($mul38)*($40);
  var $41=$q_addr;
  var $arrayidx41=(($41)|0);
  var $42=HEAPF64[(($arrayidx41)>>3)];
  var $43=$q_addr;
  var $arrayidx42=(($43)|0);
  var $44=HEAPF64[(($arrayidx42)>>3)];
  var $mul43=($42)*($44);
  var $45=$q_addr;
  var $arrayidx44=(($45+16)|0);
  var $46=HEAPF64[(($arrayidx44)>>3)];
  var $47=$q_addr;
  var $arrayidx45=(($47+16)|0);
  var $48=HEAPF64[(($arrayidx45)>>3)];
  var $mul46=($46)*($48);
  var $add47=($mul43)+($mul46);
  var $mul48=($add47)*(2);
  var $sub49=($mul48)-(1);
  var $49=$v_addr;
  var $arrayidx50=(($49+8)|0);
  var $50=HEAPF64[(($arrayidx50)>>3)];
  var $mul51=($sub49)*($50);
  var $add52=($mul40)+($mul51);
  var $51=$q_addr;
  var $arrayidx53=(($51+16)|0);
  var $52=HEAPF64[(($arrayidx53)>>3)];
  var $53=$q_addr;
  var $arrayidx54=(($53+24)|0);
  var $54=HEAPF64[(($arrayidx54)>>3)];
  var $mul55=($52)*($54);
  var $55=$q_addr;
  var $arrayidx56=(($55)|0);
  var $56=HEAPF64[(($arrayidx56)>>3)];
  var $57=$q_addr;
  var $arrayidx57=(($57+8)|0);
  var $58=HEAPF64[(($arrayidx57)>>3)];
  var $mul58=($56)*($58);
  var $sub59=($mul55)-($mul58);
  var $mul60=($sub59)*(2);
  var $59=$v_addr;
  var $arrayidx61=(($59+16)|0);
  var $60=HEAPF64[(($arrayidx61)>>3)];
  var $mul62=($mul60)*($60);
  var $add63=($add52)+($mul62);
  var $61=$w_addr;
  var $arrayidx64=(($61+8)|0);
  HEAPF64[(($arrayidx64)>>3)]=$add63;
  var $62=$q_addr;
  var $arrayidx65=(($62+8)|0);
  var $63=HEAPF64[(($arrayidx65)>>3)];
  var $64=$q_addr;
  var $arrayidx66=(($64+24)|0);
  var $65=HEAPF64[(($arrayidx66)>>3)];
  var $mul67=($63)*($65);
  var $66=$q_addr;
  var $arrayidx68=(($66)|0);
  var $67=HEAPF64[(($arrayidx68)>>3)];
  var $68=$q_addr;
  var $arrayidx69=(($68+16)|0);
  var $69=HEAPF64[(($arrayidx69)>>3)];
  var $mul70=($67)*($69);
  var $sub71=($mul67)-($mul70);
  var $mul72=($sub71)*(2);
  var $70=$v_addr;
  var $arrayidx73=(($70)|0);
  var $71=HEAPF64[(($arrayidx73)>>3)];
  var $mul74=($mul72)*($71);
  var $72=$q_addr;
  var $arrayidx75=(($72+16)|0);
  var $73=HEAPF64[(($arrayidx75)>>3)];
  var $74=$q_addr;
  var $arrayidx76=(($74+24)|0);
  var $75=HEAPF64[(($arrayidx76)>>3)];
  var $mul77=($73)*($75);
  var $76=$q_addr;
  var $arrayidx78=(($76)|0);
  var $77=HEAPF64[(($arrayidx78)>>3)];
  var $78=$q_addr;
  var $arrayidx79=(($78+8)|0);
  var $79=HEAPF64[(($arrayidx79)>>3)];
  var $mul80=($77)*($79);
  var $add81=($mul77)+($mul80);
  var $mul82=($add81)*(2);
  var $80=$v_addr;
  var $arrayidx83=(($80+8)|0);
  var $81=HEAPF64[(($arrayidx83)>>3)];
  var $mul84=($mul82)*($81);
  var $add85=($mul74)+($mul84);
  var $82=$q_addr;
  var $arrayidx86=(($82)|0);
  var $83=HEAPF64[(($arrayidx86)>>3)];
  var $84=$q_addr;
  var $arrayidx87=(($84)|0);
  var $85=HEAPF64[(($arrayidx87)>>3)];
  var $mul88=($83)*($85);
  var $86=$q_addr;
  var $arrayidx89=(($86+24)|0);
  var $87=HEAPF64[(($arrayidx89)>>3)];
  var $88=$q_addr;
  var $arrayidx90=(($88+24)|0);
  var $89=HEAPF64[(($arrayidx90)>>3)];
  var $mul91=($87)*($89);
  var $add92=($mul88)+($mul91);
  var $mul93=($add92)*(2);
  var $sub94=($mul93)-(1);
  var $90=$v_addr;
  var $arrayidx95=(($90+16)|0);
  var $91=HEAPF64[(($arrayidx95)>>3)];
  var $mul96=($sub94)*($91);
  var $add97=($add85)+($mul96);
  var $92=$w_addr;
  var $arrayidx98=(($92+16)|0);
  HEAPF64[(($arrayidx98)>>3)]=$add97;
  return;
}
Module["_rotation_quat_vector_3d"] = _rotation_quat_vector_3d;
function _rotation_quat2axis_3d($q, $axis, $angle) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $axis_addr;
      var $angle_addr;
      var $cos_phi;
      var $sin_phi;
      $q_addr=$q;
      $axis_addr=$axis;
      $angle_addr=$angle;
      var $0=$q_addr;
      var $call=_r8vec_norm(3, $0);
      $sin_phi=$call;
      var $1=$q_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      $cos_phi=$2;
      var $3=$sin_phi;
      var $4=$cos_phi;
      var $call1=Math.atan2($3, $4);
      var $mul=($call1)*(2);
      var $5=$angle_addr;
      HEAPF64[(($5)>>3)]=$mul;
      var $6=$sin_phi;
      var $cmp=$6 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$axis_addr;
      var $arrayidx2=(($7)|0);
      HEAPF64[(($arrayidx2)>>3)]=1;
      var $8=$axis_addr;
      var $arrayidx3=(($8+8)|0);
      HEAPF64[(($arrayidx3)>>3)]=0;
      var $9=$axis_addr;
      var $arrayidx4=(($9+16)|0);
      HEAPF64[(($arrayidx4)>>3)]=0;
      label = 5; break;
    case 4: 
      var $10=$q_addr;
      var $arrayidx5=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$sin_phi;
      var $div=($11)/($12);
      var $13=$axis_addr;
      var $arrayidx6=(($13)|0);
      HEAPF64[(($arrayidx6)>>3)]=$div;
      var $14=$q_addr;
      var $arrayidx7=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $16=$sin_phi;
      var $div8=($15)/($16);
      var $17=$axis_addr;
      var $arrayidx9=(($17+8)|0);
      HEAPF64[(($arrayidx9)>>3)]=$div8;
      var $18=$q_addr;
      var $arrayidx10=(($18+24)|0);
      var $19=HEAPF64[(($arrayidx10)>>3)];
      var $20=$sin_phi;
      var $div11=($19)/($20);
      var $21=$axis_addr;
      var $arrayidx12=(($21+16)|0);
      HEAPF64[(($arrayidx12)>>3)]=$div11;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_quat2axis_3d"] = _rotation_quat2axis_3d;
function _rotation_quat2mat_3d($q, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $q_addr;
      var $a_addr;
      var $angle;
      var $ca;
      var $cos_phi;
      var $sa;
      var $sin_phi;
      var $v1;
      var $v2;
      var $v3;
      $q_addr=$q;
      $a_addr=$a;
      var $0=$q_addr;
      var $arrayidx=(($0+8)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$q_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($1)*($3);
      var $4=$q_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$q_addr;
      var $arrayidx3=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $mul4=($5)*($7);
      var $add=($mul)+($mul4);
      var $8=$q_addr;
      var $arrayidx5=(($8+24)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$q_addr;
      var $arrayidx6=(($10+24)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($9)*($11);
      var $add8=($add)+($mul7);
      var $call=Math.sqrt($add8);
      $sin_phi=$call;
      var $12=$q_addr;
      var $arrayidx9=(($12)|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      $cos_phi=$13;
      var $14=$sin_phi;
      var $15=$cos_phi;
      var $call10=Math.atan2($14, $15);
      var $mul11=($call10)*(2);
      $angle=$mul11;
      var $16=$sin_phi;
      var $cmp=$16 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $v1=1;
      $v2=0;
      $v3=0;
      label = 5; break;
    case 4: 
      var $17=$q_addr;
      var $arrayidx12=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx12)>>3)];
      var $19=$sin_phi;
      var $div=($18)/($19);
      $v1=$div;
      var $20=$q_addr;
      var $arrayidx13=(($20+16)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$sin_phi;
      var $div14=($21)/($22);
      $v2=$div14;
      var $23=$q_addr;
      var $arrayidx15=(($23+24)|0);
      var $24=HEAPF64[(($arrayidx15)>>3)];
      var $25=$sin_phi;
      var $div16=($24)/($25);
      $v3=$div16;
      label = 5; break;
    case 5: 
      var $26=$angle;
      var $call17=Math.cos($26);
      $ca=$call17;
      var $27=$angle;
      var $call18=Math.sin($27);
      $sa=$call18;
      var $28=$v1;
      var $29=$v1;
      var $mul19=($28)*($29);
      var $30=$ca;
      var $31=$v1;
      var $32=$v1;
      var $mul20=($31)*($32);
      var $sub=(1)-($mul20);
      var $mul21=($30)*($sub);
      var $add22=($mul19)+($mul21);
      var $33=$a_addr;
      var $arrayidx23=(($33)|0);
      HEAPF64[(($arrayidx23)>>3)]=$add22;
      var $34=$ca;
      var $sub24=(1)-($34);
      var $35=$v2;
      var $mul25=($sub24)*($35);
      var $36=$v1;
      var $mul26=($mul25)*($36);
      var $37=$sa;
      var $38=$v3;
      var $mul27=($37)*($38);
      var $add28=($mul26)+($mul27);
      var $39=$a_addr;
      var $arrayidx29=(($39+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $40=$ca;
      var $sub30=(1)-($40);
      var $41=$v3;
      var $mul31=($sub30)*($41);
      var $42=$v1;
      var $mul32=($mul31)*($42);
      var $43=$sa;
      var $44=$v2;
      var $mul33=($43)*($44);
      var $sub34=($mul32)-($mul33);
      var $45=$a_addr;
      var $arrayidx35=(($45+16)|0);
      HEAPF64[(($arrayidx35)>>3)]=$sub34;
      var $46=$ca;
      var $sub36=(1)-($46);
      var $47=$v1;
      var $mul37=($sub36)*($47);
      var $48=$v2;
      var $mul38=($mul37)*($48);
      var $49=$sa;
      var $50=$v3;
      var $mul39=($49)*($50);
      var $sub40=($mul38)-($mul39);
      var $51=$a_addr;
      var $arrayidx41=(($51+24)|0);
      HEAPF64[(($arrayidx41)>>3)]=$sub40;
      var $52=$v2;
      var $53=$v2;
      var $mul42=($52)*($53);
      var $54=$ca;
      var $55=$v2;
      var $56=$v2;
      var $mul43=($55)*($56);
      var $sub44=(1)-($mul43);
      var $mul45=($54)*($sub44);
      var $add46=($mul42)+($mul45);
      var $57=$a_addr;
      var $arrayidx47=(($57+32)|0);
      HEAPF64[(($arrayidx47)>>3)]=$add46;
      var $58=$ca;
      var $sub48=(1)-($58);
      var $59=$v3;
      var $mul49=($sub48)*($59);
      var $60=$v2;
      var $mul50=($mul49)*($60);
      var $61=$sa;
      var $62=$v1;
      var $mul51=($61)*($62);
      var $add52=($mul50)+($mul51);
      var $63=$a_addr;
      var $arrayidx53=(($63+40)|0);
      HEAPF64[(($arrayidx53)>>3)]=$add52;
      var $64=$ca;
      var $sub54=(1)-($64);
      var $65=$v1;
      var $mul55=($sub54)*($65);
      var $66=$v3;
      var $mul56=($mul55)*($66);
      var $67=$sa;
      var $68=$v2;
      var $mul57=($67)*($68);
      var $add58=($mul56)+($mul57);
      var $69=$a_addr;
      var $arrayidx59=(($69+48)|0);
      HEAPF64[(($arrayidx59)>>3)]=$add58;
      var $70=$ca;
      var $sub60=(1)-($70);
      var $71=$v2;
      var $mul61=($sub60)*($71);
      var $72=$v3;
      var $mul62=($mul61)*($72);
      var $73=$sa;
      var $74=$v1;
      var $mul63=($73)*($74);
      var $sub64=($mul62)-($mul63);
      var $75=$a_addr;
      var $arrayidx65=(($75+56)|0);
      HEAPF64[(($arrayidx65)>>3)]=$sub64;
      var $76=$v3;
      var $77=$v3;
      var $mul66=($76)*($77);
      var $78=$ca;
      var $79=$v3;
      var $80=$v3;
      var $mul67=($79)*($80);
      var $sub68=(1)-($mul67);
      var $mul69=($78)*($sub68);
      var $add70=($mul66)+($mul69);
      var $81=$a_addr;
      var $arrayidx71=(($81+64)|0);
      HEAPF64[(($arrayidx71)>>3)]=$add70;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_rotation_quat2mat_3d"] = _rotation_quat2mat_3d;
function _rtp_to_xyz($r, $theta, $phi, $xyz) {
  var label = 0;
  var $r_addr;
  var $theta_addr;
  var $phi_addr;
  var $xyz_addr;
  $r_addr=$r;
  $theta_addr=$theta;
  $phi_addr=$phi;
  $xyz_addr=$xyz;
  var $0=$r_addr;
  var $1=$theta_addr;
  var $call=Math.cos($1);
  var $mul=($0)*($call);
  var $2=$phi_addr;
  var $call1=Math.sin($2);
  var $mul2=($mul)*($call1);
  var $3=$xyz_addr;
  var $arrayidx=(($3)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul2;
  var $4=$r_addr;
  var $5=$theta_addr;
  var $call3=Math.sin($5);
  var $mul4=($4)*($call3);
  var $6=$phi_addr;
  var $call5=Math.sin($6);
  var $mul6=($mul4)*($call5);
  var $7=$xyz_addr;
  var $arrayidx7=(($7+8)|0);
  HEAPF64[(($arrayidx7)>>3)]=$mul6;
  var $8=$r_addr;
  var $9=$phi_addr;
  var $call8=Math.cos($9);
  var $mul9=($8)*($call8);
  var $10=$xyz_addr;
  var $arrayidx10=(($10+16)|0);
  HEAPF64[(($arrayidx10)>>3)]=$mul9;
  return;
}
Module["_rtp_to_xyz"] = _rtp_to_xyz;
function _sec_deg($angle) {
  var label = 0;
  var $angle_addr;
  var $angle_rad;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $mul=($0)*(0.017453292519943295);
  $angle_rad=$mul;
  var $1=$angle_rad;
  var $call=Math.cos($1);
  var $div=(1)/($call);
  $value=$div;
  var $2=$value;
  return $2;
}
Module["_sec_deg"] = _sec_deg;
function _segment_contains_point_1d($p1, $p2, $p3, $u) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $u_addr;
      var $unit;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $u_addr=$u;
      var $0=$p2_addr;
      var $1=$p1_addr;
      var $sub=($0)-($1);
      $unit=$sub;
      var $2=$unit;
      var $cmp=$2 == 0;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $3=$p3_addr;
      var $4=$p1_addr;
      var $cmp1=$3 == $4;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$u_addr;
      HEAPF64[(($5)>>3)]=0.5;
      label = 11; break;
    case 5: 
      var $6=$p3_addr;
      var $7=$p1_addr;
      var $cmp3=$6 < $7;
      if ($cmp3) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $call=_r8_huge();
      var $sub5=(-$call);
      var $8=$u_addr;
      HEAPF64[(($8)>>3)]=$sub5;
      label = 10; break;
    case 7: 
      var $9=$p1_addr;
      var $10=$p3_addr;
      var $cmp7=$9 < $10;
      if ($cmp7) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $call9=_r8_huge();
      var $11=$u_addr;
      HEAPF64[(($11)>>3)]=$call9;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $12=$p3_addr;
      var $13=$p1_addr;
      var $sub13=($12)-($13);
      var $14=$unit;
      var $div=($sub13)/($14);
      var $15=$u_addr;
      HEAPF64[(($15)>>3)]=$div;
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_contains_point_1d"] = _segment_contains_point_1d;
function _segment_contains_point_2d($p1, $p2, $p3, $u) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $u_addr;
      var $t1;
      var $t2;
      var $unit;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $u_addr=$u;
      var $0=$p2_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$p1_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$p2_addr;
      var $arrayidx2=(($4)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$p1_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$p2_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$p1_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$p2_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$p1_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $call=Math.sqrt($add);
      $unit=$call;
      var $16=$unit;
      var $cmp=$16 == 0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $17=$p1_addr;
      var $18=$p3_addr;
      var $call12=_r8vec_eq(2, $17, $18);
      var $tobool=(($call12)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$u_addr;
      var $arrayidx14=(($19)|0);
      HEAPF64[(($arrayidx14)>>3)]=0.5;
      var $20=$u_addr;
      var $arrayidx15=(($20+8)|0);
      HEAPF64[(($arrayidx15)>>3)]=0;
      label = 6; break;
    case 5: 
      var $21=$u_addr;
      var $arrayidx16=(($21)|0);
      HEAPF64[(($arrayidx16)>>3)]=0.5;
      var $call17=_r8_huge();
      var $22=$u_addr;
      var $arrayidx18=(($22+8)|0);
      HEAPF64[(($arrayidx18)>>3)]=$call17;
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $23=$p3_addr;
      var $arrayidx20=(($23)|0);
      var $24=HEAPF64[(($arrayidx20)>>3)];
      var $25=$p1_addr;
      var $arrayidx21=(($25)|0);
      var $26=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($24)-($26);
      var $27=$p2_addr;
      var $arrayidx23=(($27)|0);
      var $28=HEAPF64[(($arrayidx23)>>3)];
      var $29=$p1_addr;
      var $arrayidx24=(($29)|0);
      var $30=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($28)-($30);
      var $mul26=($sub22)*($sub25);
      var $31=$p3_addr;
      var $arrayidx27=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx27)>>3)];
      var $33=$p1_addr;
      var $arrayidx28=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($32)-($34);
      var $35=$p2_addr;
      var $arrayidx30=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx30)>>3)];
      var $37=$p1_addr;
      var $arrayidx31=(($37+8)|0);
      var $38=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($36)-($38);
      var $mul33=($sub29)*($sub32);
      var $add34=($mul26)+($mul33);
      var $39=$unit;
      var $40=$unit;
      var $mul35=($39)*($40);
      var $div=($add34)/($mul35);
      var $41=$u_addr;
      var $arrayidx36=(($41)|0);
      HEAPF64[(($arrayidx36)>>3)]=$div;
      var $42=$u_addr;
      var $arrayidx37=(($42)|0);
      var $43=HEAPF64[(($arrayidx37)>>3)];
      var $sub38=($43)-(1);
      var $44=$p1_addr;
      var $arrayidx39=(($44)|0);
      var $45=HEAPF64[(($arrayidx39)>>3)];
      var $mul40=($sub38)*($45);
      var $46=$u_addr;
      var $arrayidx41=(($46)|0);
      var $47=HEAPF64[(($arrayidx41)>>3)];
      var $48=$p2_addr;
      var $arrayidx42=(($48)|0);
      var $49=HEAPF64[(($arrayidx42)>>3)];
      var $mul43=($47)*($49);
      var $sub44=($mul40)-($mul43);
      var $50=$p3_addr;
      var $arrayidx45=(($50)|0);
      var $51=HEAPF64[(($arrayidx45)>>3)];
      var $add46=($sub44)+($51);
      $t1=$add46;
      var $52=$u_addr;
      var $arrayidx47=(($52)|0);
      var $53=HEAPF64[(($arrayidx47)>>3)];
      var $sub48=($53)-(1);
      var $54=$p1_addr;
      var $arrayidx49=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx49)>>3)];
      var $mul50=($sub48)*($55);
      var $56=$u_addr;
      var $arrayidx51=(($56)|0);
      var $57=HEAPF64[(($arrayidx51)>>3)];
      var $58=$p2_addr;
      var $arrayidx52=(($58+8)|0);
      var $59=HEAPF64[(($arrayidx52)>>3)];
      var $mul53=($57)*($59);
      var $sub54=($mul50)-($mul53);
      var $60=$p3_addr;
      var $arrayidx55=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx55)>>3)];
      var $add56=($sub54)+($61);
      $t2=$add56;
      var $62=$t1;
      var $63=$t1;
      var $mul57=($62)*($63);
      var $64=$t2;
      var $65=$t2;
      var $mul58=($64)*($65);
      var $add59=($mul57)+($mul58);
      var $call60=Math.sqrt($add59);
      var $66=$unit;
      var $div61=($call60)/($66);
      var $67=$u_addr;
      var $arrayidx62=(($67+8)|0);
      HEAPF64[(($arrayidx62)>>3)]=$div61;
      label = 8; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_contains_point_2d"] = _segment_contains_point_2d;
function _segment_point_coords_2d($p1, $p2, $p, $s, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $s_addr;
      var $t_addr;
      var $bot;
      var $i;
      var $pn=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $s_addr=$s;
      $t_addr=$t;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(2, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$t_addr;
      HEAPF64[(($2)>>3)]=0;
      label = 13; break;
    case 4: 
      $bot=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp=(($3)|(0)) < 2;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$bot;
      var $5=$i;
      var $6=$p2_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$p1_addr;
      var $arrayidx1=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($7)-($10);
      var $11=Math.pow($sub, 2);
      var $add=($4)+($11);
      $bot=$add;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $13=$t_addr;
      HEAPF64[(($13)>>3)]=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $cmp3=(($14)|(0)) < 2;
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $15=$t_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $17=$i;
      var $18=$p_addr;
      var $arrayidx5=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx5)>>3)];
      var $20=$i;
      var $21=$p1_addr;
      var $arrayidx6=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($19)-($22);
      var $23=$i;
      var $24=$p2_addr;
      var $arrayidx8=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx8)>>3)];
      var $26=$i;
      var $27=$p1_addr;
      var $arrayidx9=(($27+($26<<3))|0);
      var $28=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($25)-($28);
      var $mul=($sub7)*($sub10);
      var $add11=($16)+($mul);
      var $29=$t_addr;
      HEAPF64[(($29)>>3)]=$add11;
      label = 11; break;
    case 11: 
      var $30=$i;
      var $inc13=((($30)+(1))|0);
      $i=$inc13;
      label = 9; break;
    case 12: 
      var $31=$t_addr;
      var $32=HEAPF64[(($31)>>3)];
      var $33=$bot;
      var $div=($32)/($33);
      var $34=$t_addr;
      HEAPF64[(($34)>>3)]=$div;
      label = 13; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $35=$i;
      var $cmp16=(($35)|(0)) < 2;
      if ($cmp16) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $36=$i;
      var $37=$p1_addr;
      var $arrayidx18=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx18)>>3)];
      var $39=$t_addr;
      var $40=HEAPF64[(($39)>>3)];
      var $41=$i;
      var $42=$p2_addr;
      var $arrayidx19=(($42+($41<<3))|0);
      var $43=HEAPF64[(($arrayidx19)>>3)];
      var $44=$i;
      var $45=$p1_addr;
      var $arrayidx20=(($45+($44<<3))|0);
      var $46=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($43)-($46);
      var $mul22=($40)*($sub21);
      var $add23=($38)+($mul22);
      var $47=$i;
      var $arrayidx24=(($pn+($47<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$add23;
      label = 16; break;
    case 16: 
      var $48=$i;
      var $inc26=((($48)+(1))|0);
      $i=$inc26;
      label = 14; break;
    case 17: 
      var $49=$s_addr;
      HEAPF64[(($49)>>3)]=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $50=$i;
      var $cmp29=(($50)|(0)) < 2;
      if ($cmp29) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $51=$s_addr;
      var $52=HEAPF64[(($51)>>3)];
      var $53=$i;
      var $54=$p_addr;
      var $arrayidx31=(($54+($53<<3))|0);
      var $55=HEAPF64[(($arrayidx31)>>3)];
      var $56=$i;
      var $arrayidx32=(($pn+($56<<3))|0);
      var $57=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($55)-($57);
      var $58=Math.pow($sub33, 2);
      var $add34=($52)+($58);
      var $59=$s_addr;
      HEAPF64[(($59)>>3)]=$add34;
      label = 20; break;
    case 20: 
      var $60=$i;
      var $inc36=((($60)+(1))|0);
      $i=$inc36;
      label = 18; break;
    case 21: 
      var $61=$s_addr;
      var $62=HEAPF64[(($61)>>3)];
      var $call38=Math.sqrt($62);
      var $63=$s_addr;
      HEAPF64[(($63)>>3)]=$call38;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_point_coords_2d"] = _segment_point_coords_2d;
function _segment_point_coords_3d($p1, $p2, $p, $s, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $s_addr;
      var $t_addr;
      var $bot;
      var $i;
      var $pn=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $s_addr=$s;
      $t_addr=$t;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(3, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$t_addr;
      HEAPF64[(($2)>>3)]=0;
      label = 13; break;
    case 4: 
      $bot=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp=(($3)|(0)) < 3;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$bot;
      var $5=$i;
      var $6=$p2_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$p1_addr;
      var $arrayidx1=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($7)-($10);
      var $11=Math.pow($sub, 2);
      var $add=($4)+($11);
      $bot=$add;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $13=$t_addr;
      HEAPF64[(($13)>>3)]=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $cmp3=(($14)|(0)) < 3;
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $15=$t_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $17=$i;
      var $18=$p_addr;
      var $arrayidx5=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx5)>>3)];
      var $20=$i;
      var $21=$p1_addr;
      var $arrayidx6=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($19)-($22);
      var $23=$i;
      var $24=$p2_addr;
      var $arrayidx8=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx8)>>3)];
      var $26=$i;
      var $27=$p1_addr;
      var $arrayidx9=(($27+($26<<3))|0);
      var $28=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($25)-($28);
      var $mul=($sub7)*($sub10);
      var $add11=($16)+($mul);
      var $29=$t_addr;
      HEAPF64[(($29)>>3)]=$add11;
      label = 11; break;
    case 11: 
      var $30=$i;
      var $inc13=((($30)+(1))|0);
      $i=$inc13;
      label = 9; break;
    case 12: 
      var $31=$t_addr;
      var $32=HEAPF64[(($31)>>3)];
      var $33=$bot;
      var $div=($32)/($33);
      var $34=$t_addr;
      HEAPF64[(($34)>>3)]=$div;
      label = 13; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $35=$i;
      var $cmp16=(($35)|(0)) < 3;
      if ($cmp16) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $36=$i;
      var $37=$p1_addr;
      var $arrayidx18=(($37+($36<<3))|0);
      var $38=HEAPF64[(($arrayidx18)>>3)];
      var $39=$t_addr;
      var $40=HEAPF64[(($39)>>3)];
      var $41=$i;
      var $42=$p2_addr;
      var $arrayidx19=(($42+($41<<3))|0);
      var $43=HEAPF64[(($arrayidx19)>>3)];
      var $44=$i;
      var $45=$p1_addr;
      var $arrayidx20=(($45+($44<<3))|0);
      var $46=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($43)-($46);
      var $mul22=($40)*($sub21);
      var $add23=($38)+($mul22);
      var $47=$i;
      var $arrayidx24=(($pn+($47<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$add23;
      label = 16; break;
    case 16: 
      var $48=$i;
      var $inc26=((($48)+(1))|0);
      $i=$inc26;
      label = 14; break;
    case 17: 
      var $49=$s_addr;
      HEAPF64[(($49)>>3)]=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $50=$i;
      var $cmp29=(($50)|(0)) < 3;
      if ($cmp29) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $51=$s_addr;
      var $52=HEAPF64[(($51)>>3)];
      var $53=$i;
      var $54=$p_addr;
      var $arrayidx31=(($54+($53<<3))|0);
      var $55=HEAPF64[(($arrayidx31)>>3)];
      var $56=$i;
      var $arrayidx32=(($pn+($56<<3))|0);
      var $57=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($55)-($57);
      var $58=Math.pow($sub33, 2);
      var $add34=($52)+($58);
      var $59=$s_addr;
      HEAPF64[(($59)>>3)]=$add34;
      label = 20; break;
    case 20: 
      var $60=$i;
      var $inc36=((($60)+(1))|0);
      $i=$inc36;
      label = 18; break;
    case 21: 
      var $61=$s_addr;
      var $62=HEAPF64[(($61)>>3)];
      var $call38=Math.sqrt($62);
      var $63=$s_addr;
      HEAPF64[(($63)>>3)]=$call38;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_point_coords_3d"] = _segment_point_coords_3d;
function _segment_point_near_3d($p1, $p2, $p, $pn, $dist, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $t_addr;
      var $bot;
      var $i;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $t_addr=$t;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_r8vec_eq(3, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=$t_addr;
      HEAPF64[(($2)>>3)]=0;
      label = 13; break;
    case 4: 
      $bot=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp=(($3)|(0)) < 3;
      if ($cmp) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$bot;
      var $5=$i;
      var $6=$p2_addr;
      var $arrayidx=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx)>>3)];
      var $8=$i;
      var $9=$p1_addr;
      var $arrayidx1=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($7)-($10);
      var $11=Math.pow($sub, 2);
      var $add=($4)+($11);
      $bot=$add;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $13=$t_addr;
      HEAPF64[(($13)>>3)]=0;
      $i=0;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $cmp3=(($14)|(0)) < 3;
      if ($cmp3) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $15=$t_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $17=$i;
      var $18=$p_addr;
      var $arrayidx5=(($18+($17<<3))|0);
      var $19=HEAPF64[(($arrayidx5)>>3)];
      var $20=$i;
      var $21=$p1_addr;
      var $arrayidx6=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($19)-($22);
      var $23=$i;
      var $24=$p2_addr;
      var $arrayidx8=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx8)>>3)];
      var $26=$i;
      var $27=$p1_addr;
      var $arrayidx9=(($27+($26<<3))|0);
      var $28=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($25)-($28);
      var $mul=($sub7)*($sub10);
      var $add11=($16)+($mul);
      var $29=$t_addr;
      HEAPF64[(($29)>>3)]=$add11;
      label = 11; break;
    case 11: 
      var $30=$i;
      var $inc13=((($30)+(1))|0);
      $i=$inc13;
      label = 9; break;
    case 12: 
      var $31=$t_addr;
      var $32=HEAPF64[(($31)>>3)];
      var $33=$bot;
      var $div=($32)/($33);
      var $34=$t_addr;
      HEAPF64[(($34)>>3)]=$div;
      var $35=$t_addr;
      var $36=HEAPF64[(($35)>>3)];
      var $call15=_r8_max($36, 0);
      var $37=$t_addr;
      HEAPF64[(($37)>>3)]=$call15;
      var $38=$t_addr;
      var $39=HEAPF64[(($38)>>3)];
      var $call16=_r8_min($39, 1);
      var $40=$t_addr;
      HEAPF64[(($40)>>3)]=$call16;
      label = 13; break;
    case 13: 
      $i=0;
      label = 14; break;
    case 14: 
      var $41=$i;
      var $cmp18=(($41)|(0)) < 3;
      if ($cmp18) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $42=$i;
      var $43=$p1_addr;
      var $arrayidx20=(($43+($42<<3))|0);
      var $44=HEAPF64[(($arrayidx20)>>3)];
      var $45=$t_addr;
      var $46=HEAPF64[(($45)>>3)];
      var $47=$i;
      var $48=$p2_addr;
      var $arrayidx21=(($48+($47<<3))|0);
      var $49=HEAPF64[(($arrayidx21)>>3)];
      var $50=$i;
      var $51=$p1_addr;
      var $arrayidx22=(($51+($50<<3))|0);
      var $52=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($49)-($52);
      var $mul24=($46)*($sub23);
      var $add25=($44)+($mul24);
      var $53=$i;
      var $54=$pn_addr;
      var $arrayidx26=(($54+($53<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$add25;
      label = 16; break;
    case 16: 
      var $55=$i;
      var $inc28=((($55)+(1))|0);
      $i=$inc28;
      label = 14; break;
    case 17: 
      var $56=$dist_addr;
      HEAPF64[(($56)>>3)]=0;
      $i=0;
      label = 18; break;
    case 18: 
      var $57=$i;
      var $cmp31=(($57)|(0)) < 3;
      if ($cmp31) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $58=$dist_addr;
      var $59=HEAPF64[(($58)>>3)];
      var $60=$i;
      var $61=$p_addr;
      var $arrayidx33=(($61+($60<<3))|0);
      var $62=HEAPF64[(($arrayidx33)>>3)];
      var $63=$i;
      var $64=$pn_addr;
      var $arrayidx34=(($64+($63<<3))|0);
      var $65=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($62)-($65);
      var $66=Math.pow($sub35, 2);
      var $add36=($59)+($66);
      var $67=$dist_addr;
      HEAPF64[(($67)>>3)]=$add36;
      label = 20; break;
    case 20: 
      var $68=$i;
      var $inc38=((($68)+(1))|0);
      $i=$inc38;
      label = 18; break;
    case 21: 
      var $69=$dist_addr;
      var $70=HEAPF64[(($69)>>3)];
      var $call40=Math.sqrt($70);
      var $71=$dist_addr;
      HEAPF64[(($71)>>3)]=$call40;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segment_point_near_3d"] = _segment_point_near_3d;
function _segments_curvature_2d($p1, $p2, $p3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $curvature;
      var $pc=__stackBase__;
      var $r=(__stackBase__)+(16);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$p3_addr;
      var $arraydecay=(($pc)|0);
      _circle_exp2imp_2d($0, $1, $2, $r, $arraydecay);
      var $3=HEAPF64[(($r)>>3)];
      var $cmp=0 < $3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=HEAPF64[(($r)>>3)];
      var $div=(1)/($4);
      $curvature=$div;
      label = 5; break;
    case 4: 
      $curvature=0;
      label = 5; break;
    case 5: 
      var $5=$curvature;
      STACKTOP = __stackBase__;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segments_curvature_2d"] = _segments_curvature_2d;
function _segments_dist_2d($p1, $p2, $q1, $q2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $dist;
      var $dist2;
      var $ival=__stackBase__;
      var $r=(__stackBase__)+(8);
      var $rps=(__stackBase__)+(24);
      var $rpt=(__stackBase__)+(32);
      var $rqs=(__stackBase__)+(40);
      var $rqt=(__stackBase__)+(48);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$q1_addr;
      var $3=$q2_addr;
      var $arraydecay=(($r)|0);
      _lines_exp_int_2d($0, $1, $2, $3, $ival, $arraydecay);
      var $4=HEAP32[(($ival)>>2)];
      var $cmp=(($4)|(0))==1;
      if ($cmp) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $5=$p1_addr;
      var $6=$p2_addr;
      var $arraydecay1=(($r)|0);
      _segment_point_coords_2d($5, $6, $arraydecay1, $rps, $rpt);
      var $7=$q1_addr;
      var $8=$q2_addr;
      var $arraydecay2=(($r)|0);
      _segment_point_coords_2d($7, $8, $arraydecay2, $rqs, $rqt);
      var $9=HEAPF64[(($rpt)>>3)];
      var $cmp3=0 <= $9;
      if ($cmp3) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=HEAPF64[(($rpt)>>3)];
      var $cmp4=$10 <= 1;
      if ($cmp4) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $11=HEAPF64[(($rqt)>>3)];
      var $cmp6=0 <= $11;
      if ($cmp6) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=HEAPF64[(($rqt)>>3)];
      var $cmp8=$12 <= 1;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $dist=0;
      var $13=$dist;
      $retval=$13;
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $14=$q1_addr;
      var $15=$q2_addr;
      var $16=$p1_addr;
      var $call=_segment_point_dist_2d($14, $15, $16);
      $dist2=$call;
      var $17=$dist2;
      $dist=$17;
      var $18=$q1_addr;
      var $19=$q2_addr;
      var $20=$p2_addr;
      var $call11=_segment_point_dist_2d($18, $19, $20);
      $dist2=$call11;
      var $21=$dist;
      var $22=$dist2;
      var $call12=_r8_min($21, $22);
      $dist=$call12;
      var $23=$p1_addr;
      var $24=$p2_addr;
      var $25=$q1_addr;
      var $call13=_segment_point_dist_2d($23, $24, $25);
      $dist2=$call13;
      var $26=$dist;
      var $27=$dist2;
      var $call14=_r8_min($26, $27);
      $dist=$call14;
      var $28=$p1_addr;
      var $29=$p2_addr;
      var $30=$q2_addr;
      var $call15=_segment_point_dist_2d($28, $29, $30);
      $dist2=$call15;
      var $31=$dist;
      var $32=$dist2;
      var $call16=_r8_min($31, $32);
      $dist=$call16;
      var $33=$dist;
      $retval=$33;
      label = 10; break;
    case 10: 
      var $34=$retval;
      STACKTOP = __stackBase__;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segments_dist_2d"] = _segments_dist_2d;
function _segments_dist_3d($p1, $p2, $q1, $q2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $q1_addr;
      var $q2_addr;
      var $a;
      var $b;
      var $c;
      var $d;
      var $det;
      var $dist;
      var $dist2;
      var $e;
      var $i;
      var $pn=__stackBase__;
      var $qn=(__stackBase__)+(24);
      var $sn;
      var $tn;
      var $u=(__stackBase__)+(48);
      var $v=(__stackBase__)+(72);
      var $w0=(__stackBase__)+(96);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $q1_addr=$q1;
      $q2_addr=$q2;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$p2_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$p1_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx2=(($u+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp4=(($9)|(0)) < 3;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $11=$q2_addr;
      var $arrayidx6=(($11+($10<<3))|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$i;
      var $14=$q1_addr;
      var $arrayidx7=(($14+($13<<3))|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($12)-($15);
      var $16=$i;
      var $arrayidx9=(($v+($16<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc11=((($17)+(1))|0);
      $i=$inc11;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp14=(($18)|(0)) < 3;
      if ($cmp14) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $20=$p1_addr;
      var $arrayidx16=(($20+($19<<3))|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$i;
      var $23=$q1_addr;
      var $arrayidx17=(($23+($22<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($24);
      var $25=$i;
      var $arrayidx19=(($w0+($25<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$sub18;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc21=((($26)+(1))|0);
      $i=$inc21;
      label = 11; break;
    case 14: 
      var $arraydecay=(($u)|0);
      var $arraydecay23=(($u)|0);
      var $call=_r8vec_dot_product(3, $arraydecay, $arraydecay23);
      $a=$call;
      var $arraydecay24=(($u)|0);
      var $arraydecay25=(($v)|0);
      var $call26=_r8vec_dot_product(3, $arraydecay24, $arraydecay25);
      $b=$call26;
      var $arraydecay27=(($v)|0);
      var $arraydecay28=(($v)|0);
      var $call29=_r8vec_dot_product(3, $arraydecay27, $arraydecay28);
      $c=$call29;
      var $arraydecay30=(($u)|0);
      var $arraydecay31=(($w0)|0);
      var $call32=_r8vec_dot_product(3, $arraydecay30, $arraydecay31);
      $d=$call32;
      var $arraydecay33=(($v)|0);
      var $arraydecay34=(($w0)|0);
      var $call35=_r8vec_dot_product(3, $arraydecay33, $arraydecay34);
      $e=$call35;
      var $27=$a;
      var $sub36=(-$27);
      var $28=$c;
      var $mul=($sub36)*($28);
      var $29=$b;
      var $30=$b;
      var $mul37=($29)*($30);
      var $add=($mul)+($mul37);
      $det=$add;
      var $31=$det;
      var $cmp38=$31 == 0;
      if ($cmp38) { label = 15; break; } else { label = 19; break; }
    case 15: 
      $sn=0;
      var $32=$b;
      var $call39=_r8_abs($32);
      var $33=$c;
      var $call40=_r8_abs($33);
      var $cmp41=$call39 < $call40;
      if ($cmp41) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $34=$e;
      var $35=$c;
      var $div=($34)/($35);
      $tn=$div;
      label = 18; break;
    case 17: 
      var $36=$d;
      var $37=$b;
      var $div43=($36)/($37);
      $tn=$div43;
      label = 18; break;
    case 18: 
      label = 20; break;
    case 19: 
      var $38=$c;
      var $39=$d;
      var $mul45=($38)*($39);
      var $40=$b;
      var $41=$e;
      var $mul46=($40)*($41);
      var $sub47=($mul45)-($mul46);
      var $42=$det;
      var $div48=($sub47)/($42);
      $sn=$div48;
      var $43=$b;
      var $44=$d;
      var $mul49=($43)*($44);
      var $45=$a;
      var $46=$e;
      var $mul50=($45)*($46);
      var $sub51=($mul49)-($mul50);
      var $47=$det;
      var $div52=($sub51)/($47);
      $tn=$div52;
      label = 20; break;
    case 20: 
      var $48=$sn;
      var $cmp54=0 <= $48;
      if ($cmp54) { label = 21; break; } else { label = 37; break; }
    case 21: 
      var $49=$sn;
      var $cmp55=$49 <= 1;
      if ($cmp55) { label = 22; break; } else { label = 37; break; }
    case 22: 
      var $50=$tn;
      var $cmp57=0 <= $50;
      if ($cmp57) { label = 23; break; } else { label = 37; break; }
    case 23: 
      var $51=$tn;
      var $cmp59=$51 <= 1;
      if ($cmp59) { label = 24; break; } else { label = 37; break; }
    case 24: 
      $i=0;
      label = 25; break;
    case 25: 
      var $52=$i;
      var $cmp62=(($52)|(0)) < 3;
      if ($cmp62) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $53=$i;
      var $54=$p1_addr;
      var $arrayidx64=(($54+($53<<3))|0);
      var $55=HEAPF64[(($arrayidx64)>>3)];
      var $56=$sn;
      var $57=$i;
      var $58=$p2_addr;
      var $arrayidx65=(($58+($57<<3))|0);
      var $59=HEAPF64[(($arrayidx65)>>3)];
      var $60=$i;
      var $61=$p1_addr;
      var $arrayidx66=(($61+($60<<3))|0);
      var $62=HEAPF64[(($arrayidx66)>>3)];
      var $sub67=($59)-($62);
      var $mul68=($56)*($sub67);
      var $add69=($55)+($mul68);
      var $63=$i;
      var $arrayidx70=(($pn+($63<<3))|0);
      HEAPF64[(($arrayidx70)>>3)]=$add69;
      label = 27; break;
    case 27: 
      var $64=$i;
      var $inc72=((($64)+(1))|0);
      $i=$inc72;
      label = 25; break;
    case 28: 
      $i=0;
      label = 29; break;
    case 29: 
      var $65=$i;
      var $cmp75=(($65)|(0)) < 3;
      if ($cmp75) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $66=$i;
      var $67=$q1_addr;
      var $arrayidx77=(($67+($66<<3))|0);
      var $68=HEAPF64[(($arrayidx77)>>3)];
      var $69=$tn;
      var $70=$i;
      var $71=$q2_addr;
      var $arrayidx78=(($71+($70<<3))|0);
      var $72=HEAPF64[(($arrayidx78)>>3)];
      var $73=$i;
      var $74=$q1_addr;
      var $arrayidx79=(($74+($73<<3))|0);
      var $75=HEAPF64[(($arrayidx79)>>3)];
      var $sub80=($72)-($75);
      var $mul81=($69)*($sub80);
      var $add82=($68)+($mul81);
      var $76=$i;
      var $arrayidx83=(($qn+($76<<3))|0);
      HEAPF64[(($arrayidx83)>>3)]=$add82;
      label = 31; break;
    case 31: 
      var $77=$i;
      var $inc85=((($77)+(1))|0);
      $i=$inc85;
      label = 29; break;
    case 32: 
      $dist=0;
      $i=0;
      label = 33; break;
    case 33: 
      var $78=$i;
      var $cmp88=(($78)|(0)) < 3;
      if ($cmp88) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $79=$dist;
      var $80=$i;
      var $arrayidx90=(($pn+($80<<3))|0);
      var $81=HEAPF64[(($arrayidx90)>>3)];
      var $82=$i;
      var $arrayidx91=(($qn+($82<<3))|0);
      var $83=HEAPF64[(($arrayidx91)>>3)];
      var $sub92=($81)-($83);
      var $84=Math.pow($sub92, 2);
      var $add93=($79)+($84);
      $dist=$add93;
      label = 35; break;
    case 35: 
      var $85=$i;
      var $inc95=((($85)+(1))|0);
      $i=$inc95;
      label = 33; break;
    case 36: 
      var $86=$dist;
      var $call97=Math.sqrt($86);
      $dist=$call97;
      var $87=$dist;
      $retval=$87;
      label = 38; break;
    case 37: 
      var $88=$q1_addr;
      var $89=$q2_addr;
      var $90=$p1_addr;
      var $call99=_segment_point_dist_3d($88, $89, $90);
      $dist2=$call99;
      var $91=$dist2;
      $dist=$91;
      var $92=$q1_addr;
      var $93=$q2_addr;
      var $94=$p2_addr;
      var $call100=_segment_point_dist_3d($92, $93, $94);
      $dist2=$call100;
      var $95=$dist;
      var $96=$dist2;
      var $call101=_r8_min($95, $96);
      $dist=$call101;
      var $97=$p1_addr;
      var $98=$p2_addr;
      var $99=$q1_addr;
      var $call102=_segment_point_dist_3d($97, $98, $99);
      $dist2=$call102;
      var $100=$dist;
      var $101=$dist2;
      var $call103=_r8_min($100, $101);
      $dist=$call103;
      var $102=$p1_addr;
      var $103=$p2_addr;
      var $104=$q2_addr;
      var $call104=_segment_point_dist_3d($102, $103, $104);
      $dist2=$call104;
      var $105=$dist;
      var $106=$dist2;
      var $call105=_r8_min($105, $106);
      $dist=$call105;
      var $107=$dist;
      $retval=$107;
      label = 38; break;
    case 38: 
      var $108=$retval;
      STACKTOP = __stackBase__;
      return $108;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segments_dist_3d"] = _segments_dist_3d;
function _segments_int_1d($p1, $p2, $q1, $q2, $r1, $r2) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $q1_addr;
  var $q2_addr;
  var $r1_addr;
  var $r2_addr;
  var $dist;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $q1_addr=$q1;
  $q2_addr=$q2;
  $r1_addr=$r1;
  $r2_addr=$r2;
  var $0=$p1_addr;
  var $1=$p2_addr;
  var $call=_r8_min($0, $1);
  var $2=$q1_addr;
  var $3=$q2_addr;
  var $call1=_r8_min($2, $3);
  var $call2=_r8_max($call, $call1);
  var $4=$r1_addr;
  HEAPF64[(($4)>>3)]=$call2;
  var $5=$p1_addr;
  var $6=$p2_addr;
  var $call3=_r8_max($5, $6);
  var $7=$q1_addr;
  var $8=$q2_addr;
  var $call4=_r8_max($7, $8);
  var $call5=_r8_min($call3, $call4);
  var $9=$r2_addr;
  HEAPF64[(($9)>>3)]=$call5;
  var $10=$r1_addr;
  var $11=HEAPF64[(($10)>>3)];
  var $12=$r2_addr;
  var $13=HEAPF64[(($12)>>3)];
  var $sub=($11)-($13);
  $dist=$sub;
  var $14=$dist;
  return $14;
}
Module["_segments_int_1d"] = _segments_int_1d;
function _segments_int_2d($p1, $p2, $p3, $p4, $flag, $p5) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $flag_addr;
      var $p5_addr;
      var $ival=__stackBase__;
      var $tol;
      var $u=(__stackBase__)+(8);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $flag_addr=$flag;
      $p5_addr=$p5;
      $tol=0.001;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$p3_addr;
      var $3=$p4_addr;
      var $4=$p5_addr;
      _lines_exp_int_2d($0, $1, $2, $3, $ival, $4);
      var $5=HEAP32[(($ival)>>2)];
      var $cmp=(($5)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$flag_addr;
      HEAP32[(($6)>>2)]=0;
      var $7=$p5_addr;
      var $arrayidx=(($7)|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      var $8=$p5_addr;
      var $arrayidx1=(($8+8)|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      label = 13; break;
    case 4: 
      var $9=$p1_addr;
      var $10=$p2_addr;
      var $11=$p5_addr;
      var $arraydecay=(($u)|0);
      _segment_contains_point_2d($9, $10, $11, $arraydecay);
      var $arrayidx2=(($u)|0);
      var $12=HEAPF64[(($arrayidx2)>>3)];
      var $cmp3=$12 < 0;
      if ($cmp3) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $arrayidx4=(($u)|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $cmp5=1 < $13;
      if ($cmp5) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $14=$tol;
      var $arrayidx7=(($u+8)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $cmp8=$14 < $15;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$flag_addr;
      HEAP32[(($16)>>2)]=0;
      var $17=$p5_addr;
      var $arrayidx10=(($17)|0);
      HEAPF64[(($arrayidx10)>>3)]=0;
      var $18=$p5_addr;
      var $arrayidx11=(($18+8)|0);
      HEAPF64[(($arrayidx11)>>3)]=0;
      label = 13; break;
    case 8: 
      var $19=$p3_addr;
      var $20=$p4_addr;
      var $21=$p5_addr;
      var $arraydecay13=(($u)|0);
      _segment_contains_point_2d($19, $20, $21, $arraydecay13);
      var $arrayidx14=(($u)|0);
      var $22=HEAPF64[(($arrayidx14)>>3)];
      var $cmp15=$22 < 0;
      if ($cmp15) { label = 11; break; } else { label = 9; break; }
    case 9: 
      var $arrayidx17=(($u)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $cmp18=1 < $23;
      if ($cmp18) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $24=$tol;
      var $arrayidx20=(($u+8)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $cmp21=$24 < $25;
      if ($cmp21) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $26=$flag_addr;
      HEAP32[(($26)>>2)]=0;
      var $27=$p5_addr;
      var $arrayidx23=(($27)|0);
      HEAPF64[(($arrayidx23)>>3)]=0;
      var $28=$p5_addr;
      var $arrayidx24=(($28+8)|0);
      HEAPF64[(($arrayidx24)>>3)]=0;
      label = 13; break;
    case 12: 
      var $29=$flag_addr;
      HEAP32[(($29)>>2)]=1;
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segments_int_2d"] = _segments_int_2d;
function _shape_point_dist_2d($pc, $p1, $side_num, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $pc_addr;
      var $p1_addr;
      var $side_num_addr;
      var $p_addr;
      var $angle;
      var $angle2;
      var $dist;
      var $pa=__stackBase__;
      var $pb=(__stackBase__)+(16);
      var $pi;
      var $radius;
      var $sector_angle;
      var $sector_index;
      $pc_addr=$pc;
      $p1_addr=$p1;
      $side_num_addr=$side_num;
      $p_addr=$p;
      $pi=3.141592653589793;
      var $0=$side_num_addr;
      var $conv=(($0)|(0));
      var $div=(360)/($conv);
      $sector_angle=$div;
      var $1=$p1_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$pc_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=Math.pow($sub, 2);
      var $6=$p1_addr;
      var $arrayidx2=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$pc_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $10=Math.pow($sub4, 2);
      var $add=($5)+($10);
      var $call=Math.sqrt($add);
      $radius=$call;
      var $11=$radius;
      var $cmp=$11 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$p_addr;
      var $arrayidx6=(($12)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $14=$pc_addr;
      var $arrayidx7=(($14)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($13)-($15);
      var $16=Math.pow($sub8, 2);
      var $17=$p_addr;
      var $arrayidx9=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $19=$pc_addr;
      var $arrayidx10=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($18)-($20);
      var $21=Math.pow($sub11, 2);
      var $add12=($16)+($21);
      var $call13=Math.sqrt($add12);
      $dist=$call13;
      var $22=$dist;
      $retval=$22;
      label = 7; break;
    case 4: 
      var $23=$p_addr;
      var $arrayidx14=(($23)|0);
      var $24=HEAPF64[(($arrayidx14)>>3)];
      var $25=$pc_addr;
      var $arrayidx15=(($25)|0);
      var $26=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($24)-($26);
      var $27=Math.pow($sub16, 2);
      var $28=$p_addr;
      var $arrayidx17=(($28+8)|0);
      var $29=HEAPF64[(($arrayidx17)>>3)];
      var $30=$pc_addr;
      var $arrayidx18=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($29)-($31);
      var $32=Math.pow($sub19, 2);
      var $add20=($27)+($32);
      var $call21=Math.sqrt($add20);
      var $cmp22=$call21 == 0;
      if ($cmp22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=$radius;
      var $34=$pi;
      var $35=$side_num_addr;
      var $conv25=(($35)|(0));
      var $div26=($34)/($conv25);
      var $call27=Math.cos($div26);
      var $mul=($33)*($call27);
      $dist=$mul;
      var $36=$dist;
      $retval=$36;
      label = 7; break;
    case 6: 
      var $37=$p1_addr;
      var $38=$pc_addr;
      var $39=$p_addr;
      var $call29=_angle_deg_2d($37, $38, $39);
      $angle=$call29;
      var $40=$angle;
      var $41=$sector_angle;
      var $div30=($40)/($41);
      var $conv31=(($div30)&-1);
      var $add32=((($conv31)+(1))|0);
      $sector_index=$add32;
      var $42=$sector_index;
      var $sub33=((($42)-(1))|0);
      var $conv34=(($sub33)|(0));
      var $43=$sector_angle;
      var $mul35=($conv34)*($43);
      $angle2=$mul35;
      var $44=$angle2;
      var $call36=_degrees_to_radians($44);
      $angle2=$call36;
      var $45=$p1_addr;
      var $46=$pc_addr;
      var $47=$angle2;
      var $arraydecay=(($pa)|0);
      _vector_rotate_base_2d($45, $46, $47, $arraydecay);
      var $48=$sector_index;
      var $conv37=(($48)|(0));
      var $49=$sector_angle;
      var $mul38=($conv37)*($49);
      $angle2=$mul38;
      var $50=$angle2;
      var $call39=_degrees_to_radians($50);
      $angle2=$call39;
      var $51=$p1_addr;
      var $52=$pc_addr;
      var $53=$angle2;
      var $arraydecay40=(($pb)|0);
      _vector_rotate_base_2d($51, $52, $53, $arraydecay40);
      var $arraydecay41=(($pa)|0);
      var $arraydecay42=(($pb)|0);
      var $54=$p_addr;
      var $call43=_segment_point_dist_2d($arraydecay41, $arraydecay42, $54);
      $dist=$call43;
      var $55=$dist;
      $retval=$55;
      label = 7; break;
    case 7: 
      var $56=$retval;
      STACKTOP = __stackBase__;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
Module["_shape_point_dist_2d"] = _shape_point_dist_2d;
function _vector_rotate_base_2d($p1, $pb, $angle, $p2) {
  var label = 0;
  var $p1_addr;
  var $pb_addr;
  var $angle_addr;
  var $p2_addr;
  $p1_addr=$p1;
  $pb_addr=$pb;
  $angle_addr=$angle;
  $p2_addr=$p2;
  var $0=$pb_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$angle_addr;
  var $call=Math.cos($2);
  var $3=$p1_addr;
  var $arrayidx1=(($3)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $5=$pb_addr;
  var $arrayidx2=(($5)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $sub=($4)-($6);
  var $mul=($call)*($sub);
  var $add=($1)+($mul);
  var $7=$angle_addr;
  var $call3=Math.sin($7);
  var $8=$p1_addr;
  var $arrayidx4=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx4)>>3)];
  var $10=$pb_addr;
  var $arrayidx5=(($10+8)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $sub6=($9)-($11);
  var $mul7=($call3)*($sub6);
  var $sub8=($add)-($mul7);
  var $12=$p2_addr;
  var $arrayidx9=(($12)|0);
  HEAPF64[(($arrayidx9)>>3)]=$sub8;
  var $13=$pb_addr;
  var $arrayidx10=(($13+8)|0);
  var $14=HEAPF64[(($arrayidx10)>>3)];
  var $15=$angle_addr;
  var $call11=Math.sin($15);
  var $16=$p1_addr;
  var $arrayidx12=(($16)|0);
  var $17=HEAPF64[(($arrayidx12)>>3)];
  var $18=$pb_addr;
  var $arrayidx13=(($18)|0);
  var $19=HEAPF64[(($arrayidx13)>>3)];
  var $sub14=($17)-($19);
  var $mul15=($call11)*($sub14);
  var $add16=($14)+($mul15);
  var $20=$angle_addr;
  var $call17=Math.cos($20);
  var $21=$p1_addr;
  var $arrayidx18=(($21+8)|0);
  var $22=HEAPF64[(($arrayidx18)>>3)];
  var $23=$pb_addr;
  var $arrayidx19=(($23+8)|0);
  var $24=HEAPF64[(($arrayidx19)>>3)];
  var $sub20=($22)-($24);
  var $mul21=($call17)*($sub20);
  var $add22=($add16)+($mul21);
  var $25=$p2_addr;
  var $arrayidx23=(($25+8)|0);
  HEAPF64[(($arrayidx23)>>3)]=$add22;
  return;
}
Module["_vector_rotate_base_2d"] = _vector_rotate_base_2d;
function _shape_point_near_2d($pc, $p1, $side_num, $p, $pn, $dist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pc_addr;
      var $p1_addr;
      var $side_num_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $angle;
      var $angle2;
      var $pi;
      var $radius;
      var $sector_angle;
      var $sector_index;
      var $t=__stackBase__;
      var $pa=(__stackBase__)+(8);
      var $pb=(__stackBase__)+(24);
      var $pd=(__stackBase__)+(40);
      $pc_addr=$pc;
      $p1_addr=$p1;
      $side_num_addr=$side_num;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      $pi=3.141592653589793;
      var $0=$side_num_addr;
      var $conv=(($0)|(0));
      var $div=(360)/($conv);
      $sector_angle=$div;
      var $1=$p1_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$pc_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=Math.pow($sub, 2);
      var $6=$p1_addr;
      var $arrayidx2=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$pc_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $10=Math.pow($sub4, 2);
      var $add=($5)+($10);
      var $call=Math.sqrt($add);
      $radius=$call;
      var $11=$radius;
      var $cmp=$11 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$pc_addr;
      var $13=$pn_addr;
      _r8vec_copy(2, $12, $13);
      var $14=$p_addr;
      var $arrayidx6=(($14)|0);
      var $15=HEAPF64[(($arrayidx6)>>3)];
      var $16=$pc_addr;
      var $arrayidx7=(($16)|0);
      var $17=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($15)-($17);
      var $18=Math.pow($sub8, 2);
      var $19=$p_addr;
      var $arrayidx9=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx9)>>3)];
      var $21=$pc_addr;
      var $arrayidx10=(($21+8)|0);
      var $22=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($20)-($22);
      var $23=Math.pow($sub11, 2);
      var $add12=($18)+($23);
      var $call13=Math.sqrt($add12);
      var $24=$dist_addr;
      HEAPF64[(($24)>>3)]=$call13;
      label = 7; break;
    case 4: 
      var $25=$p_addr;
      var $arrayidx14=(($25)|0);
      var $26=HEAPF64[(($arrayidx14)>>3)];
      var $27=$pc_addr;
      var $arrayidx15=(($27)|0);
      var $28=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($26)-($28);
      var $29=Math.pow($sub16, 2);
      var $30=$p_addr;
      var $arrayidx17=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx17)>>3)];
      var $32=$pc_addr;
      var $arrayidx18=(($32+8)|0);
      var $33=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($31)-($33);
      var $34=Math.pow($sub19, 2);
      var $add20=($29)+($34);
      var $call21=Math.sqrt($add20);
      var $cmp22=$call21 == 0;
      if ($cmp22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35=$pi;
      var $36=$side_num_addr;
      var $conv25=(($36)|(0));
      var $div26=($35)/($conv25);
      $angle=$div26;
      var $37=$p1_addr;
      var $arrayidx27=(($37)|0);
      var $38=HEAPF64[(($arrayidx27)>>3)];
      var $39=$pc_addr;
      var $arrayidx28=(($39)|0);
      var $40=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($38)-($40);
      var $41=$angle;
      var $call30=Math.cos($41);
      var $mul=($sub29)*($call30);
      var $42=$p1_addr;
      var $arrayidx31=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx31)>>3)];
      var $44=$pc_addr;
      var $arrayidx32=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($43)-($45);
      var $46=$angle;
      var $call34=Math.sin($46);
      var $mul35=($sub33)*($call34);
      var $add36=($mul)+($mul35);
      var $arrayidx37=(($pd)|0);
      HEAPF64[(($arrayidx37)>>3)]=$add36;
      var $47=$p1_addr;
      var $arrayidx38=(($47)|0);
      var $48=HEAPF64[(($arrayidx38)>>3)];
      var $49=$pc_addr;
      var $arrayidx39=(($49)|0);
      var $50=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($48)-($50);
      var $sub41=(-$sub40);
      var $51=$angle;
      var $call42=Math.sin($51);
      var $mul43=($sub41)*($call42);
      var $52=$p1_addr;
      var $arrayidx44=(($52+8)|0);
      var $53=HEAPF64[(($arrayidx44)>>3)];
      var $54=$pc_addr;
      var $arrayidx45=(($54+8)|0);
      var $55=HEAPF64[(($arrayidx45)>>3)];
      var $sub46=($53)-($55);
      var $56=$angle;
      var $call47=Math.cos($56);
      var $mul48=($sub46)*($call47);
      var $add49=($mul43)+($mul48);
      var $arrayidx50=(($pd+8)|0);
      HEAPF64[(($arrayidx50)>>3)]=$add49;
      var $57=$pc_addr;
      var $arrayidx51=(($57)|0);
      var $58=HEAPF64[(($arrayidx51)>>3)];
      var $arrayidx52=(($pd)|0);
      var $59=HEAPF64[(($arrayidx52)>>3)];
      var $60=$angle;
      var $call53=Math.cos($60);
      var $mul54=($59)*($call53);
      var $add55=($58)+($mul54);
      var $61=$pn_addr;
      var $arrayidx56=(($61)|0);
      HEAPF64[(($arrayidx56)>>3)]=$add55;
      var $62=$pc_addr;
      var $arrayidx57=(($62+8)|0);
      var $63=HEAPF64[(($arrayidx57)>>3)];
      var $arrayidx58=(($pd+8)|0);
      var $64=HEAPF64[(($arrayidx58)>>3)];
      var $65=$angle;
      var $call59=Math.cos($65);
      var $mul60=($64)*($call59);
      var $add61=($63)+($mul60);
      var $66=$pn_addr;
      var $arrayidx62=(($66+8)|0);
      HEAPF64[(($arrayidx62)>>3)]=$add61;
      var $67=$radius;
      var $68=$angle;
      var $call63=Math.cos($68);
      var $mul64=($67)*($call63);
      var $69=$dist_addr;
      HEAPF64[(($69)>>3)]=$mul64;
      label = 7; break;
    case 6: 
      var $70=$p1_addr;
      var $71=$pc_addr;
      var $72=$p_addr;
      var $call66=_angle_deg_2d($70, $71, $72);
      $angle=$call66;
      var $73=$angle;
      var $74=$sector_angle;
      var $div67=($73)/($74);
      var $conv68=(($div67)&-1);
      var $add69=((($conv68)+(1))|0);
      $sector_index=$add69;
      var $75=$sector_index;
      var $sub70=((($75)-(1))|0);
      var $conv71=(($sub70)|(0));
      var $76=$sector_angle;
      var $mul72=($conv71)*($76);
      $angle2=$mul72;
      var $77=$angle2;
      var $call73=_degrees_to_radians($77);
      $angle2=$call73;
      var $78=$p1_addr;
      var $79=$pc_addr;
      var $80=$angle2;
      var $arraydecay=(($pa)|0);
      _vector_rotate_base_2d($78, $79, $80, $arraydecay);
      var $81=$sector_index;
      var $conv74=(($81)|(0));
      var $82=$sector_angle;
      var $mul75=($conv74)*($82);
      $angle2=$mul75;
      var $83=$angle2;
      var $call76=_degrees_to_radians($83);
      $angle2=$call76;
      var $84=$p1_addr;
      var $85=$pc_addr;
      var $86=$angle2;
      var $arraydecay77=(($pb)|0);
      _vector_rotate_base_2d($84, $85, $86, $arraydecay77);
      var $arraydecay78=(($pa)|0);
      var $arraydecay79=(($pb)|0);
      var $87=$p_addr;
      var $88=$pn_addr;
      var $89=$dist_addr;
      _segment_point_near_2d($arraydecay78, $arraydecay79, $87, $88, $89, $t);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_shape_point_near_2d"] = _shape_point_near_2d;
function _shape_print_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $point_coord_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $i;
      var $j;
      $point_num_addr=$point_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $point_coord_addr=$point_coord;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fprintf($0, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1=HEAP32[((_stdout)>>2)];
      var $call1=_fprintf($1, ((13048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stdout)>>2)];
      var $call2=_fprintf($2, ((13008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stdout)>>2)];
      var $call3=_fprintf($3, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stdout)>>2)];
      var $5=$point_num_addr;
      var $call4=_fprintf($4, ((12976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      var $6=HEAP32[((_stdout)>>2)];
      var $call5=_fprintf($6, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=HEAP32[((_stdout)>>2)];
      var $call6=_fprintf($7, ((12960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stdout)>>2)];
      var $call7=_fprintf($8, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=HEAP32[((_stdout)>>2)];
      var $call8=_fprintf($9, ((12904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $10=HEAP32[((_stdout)>>2)];
      var $call9=_fprintf($10, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $j=0;
      label = 3; break;
    case 3: 
      var $11=$j;
      var $12=$point_num_addr;
      var $cmp=(($11)|(0)) < (($12)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $13=HEAP32[((_stdout)>>2)];
      var $14=$j;
      var $add=((($14)+(1))|0);
      var $call10=_fprintf($13, ((12896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$add,tempInt));
      $i=0;
      label = 5; break;
    case 5: 
      var $15=$i;
      var $cmp12=(($15)|(0)) < 3;
      if ($cmp12) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $16=HEAP32[((_stdout)>>2)];
      var $17=$i;
      var $18=$j;
      var $mul=((($18)*(3))&-1);
      var $add14=((($17)+($mul))|0);
      var $19=$point_coord_addr;
      var $arrayidx=(($19+($add14<<3))|0);
      var $20=HEAPF64[(($arrayidx)>>3)];
      var $call15=_fprintf($16, ((12848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$20,tempInt));
      label = 7; break;
    case 7: 
      var $21=$i;
      var $inc=((($21)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $22=HEAP32[((_stdout)>>2)];
      var $call16=_fprintf($22, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 9; break;
    case 9: 
      var $23=$j;
      var $inc18=((($23)+(1))|0);
      $j=$inc18;
      label = 3; break;
    case 10: 
      var $24=HEAP32[((_stdout)>>2)];
      var $call20=_fprintf($24, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $25=HEAP32[((_stdout)>>2)];
      var $26=$face_num_addr;
      var $call21=_fprintf($25, ((12816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$26,tempInt));
      var $27=HEAP32[((_stdout)>>2)];
      var $28=$face_order_max_addr;
      var $call22=_fprintf($27, ((12760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$28,tempInt));
      var $29=HEAP32[((_stdout)>>2)];
      var $call23=_fprintf($29, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $30=HEAP32[((_stdout)>>2)];
      var $call24=_fprintf($30, ((12704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $j=1;
      label = 11; break;
    case 11: 
      var $31=$j;
      var $32=$face_order_max_addr;
      var $cmp26=(($31)|(0)) <= (($32)|(0));
      if ($cmp26) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $33=HEAP32[((_stdout)>>2)];
      var $34=$j;
      var $call28=_fprintf($33, ((12696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$34,tempInt));
      label = 13; break;
    case 13: 
      var $35=$j;
      var $inc30=((($35)+(1))|0);
      $j=$inc30;
      label = 11; break;
    case 14: 
      var $36=HEAP32[((_stdout)>>2)];
      var $call32=_fprintf($36, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=HEAP32[((_stdout)>>2)];
      var $call33=_fprintf($37, ((12672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $38=HEAP32[((_stdout)>>2)];
      var $call34=_fprintf($38, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $j=0;
      label = 15; break;
    case 15: 
      var $39=$j;
      var $40=$face_num_addr;
      var $cmp36=(($39)|(0)) < (($40)|(0));
      if ($cmp36) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $41=HEAP32[((_stdout)>>2)];
      var $42=$j;
      var $add38=((($42)+(1))|0);
      var $43=$j;
      var $44=$face_order_addr;
      var $arrayidx39=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx39)>>2)];
      var $call40=_fprintf($41, ((12656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$add38,HEAP32[(((tempInt)+(8))>>2)]=$45,tempInt));
      $i=0;
      label = 17; break;
    case 17: 
      var $46=$i;
      var $47=$j;
      var $48=$face_order_addr;
      var $arrayidx42=(($48+($47<<2))|0);
      var $49=HEAP32[(($arrayidx42)>>2)];
      var $cmp43=(($46)|(0)) < (($49)|(0));
      if ($cmp43) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $50=HEAP32[((_stdout)>>2)];
      var $51=$i;
      var $52=$j;
      var $53=$face_order_max_addr;
      var $mul45=(Math.imul($52,$53)|0);
      var $add46=((($51)+($mul45))|0);
      var $54=$face_point_addr;
      var $arrayidx47=(($54+($add46<<2))|0);
      var $55=HEAP32[(($arrayidx47)>>2)];
      var $call48=_fprintf($50, ((12696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$55,tempInt));
      label = 19; break;
    case 19: 
      var $56=$i;
      var $inc50=((($56)+(1))|0);
      $i=$inc50;
      label = 17; break;
    case 20: 
      var $57=HEAP32[((_stdout)>>2)];
      var $call52=_fprintf($57, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 21; break;
    case 21: 
      var $58=$j;
      var $inc54=((($58)+(1))|0);
      $j=$inc54;
      label = 15; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_shape_print_3d"] = _shape_print_3d;
function _segments_dist_3d_old($p1, $p2, $p3, $p4) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $d1=__stackBase__;
      var $d2=(__stackBase__)+(8);
      var $dist=(__stackBase__)+(16);
      var $dl;
      var $dm;
      var $dr;
      var $pn1=(__stackBase__)+(24);
      var $pn2=(__stackBase__)+(48);
      var $pt=(__stackBase__)+(72);
      var $result;
      var $t1=(__stackBase__)+(96);
      var $t2=(__stackBase__)+(104);
      var $tl;
      var $tm;
      var $tmin=(__stackBase__)+(112);
      var $tr;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      var $0=$p3_addr;
      var $1=$p4_addr;
      var $2=$p1_addr;
      var $arraydecay=(($pn1)|0);
      _segment_point_near_3d($0, $1, $2, $arraydecay, $d1, $t1);
      var $3=$p3_addr;
      var $4=$p4_addr;
      var $5=$p2_addr;
      var $arraydecay1=(($pn2)|0);
      _segment_point_near_3d($3, $4, $5, $arraydecay1, $d2, $t2);
      var $6=HEAPF64[(($t1)>>3)];
      var $7=HEAPF64[(($t2)>>3)];
      var $cmp=$6 == $7;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$p1_addr;
      var $9=$p2_addr;
      var $arraydecay2=(($pn1)|0);
      var $call=_segment_point_dist_3d($8, $9, $arraydecay2);
      HEAPF64[(($dist)>>3)]=$call;
      var $10=HEAPF64[(($dist)>>3)];
      $retval=$10;
      label = 7; break;
    case 4: 
      var $11=$p1_addr;
      var $12=$p2_addr;
      var $arraydecay3=(($pn1)|0);
      var $call4=_segment_point_dist_3d($11, $12, $arraydecay3);
      $dl=$call4;
      var $arrayidx=(($pn1)|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx5=(($pn2)|0);
      var $14=HEAPF64[(($arrayidx5)>>3)];
      var $add=($13)+($14);
      var $mul=($add)*(0.5);
      var $arrayidx6=(($pt)|0);
      HEAPF64[(($arrayidx6)>>3)]=$mul;
      var $arrayidx7=(($pn1+8)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $arrayidx8=(($pn2+8)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $add9=($15)+($16);
      var $mul10=($add9)*(0.5);
      var $arrayidx11=(($pt+8)|0);
      HEAPF64[(($arrayidx11)>>3)]=$mul10;
      var $arrayidx12=(($pn1+16)|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($pn2+16)|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      var $add14=($17)+($18);
      var $mul15=($add14)*(0.5);
      var $arrayidx16=(($pt+16)|0);
      HEAPF64[(($arrayidx16)>>3)]=$mul15;
      var $19=$p1_addr;
      var $20=$p2_addr;
      var $arraydecay17=(($pt)|0);
      var $call18=_segment_point_dist_3d($19, $20, $arraydecay17);
      $dm=$call18;
      var $21=$p1_addr;
      var $22=$p2_addr;
      var $arraydecay19=(($pn2)|0);
      var $call20=_segment_point_dist_3d($21, $22, $arraydecay19);
      $dr=$call20;
      $tl=0;
      $tm=0.5;
      $tr=1;
      var $23=$dl;
      var $24=$dl;
      var $mul21=($23)*($24);
      $dl=$mul21;
      var $25=$dm;
      var $26=$dm;
      var $mul22=($25)*($26);
      $dm=$mul22;
      var $27=$dr;
      var $28=$dr;
      var $mul23=($27)*($28);
      $dr=$mul23;
      var $29=$tl;
      var $30=$dl;
      var $31=$tm;
      var $32=$dm;
      var $33=$tr;
      var $34=$dr;
      var $call24=_minquad($29, $30, $31, $32, $33, $34, $tmin, $dist);
      $result=$call24;
      var $35=$result;
      var $tobool=(($35)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $36=HEAP32[((_stderr)>>2)];
      var $call26=_fprintf($36, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $37=HEAP32[((_stderr)>>2)];
      var $call27=_fprintf($37, ((13104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $38=HEAP32[((_stderr)>>2)];
      var $call28=_fprintf($38, ((13064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      var $39=HEAPF64[(($dist)>>3)];
      var $call30=Math.sqrt($39);
      HEAPF64[(($dist)>>3)]=$call30;
      var $40=HEAPF64[(($dist)>>3)];
      $retval=$40;
      label = 7; break;
    case 7: 
      var $41=$retval;
      STACKTOP = __stackBase__;
      return $41;
    default: assert(0, "bad label: " + label);
  }
}
Module["_segments_dist_3d_old"] = _segments_dist_3d_old;
function _simplex_unit_volume_nd($dim_num) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $i;
      var $volume;
      $dim_num_addr=$dim_num;
      $volume=1;
      $i=1;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$volume;
      var $3=$i;
      var $conv=(($3)|(0));
      var $div=($2)/($conv);
      $volume=$div;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $inc=((($4)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $5=$volume;
      return $5;
    default: assert(0, "bad label: " + label);
  }
}
Module["_simplex_unit_volume_nd"] = _simplex_unit_volume_nd;
function _simplex_lattice_layer_point_next($n, $c, $v, $more) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $c_addr;
      var $v_addr;
      var $more_addr;
      var $c1n;
      var $i;
      var $j;
      var $lhs;
      var $rhs1;
      var $rhs2;
      $n_addr=$n;
      $c_addr=$c;
      $v_addr=$v;
      $more_addr=$more;
      var $0=$n_addr;
      var $1=$c_addr;
      var $arrayidx=(($1+($0<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $3=$more_addr;
      var $4=HEAP32[(($3)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 9; break; } else { label = 4; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $5=$j;
      var $6=$n_addr;
      var $cmp2=(($5)|(0)) < (($6)|(0));
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$j;
      var $8=$v_addr;
      var $arrayidx3=(($8+($7<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=0;
      label = 7; break;
    case 7: 
      var $9=$j;
      var $inc=((($9)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $10=$more_addr;
      HEAP32[(($10)>>2)]=1;
      label = 10; break;
    case 9: 
      var $11=$more_addr;
      HEAP32[(($11)>>2)]=0;
      label = 10; break;
    case 10: 
      label = 45; break;
    case 11: 
      var $12=$more_addr;
      var $13=HEAP32[(($12)>>2)];
      var $tobool5=(($13)|(0))!=0;
      if ($tobool5) { label = 17; break; } else { label = 12; break; }
    case 12: 
      var $14=$n_addr;
      var $15=$c_addr;
      var $arrayidx7=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx7)>>2)];
      var $sub=((($16)-(1))|0);
      var $17=$c_addr;
      var $arrayidx8=(($17)|0);
      var $18=HEAP32[(($arrayidx8)>>2)];
      var $mul=(Math.imul($sub,$18)|0);
      var $add=((($mul)+(1))|0);
      var $19=$v_addr;
      var $arrayidx9=(($19)|0);
      HEAP32[(($arrayidx9)>>2)]=$add;
      $j=1;
      label = 13; break;
    case 13: 
      var $20=$j;
      var $21=$n_addr;
      var $cmp11=(($20)|(0)) < (($21)|(0));
      if ($cmp11) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $22=$j;
      var $23=$v_addr;
      var $arrayidx13=(($23+($22<<2))|0);
      HEAP32[(($arrayidx13)>>2)]=0;
      label = 15; break;
    case 15: 
      var $24=$j;
      var $inc15=((($24)+(1))|0);
      $j=$inc15;
      label = 13; break;
    case 16: 
      var $25=$more_addr;
      HEAP32[(($25)>>2)]=1;
      label = 44; break;
    case 17: 
      var $26=$n_addr;
      var $27=$c_addr;
      var $call=_i4vec_lcm($26, $27);
      $c1n=$call;
      var $28=$c1n;
      var $29=$n_addr;
      var $30=$c_addr;
      var $arrayidx18=(($30+($29<<2))|0);
      var $31=HEAP32[(($arrayidx18)>>2)];
      var $sub19=((($31)-(1))|0);
      var $mul20=(Math.imul($28,$sub19)|0);
      $rhs1=$mul20;
      var $32=$c1n;
      var $33=$n_addr;
      var $34=$c_addr;
      var $arrayidx21=(($34+($33<<2))|0);
      var $35=HEAP32[(($arrayidx21)>>2)];
      var $mul22=(Math.imul($32,$35)|0);
      $rhs2=$mul22;
      $i=0;
      label = 18; break;
    case 18: 
      var $36=$i;
      var $37=$n_addr;
      var $cmp24=(($36)|(0)) < (($37)|(0));
      if ($cmp24) { label = 19; break; } else { label = 39; break; }
    case 19: 
      var $38=$i;
      var $39=$v_addr;
      var $arrayidx26=(($39+($38<<2))|0);
      var $40=HEAP32[(($arrayidx26)>>2)];
      var $add27=((($40)+(1))|0);
      var $41=$i;
      var $42=$v_addr;
      var $arrayidx28=(($42+($41<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=$add27;
      $j=0;
      label = 20; break;
    case 20: 
      var $43=$j;
      var $44=$i;
      var $cmp30=(($43)|(0)) < (($44)|(0));
      if ($cmp30) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $45=$j;
      var $46=$v_addr;
      var $arrayidx32=(($46+($45<<2))|0);
      HEAP32[(($arrayidx32)>>2)]=0;
      label = 22; break;
    case 22: 
      var $47=$j;
      var $inc34=((($47)+(1))|0);
      $j=$inc34;
      label = 20; break;
    case 23: 
      var $48=$i;
      var $cmp36=0 < (($48)|(0));
      if ($cmp36) { label = 24; break; } else { label = 29; break; }
    case 24: 
      var $49=$rhs1;
      var $50=$v_addr;
      var $arrayidx38=(($50)|0);
      HEAP32[(($arrayidx38)>>2)]=$49;
      $j=1;
      label = 25; break;
    case 25: 
      var $51=$j;
      var $52=$n_addr;
      var $cmp40=(($51)|(0)) < (($52)|(0));
      if ($cmp40) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $53=$v_addr;
      var $arrayidx42=(($53)|0);
      var $54=HEAP32[(($arrayidx42)>>2)];
      var $55=$c1n;
      var $56=$j;
      var $57=$c_addr;
      var $arrayidx43=(($57+($56<<2))|0);
      var $58=HEAP32[(($arrayidx43)>>2)];
      var $div=((((($55)|(0)))/((($58)|(0))))&-1);
      var $59=$j;
      var $60=$v_addr;
      var $arrayidx44=(($60+($59<<2))|0);
      var $61=HEAP32[(($arrayidx44)>>2)];
      var $mul45=(Math.imul($div,$61)|0);
      var $sub46=((($54)-($mul45))|0);
      var $62=$v_addr;
      var $arrayidx47=(($62)|0);
      HEAP32[(($arrayidx47)>>2)]=$sub46;
      label = 27; break;
    case 27: 
      var $63=$j;
      var $inc49=((($63)+(1))|0);
      $j=$inc49;
      label = 25; break;
    case 28: 
      var $64=$c_addr;
      var $arrayidx51=(($64)|0);
      var $65=HEAP32[(($arrayidx51)>>2)];
      var $66=$v_addr;
      var $arrayidx52=(($66)|0);
      var $67=HEAP32[(($arrayidx52)>>2)];
      var $mul53=(Math.imul($65,$67)|0);
      var $68=$c1n;
      var $div54=((((($mul53)|(0)))/((($68)|(0))))&-1);
      var $69=$v_addr;
      var $arrayidx55=(($69)|0);
      HEAP32[(($arrayidx55)>>2)]=$div54;
      var $70=$v_addr;
      var $arrayidx56=(($70)|0);
      var $71=HEAP32[(($arrayidx56)>>2)];
      var $call57=_i4_max($71, 0);
      var $72=$v_addr;
      var $arrayidx58=(($72)|0);
      HEAP32[(($arrayidx58)>>2)]=$call57;
      label = 29; break;
    case 29: 
      $lhs=0;
      $j=0;
      label = 30; break;
    case 30: 
      var $73=$j;
      var $74=$n_addr;
      var $cmp61=(($73)|(0)) < (($74)|(0));
      if ($cmp61) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $75=$lhs;
      var $76=$c1n;
      var $77=$j;
      var $78=$c_addr;
      var $arrayidx63=(($78+($77<<2))|0);
      var $79=HEAP32[(($arrayidx63)>>2)];
      var $div64=((((($76)|(0)))/((($79)|(0))))&-1);
      var $80=$j;
      var $81=$v_addr;
      var $arrayidx65=(($81+($80<<2))|0);
      var $82=HEAP32[(($arrayidx65)>>2)];
      var $mul66=(Math.imul($div64,$82)|0);
      var $add67=((($75)+($mul66))|0);
      $lhs=$add67;
      label = 32; break;
    case 32: 
      var $83=$j;
      var $inc69=((($83)+(1))|0);
      $j=$inc69;
      label = 30; break;
    case 33: 
      var $84=$lhs;
      var $85=$rhs1;
      var $cmp71=(($84)|(0)) <= (($85)|(0));
      if ($cmp71) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $86=$v_addr;
      var $arrayidx73=(($86)|0);
      var $87=HEAP32[(($arrayidx73)>>2)];
      var $add74=((($87)+(1))|0);
      var $88=$v_addr;
      var $arrayidx75=(($88)|0);
      HEAP32[(($arrayidx75)>>2)]=$add74;
      var $89=$lhs;
      var $90=$c1n;
      var $91=$c_addr;
      var $arrayidx76=(($91)|0);
      var $92=HEAP32[(($arrayidx76)>>2)];
      var $div77=((((($90)|(0)))/((($92)|(0))))&-1);
      var $add78=((($89)+($div77))|0);
      $lhs=$add78;
      label = 35; break;
    case 35: 
      var $93=$lhs;
      var $94=$rhs2;
      var $cmp80=(($93)|(0)) <= (($94)|(0));
      if ($cmp80) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 45; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $95=$i;
      var $inc84=((($95)+(1))|0);
      $i=$inc84;
      label = 18; break;
    case 39: 
      $j=0;
      label = 40; break;
    case 40: 
      var $96=$j;
      var $97=$n_addr;
      var $cmp87=(($96)|(0)) < (($97)|(0));
      if ($cmp87) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $98=$j;
      var $99=$v_addr;
      var $arrayidx89=(($99+($98<<2))|0);
      HEAP32[(($arrayidx89)>>2)]=0;
      label = 42; break;
    case 42: 
      var $100=$j;
      var $inc91=((($100)+(1))|0);
      $j=$inc91;
      label = 40; break;
    case 43: 
      var $101=$more_addr;
      HEAP32[(($101)>>2)]=0;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_simplex_lattice_layer_point_next"] = _simplex_lattice_layer_point_next;
function _simplex_lattice_point_next($n, $c, $v, $more) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $c_addr;
      var $v_addr;
      var $more_addr;
      var $c1n;
      var $i;
      var $j;
      var $lhs;
      var $rhs;
      var $term;
      $n_addr=$n;
      $c_addr=$c;
      $v_addr=$v;
      $more_addr=$more;
      var $0=$more_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$n_addr;
      var $3=$v_addr;
      _i4vec_zero($2, $3);
      var $4=$more_addr;
      HEAP32[(($4)>>2)]=1;
      label = 22; break;
    case 4: 
      var $5=$n_addr;
      var $6=$c_addr;
      var $call=_i4vec_lcm($5, $6);
      $c1n=$call;
      var $7=$c1n;
      var $8=$n_addr;
      var $9=$c_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $mul=(Math.imul($7,$10)|0);
      $rhs=$mul;
      $lhs=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $11=$i;
      var $12=$n_addr;
      var $cmp=(($11)|(0)) < (($12)|(0));
      if ($cmp) { label = 6; break; } else { label = 15; break; }
    case 6: 
      $term=1;
      $j=0;
      label = 7; break;
    case 7: 
      var $13=$j;
      var $14=$n_addr;
      var $cmp2=(($13)|(0)) < (($14)|(0));
      if ($cmp2) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $15=$i;
      var $16=$j;
      var $cmp4=(($15)|(0))==(($16)|(0));
      if ($cmp4) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $17=$term;
      var $18=$j;
      var $19=$v_addr;
      var $arrayidx6=(($19+($18<<2))|0);
      var $20=HEAP32[(($arrayidx6)>>2)];
      var $mul7=(Math.imul($17,$20)|0);
      $term=$mul7;
      label = 11; break;
    case 10: 
      var $21=$term;
      var $22=$j;
      var $23=$c_addr;
      var $arrayidx9=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx9)>>2)];
      var $mul10=(Math.imul($21,$24)|0);
      $term=$mul10;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $25=$j;
      var $inc=((($25)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 13: 
      var $26=$lhs;
      var $27=$term;
      var $add=((($26)+($27))|0);
      $lhs=$add;
      label = 14; break;
    case 14: 
      var $28=$i;
      var $inc12=((($28)+(1))|0);
      $i=$inc12;
      label = 5; break;
    case 15: 
      $i=0;
      label = 16; break;
    case 16: 
      var $29=$i;
      var $30=$n_addr;
      var $cmp15=(($29)|(0)) < (($30)|(0));
      if ($cmp15) { label = 17; break; } else { label = 21; break; }
    case 17: 
      var $31=$lhs;
      var $32=$c1n;
      var $33=$i;
      var $34=$c_addr;
      var $arrayidx17=(($34+($33<<2))|0);
      var $35=HEAP32[(($arrayidx17)>>2)];
      var $div=((((($32)|(0)))/((($35)|(0))))&-1);
      var $add18=((($31)+($div))|0);
      var $36=$rhs;
      var $cmp19=(($add18)|(0)) <= (($36)|(0));
      if ($cmp19) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $37=$i;
      var $38=$v_addr;
      var $arrayidx21=(($38+($37<<2))|0);
      var $39=HEAP32[(($arrayidx21)>>2)];
      var $add22=((($39)+(1))|0);
      var $40=$i;
      var $41=$v_addr;
      var $arrayidx23=(($41+($40<<2))|0);
      HEAP32[(($arrayidx23)>>2)]=$add22;
      var $42=$more_addr;
      HEAP32[(($42)>>2)]=1;
      label = 23; break;
    case 19: 
      var $43=$lhs;
      var $44=$c1n;
      var $45=$i;
      var $46=$v_addr;
      var $arrayidx25=(($46+($45<<2))|0);
      var $47=HEAP32[(($arrayidx25)>>2)];
      var $mul26=(Math.imul($44,$47)|0);
      var $48=$i;
      var $49=$c_addr;
      var $arrayidx27=(($49+($48<<2))|0);
      var $50=HEAP32[(($arrayidx27)>>2)];
      var $div28=((((($mul26)|(0)))/((($50)|(0))))&-1);
      var $sub=((($43)-($div28))|0);
      $lhs=$sub;
      var $51=$i;
      var $52=$v_addr;
      var $arrayidx29=(($52+($51<<2))|0);
      HEAP32[(($arrayidx29)>>2)]=0;
      label = 20; break;
    case 20: 
      var $53=$i;
      var $inc31=((($53)+(1))|0);
      $i=$inc31;
      label = 16; break;
    case 21: 
      var $54=$more_addr;
      HEAP32[(($54)>>2)]=0;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_simplex_lattice_point_next"] = _simplex_lattice_point_next;
function _simplex_volume_nd($dim_num, $a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $a_addr;
      var $b;
      var $det;
      var $i;
      var $info;
      var $j;
      var $pivot;
      var $volume;
      $dim_num_addr=$dim_num;
      $a_addr=$a;
      var $0=$dim_num_addr;
      var $1=$dim_num_addr;
      var $mul=(Math.imul($0,$1)|0);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $2=$call;
      $b=$2;
      var $3=$dim_num_addr;
      var $mul2=($3<<2);
      var $call3=_malloc($mul2);
      var $4=$call3;
      $pivot=$4;
      $j=0;
      label = 3; break;
    case 3: 
      var $5=$j;
      var $6=$dim_num_addr;
      var $cmp=(($5)|(0)) < (($6)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$dim_num_addr;
      var $cmp5=(($7)|(0)) < (($8)|(0));
      if ($cmp5) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$i;
      var $10=$j;
      var $11=$dim_num_addr;
      var $mul7=(Math.imul($10,$11)|0);
      var $add=((($9)+($mul7))|0);
      var $12=$a_addr;
      var $arrayidx=(($12+($add<<3))|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $14=$i;
      var $15=$dim_num_addr;
      var $16=$dim_num_addr;
      var $mul8=(Math.imul($15,$16)|0);
      var $add9=((($14)+($mul8))|0);
      var $17=$a_addr;
      var $arrayidx10=(($17+($add9<<3))|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $sub=($13)-($18);
      var $19=$i;
      var $20=$j;
      var $21=$dim_num_addr;
      var $mul11=(Math.imul($20,$21)|0);
      var $add12=((($19)+($mul11))|0);
      var $22=$b;
      var $arrayidx13=(($22+($add12<<3))|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub;
      label = 7; break;
    case 7: 
      var $23=$i;
      var $inc=((($23)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $24=$j;
      var $inc15=((($24)+(1))|0);
      $j=$inc15;
      label = 3; break;
    case 10: 
      var $25=$dim_num_addr;
      var $26=$b;
      var $27=$pivot;
      var $call17=_dge_fa($25, $26, $27);
      $info=$call17;
      var $28=$info;
      var $cmp18=(($28)|(0))!=0;
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $volume=-1;
      label = 17; break;
    case 12: 
      var $29=$dim_num_addr;
      var $30=$b;
      var $31=$pivot;
      var $call19=_dge_det($29, $30, $31);
      $det=$call19;
      var $32=$det;
      var $call20=_r8_abs($32);
      $volume=$call20;
      $i=1;
      label = 13; break;
    case 13: 
      var $33=$i;
      var $34=$dim_num_addr;
      var $cmp22=(($33)|(0)) <= (($34)|(0));
      if ($cmp22) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $35=$volume;
      var $36=$i;
      var $conv=(($36)|(0));
      var $div=($35)/($conv);
      $volume=$div;
      label = 15; break;
    case 15: 
      var $37=$i;
      var $inc25=((($37)+(1))|0);
      $i=$inc25;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $38=$b;
      var $39=$38;
      _free($39);
      var $40=$pivot;
      var $41=$40;
      _free($41);
      var $42=$volume;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
Module["_simplex_volume_nd"] = _simplex_volume_nd;
function _sin_deg($angle) {
  var label = 0;
  var $angle_addr;
  var $angle_rad;
  var $value;
  $angle_addr=$angle;
  var $0=$angle_addr;
  var $mul=($0)*(0.017453292519943295);
  $angle_rad=$mul;
  var $1=$angle_rad;
  var $call=Math.sin($1);
  $value=$call;
  var $2=$value;
  return $2;
}
Module["_sin_deg"] = _sin_deg;
function _shape_ray_int_2d($pc, $p1, $side_num, $pa, $pb, $pint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pc_addr;
      var $p1_addr;
      var $side_num_addr;
      var $pa_addr;
      var $pb_addr;
      var $pint_addr;
      var $angle2;
      var $inside;
      var $ival=__stackBase__;
      var $pv1=(__stackBase__)+(8);
      var $pv2=(__stackBase__)+(24);
      var $radius;
      var $sector_angle;
      var $sector_index;
      $pc_addr=$pc;
      $p1_addr=$p1;
      $side_num_addr=$side_num;
      $pa_addr=$pa;
      $pb_addr=$pb;
      $pint_addr=$pint;
      var $0=$side_num_addr;
      var $conv=(($0)|(0));
      var $div=(360)/($conv);
      $sector_angle=$div;
      var $1=$p1_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$pc_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=Math.pow($sub, 2);
      var $6=$p1_addr;
      var $arrayidx2=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$pc_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $10=Math.pow($sub4, 2);
      var $add=($5)+($10);
      var $call=Math.sqrt($add);
      $radius=$call;
      var $11=$radius;
      var $cmp=$11 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=HEAP32[((_stderr)>>2)];
      var $call6=_fprintf($12, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $13=HEAP32[((_stderr)>>2)];
      var $call7=_fprintf($13, ((12616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $14=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($14, ((12584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $arrayidx9=(($pv2)|0);
      HEAPF64[(($arrayidx9)>>3)]=0;
      var $arrayidx10=(($pv2+8)|0);
      HEAPF64[(($arrayidx10)>>3)]=0;
      $sector_index=1;
      label = 5; break;
    case 5: 
      var $15=$sector_index;
      var $16=$side_num_addr;
      var $cmp11=(($15)|(0)) <= (($16)|(0));
      if ($cmp11) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $17=$sector_index;
      var $cmp13=(($17)|(0))==1;
      if ($cmp13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $18=$sector_index;
      var $conv16=(($18)|(0));
      var $sub17=($conv16)-(1);
      var $19=$sector_angle;
      var $mul=($sub17)*($19);
      $angle2=$mul;
      var $20=$angle2;
      var $call18=_degrees_to_radians($20);
      $angle2=$call18;
      var $21=$p1_addr;
      var $22=$pc_addr;
      var $23=$angle2;
      var $arraydecay=(($pv1)|0);
      _vector_rotate_base_2d($21, $22, $23, $arraydecay);
      label = 9; break;
    case 8: 
      var $arraydecay19=(($pv2)|0);
      var $arraydecay20=(($pv1)|0);
      _r8vec_copy(2, $arraydecay19, $arraydecay20);
      label = 9; break;
    case 9: 
      var $24=$sector_index;
      var $conv22=(($24)|(0));
      var $25=$sector_angle;
      var $mul23=($conv22)*($25);
      $angle2=$mul23;
      var $26=$angle2;
      var $call24=_degrees_to_radians($26);
      $angle2=$call24;
      var $27=$p1_addr;
      var $28=$pc_addr;
      var $29=$angle2;
      var $arraydecay25=(($pv2)|0);
      _vector_rotate_base_2d($27, $28, $29, $arraydecay25);
      var $arraydecay26=(($pv1)|0);
      var $30=$pa_addr;
      var $arraydecay27=(($pv2)|0);
      var $31=$pb_addr;
      var $call28=_angle_contains_ray_2d($arraydecay26, $30, $arraydecay27, $31);
      $inside=$call28;
      var $32=$inside;
      var $tobool=(($32)|(0))!=0;
      if ($tobool) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $33=$pa_addr;
      var $34=$pb_addr;
      var $arraydecay30=(($pv1)|0);
      var $arraydecay31=(($pv2)|0);
      var $35=$pint_addr;
      _lines_exp_int_2d($33, $34, $arraydecay30, $arraydecay31, $ival, $35);
      STACKTOP = __stackBase__;
      return;
    case 11: 
      label = 12; break;
    case 12: 
      var $36=$sector_index;
      var $inc=((($36)+(1))|0);
      $sector_index=$inc;
      label = 5; break;
    case 13: 
      var $37=HEAP32[((_stderr)>>2)];
      var $call33=_fprintf($37, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $38=HEAP32[((_stderr)>>2)];
      var $call34=_fprintf($38, ((12616)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $39=HEAP32[((_stderr)>>2)];
      var $call35=_fprintf($39, ((12536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    default: assert(0, "bad label: " + label);
  }
}
Module["_shape_ray_int_2d"] = _shape_ray_int_2d;
function _sin_power_int($a, $b, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $n_addr;
      var $ca;
      var $cb;
      var $m;
      var $mlo;
      var $sa;
      var $sb;
      var $value;
      $a_addr=$a;
      $b_addr=$b;
      $n_addr=$n;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((12480)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((12464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $value=0;
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $4=$a_addr;
      var $call3=Math.sin($4);
      $sa=$call3;
      var $5=$b_addr;
      var $call4=Math.sin($5);
      $sb=$call4;
      var $6=$a_addr;
      var $call5=Math.cos($6);
      $ca=$call5;
      var $7=$b_addr;
      var $call6=Math.cos($7);
      $cb=$call6;
      var $8=$n_addr;
      var $rem=((((($8)|(0)))%(2))&-1);
      var $cmp7=(($rem)|(0))==0;
      if ($cmp7) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$b_addr;
      var $10=$a_addr;
      var $sub=($9)-($10);
      $value=$sub;
      $mlo=2;
      label = 7; break;
    case 6: 
      var $11=$ca;
      var $12=$cb;
      var $sub9=($11)-($12);
      $value=$sub9;
      $mlo=3;
      label = 7; break;
    case 7: 
      var $13=$mlo;
      $m=$13;
      label = 8; break;
    case 8: 
      var $14=$m;
      var $15=$n_addr;
      var $cmp11=(($14)|(0)) <= (($15)|(0));
      if ($cmp11) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $16=$m;
      var $sub12=((($16)-(1))|0);
      var $conv=(($sub12)|(0));
      var $17=$value;
      var $mul=($conv)*($17);
      var $18=$sa;
      var $19=$m;
      var $sub13=((($19)-(1))|0);
      var $conv14=(($sub13)|(0));
      var $20=Math.pow($18, $conv14);
      var $21=$ca;
      var $mul15=($20)*($21);
      var $add=($mul)+($mul15);
      var $22=$sb;
      var $23=$m;
      var $sub16=((($23)-(1))|0);
      var $conv17=(($sub16)|(0));
      var $24=Math.pow($22, $conv17);
      var $25=$cb;
      var $mul18=($24)*($25);
      var $sub19=($add)-($mul18);
      var $26=$m;
      var $conv20=(($26)|(0));
      var $div=($sub19)/($conv20);
      $value=$div;
      label = 10; break;
    case 10: 
      var $27=$m;
      var $add21=((($27)+(2))|0);
      $m=$add21;
      label = 8; break;
    case 11: 
      var $28=$value;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sin_power_int"] = _sin_power_int;
function _soccer_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=60;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=90;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=32;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=6;
  return;
}
Module["_soccer_size_3d"] = _soccer_size_3d;
function _sphere_cap_area_3d($r, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $h_addr;
      var $area;
      var $pi;
      $r_addr=$r;
      $h_addr=$h;
      $pi=3.141592653589793;
      var $0=$h_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $area=0;
      label = 8; break;
    case 4: 
      var $1=$r_addr;
      var $mul=($1)*(2);
      var $2=$h_addr;
      var $cmp1=$mul <= $2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$pi;
      var $mul3=($3)*(4);
      var $4=$r_addr;
      var $mul4=($mul3)*($4);
      var $5=$r_addr;
      var $mul5=($mul4)*($5);
      $area=$mul5;
      label = 7; break;
    case 6: 
      var $6=$pi;
      var $mul7=($6)*(2);
      var $7=$r_addr;
      var $mul8=($mul7)*($7);
      var $8=$h_addr;
      var $mul9=($mul8)*($8);
      $area=$mul9;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $9=$area;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_cap_area_3d"] = _sphere_cap_area_3d;
function _sphere_cap_volume_3d($r, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $h_addr;
      var $pi;
      $r_addr=$r;
      $h_addr=$h;
      $pi=3.141592653589793;
      var $0=$h_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $1=$r_addr;
      var $mul=($1)*(2);
      var $2=$h_addr;
      var $cmp1=$mul <= $2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$pi;
      var $mul3=($3)*(1.3333333333333333);
      var $4=$r_addr;
      var $mul4=($mul3)*($4);
      var $5=$r_addr;
      var $mul5=($mul4)*($5);
      var $6=$r_addr;
      var $mul6=($mul5)*($6);
      $retval=$mul6;
      label = 7; break;
    case 6: 
      var $7=$pi;
      var $mul8=($7)*(0.3333333333333333);
      var $8=$h_addr;
      var $mul9=($mul8)*($8);
      var $9=$h_addr;
      var $mul10=($mul9)*($9);
      var $10=$r_addr;
      var $mul11=($10)*(3);
      var $11=$h_addr;
      var $sub=($mul11)-($11);
      var $mul12=($mul10)*($sub);
      $retval=$mul12;
      label = 7; break;
    case 7: 
      var $12=$retval;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_cap_volume_3d"] = _sphere_cap_volume_3d;
function _soccer_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  var $point_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  var $point_coord_addr;
  var $face_order_addr;
  var $face_point_addr;
  $point_num_addr=$point_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  $point_coord_addr=$point_coord;
  $face_order_addr=$face_order;
  $face_point_addr=$face_point;
  var $0=$face_num_addr;
  var $1=$face_order_addr;
  _i4vec_copy($0, ((4624)|0), $1);
  var $2=$face_order_max_addr;
  var $3=$face_num_addr;
  var $mul=(Math.imul($2,$3)|0);
  var $4=$face_point_addr;
  _i4vec_copy($mul, ((3856)|0), $4);
  var $5=$point_num_addr;
  var $mul1=((($5)*(3))&-1);
  var $6=$point_coord_addr;
  _r8vec_copy($mul1, ((2416)|0), $6);
  return;
}
Module["_soccer_shape_3d"] = _soccer_shape_3d;
function _sphere_cap_area_2d($r, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $h_addr;
      var $area;
      var $pi;
      var $theta;
      $r_addr=$r;
      $h_addr=$h;
      $pi=3.141592653589793;
      var $0=$h_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $area=0;
      label = 10; break;
    case 4: 
      var $1=$r_addr;
      var $mul=($1)*(2);
      var $2=$h_addr;
      var $cmp1=$mul <= $2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$pi;
      var $mul3=($3)*(2);
      var $4=$r_addr;
      var $mul4=($mul3)*($4);
      $area=$mul4;
      label = 9; break;
    case 6: 
      var $5=$r_addr;
      var $6=$r_addr;
      var $mul6=($5)*($6);
      var $7=$r_addr;
      var $8=$h_addr;
      var $sub=($7)-($8);
      var $9=$r_addr;
      var $10=$h_addr;
      var $sub7=($9)-($10);
      var $mul8=($sub)*($sub7);
      var $sub9=($mul6)-($mul8);
      var $call=Math.sqrt($sub9);
      var $11=$r_addr;
      var $div=($call)/($11);
      var $call10=_r8_asin($div);
      var $mul11=($call10)*(2);
      $theta=$mul11;
      var $12=$r_addr;
      var $13=$theta;
      var $mul12=($12)*($13);
      $area=$mul12;
      var $14=$r_addr;
      var $15=$h_addr;
      var $cmp13=$14 <= $15;
      if ($cmp13) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$pi;
      var $mul15=($16)*(2);
      var $17=$r_addr;
      var $mul16=($mul15)*($17);
      var $18=$area;
      var $sub17=($mul16)-($18);
      $area=$sub17;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $19=$area;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_cap_area_2d"] = _sphere_cap_area_2d;
function _sphere_cap_area_nd($dim_num, $r, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_num_addr;
      var $r_addr;
      var $h_addr;
      var $area;
      var $area2;
      var $haver_sine;
      var $i;
      var $theta;
      var $ti;
      var $tj;
      var $tk;
      $dim_num_addr=$dim_num;
      $r_addr=$r;
      $h_addr=$h;
      var $0=$h_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $area=0;
      var $1=$area;
      $retval=$1;
      label = 22; break;
    case 4: 
      var $2=$r_addr;
      var $mul=($2)*(2);
      var $3=$h_addr;
      var $cmp1=$mul <= $3;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$dim_num_addr;
      var $5=$r_addr;
      var $call=_sphere_imp_area_nd($4, $5);
      $area=$call;
      var $6=$area;
      $retval=$6;
      label = 22; break;
    case 6: 
      var $7=$r_addr;
      var $mul4=($7)*(2);
      var $8=$h_addr;
      var $sub=($mul4)-($8);
      var $9=$h_addr;
      var $mul5=($sub)*($9);
      var $call6=Math.sqrt($mul5);
      $haver_sine=$call6;
      var $10=$haver_sine;
      var $11=$r_addr;
      var $div=($10)/($11);
      var $call7=_r8_asin($div);
      $theta=$call7;
      var $12=$dim_num_addr;
      var $cmp8=(($12)|(0)) < 1;
      if ($cmp8) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $area=-1;
      label = 19; break;
    case 8: 
      var $13=$dim_num_addr;
      var $cmp10=(($13)|(0))==1;
      if ($cmp10) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $area=0;
      label = 18; break;
    case 10: 
      var $14=$dim_num_addr;
      var $cmp13=(($14)|(0))==2;
      if ($cmp13) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $15=$theta;
      var $mul15=($15)*(2);
      var $16=$r_addr;
      var $mul16=($mul15)*($16);
      $area=$mul16;
      label = 17; break;
    case 12: 
      var $17=$theta;
      $ti=$17;
      var $18=$ti;
      $tj=$18;
      var $19=$theta;
      var $call18=Math.cos($19);
      var $sub19=(1)-($call18);
      $ti=$sub19;
      $i=2;
      label = 13; break;
    case 13: 
      var $20=$i;
      var $21=$dim_num_addr;
      var $sub20=((($21)-(2))|0);
      var $cmp21=(($20)|(0)) <= (($sub20)|(0));
      if ($cmp21) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $22=$tj;
      $tk=$22;
      var $23=$ti;
      $tj=$23;
      var $24=$i;
      var $sub22=((($24)-(1))|0);
      var $conv=(($sub22)|(0));
      var $25=$tk;
      var $mul23=($conv)*($25);
      var $26=$theta;
      var $call24=Math.cos($26);
      var $27=$theta;
      var $call25=Math.sin($27);
      var $28=$i;
      var $sub26=((($28)-(1))|0);
      var $conv27=(($sub26)|(0));
      var $29=Math.pow($call25, $conv27);
      var $mul28=($call24)*($29);
      var $sub29=($mul23)-($mul28);
      var $30=$i;
      var $conv30=(($30)|(0));
      var $div31=($sub29)/($conv30);
      $ti=$div31;
      label = 15; break;
    case 15: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      label = 13; break;
    case 16: 
      var $32=$dim_num_addr;
      var $sub32=((($32)-(1))|0);
      var $call33=_sphere_k($sub32);
      var $33=$ti;
      var $mul34=($call33)*($33);
      var $34=$r_addr;
      var $35=$dim_num_addr;
      var $sub35=((($35)-(1))|0);
      var $conv36=(($sub35)|(0));
      var $36=Math.pow($34, $conv36);
      var $mul37=($mul34)*($36);
      $area=$mul37;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$r_addr;
      var $38=$h_addr;
      var $cmp41=$37 < $38;
      if ($cmp41) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $39=$dim_num_addr;
      var $40=$r_addr;
      var $call44=_sphere_imp_area_nd($39, $40);
      $area2=$call44;
      var $41=$area2;
      var $42=$area;
      var $sub45=($41)-($42);
      $area=$sub45;
      label = 21; break;
    case 21: 
      var $43=$area;
      $retval=$43;
      label = 22; break;
    case 22: 
      var $44=$retval;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_cap_area_nd"] = _sphere_cap_area_nd;
function _sphere_imp_area_nd($dim_num, $r) {
  var label = 0;
  var $dim_num_addr;
  var $r_addr;
  var $area;
  $dim_num_addr=$dim_num;
  $r_addr=$r;
  var $0=$r_addr;
  var $1=$dim_num_addr;
  var $sub=((($1)-(1))|0);
  var $conv=(($sub)|(0));
  var $2=Math.pow($0, $conv);
  var $3=$dim_num_addr;
  var $call=_sphere_unit_area_nd($3);
  var $mul=($2)*($call);
  $area=$mul;
  var $4=$area;
  return $4;
}
Module["_sphere_imp_area_nd"] = _sphere_imp_area_nd;
function _sphere_k($dim_num) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $pi;
      var $value;
      $dim_num_addr=$dim_num;
      $pi=3.141592653589793;
      var $0=$dim_num_addr;
      var $rem=((((($0)|(0)))%(2))&-1);
      var $cmp=(($rem)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$pi;
      var $mul=($1)*(2);
      var $2=$dim_num_addr;
      var $div=((((($2)|(0)))/(2))&-1);
      var $conv=(($div)|(0));
      var $3=Math.pow($mul, $conv);
      $value=$3;
      label = 5; break;
    case 4: 
      var $4=$pi;
      var $mul1=($4)*(2);
      var $5=$dim_num_addr;
      var $sub=((($5)-(1))|0);
      var $div2=((((($sub)|(0)))/(2))&-1);
      var $conv3=(($div2)|(0));
      var $6=Math.pow($mul1, $conv3);
      var $mul4=($6)*(2);
      $value=$mul4;
      label = 5; break;
    case 5: 
      var $7=$value;
      var $8=$dim_num_addr;
      var $sub5=((($8)-(2))|0);
      var $call=_i4_factorial2($sub5);
      var $conv6=(($call)|(0));
      var $div7=($7)/($conv6);
      $value=$div7;
      var $9=$value;
      return $9;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_k"] = _sphere_k;
function _sphere_cap_volume_2d($r, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $h_addr;
      var $pi;
      var $theta;
      var $volume;
      $r_addr=$r;
      $h_addr=$h;
      $pi=3.141592653589793;
      var $0=$h_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $volume=0;
      label = 10; break;
    case 4: 
      var $1=$r_addr;
      var $mul=($1)*(2);
      var $2=$h_addr;
      var $cmp1=$mul <= $2;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$pi;
      var $4=$r_addr;
      var $mul3=($3)*($4);
      var $5=$r_addr;
      var $mul4=($mul3)*($5);
      $volume=$mul4;
      label = 9; break;
    case 6: 
      var $6=$r_addr;
      var $7=$r_addr;
      var $mul6=($6)*($7);
      var $8=$r_addr;
      var $9=$h_addr;
      var $sub=($8)-($9);
      var $10=$r_addr;
      var $11=$h_addr;
      var $sub7=($10)-($11);
      var $mul8=($sub)*($sub7);
      var $sub9=($mul6)-($mul8);
      var $call=Math.sqrt($sub9);
      var $12=$r_addr;
      var $div=($call)/($12);
      var $call10=_r8_asin($div);
      var $mul11=($call10)*(2);
      $theta=$mul11;
      var $13=$r_addr;
      var $14=$r_addr;
      var $mul12=($13)*($14);
      var $15=$theta;
      var $16=$theta;
      var $call13=Math.sin($16);
      var $sub14=($15)-($call13);
      var $mul15=($mul12)*($sub14);
      var $div16=($mul15)/(2);
      $volume=$div16;
      var $17=$r_addr;
      var $18=$h_addr;
      var $cmp17=$17 < $18;
      if ($cmp17) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=$pi;
      var $20=$r_addr;
      var $mul19=($19)*($20);
      var $21=$r_addr;
      var $mul20=($mul19)*($21);
      var $22=$volume;
      var $sub21=($mul20)-($22);
      $volume=$sub21;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $23=$volume;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_cap_volume_2d"] = _sphere_cap_volume_2d;
function _sphere_cap_volume_nd($dim_num, $r, $h) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $dim_num_addr;
      var $r_addr;
      var $h_addr;
      var $angle;
      var $arg;
      var $factor1;
      var $factor2;
      var $volume;
      var $volume2;
      $dim_num_addr=$dim_num;
      $r_addr=$r;
      $h_addr=$h;
      var $0=$h_addr;
      var $cmp=$0 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $volume=0;
      var $1=$volume;
      $retval=$1;
      label = 15; break;
    case 4: 
      var $2=$r_addr;
      var $mul=($2)*(2);
      var $3=$h_addr;
      var $cmp1=$mul <= $3;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $4=$dim_num_addr;
      var $5=$r_addr;
      var $call=_sphere_imp_volume_nd($4, $5);
      $volume=$call;
      var $6=$volume;
      $retval=$6;
      label = 15; break;
    case 6: 
      var $7=$dim_num_addr;
      var $cmp4=(($7)|(0)) < 1;
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $volume=-1;
      label = 14; break;
    case 8: 
      var $8=$dim_num_addr;
      var $cmp6=(($8)|(0))==1;
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $9=$h_addr;
      $volume=$9;
      label = 13; break;
    case 10: 
      var $10=$dim_num_addr;
      var $sub=((($10)-(1))|0);
      var $call9=_sphere_unit_volume_nd($sub);
      $factor1=$call9;
      var $11=$r_addr;
      var $mul10=($11)*(2);
      var $12=$h_addr;
      var $sub11=($mul10)-($12);
      var $13=$h_addr;
      var $mul12=($sub11)*($13);
      var $14=$r_addr;
      var $div=($mul12)/($14);
      var $call13=Math.sqrt($div);
      var $call14=_r8_asin($call13);
      $angle=$call14;
      $arg=0;
      var $15=$arg;
      var $16=$angle;
      var $17=$dim_num_addr;
      var $call15=_sin_power_int($15, $16, $17);
      $factor2=$call15;
      var $18=$factor1;
      var $19=$factor2;
      var $mul16=($18)*($19);
      var $20=$r_addr;
      var $21=$dim_num_addr;
      var $conv=(($21)|(0));
      var $22=Math.pow($20, $conv);
      var $mul17=($mul16)*($22);
      $volume=$mul17;
      var $23=$r_addr;
      var $24=$h_addr;
      var $cmp18=$23 < $24;
      if ($cmp18) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$dim_num_addr;
      var $26=$r_addr;
      var $call21=_sphere_imp_volume_nd($25, $26);
      $volume2=$call21;
      var $27=$volume2;
      var $28=$volume;
      var $sub22=($27)-($28);
      $volume=$sub22;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $29=$volume;
      $retval=$29;
      label = 15; break;
    case 15: 
      var $30=$retval;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_cap_volume_nd"] = _sphere_cap_volume_nd;
function _sphere_imp_volume_nd($dim_num, $r) {
  var label = 0;
  var $dim_num_addr;
  var $r_addr;
  $dim_num_addr=$dim_num;
  $r_addr=$r;
  var $0=$r_addr;
  var $1=$dim_num_addr;
  var $conv=(($1)|(0));
  var $2=Math.pow($0, $conv);
  var $3=$dim_num_addr;
  var $call=_sphere_unit_volume_nd($3);
  var $mul=($2)*($call);
  return $mul;
}
Module["_sphere_imp_volume_nd"] = _sphere_imp_volume_nd;
function _sphere_unit_volume_nd($dim_num) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $i;
      var $m;
      var $pi;
      var $volume;
      $dim_num_addr=$dim_num;
      $pi=3.141592653589793;
      var $0=$dim_num_addr;
      var $rem=((((($0)|(0)))%(2))&-1);
      var $cmp=(($rem)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$dim_num_addr;
      var $div=((((($1)|(0)))/(2))&-1);
      $m=$div;
      $volume=1;
      $i=1;
      label = 4; break;
    case 4: 
      var $2=$i;
      var $3=$m;
      var $cmp1=(($2)|(0)) <= (($3)|(0));
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$volume;
      var $5=$pi;
      var $mul=($4)*($5);
      var $6=$i;
      var $conv=(($6)|(0));
      var $div2=($mul)/($conv);
      $volume=$div2;
      label = 6; break;
    case 6: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      label = 13; break;
    case 8: 
      var $8=$dim_num_addr;
      var $sub=((($8)-(1))|0);
      var $div3=((((($sub)|(0)))/(2))&-1);
      $m=$div3;
      var $9=$pi;
      var $10=$m;
      var $conv4=(($10)|(0));
      var $11=Math.pow($9, $conv4);
      var $12=$dim_num_addr;
      var $conv5=(($12)|(0));
      var $13=Math.pow(2, $conv5);
      var $mul6=($11)*($13);
      $volume=$mul6;
      var $14=$m;
      var $add=((($14)+(1))|0);
      $i=$add;
      label = 9; break;
    case 9: 
      var $15=$i;
      var $16=$m;
      var $mul8=($16<<1);
      var $add9=((($mul8)+(1))|0);
      var $cmp10=(($15)|(0)) <= (($add9)|(0));
      if ($cmp10) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $17=$volume;
      var $18=$i;
      var $conv13=(($18)|(0));
      var $div14=($17)/($conv13);
      $volume=$div14;
      label = 11; break;
    case 11: 
      var $19=$i;
      var $inc16=((($19)+(1))|0);
      $i=$inc16;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $20=$volume;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_volume_nd"] = _sphere_unit_volume_nd;
function _sphere_dia2imp_3d($p1, $p2, $r, $pc) {
  var label = 0;
  var $p1_addr;
  var $p2_addr;
  var $r_addr;
  var $pc_addr;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $r_addr=$r;
  $pc_addr=$pc;
  var $0=$p1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$p2_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=Math.pow($sub, 2);
  var $5=$p1_addr;
  var $arrayidx2=(($5+8)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$p2_addr;
  var $arrayidx3=(($7+8)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $9=Math.pow($sub4, 2);
  var $add=($4)+($9);
  var $10=$p1_addr;
  var $arrayidx5=(($10+16)|0);
  var $11=HEAPF64[(($arrayidx5)>>3)];
  var $12=$p2_addr;
  var $arrayidx6=(($12+16)|0);
  var $13=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($11)-($13);
  var $14=Math.pow($sub7, 2);
  var $add8=($add)+($14);
  var $call=Math.sqrt($add8);
  var $mul=($call)*(0.5);
  var $15=$r_addr;
  HEAPF64[(($15)>>3)]=$mul;
  var $16=$p1_addr;
  var $arrayidx9=(($16)|0);
  var $17=HEAPF64[(($arrayidx9)>>3)];
  var $18=$p2_addr;
  var $arrayidx10=(($18)|0);
  var $19=HEAPF64[(($arrayidx10)>>3)];
  var $add11=($17)+($19);
  var $mul12=($add11)*(0.5);
  var $20=$pc_addr;
  var $arrayidx13=(($20)|0);
  HEAPF64[(($arrayidx13)>>3)]=$mul12;
  var $21=$p1_addr;
  var $arrayidx14=(($21+8)|0);
  var $22=HEAPF64[(($arrayidx14)>>3)];
  var $23=$p2_addr;
  var $arrayidx15=(($23+8)|0);
  var $24=HEAPF64[(($arrayidx15)>>3)];
  var $add16=($22)+($24);
  var $mul17=($add16)*(0.5);
  var $25=$pc_addr;
  var $arrayidx18=(($25+8)|0);
  HEAPF64[(($arrayidx18)>>3)]=$mul17;
  var $26=$p1_addr;
  var $arrayidx19=(($26+16)|0);
  var $27=HEAPF64[(($arrayidx19)>>3)];
  var $28=$p2_addr;
  var $arrayidx20=(($28+16)|0);
  var $29=HEAPF64[(($arrayidx20)>>3)];
  var $add21=($27)+($29);
  var $mul22=($add21)*(0.5);
  var $30=$pc_addr;
  var $arrayidx23=(($30+16)|0);
  HEAPF64[(($arrayidx23)>>3)]=$mul22;
  return;
}
Module["_sphere_dia2imp_3d"] = _sphere_dia2imp_3d;
function _sphere_distance1($lat1, $lon1, $lat2, $lon2, $r) {
  var label = 0;
  var $lat1_addr;
  var $lon1_addr;
  var $lat2_addr;
  var $lon2_addr;
  var $r_addr;
  var $c;
  var $dist;
  $lat1_addr=$lat1;
  $lon1_addr=$lon1;
  $lat2_addr=$lat2;
  $lon2_addr=$lon2;
  $r_addr=$r;
  var $0=$lat1_addr;
  var $call=Math.cos($0);
  var $1=$lat2_addr;
  var $call1=Math.cos($1);
  var $mul=($call)*($call1);
  var $2=$lon1_addr;
  var $3=$lon2_addr;
  var $sub=($2)-($3);
  var $call2=Math.cos($sub);
  var $mul3=($mul)*($call2);
  var $4=$lat1_addr;
  var $call4=Math.sin($4);
  var $5=$lat2_addr;
  var $call5=Math.sin($5);
  var $mul6=($call4)*($call5);
  var $add=($mul3)+($mul6);
  $c=$add;
  var $6=$r_addr;
  var $7=$c;
  var $call7=Math.acos($7);
  var $mul8=($6)*($call7);
  $dist=$mul8;
  var $8=$dist;
  return $8;
}
Module["_sphere_distance1"] = _sphere_distance1;
function _sphere_distance2($lat1, $lon1, $lat2, $lon2, $r) {
  var label = 0;
  var $lat1_addr;
  var $lon1_addr;
  var $lat2_addr;
  var $lon2_addr;
  var $r_addr;
  var $dist;
  var $s;
  $lat1_addr=$lat1;
  $lon1_addr=$lon1;
  $lat2_addr=$lat2;
  $lon2_addr=$lon2;
  $r_addr=$r;
  var $0=$lat1_addr;
  var $1=$lat2_addr;
  var $sub=($0)-($1);
  var $div=($sub)/(2);
  var $call=Math.sin($div);
  var $2=Math.pow($call, 2);
  var $3=$lat1_addr;
  var $call1=Math.cos($3);
  var $4=$lat2_addr;
  var $call2=Math.cos($4);
  var $mul=($call1)*($call2);
  var $5=$lon1_addr;
  var $6=$lon2_addr;
  var $sub3=($5)-($6);
  var $div4=($sub3)/(2);
  var $call5=Math.sin($div4);
  var $7=Math.pow($call5, 2);
  var $mul6=($mul)*($7);
  var $add=($2)+($mul6);
  $s=$add;
  var $8=$s;
  var $call7=Math.sqrt($8);
  $s=$call7;
  var $9=$r_addr;
  var $mul8=($9)*(2);
  var $10=$s;
  var $call9=Math.asin($10);
  var $mul10=($mul8)*($call9);
  $dist=$mul10;
  var $11=$dist;
  return $11;
}
Module["_sphere_distance2"] = _sphere_distance2;
function _sphere_distance3($lat1, $lon1, $lat2, $lon2, $r) {
  var label = 0;
  var $lat1_addr;
  var $lon1_addr;
  var $lat2_addr;
  var $lon2_addr;
  var $r_addr;
  var $bot;
  var $dist;
  var $top;
  $lat1_addr=$lat1;
  $lon1_addr=$lon1;
  $lat2_addr=$lat2;
  $lon2_addr=$lon2;
  $r_addr=$r;
  var $0=$lat2_addr;
  var $call=Math.cos($0);
  var $1=$lon1_addr;
  var $2=$lon2_addr;
  var $sub=($1)-($2);
  var $call1=Math.sin($sub);
  var $mul=($call)*($call1);
  var $3=Math.pow($mul, 2);
  var $4=$lat1_addr;
  var $call2=Math.cos($4);
  var $5=$lat2_addr;
  var $call3=Math.sin($5);
  var $mul4=($call2)*($call3);
  var $6=$lat1_addr;
  var $call5=Math.sin($6);
  var $7=$lat2_addr;
  var $call6=Math.cos($7);
  var $mul7=($call5)*($call6);
  var $8=$lon1_addr;
  var $9=$lon2_addr;
  var $sub8=($8)-($9);
  var $call9=Math.cos($sub8);
  var $mul10=($mul7)*($call9);
  var $sub11=($mul4)-($mul10);
  var $10=Math.pow($sub11, 2);
  var $add=($3)+($10);
  $top=$add;
  var $11=$top;
  var $call12=Math.sqrt($11);
  $top=$call12;
  var $12=$lat1_addr;
  var $call13=Math.sin($12);
  var $13=$lat2_addr;
  var $call14=Math.sin($13);
  var $mul15=($call13)*($call14);
  var $14=$lat1_addr;
  var $call16=Math.cos($14);
  var $15=$lat2_addr;
  var $call17=Math.cos($15);
  var $mul18=($call16)*($call17);
  var $16=$lon1_addr;
  var $17=$lon2_addr;
  var $sub19=($16)-($17);
  var $call20=Math.cos($sub19);
  var $mul21=($mul18)*($call20);
  var $add22=($mul15)+($mul21);
  $bot=$add22;
  var $18=$r_addr;
  var $19=$top;
  var $20=$bot;
  var $call23=Math.atan2($19, $20);
  var $mul24=($18)*($call23);
  $dist=$mul24;
  var $21=$dist;
  return $21;
}
Module["_sphere_distance3"] = _sphere_distance3;
function _sphere_exp_contains_point_3d($p1, $p2, $p3, $p4, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $p_addr;
      var $a=__stackBase__;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $p_addr=$p;
      var $0=$p1_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($a)|0);
      HEAPF64[(($arrayidx1)>>3)]=$1;
      var $2=$p2_addr;
      var $arrayidx2=(($2)|0);
      var $3=HEAPF64[(($arrayidx2)>>3)];
      var $arrayidx3=(($a+8)|0);
      HEAPF64[(($arrayidx3)>>3)]=$3;
      var $4=$p3_addr;
      var $arrayidx4=(($4)|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($a+16)|0);
      HEAPF64[(($arrayidx5)>>3)]=$5;
      var $6=$p4_addr;
      var $arrayidx6=(($6)|0);
      var $7=HEAPF64[(($arrayidx6)>>3)];
      var $arrayidx7=(($a+24)|0);
      HEAPF64[(($arrayidx7)>>3)]=$7;
      var $8=$p_addr;
      var $arrayidx8=(($8)|0);
      var $9=HEAPF64[(($arrayidx8)>>3)];
      var $arrayidx9=(($a+32)|0);
      HEAPF64[(($arrayidx9)>>3)]=$9;
      var $10=$p1_addr;
      var $arrayidx10=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx10)>>3)];
      var $arrayidx11=(($a+40)|0);
      HEAPF64[(($arrayidx11)>>3)]=$11;
      var $12=$p2_addr;
      var $arrayidx12=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx12)>>3)];
      var $arrayidx13=(($a+48)|0);
      HEAPF64[(($arrayidx13)>>3)]=$13;
      var $14=$p3_addr;
      var $arrayidx14=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx14)>>3)];
      var $arrayidx15=(($a+56)|0);
      HEAPF64[(($arrayidx15)>>3)]=$15;
      var $16=$p4_addr;
      var $arrayidx16=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx16)>>3)];
      var $arrayidx17=(($a+64)|0);
      HEAPF64[(($arrayidx17)>>3)]=$17;
      var $18=$p_addr;
      var $arrayidx18=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx18)>>3)];
      var $arrayidx19=(($a+72)|0);
      HEAPF64[(($arrayidx19)>>3)]=$19;
      var $20=$p1_addr;
      var $arrayidx20=(($20+16)|0);
      var $21=HEAPF64[(($arrayidx20)>>3)];
      var $arrayidx21=(($a+80)|0);
      HEAPF64[(($arrayidx21)>>3)]=$21;
      var $22=$p2_addr;
      var $arrayidx22=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx22)>>3)];
      var $arrayidx23=(($a+88)|0);
      HEAPF64[(($arrayidx23)>>3)]=$23;
      var $24=$p3_addr;
      var $arrayidx24=(($24+16)|0);
      var $25=HEAPF64[(($arrayidx24)>>3)];
      var $arrayidx25=(($a+96)|0);
      HEAPF64[(($arrayidx25)>>3)]=$25;
      var $26=$p4_addr;
      var $arrayidx26=(($26+16)|0);
      var $27=HEAPF64[(($arrayidx26)>>3)];
      var $arrayidx27=(($a+104)|0);
      HEAPF64[(($arrayidx27)>>3)]=$27;
      var $28=$p_addr;
      var $arrayidx28=(($28+16)|0);
      var $29=HEAPF64[(($arrayidx28)>>3)];
      var $arrayidx29=(($a+112)|0);
      HEAPF64[(($arrayidx29)>>3)]=$29;
      var $30=$p1_addr;
      var $arrayidx30=(($30)|0);
      var $31=HEAPF64[(($arrayidx30)>>3)];
      var $32=$p1_addr;
      var $arrayidx31=(($32)|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $mul=($31)*($33);
      var $34=$p1_addr;
      var $arrayidx32=(($34+8)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $36=$p1_addr;
      var $arrayidx33=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($35)*($37);
      var $add=($mul)+($mul34);
      var $38=$p1_addr;
      var $arrayidx35=(($38+16)|0);
      var $39=HEAPF64[(($arrayidx35)>>3)];
      var $40=$p1_addr;
      var $arrayidx36=(($40+16)|0);
      var $41=HEAPF64[(($arrayidx36)>>3)];
      var $mul37=($39)*($41);
      var $add38=($add)+($mul37);
      var $arrayidx39=(($a+120)|0);
      HEAPF64[(($arrayidx39)>>3)]=$add38;
      var $42=$p2_addr;
      var $arrayidx40=(($42)|0);
      var $43=HEAPF64[(($arrayidx40)>>3)];
      var $44=$p2_addr;
      var $arrayidx41=(($44)|0);
      var $45=HEAPF64[(($arrayidx41)>>3)];
      var $mul42=($43)*($45);
      var $46=$p2_addr;
      var $arrayidx43=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx43)>>3)];
      var $48=$p2_addr;
      var $arrayidx44=(($48+8)|0);
      var $49=HEAPF64[(($arrayidx44)>>3)];
      var $mul45=($47)*($49);
      var $add46=($mul42)+($mul45);
      var $50=$p2_addr;
      var $arrayidx47=(($50+16)|0);
      var $51=HEAPF64[(($arrayidx47)>>3)];
      var $52=$p2_addr;
      var $arrayidx48=(($52+16)|0);
      var $53=HEAPF64[(($arrayidx48)>>3)];
      var $mul49=($51)*($53);
      var $add50=($add46)+($mul49);
      var $arrayidx51=(($a+128)|0);
      HEAPF64[(($arrayidx51)>>3)]=$add50;
      var $54=$p3_addr;
      var $arrayidx52=(($54)|0);
      var $55=HEAPF64[(($arrayidx52)>>3)];
      var $56=$p3_addr;
      var $arrayidx53=(($56)|0);
      var $57=HEAPF64[(($arrayidx53)>>3)];
      var $mul54=($55)*($57);
      var $58=$p3_addr;
      var $arrayidx55=(($58+8)|0);
      var $59=HEAPF64[(($arrayidx55)>>3)];
      var $60=$p3_addr;
      var $arrayidx56=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx56)>>3)];
      var $mul57=($59)*($61);
      var $add58=($mul54)+($mul57);
      var $62=$p3_addr;
      var $arrayidx59=(($62+16)|0);
      var $63=HEAPF64[(($arrayidx59)>>3)];
      var $64=$p3_addr;
      var $arrayidx60=(($64+16)|0);
      var $65=HEAPF64[(($arrayidx60)>>3)];
      var $mul61=($63)*($65);
      var $add62=($add58)+($mul61);
      var $arrayidx63=(($a+136)|0);
      HEAPF64[(($arrayidx63)>>3)]=$add62;
      var $66=$p4_addr;
      var $arrayidx64=(($66)|0);
      var $67=HEAPF64[(($arrayidx64)>>3)];
      var $68=$p4_addr;
      var $arrayidx65=(($68)|0);
      var $69=HEAPF64[(($arrayidx65)>>3)];
      var $mul66=($67)*($69);
      var $70=$p4_addr;
      var $arrayidx67=(($70+8)|0);
      var $71=HEAPF64[(($arrayidx67)>>3)];
      var $72=$p4_addr;
      var $arrayidx68=(($72+8)|0);
      var $73=HEAPF64[(($arrayidx68)>>3)];
      var $mul69=($71)*($73);
      var $add70=($mul66)+($mul69);
      var $74=$p4_addr;
      var $arrayidx71=(($74+16)|0);
      var $75=HEAPF64[(($arrayidx71)>>3)];
      var $76=$p4_addr;
      var $arrayidx72=(($76+16)|0);
      var $77=HEAPF64[(($arrayidx72)>>3)];
      var $mul73=($75)*($77);
      var $add74=($add70)+($mul73);
      var $arrayidx75=(($a+144)|0);
      HEAPF64[(($arrayidx75)>>3)]=$add74;
      var $78=$p_addr;
      var $arrayidx76=(($78)|0);
      var $79=HEAPF64[(($arrayidx76)>>3)];
      var $80=$p_addr;
      var $arrayidx77=(($80)|0);
      var $81=HEAPF64[(($arrayidx77)>>3)];
      var $mul78=($79)*($81);
      var $82=$p_addr;
      var $arrayidx79=(($82+8)|0);
      var $83=HEAPF64[(($arrayidx79)>>3)];
      var $84=$p_addr;
      var $arrayidx80=(($84+8)|0);
      var $85=HEAPF64[(($arrayidx80)>>3)];
      var $mul81=($83)*($85);
      var $add82=($mul78)+($mul81);
      var $86=$p_addr;
      var $arrayidx83=(($86+16)|0);
      var $87=HEAPF64[(($arrayidx83)>>3)];
      var $88=$p_addr;
      var $arrayidx84=(($88+16)|0);
      var $89=HEAPF64[(($arrayidx84)>>3)];
      var $mul85=($87)*($89);
      var $add86=($add82)+($mul85);
      var $arrayidx87=(($a+152)|0);
      HEAPF64[(($arrayidx87)>>3)]=$add86;
      var $arrayidx88=(($a+160)|0);
      HEAPF64[(($arrayidx88)>>3)]=1;
      var $arrayidx89=(($a+168)|0);
      HEAPF64[(($arrayidx89)>>3)]=1;
      var $arrayidx90=(($a+176)|0);
      HEAPF64[(($arrayidx90)>>3)]=1;
      var $arrayidx91=(($a+184)|0);
      HEAPF64[(($arrayidx91)>>3)]=1;
      var $arrayidx92=(($a+192)|0);
      HEAPF64[(($arrayidx92)>>3)]=1;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_det_5d($arraydecay);
      var $cmp=$call < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 5; break;
    case 4: 
      $retval=1;
      label = 5; break;
    case 5: 
      var $90=$retval;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_exp_contains_point_3d"] = _sphere_exp_contains_point_3d;
function _sphere_exp_point_near_3d($p1, $p2, $p3, $p4, $p, $pn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p1_addr;
      var $p2_addr;
      var $p3_addr;
      var $p4_addr;
      var $p_addr;
      var $pn_addr;
      var $norm;
      var $r=__stackBase__;
      var $pc=(__stackBase__)+(8);
      $p1_addr=$p1;
      $p2_addr=$p2;
      $p3_addr=$p3;
      $p4_addr=$p4;
      $p_addr=$p;
      $pn_addr=$pn;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $2=$p3_addr;
      var $3=$p4_addr;
      var $arraydecay=(($pc)|0);
      _sphere_exp2imp_3d($0, $1, $2, $3, $r, $arraydecay);
      var $4=$p_addr;
      var $arrayidx=(($4)|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($pc)|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($5)-($6);
      var $7=Math.pow($sub, 2);
      var $8=$p_addr;
      var $arrayidx2=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx2)>>3)];
      var $arrayidx3=(($pc+8)|0);
      var $10=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($9)-($10);
      var $11=Math.pow($sub4, 2);
      var $add=($7)+($11);
      var $12=$p_addr;
      var $arrayidx5=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx5)>>3)];
      var $arrayidx6=(($pc+16)|0);
      var $14=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($13)-($14);
      var $15=Math.pow($sub7, 2);
      var $add8=($add)+($15);
      var $call=Math.sqrt($add8);
      $norm=$call;
      var $16=$norm;
      var $cmp=$16 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $arrayidx9=(($pc)|0);
      var $17=HEAPF64[(($arrayidx9)>>3)];
      var $18=HEAPF64[(($r)>>3)];
      var $add10=($17)+($18);
      var $19=$pn_addr;
      var $arrayidx11=(($19)|0);
      HEAPF64[(($arrayidx11)>>3)]=$add10;
      var $arrayidx12=(($pc+8)|0);
      var $20=HEAPF64[(($arrayidx12)>>3)];
      var $21=$pn_addr;
      var $arrayidx13=(($21+8)|0);
      HEAPF64[(($arrayidx13)>>3)]=$20;
      var $arrayidx14=(($pc+16)|0);
      var $22=HEAPF64[(($arrayidx14)>>3)];
      var $23=$pn_addr;
      var $arrayidx15=(($23+16)|0);
      HEAPF64[(($arrayidx15)>>3)]=$22;
      label = 5; break;
    case 4: 
      var $arrayidx16=(($pc)|0);
      var $24=HEAPF64[(($arrayidx16)>>3)];
      var $25=HEAPF64[(($r)>>3)];
      var $26=$p_addr;
      var $arrayidx17=(($26)|0);
      var $27=HEAPF64[(($arrayidx17)>>3)];
      var $arrayidx18=(($pc)|0);
      var $28=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($27)-($28);
      var $mul=($25)*($sub19);
      var $29=$norm;
      var $div=($mul)/($29);
      var $add20=($24)+($div);
      var $30=$pn_addr;
      var $arrayidx21=(($30)|0);
      HEAPF64[(($arrayidx21)>>3)]=$add20;
      var $arrayidx22=(($pc+8)|0);
      var $31=HEAPF64[(($arrayidx22)>>3)];
      var $32=HEAPF64[(($r)>>3)];
      var $33=$p_addr;
      var $arrayidx23=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx23)>>3)];
      var $arrayidx24=(($pc+8)|0);
      var $35=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($34)-($35);
      var $mul26=($32)*($sub25);
      var $36=$norm;
      var $div27=($mul26)/($36);
      var $add28=($31)+($div27);
      var $37=$pn_addr;
      var $arrayidx29=(($37+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $arrayidx30=(($pc+16)|0);
      var $38=HEAPF64[(($arrayidx30)>>3)];
      var $39=HEAPF64[(($r)>>3)];
      var $40=$p_addr;
      var $arrayidx31=(($40+16)|0);
      var $41=HEAPF64[(($arrayidx31)>>3)];
      var $arrayidx32=(($pc+16)|0);
      var $42=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($41)-($42);
      var $mul34=($39)*($sub33);
      var $43=$norm;
      var $div35=($mul34)/($43);
      var $add36=($38)+($div35);
      var $44=$pn_addr;
      var $arrayidx37=(($44+16)|0);
      HEAPF64[(($arrayidx37)>>3)]=$add36;
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_exp_point_near_3d"] = _sphere_exp_point_near_3d;
function _sphere_exp2imp_3d($p1, $p2, $p3, $p4, $r, $pc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $p4_addr;
  var $r_addr;
  var $pc_addr;
  var $tet=__stackBase__;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  $p4_addr=$p4;
  $r_addr=$r;
  $pc_addr=$pc;
  var $0=$p1_addr;
  var $arraydecay=(($tet)|0);
  var $add_ptr=(($arraydecay)|0);
  _r8vec_copy(3, $0, $add_ptr);
  var $1=$p2_addr;
  var $arraydecay1=(($tet)|0);
  var $add_ptr2=(($arraydecay1+24)|0);
  _r8vec_copy(3, $1, $add_ptr2);
  var $2=$p3_addr;
  var $arraydecay3=(($tet)|0);
  var $add_ptr4=(($arraydecay3+48)|0);
  _r8vec_copy(3, $2, $add_ptr4);
  var $3=$p4_addr;
  var $arraydecay5=(($tet)|0);
  var $add_ptr6=(($arraydecay5+72)|0);
  _r8vec_copy(3, $3, $add_ptr6);
  var $arraydecay7=(($tet)|0);
  var $4=$r_addr;
  var $5=$pc_addr;
  _tetrahedron_circumsphere_3d($arraydecay7, $4, $5);
  STACKTOP = __stackBase__;
  return;
}
Module["_sphere_exp2imp_3d"] = _sphere_exp2imp_3d;
function _tetrahedron_circumsphere_3d($tetra, $r, $pc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $r_addr;
      var $pc_addr;
      var $a=__stackBase__;
      var $info;
      $tetra_addr=$tetra;
      $r_addr=$r;
      $pc_addr=$pc;
      var $0=$tetra_addr;
      var $arrayidx=(($0+24)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$tetra_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$tetra_addr;
      var $arrayidx3=(($4+32)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$tetra_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a+24)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$tetra_addr;
      var $arrayidx7=(($8+40)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$tetra_addr;
      var $arrayidx8=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($a+48)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $12=$tetra_addr;
      var $arrayidx11=(($12+24)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$tetra_addr;
      var $arrayidx12=(($14)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $16=Math.pow($sub13, 2);
      var $17=$tetra_addr;
      var $arrayidx14=(($17+32)|0);
      var $18=HEAPF64[(($arrayidx14)>>3)];
      var $19=$tetra_addr;
      var $arrayidx15=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($18)-($20);
      var $21=Math.pow($sub16, 2);
      var $add=($16)+($21);
      var $22=$tetra_addr;
      var $arrayidx17=(($22+40)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $24=$tetra_addr;
      var $arrayidx18=(($24+16)|0);
      var $25=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($23)-($25);
      var $26=Math.pow($sub19, 2);
      var $add20=($add)+($26);
      var $arrayidx21=(($a+72)|0);
      HEAPF64[(($arrayidx21)>>3)]=$add20;
      var $27=$tetra_addr;
      var $arrayidx22=(($27+48)|0);
      var $28=HEAPF64[(($arrayidx22)>>3)];
      var $29=$tetra_addr;
      var $arrayidx23=(($29)|0);
      var $30=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($28)-($30);
      var $arrayidx25=(($a+8)|0);
      HEAPF64[(($arrayidx25)>>3)]=$sub24;
      var $31=$tetra_addr;
      var $arrayidx26=(($31+56)|0);
      var $32=HEAPF64[(($arrayidx26)>>3)];
      var $33=$tetra_addr;
      var $arrayidx27=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx27)>>3)];
      var $sub28=($32)-($34);
      var $arrayidx29=(($a+32)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $35=$tetra_addr;
      var $arrayidx30=(($35+64)|0);
      var $36=HEAPF64[(($arrayidx30)>>3)];
      var $37=$tetra_addr;
      var $arrayidx31=(($37+16)|0);
      var $38=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($36)-($38);
      var $arrayidx33=(($a+56)|0);
      HEAPF64[(($arrayidx33)>>3)]=$sub32;
      var $39=$tetra_addr;
      var $arrayidx34=(($39+48)|0);
      var $40=HEAPF64[(($arrayidx34)>>3)];
      var $41=$tetra_addr;
      var $arrayidx35=(($41)|0);
      var $42=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($40)-($42);
      var $43=Math.pow($sub36, 2);
      var $44=$tetra_addr;
      var $arrayidx37=(($44+56)|0);
      var $45=HEAPF64[(($arrayidx37)>>3)];
      var $46=$tetra_addr;
      var $arrayidx38=(($46+8)|0);
      var $47=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($45)-($47);
      var $48=Math.pow($sub39, 2);
      var $add40=($43)+($48);
      var $49=$tetra_addr;
      var $arrayidx41=(($49+64)|0);
      var $50=HEAPF64[(($arrayidx41)>>3)];
      var $51=$tetra_addr;
      var $arrayidx42=(($51+16)|0);
      var $52=HEAPF64[(($arrayidx42)>>3)];
      var $sub43=($50)-($52);
      var $53=Math.pow($sub43, 2);
      var $add44=($add40)+($53);
      var $arrayidx45=(($a+80)|0);
      HEAPF64[(($arrayidx45)>>3)]=$add44;
      var $54=$tetra_addr;
      var $arrayidx46=(($54+72)|0);
      var $55=HEAPF64[(($arrayidx46)>>3)];
      var $56=$tetra_addr;
      var $arrayidx47=(($56)|0);
      var $57=HEAPF64[(($arrayidx47)>>3)];
      var $sub48=($55)-($57);
      var $arrayidx49=(($a+16)|0);
      HEAPF64[(($arrayidx49)>>3)]=$sub48;
      var $58=$tetra_addr;
      var $arrayidx50=(($58+80)|0);
      var $59=HEAPF64[(($arrayidx50)>>3)];
      var $60=$tetra_addr;
      var $arrayidx51=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx51)>>3)];
      var $sub52=($59)-($61);
      var $arrayidx53=(($a+40)|0);
      HEAPF64[(($arrayidx53)>>3)]=$sub52;
      var $62=$tetra_addr;
      var $arrayidx54=(($62+88)|0);
      var $63=HEAPF64[(($arrayidx54)>>3)];
      var $64=$tetra_addr;
      var $arrayidx55=(($64+16)|0);
      var $65=HEAPF64[(($arrayidx55)>>3)];
      var $sub56=($63)-($65);
      var $arrayidx57=(($a+64)|0);
      HEAPF64[(($arrayidx57)>>3)]=$sub56;
      var $66=$tetra_addr;
      var $arrayidx58=(($66+72)|0);
      var $67=HEAPF64[(($arrayidx58)>>3)];
      var $68=$tetra_addr;
      var $arrayidx59=(($68)|0);
      var $69=HEAPF64[(($arrayidx59)>>3)];
      var $sub60=($67)-($69);
      var $70=Math.pow($sub60, 2);
      var $71=$tetra_addr;
      var $arrayidx61=(($71+80)|0);
      var $72=HEAPF64[(($arrayidx61)>>3)];
      var $73=$tetra_addr;
      var $arrayidx62=(($73+8)|0);
      var $74=HEAPF64[(($arrayidx62)>>3)];
      var $sub63=($72)-($74);
      var $75=Math.pow($sub63, 2);
      var $add64=($70)+($75);
      var $76=$tetra_addr;
      var $arrayidx65=(($76+88)|0);
      var $77=HEAPF64[(($arrayidx65)>>3)];
      var $78=$tetra_addr;
      var $arrayidx66=(($78+16)|0);
      var $79=HEAPF64[(($arrayidx66)>>3)];
      var $sub67=($77)-($79);
      var $80=Math.pow($sub67, 2);
      var $add68=($add64)+($80);
      var $arrayidx69=(($a+88)|0);
      HEAPF64[(($arrayidx69)>>3)]=$add68;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_solve(3, 1, $arraydecay);
      $info=$call;
      var $81=$info;
      var $cmp=(($81)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $82=$r_addr;
      HEAPF64[(($82)>>3)]=-1;
      var $83=$pc_addr;
      _r8vec_zero(3, $83);
      label = 5; break;
    case 4: 
      var $arrayidx70=(($a+72)|0);
      var $84=HEAPF64[(($arrayidx70)>>3)];
      var $arrayidx71=(($a+72)|0);
      var $85=HEAPF64[(($arrayidx71)>>3)];
      var $mul=($84)*($85);
      var $arrayidx72=(($a+80)|0);
      var $86=HEAPF64[(($arrayidx72)>>3)];
      var $arrayidx73=(($a+80)|0);
      var $87=HEAPF64[(($arrayidx73)>>3)];
      var $mul74=($86)*($87);
      var $add75=($mul)+($mul74);
      var $arrayidx76=(($a+88)|0);
      var $88=HEAPF64[(($arrayidx76)>>3)];
      var $arrayidx77=(($a+88)|0);
      var $89=HEAPF64[(($arrayidx77)>>3)];
      var $mul78=($88)*($89);
      var $add79=($add75)+($mul78);
      var $call80=Math.sqrt($add79);
      var $mul81=($call80)*(0.5);
      var $90=$r_addr;
      HEAPF64[(($90)>>3)]=$mul81;
      var $91=$tetra_addr;
      var $arrayidx82=(($91)|0);
      var $92=HEAPF64[(($arrayidx82)>>3)];
      var $arrayidx83=(($a+72)|0);
      var $93=HEAPF64[(($arrayidx83)>>3)];
      var $mul84=($93)*(0.5);
      var $add85=($92)+($mul84);
      var $94=$pc_addr;
      var $arrayidx86=(($94)|0);
      HEAPF64[(($arrayidx86)>>3)]=$add85;
      var $95=$tetra_addr;
      var $arrayidx87=(($95+8)|0);
      var $96=HEAPF64[(($arrayidx87)>>3)];
      var $arrayidx88=(($a+80)|0);
      var $97=HEAPF64[(($arrayidx88)>>3)];
      var $mul89=($97)*(0.5);
      var $add90=($96)+($mul89);
      var $98=$pc_addr;
      var $arrayidx91=(($98+8)|0);
      HEAPF64[(($arrayidx91)>>3)]=$add90;
      var $99=$tetra_addr;
      var $arrayidx92=(($99+16)|0);
      var $100=HEAPF64[(($arrayidx92)>>3)];
      var $arrayidx93=(($a+88)|0);
      var $101=HEAPF64[(($arrayidx93)>>3)];
      var $mul94=($101)*(0.5);
      var $add95=($100)+($mul94);
      var $102=$pc_addr;
      var $arrayidx96=(($102+16)|0);
      HEAPF64[(($arrayidx96)>>3)]=$add95;
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_circumsphere_3d"] = _tetrahedron_circumsphere_3d;
function _sphere_imp_grid_icos_size($factor, $node_num, $edge_num, $triangle_num) {
  var label = 0;
  var $factor_addr;
  var $node_num_addr;
  var $edge_num_addr;
  var $triangle_num_addr;
  $factor_addr=$factor;
  $node_num_addr=$node_num;
  $edge_num_addr=$edge_num;
  $triangle_num_addr=$triangle_num;
  var $0=$factor_addr;
  var $sub=((($0)-(1))|0);
  var $mul=((($sub)*(30))&-1);
  var $add=((($mul)+(12))|0);
  var $1=$factor_addr;
  var $sub1=((($1)-(2))|0);
  var $mul2=((($sub1)*(10))&-1);
  var $2=$factor_addr;
  var $sub3=((($2)-(1))|0);
  var $mul4=(Math.imul($mul2,$sub3)|0);
  var $add5=((($add)+($mul4))|0);
  var $3=$node_num_addr;
  HEAP32[(($3)>>2)]=$add5;
  var $4=$factor_addr;
  var $mul6=((($4)*(30))&-1);
  var $5=$factor_addr;
  var $mul7=(Math.imul($mul6,$5)|0);
  var $6=$edge_num_addr;
  HEAP32[(($6)>>2)]=$mul7;
  var $7=$factor_addr;
  var $mul8=((($7)*(20))&-1);
  var $8=$factor_addr;
  var $mul9=(Math.imul($mul8,$8)|0);
  var $9=$triangle_num_addr;
  HEAP32[(($9)>>2)]=$mul9;
  return;
}
Module["_sphere_imp_grid_icos_size"] = _sphere_imp_grid_icos_size;
function _sphere_imp_gridfaces_3d($maxtri, $nlat, $nlong, $ntri, $tri) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $maxtri_addr;
      var $nlat_addr;
      var $nlong_addr;
      var $ntri_addr;
      var $tri_addr;
      var $i;
      var $j;
      var $n;
      var $n_max;
      var $n_min;
      var $ne;
      var $nw;
      var $s;
      var $s_max;
      var $s_min;
      var $se;
      var $sw;
      $maxtri_addr=$maxtri;
      $nlat_addr=$nlat;
      $nlong_addr=$nlong;
      $ntri_addr=$ntri;
      $tri_addr=$tri;
      var $0=$ntri_addr;
      HEAP32[(($0)>>2)]=0;
      $n=1;
      $sw=2;
      var $1=$sw;
      var $add=((($1)+(1))|0);
      $se=$add;
      $s_min=2;
      var $2=$nlong_addr;
      var $add1=((($2)+(1))|0);
      $s_max=$add1;
      $j=0;
      label = 3; break;
    case 3: 
      var $3=$j;
      var $4=$nlong_addr;
      var $sub=((($4)-(1))|0);
      var $cmp=(($3)|(0)) <= (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $5=$ntri_addr;
      var $6=HEAP32[(($5)>>2)];
      var $7=$maxtri_addr;
      var $cmp2=(($6)|(0)) < (($7)|(0));
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $8=$sw;
      var $9=$ntri_addr;
      var $10=HEAP32[(($9)>>2)];
      var $mul=((($10)*(3))&-1);
      var $add3=(($mul)|0);
      var $11=$tri_addr;
      var $arrayidx=(($11+($add3<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$8;
      var $12=$se;
      var $13=$ntri_addr;
      var $14=HEAP32[(($13)>>2)];
      var $mul4=((($14)*(3))&-1);
      var $add5=((($mul4)+(1))|0);
      var $15=$tri_addr;
      var $arrayidx6=(($15+($add5<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$12;
      var $16=$n;
      var $17=$ntri_addr;
      var $18=HEAP32[(($17)>>2)];
      var $mul7=((($18)*(3))&-1);
      var $add8=((($mul7)+(2))|0);
      var $19=$tri_addr;
      var $arrayidx9=(($19+($add8<<2))|0);
      HEAP32[(($arrayidx9)>>2)]=$16;
      var $20=$ntri_addr;
      var $21=HEAP32[(($20)>>2)];
      var $add10=((($21)+(1))|0);
      var $22=$ntri_addr;
      HEAP32[(($22)>>2)]=$add10;
      label = 6; break;
    case 6: 
      var $23=$se;
      $sw=$23;
      var $24=$se;
      var $25=$s_max;
      var $cmp11=(($24)|(0))==(($25)|(0));
      if ($cmp11) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$s_min;
      $se=$26;
      label = 9; break;
    case 8: 
      var $27=$se;
      var $add13=((($27)+(1))|0);
      $se=$add13;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $28=$j;
      var $inc=((($28)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 11: 
      $i=1;
      label = 12; break;
    case 12: 
      var $29=$i;
      var $30=$nlat_addr;
      var $cmp16=(($29)|(0)) <= (($30)|(0));
      if ($cmp16) { label = 13; break; } else { label = 29; break; }
    case 13: 
      var $31=$s_max;
      $n_max=$31;
      var $32=$s_min;
      $n_min=$32;
      var $33=$s_max;
      var $34=$nlong_addr;
      var $add18=((($33)+($34))|0);
      $s_max=$add18;
      var $35=$s_min;
      var $36=$nlong_addr;
      var $add19=((($35)+($36))|0);
      $s_min=$add19;
      var $37=$n_min;
      $nw=$37;
      var $38=$nw;
      var $add20=((($38)+(1))|0);
      $ne=$add20;
      var $39=$s_min;
      $sw=$39;
      var $40=$sw;
      var $add21=((($40)+(1))|0);
      $se=$add21;
      $j=0;
      label = 14; break;
    case 14: 
      var $41=$j;
      var $42=$nlong_addr;
      var $sub23=((($42)-(1))|0);
      var $cmp24=(($41)|(0)) <= (($sub23)|(0));
      if ($cmp24) { label = 15; break; } else { label = 27; break; }
    case 15: 
      var $43=$ntri_addr;
      var $44=HEAP32[(($43)>>2)];
      var $45=$maxtri_addr;
      var $cmp26=(($44)|(0)) < (($45)|(0));
      if ($cmp26) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $46=$sw;
      var $47=$ntri_addr;
      var $48=HEAP32[(($47)>>2)];
      var $mul28=((($48)*(3))&-1);
      var $add29=(($mul28)|0);
      var $49=$tri_addr;
      var $arrayidx30=(($49+($add29<<2))|0);
      HEAP32[(($arrayidx30)>>2)]=$46;
      var $50=$se;
      var $51=$ntri_addr;
      var $52=HEAP32[(($51)>>2)];
      var $mul31=((($52)*(3))&-1);
      var $add32=((($mul31)+(1))|0);
      var $53=$tri_addr;
      var $arrayidx33=(($53+($add32<<2))|0);
      HEAP32[(($arrayidx33)>>2)]=$50;
      var $54=$nw;
      var $55=$ntri_addr;
      var $56=HEAP32[(($55)>>2)];
      var $mul34=((($56)*(3))&-1);
      var $add35=((($mul34)+(2))|0);
      var $57=$tri_addr;
      var $arrayidx36=(($57+($add35<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=$54;
      var $58=$ntri_addr;
      var $59=HEAP32[(($58)>>2)];
      var $add37=((($59)+(1))|0);
      var $60=$ntri_addr;
      HEAP32[(($60)>>2)]=$add37;
      label = 17; break;
    case 17: 
      var $61=$ntri_addr;
      var $62=HEAP32[(($61)>>2)];
      var $63=$maxtri_addr;
      var $cmp39=(($62)|(0)) < (($63)|(0));
      if ($cmp39) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $64=$ne;
      var $65=$ntri_addr;
      var $66=HEAP32[(($65)>>2)];
      var $mul41=((($66)*(3))&-1);
      var $add42=(($mul41)|0);
      var $67=$tri_addr;
      var $arrayidx43=(($67+($add42<<2))|0);
      HEAP32[(($arrayidx43)>>2)]=$64;
      var $68=$nw;
      var $69=$ntri_addr;
      var $70=HEAP32[(($69)>>2)];
      var $mul44=((($70)*(3))&-1);
      var $add45=((($mul44)+(1))|0);
      var $71=$tri_addr;
      var $arrayidx46=(($71+($add45<<2))|0);
      HEAP32[(($arrayidx46)>>2)]=$68;
      var $72=$se;
      var $73=$ntri_addr;
      var $74=HEAP32[(($73)>>2)];
      var $mul47=((($74)*(3))&-1);
      var $add48=((($mul47)+(2))|0);
      var $75=$tri_addr;
      var $arrayidx49=(($75+($add48<<2))|0);
      HEAP32[(($arrayidx49)>>2)]=$72;
      var $76=$ntri_addr;
      var $77=HEAP32[(($76)>>2)];
      var $add50=((($77)+(1))|0);
      var $78=$ntri_addr;
      HEAP32[(($78)>>2)]=$add50;
      label = 19; break;
    case 19: 
      var $79=$se;
      $sw=$79;
      var $80=$ne;
      $nw=$80;
      var $81=$se;
      var $82=$s_max;
      var $cmp52=(($81)|(0))==(($82)|(0));
      if ($cmp52) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $83=$s_min;
      $se=$83;
      label = 22; break;
    case 21: 
      var $84=$se;
      var $add55=((($84)+(1))|0);
      $se=$add55;
      label = 22; break;
    case 22: 
      var $85=$ne;
      var $86=$n_max;
      var $cmp57=(($85)|(0))==(($86)|(0));
      if ($cmp57) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $87=$n_min;
      $ne=$87;
      label = 25; break;
    case 24: 
      var $88=$ne;
      var $add60=((($88)+(1))|0);
      $ne=$add60;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $89=$j;
      var $inc63=((($89)+(1))|0);
      $j=$inc63;
      label = 14; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $90=$i;
      var $inc66=((($90)+(1))|0);
      $i=$inc66;
      label = 12; break;
    case 29: 
      var $91=$s_max;
      $n_max=$91;
      var $92=$s_min;
      $n_min=$92;
      var $93=$n_max;
      var $add68=((($93)+(1))|0);
      $s=$add68;
      var $94=$n_min;
      $nw=$94;
      var $95=$nw;
      var $add69=((($95)+(1))|0);
      $ne=$add69;
      $j=0;
      label = 30; break;
    case 30: 
      var $96=$j;
      var $97=$nlong_addr;
      var $sub71=((($97)-(1))|0);
      var $cmp72=(($96)|(0)) <= (($sub71)|(0));
      if ($cmp72) { label = 31; break; } else { label = 38; break; }
    case 31: 
      var $98=$ntri_addr;
      var $99=HEAP32[(($98)>>2)];
      var $100=$maxtri_addr;
      var $cmp74=(($99)|(0)) < (($100)|(0));
      if ($cmp74) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $101=$ne;
      var $102=$ntri_addr;
      var $103=HEAP32[(($102)>>2)];
      var $mul76=((($103)*(3))&-1);
      var $add77=(($mul76)|0);
      var $104=$tri_addr;
      var $arrayidx78=(($104+($add77<<2))|0);
      HEAP32[(($arrayidx78)>>2)]=$101;
      var $105=$nw;
      var $106=$ntri_addr;
      var $107=HEAP32[(($106)>>2)];
      var $mul79=((($107)*(3))&-1);
      var $add80=((($mul79)+(1))|0);
      var $108=$tri_addr;
      var $arrayidx81=(($108+($add80<<2))|0);
      HEAP32[(($arrayidx81)>>2)]=$105;
      var $109=$s;
      var $110=$ntri_addr;
      var $111=HEAP32[(($110)>>2)];
      var $mul82=((($111)*(3))&-1);
      var $add83=((($mul82)+(2))|0);
      var $112=$tri_addr;
      var $arrayidx84=(($112+($add83<<2))|0);
      HEAP32[(($arrayidx84)>>2)]=$109;
      var $113=$ntri_addr;
      var $114=HEAP32[(($113)>>2)];
      var $add85=((($114)+(1))|0);
      var $115=$ntri_addr;
      HEAP32[(($115)>>2)]=$add85;
      label = 33; break;
    case 33: 
      var $116=$ne;
      $nw=$116;
      var $117=$ne;
      var $118=$n_max;
      var $cmp87=(($117)|(0))==(($118)|(0));
      if ($cmp87) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $119=$n_min;
      $ne=$119;
      label = 36; break;
    case 35: 
      var $120=$ne;
      var $add90=((($120)+(1))|0);
      $ne=$add90;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $121=$j;
      var $inc93=((($121)+(1))|0);
      $j=$inc93;
      label = 30; break;
    case 38: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_gridfaces_3d"] = _sphere_imp_gridfaces_3d;
function _sphere_exp2imp_nd($n, $p, $r, $pc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $p_addr;
      var $r_addr;
      var $pc_addr;
      var $a;
      var $i;
      var $info;
      var $j;
      var $t;
      $n_addr=$n;
      $p_addr=$p;
      $r_addr=$r;
      $pc_addr=$pc;
      var $0=$n_addr;
      var $1=$n_addr;
      var $add=((($1)+(1))|0);
      var $mul=(Math.imul($0,$add)|0);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $2=$call;
      $a=$2;
      $j=0;
      label = 3; break;
    case 3: 
      var $3=$j;
      var $4=$n_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $6=$n_addr;
      var $cmp3=(($5)|(0)) < (($6)|(0));
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$j;
      var $8=$i;
      var $add5=((($8)+(1))|0);
      var $9=$n_addr;
      var $mul6=(Math.imul($add5,$9)|0);
      var $add7=((($7)+($mul6))|0);
      var $10=$p_addr;
      var $arrayidx=(($10+($add7<<3))|0);
      var $11=HEAPF64[(($arrayidx)>>3)];
      var $12=$i;
      var $13=$j;
      var $14=$n_addr;
      var $mul8=(Math.imul($13,$14)|0);
      var $add9=((($12)+($mul8))|0);
      var $15=$a;
      var $arrayidx10=(($15+($add9<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$11;
      label = 7; break;
    case 7: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $17=$j;
      var $inc12=((($17)+(1))|0);
      $j=$inc12;
      label = 3; break;
    case 10: 
      $j=0;
      label = 11; break;
    case 11: 
      var $18=$j;
      var $19=$n_addr;
      var $cmp15=(($18)|(0)) < (($19)|(0));
      if ($cmp15) { label = 12; break; } else { label = 18; break; }
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $20=$i;
      var $21=$n_addr;
      var $cmp18=(($20)|(0)) < (($21)|(0));
      if ($cmp18) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $22=$i;
      var $23=$j;
      var $24=$n_addr;
      var $mul20=(Math.imul($23,$24)|0);
      var $add21=((($22)+($mul20))|0);
      var $25=$a;
      var $arrayidx22=(($25+($add21<<3))|0);
      var $26=HEAPF64[(($arrayidx22)>>3)];
      var $27=$j;
      var $28=$n_addr;
      var $mul23=0;
      var $add24=((($27)+($mul23))|0);
      var $29=$p_addr;
      var $arrayidx25=(($29+($add24<<3))|0);
      var $30=HEAPF64[(($arrayidx25)>>3)];
      var $sub=($26)-($30);
      var $31=$i;
      var $32=$j;
      var $33=$n_addr;
      var $mul26=(Math.imul($32,$33)|0);
      var $add27=((($31)+($mul26))|0);
      var $34=$a;
      var $arrayidx28=(($34+($add27<<3))|0);
      HEAPF64[(($arrayidx28)>>3)]=$sub;
      label = 15; break;
    case 15: 
      var $35=$i;
      var $inc30=((($35)+(1))|0);
      $i=$inc30;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $36=$j;
      var $inc33=((($36)+(1))|0);
      $j=$inc33;
      label = 11; break;
    case 18: 
      $i=0;
      label = 19; break;
    case 19: 
      var $37=$i;
      var $38=$n_addr;
      var $cmp36=(($37)|(0)) < (($38)|(0));
      if ($cmp36) { label = 20; break; } else { label = 26; break; }
    case 20: 
      $t=0;
      $j=0;
      label = 21; break;
    case 21: 
      var $39=$j;
      var $40=$n_addr;
      var $cmp39=(($39)|(0)) < (($40)|(0));
      if ($cmp39) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $41=$t;
      var $42=$i;
      var $43=$j;
      var $44=$n_addr;
      var $mul41=(Math.imul($43,$44)|0);
      var $add42=((($42)+($mul41))|0);
      var $45=$a;
      var $arrayidx43=(($45+($add42<<3))|0);
      var $46=HEAPF64[(($arrayidx43)>>3)];
      var $47=$i;
      var $48=$j;
      var $49=$n_addr;
      var $mul44=(Math.imul($48,$49)|0);
      var $add45=((($47)+($mul44))|0);
      var $50=$a;
      var $arrayidx46=(($50+($add45<<3))|0);
      var $51=HEAPF64[(($arrayidx46)>>3)];
      var $mul47=($46)*($51);
      var $add48=($41)+($mul47);
      $t=$add48;
      label = 23; break;
    case 23: 
      var $52=$j;
      var $inc50=((($52)+(1))|0);
      $j=$inc50;
      label = 21; break;
    case 24: 
      var $53=$t;
      var $54=$i;
      var $55=$n_addr;
      var $56=$n_addr;
      var $mul52=(Math.imul($55,$56)|0);
      var $add53=((($54)+($mul52))|0);
      var $57=$a;
      var $arrayidx54=(($57+($add53<<3))|0);
      HEAPF64[(($arrayidx54)>>3)]=$53;
      label = 25; break;
    case 25: 
      var $58=$i;
      var $inc56=((($58)+(1))|0);
      $i=$inc56;
      label = 19; break;
    case 26: 
      var $59=$n_addr;
      var $60=$a;
      var $call58=_r8mat_solve($59, 1, $60);
      $info=$call58;
      var $61=$info;
      var $cmp59=(($61)|(0))!=0;
      if ($cmp59) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $62=$r_addr;
      HEAPF64[(($62)>>3)]=-1;
      $i=0;
      label = 28; break;
    case 28: 
      var $63=$i;
      var $64=$n_addr;
      var $cmp61=(($63)|(0)) < (($64)|(0));
      if ($cmp61) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $65=$i;
      var $66=$pc_addr;
      var $arrayidx63=(($66+($65<<3))|0);
      HEAPF64[(($arrayidx63)>>3)]=0;
      label = 30; break;
    case 30: 
      var $67=$i;
      var $inc65=((($67)+(1))|0);
      $i=$inc65;
      label = 28; break;
    case 31: 
      var $68=$a;
      var $69=$68;
      _free($69);
      label = 41; break;
    case 32: 
      var $70=$r_addr;
      HEAPF64[(($70)>>3)]=0;
      $i=0;
      label = 33; break;
    case 33: 
      var $71=$i;
      var $72=$n_addr;
      var $cmp68=(($71)|(0)) < (($72)|(0));
      if ($cmp68) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $73=$r_addr;
      var $74=HEAPF64[(($73)>>3)];
      var $75=$i;
      var $76=$n_addr;
      var $77=$n_addr;
      var $mul70=(Math.imul($76,$77)|0);
      var $add71=((($75)+($mul70))|0);
      var $78=$a;
      var $arrayidx72=(($78+($add71<<3))|0);
      var $79=HEAPF64[(($arrayidx72)>>3)];
      var $80=$i;
      var $81=$n_addr;
      var $82=$n_addr;
      var $mul73=(Math.imul($81,$82)|0);
      var $add74=((($80)+($mul73))|0);
      var $83=$a;
      var $arrayidx75=(($83+($add74<<3))|0);
      var $84=HEAPF64[(($arrayidx75)>>3)];
      var $mul76=($79)*($84);
      var $add77=($74)+($mul76);
      var $85=$r_addr;
      HEAPF64[(($85)>>3)]=$add77;
      label = 35; break;
    case 35: 
      var $86=$i;
      var $inc79=((($86)+(1))|0);
      $i=$inc79;
      label = 33; break;
    case 36: 
      var $87=$r_addr;
      var $88=HEAPF64[(($87)>>3)];
      var $call81=Math.sqrt($88);
      var $mul82=($call81)*(0.5);
      var $89=$r_addr;
      HEAPF64[(($89)>>3)]=$mul82;
      $i=0;
      label = 37; break;
    case 37: 
      var $90=$i;
      var $91=$n_addr;
      var $cmp84=(($90)|(0)) < (($91)|(0));
      if ($cmp84) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $92=$i;
      var $93=$n_addr;
      var $mul86=0;
      var $add87=((($92)+($mul86))|0);
      var $94=$p_addr;
      var $arrayidx88=(($94+($add87<<3))|0);
      var $95=HEAPF64[(($arrayidx88)>>3)];
      var $96=$i;
      var $97=$n_addr;
      var $98=$n_addr;
      var $mul89=(Math.imul($97,$98)|0);
      var $add90=((($96)+($mul89))|0);
      var $99=$a;
      var $arrayidx91=(($99+($add90<<3))|0);
      var $100=HEAPF64[(($arrayidx91)>>3)];
      var $mul92=($100)*(0.5);
      var $add93=($95)+($mul92);
      var $101=$i;
      var $102=$pc_addr;
      var $arrayidx94=(($102+($101<<3))|0);
      HEAPF64[(($arrayidx94)>>3)]=$add93;
      label = 39; break;
    case 39: 
      var $103=$i;
      var $inc96=((($103)+(1))|0);
      $i=$inc96;
      label = 37; break;
    case 40: 
      var $104=$a;
      var $105=$104;
      _free($105);
      label = 41; break;
    case 41: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_exp2imp_nd"] = _sphere_exp2imp_nd;
function _sphere_unit_area_nd($dim_num) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $area;
      var $i;
      var $m;
      var $pi;
      $dim_num_addr=$dim_num;
      $pi=3.141592653589793;
      var $0=$dim_num_addr;
      var $rem=((((($0)|(0)))%(2))&-1);
      var $cmp=(($rem)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $1=$dim_num_addr;
      var $div=((((($1)|(0)))/(2))&-1);
      $m=$div;
      var $2=$pi;
      var $3=$m;
      var $conv=(($3)|(0));
      var $4=Math.pow($2, $conv);
      var $mul=($4)*(2);
      $area=$mul;
      $i=1;
      label = 4; break;
    case 4: 
      var $5=$i;
      var $6=$m;
      var $sub=((($6)-(1))|0);
      var $cmp1=(($5)|(0)) <= (($sub)|(0));
      if ($cmp1) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $7=$area;
      var $8=$i;
      var $conv3=(($8)|(0));
      var $div4=($7)/($conv3);
      $area=$div4;
      label = 6; break;
    case 6: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      label = 13; break;
    case 8: 
      var $10=$dim_num_addr;
      var $sub5=((($10)-(1))|0);
      var $div6=((((($sub5)|(0)))/(2))&-1);
      $m=$div6;
      var $11=$dim_num_addr;
      var $conv7=(($11)|(0));
      var $12=Math.pow(2, $conv7);
      var $13=$pi;
      var $14=$m;
      var $conv8=(($14)|(0));
      var $15=Math.pow($13, $conv8);
      var $mul9=($12)*($15);
      $area=$mul9;
      var $16=$m;
      var $add=((($16)+(1))|0);
      $i=$add;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $18=$m;
      var $mul11=($18<<1);
      var $cmp12=(($17)|(0)) <= (($mul11)|(0));
      if ($cmp12) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $19=$area;
      var $20=$i;
      var $conv15=(($20)|(0));
      var $div16=($19)/($conv15);
      $area=$div16;
      label = 11; break;
    case 11: 
      var $21=$i;
      var $inc18=((($21)+(1))|0);
      $i=$inc18;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $22=$area;
      return $22;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_area_nd"] = _sphere_unit_area_nd;
function _sphere_imp_contains_point_3d($r, $pc, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $pc_addr;
      var $p_addr;
      $r_addr=$r;
      $pc_addr=$pc;
      $p_addr=$p;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$pc_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$pc_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$p_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$pc_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $add8=($add)+($14);
      var $15=$r_addr;
      var $16=$r_addr;
      var $mul=($15)*($16);
      var $cmp=$add8 <= $mul;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=1;
      label = 5; break;
    case 4: 
      $retval=0;
      label = 5; break;
    case 5: 
      var $17=$retval;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_contains_point_3d"] = _sphere_imp_contains_point_3d;
function _sphere_imp_gridlines_3d($line_max, $nlat, $nlong, $line_num, $line) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $line_max_addr;
      var $nlat_addr;
      var $nlong_addr;
      var $line_num_addr;
      var $line_addr;
      var $i;
      var $j;
      var $next;
      var $newcol;
      var $old;
      var $value;
      $line_max_addr=$line_max;
      $nlat_addr=$nlat;
      $nlong_addr=$nlong;
      $line_num_addr=$line_num;
      $line_addr=$line;
      $value=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$nlong_addr;
      var $sub=((($1)-(1))|0);
      var $cmp=(($0)|(0)) <= (($sub)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      $old=1;
      var $2=$j;
      var $add=((($2)+(2))|0);
      $next=$add;
      var $3=$value;
      var $4=$line_max_addr;
      var $cmp1=(($3)|(0)) < (($4)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$old;
      var $6=$value;
      var $mul=($6<<1);
      var $add2=(($mul)|0);
      var $7=$line_addr;
      var $arrayidx=(($7+($add2<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$5;
      var $8=$next;
      var $9=$value;
      var $mul3=($9<<1);
      var $add4=((($mul3)+(1))|0);
      var $10=$line_addr;
      var $arrayidx5=(($10+($add4<<2))|0);
      HEAP32[(($arrayidx5)>>2)]=$8;
      var $11=$value;
      var $add6=((($11)+(1))|0);
      $value=$add6;
      label = 6; break;
    case 6: 
      $i=1;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $13=$nlat_addr;
      var $sub8=((($13)-(1))|0);
      var $cmp9=(($12)|(0)) <= (($sub8)|(0));
      if ($cmp9) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $14=$next;
      $old=$14;
      var $15=$old;
      var $16=$nlong_addr;
      var $add11=((($15)+($16))|0);
      $next=$add11;
      var $17=$value;
      var $18=$line_max_addr;
      var $cmp12=(($17)|(0)) < (($18)|(0));
      if ($cmp12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $19=$old;
      var $20=$value;
      var $mul14=($20<<1);
      var $add15=(($mul14)|0);
      var $21=$line_addr;
      var $arrayidx16=(($21+($add15<<2))|0);
      HEAP32[(($arrayidx16)>>2)]=$19;
      var $22=$next;
      var $23=$value;
      var $mul17=($23<<1);
      var $add18=((($mul17)+(1))|0);
      var $24=$line_addr;
      var $arrayidx19=(($24+($add18<<2))|0);
      HEAP32[(($arrayidx19)>>2)]=$22;
      var $25=$value;
      var $add20=((($25)+(1))|0);
      $value=$add20;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 12: 
      var $27=$next;
      $old=$27;
      var $28=$value;
      var $29=$line_max_addr;
      var $cmp22=(($28)|(0)) < (($29)|(0));
      if ($cmp22) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $30=$old;
      var $31=$value;
      var $mul24=($31<<1);
      var $add25=(($mul24)|0);
      var $32=$line_addr;
      var $arrayidx26=(($32+($add25<<2))|0);
      HEAP32[(($arrayidx26)>>2)]=$30;
      var $33=$nlat_addr;
      var $34=$nlong_addr;
      var $mul27=(Math.imul($33,$34)|0);
      var $add28=((($mul27)+(1))|0);
      var $add29=((($add28)+(1))|0);
      var $35=$value;
      var $mul30=($35<<1);
      var $add31=((($mul30)+(1))|0);
      var $36=$line_addr;
      var $arrayidx32=(($36+($add31<<2))|0);
      HEAP32[(($arrayidx32)>>2)]=$add29;
      var $37=$value;
      var $add33=((($37)+(1))|0);
      $value=$add33;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $38=$j;
      var $inc36=((($38)+(1))|0);
      $j=$inc36;
      label = 3; break;
    case 16: 
      $i=1;
      label = 17; break;
    case 17: 
      var $39=$i;
      var $40=$nlat_addr;
      var $cmp39=(($39)|(0)) <= (($40)|(0));
      if ($cmp39) { label = 18; break; } else { label = 28; break; }
    case 18: 
      var $41=$i;
      var $sub41=((($41)-(1))|0);
      var $42=$nlong_addr;
      var $mul42=(Math.imul($sub41,$42)|0);
      var $add43=((($mul42)+(1))|0);
      var $add44=((($add43)+(1))|0);
      $next=$add44;
      $j=0;
      label = 19; break;
    case 19: 
      var $43=$j;
      var $44=$nlong_addr;
      var $sub46=((($44)-(2))|0);
      var $cmp47=(($43)|(0)) <= (($sub46)|(0));
      if ($cmp47) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $45=$next;
      $old=$45;
      var $46=$old;
      var $add49=((($46)+(1))|0);
      $next=$add49;
      var $47=$value;
      var $48=$line_max_addr;
      var $cmp50=(($47)|(0)) < (($48)|(0));
      if ($cmp50) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $49=$old;
      var $50=$value;
      var $mul52=($50<<1);
      var $add53=(($mul52)|0);
      var $51=$line_addr;
      var $arrayidx54=(($51+($add53<<2))|0);
      HEAP32[(($arrayidx54)>>2)]=$49;
      var $52=$next;
      var $53=$value;
      var $mul55=($53<<1);
      var $add56=((($mul55)+(1))|0);
      var $54=$line_addr;
      var $arrayidx57=(($54+($add56<<2))|0);
      HEAP32[(($arrayidx57)>>2)]=$52;
      var $55=$value;
      var $add58=((($55)+(1))|0);
      $value=$add58;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $56=$j;
      var $inc61=((($56)+(1))|0);
      $j=$inc61;
      label = 19; break;
    case 24: 
      var $57=$next;
      $old=$57;
      var $58=$i;
      var $sub63=((($58)-(1))|0);
      var $59=$nlong_addr;
      var $mul64=(Math.imul($sub63,$59)|0);
      var $add65=((($mul64)+(1))|0);
      var $add66=((($add65)+(1))|0);
      $next=$add66;
      var $60=$value;
      var $61=$line_max_addr;
      var $cmp67=(($60)|(0)) < (($61)|(0));
      if ($cmp67) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $62=$old;
      var $63=$value;
      var $mul69=($63<<1);
      var $add70=(($mul69)|0);
      var $64=$line_addr;
      var $arrayidx71=(($64+($add70<<2))|0);
      HEAP32[(($arrayidx71)>>2)]=$62;
      var $65=$next;
      var $66=$value;
      var $mul72=($66<<1);
      var $add73=((($mul72)+(1))|0);
      var $67=$line_addr;
      var $arrayidx74=(($67+($add73<<2))|0);
      HEAP32[(($arrayidx74)>>2)]=$65;
      var $68=$value;
      var $add75=((($68)+(1))|0);
      $value=$add75;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $69=$i;
      var $inc78=((($69)+(1))|0);
      $i=$inc78;
      label = 17; break;
    case 28: 
      $j=0;
      label = 29; break;
    case 29: 
      var $70=$j;
      var $71=$nlong_addr;
      var $sub81=((($71)-(1))|0);
      var $cmp82=(($70)|(0)) <= (($sub81)|(0));
      if ($cmp82) { label = 30; break; } else { label = 40; break; }
    case 30: 
      $old=1;
      var $72=$j;
      var $add84=((($72)+(2))|0);
      $next=$add84;
      var $73=$j;
      $newcol=$73;
      $i=1;
      label = 31; break;
    case 31: 
      var $74=$i;
      var $75=$nlat_addr;
      var $sub86=((($75)-(1))|0);
      var $cmp87=(($74)|(0)) <= (($sub86)|(0));
      if ($cmp87) { label = 32; break; } else { label = 38; break; }
    case 32: 
      var $76=$next;
      $old=$76;
      var $77=$old;
      var $78=$nlong_addr;
      var $add89=((($77)+($78))|0);
      var $add90=((($add89)+(1))|0);
      $next=$add90;
      var $79=$newcol;
      var $add91=((($79)+(1))|0);
      $newcol=$add91;
      var $80=$nlong_addr;
      var $sub92=((($80)-(1))|0);
      var $81=$newcol;
      var $cmp93=(($sub92)|(0)) < (($81)|(0));
      if ($cmp93) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $newcol=0;
      var $82=$next;
      var $83=$nlong_addr;
      var $sub95=((($82)-($83))|0);
      $next=$sub95;
      label = 34; break;
    case 34: 
      var $84=$value;
      var $85=$line_max_addr;
      var $cmp97=(($84)|(0)) < (($85)|(0));
      if ($cmp97) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $86=$old;
      var $87=$value;
      var $mul99=($87<<1);
      var $add100=(($mul99)|0);
      var $88=$line_addr;
      var $arrayidx101=(($88+($add100<<2))|0);
      HEAP32[(($arrayidx101)>>2)]=$86;
      var $89=$next;
      var $90=$value;
      var $mul102=($90<<1);
      var $add103=((($mul102)+(1))|0);
      var $91=$line_addr;
      var $arrayidx104=(($91+($add103<<2))|0);
      HEAP32[(($arrayidx104)>>2)]=$89;
      var $92=$value;
      var $add105=((($92)+(1))|0);
      $value=$add105;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $93=$i;
      var $inc108=((($93)+(1))|0);
      $i=$inc108;
      label = 31; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $94=$j;
      var $inc111=((($94)+(1))|0);
      $j=$inc111;
      label = 29; break;
    case 40: 
      var $95=$value;
      var $96=$line_num_addr;
      HEAP32[(($96)>>2)]=$95;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_gridlines_3d"] = _sphere_imp_gridlines_3d;
function _sphere_imp_gridpoints_3d($r, $pc, $maxpoint, $nlat, $nlong, $point_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $maxpoint_addr;
      var $nlat_addr;
      var $nlong_addr;
      var $point_num_addr;
      var $p_addr;
      var $i;
      var $j;
      var $phi;
      var $pi;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $maxpoint_addr=$maxpoint;
      $nlat_addr=$nlat;
      $nlong_addr=$nlong;
      $point_num_addr=$point_num;
      $p_addr=$p;
      $pi=3.141592653589793;
      var $0=$point_num_addr;
      HEAP32[(($0)>>2)]=0;
      $theta=0;
      $phi=0;
      var $1=$point_num_addr;
      var $2=HEAP32[(($1)>>2)];
      var $3=$maxpoint_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$r_addr;
      var $5=$pc_addr;
      var $6=$theta;
      var $7=$phi;
      var $8=$p_addr;
      var $9=$point_num_addr;
      var $10=HEAP32[(($9)>>2)];
      var $mul=((($10)*(3))&-1);
      var $add_ptr=(($8+($mul<<3))|0);
      _sphere_imp_local2xyz_3d($4, $5, $6, $7, $add_ptr);
      var $11=$point_num_addr;
      var $12=HEAP32[(($11)>>2)];
      var $add=((($12)+(1))|0);
      var $13=$point_num_addr;
      HEAP32[(($13)>>2)]=$add;
      label = 4; break;
    case 4: 
      $i=1;
      label = 5; break;
    case 5: 
      var $14=$i;
      var $15=$nlat_addr;
      var $cmp1=(($14)|(0)) <= (($15)|(0));
      if ($cmp1) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $16=$pi;
      var $17=$i;
      var $conv=(($17)|(0));
      var $mul2=($16)*($conv);
      var $18=$nlat_addr;
      var $add3=((($18)+(1))|0);
      var $conv4=(($add3)|(0));
      var $div=($mul2)/($conv4);
      $phi=$div;
      $j=0;
      label = 7; break;
    case 7: 
      var $19=$j;
      var $20=$nlong_addr;
      var $cmp6=(($19)|(0)) < (($20)|(0));
      if ($cmp6) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $21=$pi;
      var $mul9=($21)*(2);
      var $22=$j;
      var $conv10=(($22)|(0));
      var $mul11=($mul9)*($conv10);
      var $23=$nlong_addr;
      var $conv12=(($23)|(0));
      var $div13=($mul11)/($conv12);
      $theta=$div13;
      var $24=$point_num_addr;
      var $25=HEAP32[(($24)>>2)];
      var $26=$maxpoint_addr;
      var $cmp14=(($25)|(0)) <= (($26)|(0));
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$r_addr;
      var $28=$pc_addr;
      var $29=$theta;
      var $30=$phi;
      var $31=$p_addr;
      var $32=$point_num_addr;
      var $33=HEAP32[(($32)>>2)];
      var $mul17=((($33)*(3))&-1);
      var $add_ptr18=(($31+($mul17<<3))|0);
      _sphere_imp_local2xyz_3d($27, $28, $29, $30, $add_ptr18);
      var $34=$point_num_addr;
      var $35=HEAP32[(($34)>>2)];
      var $add19=((($35)+(1))|0);
      var $36=$point_num_addr;
      HEAP32[(($36)>>2)]=$add19;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $37=$j;
      var $inc=((($37)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $38=$i;
      var $inc22=((($38)+(1))|0);
      $i=$inc22;
      label = 5; break;
    case 14: 
      $theta=0;
      var $39=$pi;
      $phi=$39;
      var $40=$point_num_addr;
      var $41=HEAP32[(($40)>>2)];
      var $42=$maxpoint_addr;
      var $cmp24=(($41)|(0)) < (($42)|(0));
      if ($cmp24) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $43=$r_addr;
      var $44=$pc_addr;
      var $45=$theta;
      var $46=$phi;
      var $47=$p_addr;
      var $48=$point_num_addr;
      var $49=HEAP32[(($48)>>2)];
      var $mul27=((($49)*(3))&-1);
      var $add_ptr28=(($47+($mul27<<3))|0);
      _sphere_imp_local2xyz_3d($43, $44, $45, $46, $add_ptr28);
      var $50=$point_num_addr;
      var $51=HEAP32[(($50)>>2)];
      var $add29=((($51)+(1))|0);
      var $52=$point_num_addr;
      HEAP32[(($52)>>2)]=$add29;
      label = 16; break;
    case 16: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_gridpoints_3d"] = _sphere_imp_gridpoints_3d;
function _sphere_imp_local2xyz_3d($r, $pc, $theta, $phi, $p) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $theta_addr;
  var $phi_addr;
  var $p_addr;
  $r_addr=$r;
  $pc_addr=$pc;
  $theta_addr=$theta;
  $phi_addr=$phi;
  $p_addr=$p;
  var $0=$pc_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$r_addr;
  var $3=$phi_addr;
  var $call=Math.sin($3);
  var $mul=($2)*($call);
  var $4=$theta_addr;
  var $call1=Math.cos($4);
  var $mul2=($mul)*($call1);
  var $add=($1)+($mul2);
  var $5=$p_addr;
  var $arrayidx3=(($5)|0);
  HEAPF64[(($arrayidx3)>>3)]=$add;
  var $6=$pc_addr;
  var $arrayidx4=(($6+8)|0);
  var $7=HEAPF64[(($arrayidx4)>>3)];
  var $8=$r_addr;
  var $9=$phi_addr;
  var $call5=Math.sin($9);
  var $mul6=($8)*($call5);
  var $10=$theta_addr;
  var $call7=Math.sin($10);
  var $mul8=($mul6)*($call7);
  var $add9=($7)+($mul8);
  var $11=$p_addr;
  var $arrayidx10=(($11+8)|0);
  HEAPF64[(($arrayidx10)>>3)]=$add9;
  var $12=$pc_addr;
  var $arrayidx11=(($12+16)|0);
  var $13=HEAPF64[(($arrayidx11)>>3)];
  var $14=$r_addr;
  var $15=$phi_addr;
  var $call12=Math.cos($15);
  var $mul13=($14)*($call12);
  var $add14=($13)+($mul13);
  var $16=$p_addr;
  var $arrayidx15=(($16+16)|0);
  HEAPF64[(($arrayidx15)>>3)]=$add14;
  return;
}
Module["_sphere_imp_local2xyz_3d"] = _sphere_imp_local2xyz_3d;
function _sphere_imp_gridpoints_icos1($factor, $node_num, $node_xyz) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $factor_addr;
      var $node_num_addr;
      var $node_xyz_addr;
      var $a;
      var $b;
      var $c;
      var $dim;
      var $dim_num;
      var $edge;
      var $edge_num=__stackBase__;
      var $edge_point;
      var $f;
      var $f1;
      var $f2;
      var $face;
      var $face_num=(__stackBase__)+(8);
      var $face_order;
      var $face_point;
      var $face_order_max=(__stackBase__)+(16);
      var $node;
      var $node_norm;
      var $point;
      var $point_coord;
      var $point_num=(__stackBase__)+(24);
      $factor_addr=$factor;
      $node_num_addr=$node_num;
      $node_xyz_addr=$node_xyz;
      $dim_num=3;
      _icos_size($point_num, $edge_num, $face_num, $face_order_max);
      var $0=$dim_num;
      var $1=HEAP32[(($point_num)>>2)];
      var $mul=(Math.imul($0,$1)|0);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $2=$call;
      $point_coord=$2;
      var $3=HEAP32[(($edge_num)>>2)];
      var $mul2=($3<<1);
      var $mul3=($mul2<<2);
      var $call4=_malloc($mul3);
      var $4=$call4;
      $edge_point=$4;
      var $5=HEAP32[(($face_num)>>2)];
      var $mul5=($5<<2);
      var $call6=_malloc($mul5);
      var $6=$call6;
      $face_order=$6;
      var $7=HEAP32[(($face_order_max)>>2)];
      var $8=HEAP32[(($face_num)>>2)];
      var $mul7=(Math.imul($7,$8)|0);
      var $mul8=($mul7<<2);
      var $call9=_malloc($mul8);
      var $9=$call9;
      $face_point=$9;
      var $10=HEAP32[(($point_num)>>2)];
      var $11=HEAP32[(($edge_num)>>2)];
      var $12=HEAP32[(($face_num)>>2)];
      var $13=HEAP32[(($face_order_max)>>2)];
      var $14=$point_coord;
      var $15=$edge_point;
      var $16=$face_order;
      var $17=$face_point;
      _icos_shape($10, $11, $12, $13, $14, $15, $16, $17);
      $node=0;
      $point=0;
      label = 3; break;
    case 3: 
      var $18=$point;
      var $19=HEAP32[(($point_num)>>2)];
      var $cmp=(($18)|(0)) < (($19)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $dim=0;
      label = 5; break;
    case 5: 
      var $20=$dim;
      var $21=$dim_num;
      var $cmp11=(($20)|(0)) < (($21)|(0));
      if ($cmp11) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $22=$dim;
      var $23=$point;
      var $24=$dim_num;
      var $mul13=(Math.imul($23,$24)|0);
      var $add=((($22)+($mul13))|0);
      var $25=$point_coord;
      var $arrayidx=(($25+($add<<3))|0);
      var $26=HEAPF64[(($arrayidx)>>3)];
      var $27=$dim;
      var $28=$node;
      var $29=$dim_num;
      var $mul14=(Math.imul($28,$29)|0);
      var $add15=((($27)+($mul14))|0);
      var $30=$node_xyz_addr;
      var $arrayidx16=(($30+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$26;
      label = 7; break;
    case 7: 
      var $31=$dim;
      var $inc=((($31)+(1))|0);
      $dim=$inc;
      label = 5; break;
    case 8: 
      var $32=$node;
      var $add17=((($32)+(1))|0);
      $node=$add17;
      label = 9; break;
    case 9: 
      var $33=$point;
      var $inc19=((($33)+(1))|0);
      $point=$inc19;
      label = 3; break;
    case 10: 
      $edge=0;
      label = 11; break;
    case 11: 
      var $34=$edge;
      var $35=HEAP32[(($edge_num)>>2)];
      var $cmp22=(($34)|(0)) < (($35)|(0));
      if ($cmp22) { label = 12; break; } else { label = 30; break; }
    case 12: 
      var $36=$edge;
      var $mul24=($36<<1);
      var $add25=(($mul24)|0);
      var $37=$edge_point;
      var $arrayidx26=(($37+($add25<<2))|0);
      var $38=HEAP32[(($arrayidx26)>>2)];
      var $sub=((($38)-(1))|0);
      $a=$sub;
      var $39=$edge;
      var $mul27=($39<<1);
      var $add28=((($mul27)+(1))|0);
      var $40=$edge_point;
      var $arrayidx29=(($40+($add28<<2))|0);
      var $41=HEAP32[(($arrayidx29)>>2)];
      var $sub30=((($41)-(1))|0);
      $b=$sub30;
      $f=1;
      label = 13; break;
    case 13: 
      var $42=$f;
      var $43=$factor_addr;
      var $cmp32=(($42)|(0)) < (($43)|(0));
      if ($cmp32) { label = 14; break; } else { label = 28; break; }
    case 14: 
      $dim=0;
      label = 15; break;
    case 15: 
      var $44=$dim;
      var $45=$dim_num;
      var $cmp35=(($44)|(0)) < (($45)|(0));
      if ($cmp35) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $46=$factor_addr;
      var $47=$f;
      var $sub37=((($46)-($47))|0);
      var $conv=(($sub37)|(0));
      var $48=$dim;
      var $49=$a;
      var $50=$dim_num;
      var $mul38=(Math.imul($49,$50)|0);
      var $add39=((($48)+($mul38))|0);
      var $51=$point_coord;
      var $arrayidx40=(($51+($add39<<3))|0);
      var $52=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($conv)*($52);
      var $53=$f;
      var $conv42=(($53)|(0));
      var $54=$dim;
      var $55=$b;
      var $56=$dim_num;
      var $mul43=(Math.imul($55,$56)|0);
      var $add44=((($54)+($mul43))|0);
      var $57=$point_coord;
      var $arrayidx45=(($57+($add44<<3))|0);
      var $58=HEAPF64[(($arrayidx45)>>3)];
      var $mul46=($conv42)*($58);
      var $add47=($mul41)+($mul46);
      var $59=$factor_addr;
      var $conv48=(($59)|(0));
      var $div=($add47)/($conv48);
      var $60=$dim;
      var $61=$node;
      var $62=$dim_num;
      var $mul49=(Math.imul($61,$62)|0);
      var $add50=((($60)+($mul49))|0);
      var $63=$node_xyz_addr;
      var $arrayidx51=(($63+($add50<<3))|0);
      HEAPF64[(($arrayidx51)>>3)]=$div;
      label = 17; break;
    case 17: 
      var $64=$dim;
      var $inc53=((($64)+(1))|0);
      $dim=$inc53;
      label = 15; break;
    case 18: 
      $node_norm=0;
      $dim=0;
      label = 19; break;
    case 19: 
      var $65=$dim;
      var $66=$dim_num;
      var $cmp56=(($65)|(0)) < (($66)|(0));
      if ($cmp56) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $67=$node_norm;
      var $68=$dim;
      var $69=$node;
      var $70=$dim_num;
      var $mul59=(Math.imul($69,$70)|0);
      var $add60=((($68)+($mul59))|0);
      var $71=$node_xyz_addr;
      var $arrayidx61=(($71+($add60<<3))|0);
      var $72=HEAPF64[(($arrayidx61)>>3)];
      var $73=Math.pow($72, 2);
      var $add62=($67)+($73);
      $node_norm=$add62;
      label = 21; break;
    case 21: 
      var $74=$dim;
      var $inc64=((($74)+(1))|0);
      $dim=$inc64;
      label = 19; break;
    case 22: 
      var $75=$node_norm;
      var $call66=Math.sqrt($75);
      $node_norm=$call66;
      $dim=0;
      label = 23; break;
    case 23: 
      var $76=$dim;
      var $77=$dim_num;
      var $cmp68=(($76)|(0)) < (($77)|(0));
      if ($cmp68) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $78=$dim;
      var $79=$node;
      var $80=$dim_num;
      var $mul71=(Math.imul($79,$80)|0);
      var $add72=((($78)+($mul71))|0);
      var $81=$node_xyz_addr;
      var $arrayidx73=(($81+($add72<<3))|0);
      var $82=HEAPF64[(($arrayidx73)>>3)];
      var $83=$node_norm;
      var $div74=($82)/($83);
      var $84=$dim;
      var $85=$node;
      var $86=$dim_num;
      var $mul75=(Math.imul($85,$86)|0);
      var $add76=((($84)+($mul75))|0);
      var $87=$node_xyz_addr;
      var $arrayidx77=(($87+($add76<<3))|0);
      HEAPF64[(($arrayidx77)>>3)]=$div74;
      label = 25; break;
    case 25: 
      var $88=$dim;
      var $inc79=((($88)+(1))|0);
      $dim=$inc79;
      label = 23; break;
    case 26: 
      var $89=$node;
      var $add81=((($89)+(1))|0);
      $node=$add81;
      label = 27; break;
    case 27: 
      var $90=$f;
      var $inc83=((($90)+(1))|0);
      $f=$inc83;
      label = 13; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $91=$edge;
      var $inc86=((($91)+(1))|0);
      $edge=$inc86;
      label = 11; break;
    case 30: 
      $face=0;
      label = 31; break;
    case 31: 
      var $92=$face;
      var $93=HEAP32[(($face_num)>>2)];
      var $cmp89=(($92)|(0)) < (($93)|(0));
      if ($cmp89) { label = 32; break; } else { label = 54; break; }
    case 32: 
      var $94=$face;
      var $mul92=((($94)*(3))&-1);
      var $add93=(($mul92)|0);
      var $95=$face_point;
      var $arrayidx94=(($95+($add93<<2))|0);
      var $96=HEAP32[(($arrayidx94)>>2)];
      var $sub95=((($96)-(1))|0);
      $a=$sub95;
      var $97=$face;
      var $mul96=((($97)*(3))&-1);
      var $add97=((($mul96)+(1))|0);
      var $98=$face_point;
      var $arrayidx98=(($98+($add97<<2))|0);
      var $99=HEAP32[(($arrayidx98)>>2)];
      var $sub99=((($99)-(1))|0);
      $b=$sub99;
      var $100=$face;
      var $mul100=((($100)*(3))&-1);
      var $add101=((($mul100)+(2))|0);
      var $101=$face_point;
      var $arrayidx102=(($101+($add101<<2))|0);
      var $102=HEAP32[(($arrayidx102)>>2)];
      var $sub103=((($102)-(1))|0);
      $c=$sub103;
      $f1=1;
      label = 33; break;
    case 33: 
      var $103=$f1;
      var $104=$factor_addr;
      var $cmp105=(($103)|(0)) < (($104)|(0));
      if ($cmp105) { label = 34; break; } else { label = 52; break; }
    case 34: 
      $f2=1;
      label = 35; break;
    case 35: 
      var $105=$f2;
      var $106=$factor_addr;
      var $107=$f1;
      var $sub109=((($106)-($107))|0);
      var $cmp110=(($105)|(0)) < (($sub109)|(0));
      if ($cmp110) { label = 36; break; } else { label = 50; break; }
    case 36: 
      $dim=0;
      label = 37; break;
    case 37: 
      var $108=$dim;
      var $109=$dim_num;
      var $cmp114=(($108)|(0)) < (($109)|(0));
      if ($cmp114) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $110=$factor_addr;
      var $111=$f1;
      var $sub117=((($110)-($111))|0);
      var $112=$f2;
      var $sub118=((($sub117)-($112))|0);
      var $conv119=(($sub118)|(0));
      var $113=$dim;
      var $114=$a;
      var $115=$dim_num;
      var $mul120=(Math.imul($114,$115)|0);
      var $add121=((($113)+($mul120))|0);
      var $116=$point_coord;
      var $arrayidx122=(($116+($add121<<3))|0);
      var $117=HEAPF64[(($arrayidx122)>>3)];
      var $mul123=($conv119)*($117);
      var $118=$f1;
      var $conv124=(($118)|(0));
      var $119=$dim;
      var $120=$b;
      var $121=$dim_num;
      var $mul125=(Math.imul($120,$121)|0);
      var $add126=((($119)+($mul125))|0);
      var $122=$point_coord;
      var $arrayidx127=(($122+($add126<<3))|0);
      var $123=HEAPF64[(($arrayidx127)>>3)];
      var $mul128=($conv124)*($123);
      var $add129=($mul123)+($mul128);
      var $124=$f2;
      var $conv130=(($124)|(0));
      var $125=$dim;
      var $126=$c;
      var $127=$dim_num;
      var $mul131=(Math.imul($126,$127)|0);
      var $add132=((($125)+($mul131))|0);
      var $128=$point_coord;
      var $arrayidx133=(($128+($add132<<3))|0);
      var $129=HEAPF64[(($arrayidx133)>>3)];
      var $mul134=($conv130)*($129);
      var $add135=($add129)+($mul134);
      var $130=$factor_addr;
      var $conv136=(($130)|(0));
      var $div137=($add135)/($conv136);
      var $131=$dim;
      var $132=$node;
      var $133=$dim_num;
      var $mul138=(Math.imul($132,$133)|0);
      var $add139=((($131)+($mul138))|0);
      var $134=$node_xyz_addr;
      var $arrayidx140=(($134+($add139<<3))|0);
      HEAPF64[(($arrayidx140)>>3)]=$div137;
      label = 39; break;
    case 39: 
      var $135=$dim;
      var $inc142=((($135)+(1))|0);
      $dim=$inc142;
      label = 37; break;
    case 40: 
      $node_norm=0;
      $dim=0;
      label = 41; break;
    case 41: 
      var $136=$dim;
      var $137=$dim_num;
      var $cmp145=(($136)|(0)) < (($137)|(0));
      if ($cmp145) { label = 42; break; } else { label = 44; break; }
    case 42: 
      var $138=$node_norm;
      var $139=$dim;
      var $140=$node;
      var $141=$dim_num;
      var $mul148=(Math.imul($140,$141)|0);
      var $add149=((($139)+($mul148))|0);
      var $142=$node_xyz_addr;
      var $arrayidx150=(($142+($add149<<3))|0);
      var $143=HEAPF64[(($arrayidx150)>>3)];
      var $144=Math.pow($143, 2);
      var $add151=($138)+($144);
      $node_norm=$add151;
      label = 43; break;
    case 43: 
      var $145=$dim;
      var $inc153=((($145)+(1))|0);
      $dim=$inc153;
      label = 41; break;
    case 44: 
      var $146=$node_norm;
      var $call155=Math.sqrt($146);
      $node_norm=$call155;
      $dim=0;
      label = 45; break;
    case 45: 
      var $147=$dim;
      var $148=$dim_num;
      var $cmp157=(($147)|(0)) < (($148)|(0));
      if ($cmp157) { label = 46; break; } else { label = 48; break; }
    case 46: 
      var $149=$dim;
      var $150=$node;
      var $151=$dim_num;
      var $mul160=(Math.imul($150,$151)|0);
      var $add161=((($149)+($mul160))|0);
      var $152=$node_xyz_addr;
      var $arrayidx162=(($152+($add161<<3))|0);
      var $153=HEAPF64[(($arrayidx162)>>3)];
      var $154=$node_norm;
      var $div163=($153)/($154);
      var $155=$dim;
      var $156=$node;
      var $157=$dim_num;
      var $mul164=(Math.imul($156,$157)|0);
      var $add165=((($155)+($mul164))|0);
      var $158=$node_xyz_addr;
      var $arrayidx166=(($158+($add165<<3))|0);
      HEAPF64[(($arrayidx166)>>3)]=$div163;
      label = 47; break;
    case 47: 
      var $159=$dim;
      var $inc168=((($159)+(1))|0);
      $dim=$inc168;
      label = 45; break;
    case 48: 
      var $160=$node;
      var $add170=((($160)+(1))|0);
      $node=$add170;
      label = 49; break;
    case 49: 
      var $161=$f2;
      var $inc172=((($161)+(1))|0);
      $f2=$inc172;
      label = 35; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $162=$f1;
      var $inc175=((($162)+(1))|0);
      $f1=$inc175;
      label = 33; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $163=$face;
      var $inc178=((($163)+(1))|0);
      $face=$inc178;
      label = 31; break;
    case 54: 
      var $164=$edge_point;
      var $165=$164;
      _free($165);
      var $166=$face_order;
      var $167=$166;
      _free($167);
      var $168=$face_point;
      var $169=$168;
      _free($169);
      var $170=$point_coord;
      var $171=$170;
      _free($171);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_gridpoints_icos1"] = _sphere_imp_gridpoints_icos1;
function _sphere_imp_gridpoints_icos2($factor, $node_num, $node_xyz) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $factor_addr;
      var $node_num_addr;
      var $node_xyz_addr;
      var $a;
      var $a_p=__stackBase__;
      var $a_r=(__stackBase__)+(8);
      var $a_t=(__stackBase__)+(16);
      var $b;
      var $b_p=(__stackBase__)+(24);
      var $b_r=(__stackBase__)+(32);
      var $b_t=(__stackBase__)+(40);
      var $c;
      var $c_p=(__stackBase__)+(48);
      var $c_r=(__stackBase__)+(56);
      var $c_t=(__stackBase__)+(64);
      var $dim;
      var $dim_num;
      var $edge;
      var $edge_num=(__stackBase__)+(72);
      var $edge_point;
      var $f;
      var $f1;
      var $f2;
      var $face;
      var $face_num=(__stackBase__)+(80);
      var $face_order;
      var $face_point;
      var $face_order_max=(__stackBase__)+(88);
      var $node;
      var $p;
      var $point;
      var $point_coord;
      var $point_num=(__stackBase__)+(96);
      var $r8_1;
      var $t;
      $factor_addr=$factor;
      $node_num_addr=$node_num;
      $node_xyz_addr=$node_xyz;
      $dim_num=3;
      $r8_1=1;
      _icos_size($point_num, $edge_num, $face_num, $face_order_max);
      var $0=$dim_num;
      var $1=HEAP32[(($point_num)>>2)];
      var $mul=(Math.imul($0,$1)|0);
      var $mul1=($mul<<3);
      var $call=_malloc($mul1);
      var $2=$call;
      $point_coord=$2;
      var $3=HEAP32[(($edge_num)>>2)];
      var $mul2=($3<<1);
      var $mul3=($mul2<<2);
      var $call4=_malloc($mul3);
      var $4=$call4;
      $edge_point=$4;
      var $5=HEAP32[(($face_num)>>2)];
      var $mul5=($5<<2);
      var $call6=_malloc($mul5);
      var $6=$call6;
      $face_order=$6;
      var $7=HEAP32[(($face_order_max)>>2)];
      var $8=HEAP32[(($face_num)>>2)];
      var $mul7=(Math.imul($7,$8)|0);
      var $mul8=($mul7<<2);
      var $call9=_malloc($mul8);
      var $9=$call9;
      $face_point=$9;
      var $10=HEAP32[(($point_num)>>2)];
      var $11=HEAP32[(($edge_num)>>2)];
      var $12=HEAP32[(($face_num)>>2)];
      var $13=HEAP32[(($face_order_max)>>2)];
      var $14=$point_coord;
      var $15=$edge_point;
      var $16=$face_order;
      var $17=$face_point;
      _icos_shape($10, $11, $12, $13, $14, $15, $16, $17);
      $node=0;
      $point=0;
      label = 3; break;
    case 3: 
      var $18=$point;
      var $19=HEAP32[(($point_num)>>2)];
      var $cmp=(($18)|(0)) < (($19)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $dim=0;
      label = 5; break;
    case 5: 
      var $20=$dim;
      var $21=$dim_num;
      var $cmp11=(($20)|(0)) < (($21)|(0));
      if ($cmp11) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $22=$dim;
      var $23=$point;
      var $24=$dim_num;
      var $mul13=(Math.imul($23,$24)|0);
      var $add=((($22)+($mul13))|0);
      var $25=$point_coord;
      var $arrayidx=(($25+($add<<3))|0);
      var $26=HEAPF64[(($arrayidx)>>3)];
      var $27=$dim;
      var $28=$node;
      var $29=$dim_num;
      var $mul14=(Math.imul($28,$29)|0);
      var $add15=((($27)+($mul14))|0);
      var $30=$node_xyz_addr;
      var $arrayidx16=(($30+($add15<<3))|0);
      HEAPF64[(($arrayidx16)>>3)]=$26;
      label = 7; break;
    case 7: 
      var $31=$dim;
      var $inc=((($31)+(1))|0);
      $dim=$inc;
      label = 5; break;
    case 8: 
      var $32=$node;
      var $add17=((($32)+(1))|0);
      $node=$add17;
      label = 9; break;
    case 9: 
      var $33=$point;
      var $inc19=((($33)+(1))|0);
      $point=$inc19;
      label = 3; break;
    case 10: 
      $edge=0;
      label = 11; break;
    case 11: 
      var $34=$edge;
      var $35=HEAP32[(($edge_num)>>2)];
      var $cmp22=(($34)|(0)) < (($35)|(0));
      if ($cmp22) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $36=$edge;
      var $mul24=($36<<1);
      var $add25=(($mul24)|0);
      var $37=$edge_point;
      var $arrayidx26=(($37+($add25<<2))|0);
      var $38=HEAP32[(($arrayidx26)>>2)];
      var $sub=((($38)-(1))|0);
      $a=$sub;
      var $39=$point_coord;
      var $40=$a;
      var $mul27=((($40)*(3))&-1);
      var $add_ptr=(($39+($mul27<<3))|0);
      _xyz_to_rtp($add_ptr, $a_r, $a_t, $a_p);
      var $41=$edge;
      var $mul28=($41<<1);
      var $add29=((($mul28)+(1))|0);
      var $42=$edge_point;
      var $arrayidx30=(($42+($add29<<2))|0);
      var $43=HEAP32[(($arrayidx30)>>2)];
      var $sub31=((($43)-(1))|0);
      $b=$sub31;
      var $44=$point_coord;
      var $45=$b;
      var $mul32=((($45)*(3))&-1);
      var $add_ptr33=(($44+($mul32<<3))|0);
      _xyz_to_rtp($add_ptr33, $b_r, $b_t, $b_p);
      _theta2_adjust($a_t, $b_t);
      $f=1;
      label = 13; break;
    case 13: 
      var $46=$f;
      var $47=$factor_addr;
      var $cmp35=(($46)|(0)) < (($47)|(0));
      if ($cmp35) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $48=$factor_addr;
      var $49=$f;
      var $sub37=((($48)-($49))|0);
      var $conv=(($sub37)|(0));
      var $50=HEAPF64[(($a_t)>>3)];
      var $mul38=($conv)*($50);
      var $51=$f;
      var $conv39=(($51)|(0));
      var $52=HEAPF64[(($b_t)>>3)];
      var $mul40=($conv39)*($52);
      var $add41=($mul38)+($mul40);
      var $53=$factor_addr;
      var $conv42=(($53)|(0));
      var $div=($add41)/($conv42);
      $t=$div;
      var $54=$factor_addr;
      var $55=$f;
      var $sub43=((($54)-($55))|0);
      var $conv44=(($sub43)|(0));
      var $56=HEAPF64[(($a_p)>>3)];
      var $mul45=($conv44)*($56);
      var $57=$f;
      var $conv46=(($57)|(0));
      var $58=HEAPF64[(($b_p)>>3)];
      var $mul47=($conv46)*($58);
      var $add48=($mul45)+($mul47);
      var $59=$factor_addr;
      var $conv49=(($59)|(0));
      var $div50=($add48)/($conv49);
      $p=$div50;
      var $60=$r8_1;
      var $61=$t;
      var $62=$p;
      var $63=$node_xyz_addr;
      var $64=$node;
      var $mul51=((($64)*(3))&-1);
      var $add_ptr52=(($63+($mul51<<3))|0);
      _rtp_to_xyz($60, $61, $62, $add_ptr52);
      var $65=$node;
      var $add53=((($65)+(1))|0);
      $node=$add53;
      label = 15; break;
    case 15: 
      var $66=$f;
      var $inc55=((($66)+(1))|0);
      $f=$inc55;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $67=$edge;
      var $inc58=((($67)+(1))|0);
      $edge=$inc58;
      label = 11; break;
    case 18: 
      $face=0;
      label = 19; break;
    case 19: 
      var $68=$face;
      var $69=HEAP32[(($face_num)>>2)];
      var $cmp61=(($68)|(0)) < (($69)|(0));
      if ($cmp61) { label = 20; break; } else { label = 30; break; }
    case 20: 
      var $70=$face;
      var $mul64=((($70)*(3))&-1);
      var $add65=(($mul64)|0);
      var $71=$face_point;
      var $arrayidx66=(($71+($add65<<2))|0);
      var $72=HEAP32[(($arrayidx66)>>2)];
      var $sub67=((($72)-(1))|0);
      $a=$sub67;
      var $73=$point_coord;
      var $74=$a;
      var $mul68=((($74)*(3))&-1);
      var $add_ptr69=(($73+($mul68<<3))|0);
      _xyz_to_rtp($add_ptr69, $a_r, $a_t, $a_p);
      var $75=$face;
      var $mul70=((($75)*(3))&-1);
      var $add71=((($mul70)+(1))|0);
      var $76=$face_point;
      var $arrayidx72=(($76+($add71<<2))|0);
      var $77=HEAP32[(($arrayidx72)>>2)];
      var $sub73=((($77)-(1))|0);
      $b=$sub73;
      var $78=$point_coord;
      var $79=$b;
      var $mul74=((($79)*(3))&-1);
      var $add_ptr75=(($78+($mul74<<3))|0);
      _xyz_to_rtp($add_ptr75, $b_r, $b_t, $b_p);
      var $80=$face;
      var $mul76=((($80)*(3))&-1);
      var $add77=((($mul76)+(2))|0);
      var $81=$face_point;
      var $arrayidx78=(($81+($add77<<2))|0);
      var $82=HEAP32[(($arrayidx78)>>2)];
      var $sub79=((($82)-(1))|0);
      $c=$sub79;
      var $83=$point_coord;
      var $84=$c;
      var $mul80=((($84)*(3))&-1);
      var $add_ptr81=(($83+($mul80<<3))|0);
      _xyz_to_rtp($add_ptr81, $c_r, $c_t, $c_p);
      _theta3_adjust($a_t, $b_t, $c_t);
      $f1=1;
      label = 21; break;
    case 21: 
      var $85=$f1;
      var $86=$factor_addr;
      var $cmp83=(($85)|(0)) < (($86)|(0));
      if ($cmp83) { label = 22; break; } else { label = 28; break; }
    case 22: 
      $f2=1;
      label = 23; break;
    case 23: 
      var $87=$f2;
      var $88=$factor_addr;
      var $89=$f1;
      var $sub87=((($88)-($89))|0);
      var $cmp88=(($87)|(0)) < (($sub87)|(0));
      if ($cmp88) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $90=$factor_addr;
      var $91=$f1;
      var $sub91=((($90)-($91))|0);
      var $92=$f2;
      var $sub92=((($sub91)-($92))|0);
      var $conv93=(($sub92)|(0));
      var $93=HEAPF64[(($a_t)>>3)];
      var $mul94=($conv93)*($93);
      var $94=$f1;
      var $conv95=(($94)|(0));
      var $95=HEAPF64[(($b_t)>>3)];
      var $mul96=($conv95)*($95);
      var $add97=($mul94)+($mul96);
      var $96=$f2;
      var $conv98=(($96)|(0));
      var $97=HEAPF64[(($c_t)>>3)];
      var $mul99=($conv98)*($97);
      var $add100=($add97)+($mul99);
      var $98=$factor_addr;
      var $conv101=(($98)|(0));
      var $div102=($add100)/($conv101);
      $t=$div102;
      var $99=$factor_addr;
      var $100=$f1;
      var $sub103=((($99)-($100))|0);
      var $101=$f2;
      var $sub104=((($sub103)-($101))|0);
      var $conv105=(($sub104)|(0));
      var $102=HEAPF64[(($a_p)>>3)];
      var $mul106=($conv105)*($102);
      var $103=$f1;
      var $conv107=(($103)|(0));
      var $104=HEAPF64[(($b_p)>>3)];
      var $mul108=($conv107)*($104);
      var $add109=($mul106)+($mul108);
      var $105=$f2;
      var $conv110=(($105)|(0));
      var $106=HEAPF64[(($c_p)>>3)];
      var $mul111=($conv110)*($106);
      var $add112=($add109)+($mul111);
      var $107=$factor_addr;
      var $conv113=(($107)|(0));
      var $div114=($add112)/($conv113);
      $p=$div114;
      var $108=$r8_1;
      var $109=$t;
      var $110=$p;
      var $111=$node_xyz_addr;
      var $112=$node;
      var $mul115=((($112)*(3))&-1);
      var $add_ptr116=(($111+($mul115<<3))|0);
      _rtp_to_xyz($108, $109, $110, $add_ptr116);
      var $113=$node;
      var $add117=((($113)+(1))|0);
      $node=$add117;
      label = 25; break;
    case 25: 
      var $114=$f2;
      var $inc119=((($114)+(1))|0);
      $f2=$inc119;
      label = 23; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $115=$f1;
      var $inc122=((($115)+(1))|0);
      $f1=$inc122;
      label = 21; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $116=$face;
      var $inc125=((($116)+(1))|0);
      $face=$inc125;
      label = 19; break;
    case 30: 
      var $117=$edge_point;
      var $118=$117;
      _free($118);
      var $119=$face_order;
      var $120=$119;
      _free($120);
      var $121=$face_point;
      var $122=$121;
      _free($122);
      var $123=$point_coord;
      var $124=$123;
      _free($124);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_gridpoints_icos2"] = _sphere_imp_gridpoints_icos2;
function _theta2_adjust($theta1, $theta2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $theta1_addr;
      var $theta2_addr;
      var $pi;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $pi=3.141592653589793;
      var $0=$theta1_addr;
      var $1=HEAPF64[(($0)>>3)];
      var $2=$theta2_addr;
      var $3=HEAPF64[(($2)>>3)];
      var $cmp=$1 <= $3;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $4=$theta1_addr;
      var $5=HEAPF64[(($4)>>3)];
      var $6=$pi;
      var $mul=($6)*(2);
      var $add=($5)+($mul);
      var $7=$theta2_addr;
      var $8=HEAPF64[(($7)>>3)];
      var $sub=($add)-($8);
      var $9=$theta2_addr;
      var $10=HEAPF64[(($9)>>3)];
      var $11=$theta1_addr;
      var $12=HEAPF64[(($11)>>3)];
      var $sub1=($10)-($12);
      var $cmp2=$sub < $sub1;
      if ($cmp2) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$theta1_addr;
      var $14=HEAPF64[(($13)>>3)];
      var $15=$pi;
      var $mul4=($15)*(2);
      var $add5=($14)+($mul4);
      var $16=$theta1_addr;
      HEAPF64[(($16)>>3)]=$add5;
      label = 5; break;
    case 5: 
      label = 11; break;
    case 6: 
      var $17=$theta2_addr;
      var $18=HEAPF64[(($17)>>3)];
      var $19=$theta1_addr;
      var $20=HEAPF64[(($19)>>3)];
      var $cmp6=$18 <= $20;
      if ($cmp6) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $21=$theta2_addr;
      var $22=HEAPF64[(($21)>>3)];
      var $23=$pi;
      var $mul8=($23)*(2);
      var $add9=($22)+($mul8);
      var $24=$theta1_addr;
      var $25=HEAPF64[(($24)>>3)];
      var $sub10=($add9)-($25);
      var $26=$theta1_addr;
      var $27=HEAPF64[(($26)>>3)];
      var $28=$theta2_addr;
      var $29=HEAPF64[(($28)>>3)];
      var $sub11=($27)-($29);
      var $cmp12=$sub10 < $sub11;
      if ($cmp12) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$theta2_addr;
      var $31=HEAPF64[(($30)>>3)];
      var $32=$pi;
      var $mul14=($32)*(2);
      var $add15=($31)+($mul14);
      var $33=$theta2_addr;
      HEAPF64[(($33)>>3)]=$add15;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_theta2_adjust"] = _theta2_adjust;
function _theta3_adjust($theta1, $theta2, $theta3) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $theta1_addr;
      var $theta2_addr;
      var $theta3_addr;
      var $pi;
      var $r1;
      var $r2;
      var $r3;
      $theta1_addr=$theta1;
      $theta2_addr=$theta2;
      $theta3_addr=$theta3;
      $pi=3.141592653589793;
      var $0=$theta1_addr;
      var $1=HEAPF64[(($0)>>3)];
      var $2=$theta2_addr;
      var $3=HEAPF64[(($2)>>3)];
      var $cmp=$1 <= $3;
      if ($cmp) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $4=$theta2_addr;
      var $5=HEAPF64[(($4)>>3)];
      var $6=$theta3_addr;
      var $7=HEAPF64[(($6)>>3)];
      var $cmp1=$5 <= $7;
      if ($cmp1) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $8=$theta3_addr;
      var $9=HEAPF64[(($8)>>3)];
      var $10=$theta1_addr;
      var $11=HEAPF64[(($10)>>3)];
      var $sub=($9)-($11);
      $r1=$sub;
      var $12=$theta1_addr;
      var $13=HEAPF64[(($12)>>3)];
      var $14=$pi;
      var $mul=($14)*(2);
      var $add=($13)+($mul);
      var $15=$theta2_addr;
      var $16=HEAPF64[(($15)>>3)];
      var $sub2=($add)-($16);
      $r2=$sub2;
      var $17=$theta2_addr;
      var $18=HEAPF64[(($17)>>3)];
      var $19=$pi;
      var $mul3=($19)*(2);
      var $add4=($18)+($mul3);
      var $20=$theta3_addr;
      var $21=HEAPF64[(($20)>>3)];
      var $sub5=($add4)-($21);
      $r3=$sub5;
      var $22=$r2;
      var $23=$r1;
      var $cmp6=$22 < $23;
      if ($cmp6) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $24=$r2;
      var $25=$r3;
      var $cmp8=$24 < $25;
      if ($cmp8) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$theta1_addr;
      var $27=HEAPF64[(($26)>>3)];
      var $28=$pi;
      var $mul10=($28)*(2);
      var $add11=($27)+($mul10);
      var $29=$theta1_addr;
      HEAPF64[(($29)>>3)]=$add11;
      label = 11; break;
    case 7: 
      var $30=$r3;
      var $31=$r1;
      var $cmp12=$30 < $31;
      if ($cmp12) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $32=$r3;
      var $33=$r2;
      var $cmp14=$32 < $33;
      if ($cmp14) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$theta1_addr;
      var $35=HEAPF64[(($34)>>3)];
      var $36=$pi;
      var $mul16=($36)*(2);
      var $add17=($35)+($mul16);
      var $37=$theta1_addr;
      HEAPF64[(($37)>>3)]=$add17;
      var $38=$theta2_addr;
      var $39=HEAPF64[(($38)>>3)];
      var $40=$pi;
      var $mul18=($40)*(2);
      var $add19=($39)+($mul18);
      var $41=$theta2_addr;
      HEAPF64[(($41)>>3)]=$add19;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 67; break;
    case 12: 
      var $42=$theta1_addr;
      var $43=HEAPF64[(($42)>>3)];
      var $44=$theta3_addr;
      var $45=HEAPF64[(($44)>>3)];
      var $cmp22=$43 <= $45;
      if ($cmp22) { label = 13; break; } else { label = 22; break; }
    case 13: 
      var $46=$theta3_addr;
      var $47=HEAPF64[(($46)>>3)];
      var $48=$theta2_addr;
      var $49=HEAPF64[(($48)>>3)];
      var $cmp24=$47 <= $49;
      if ($cmp24) { label = 14; break; } else { label = 22; break; }
    case 14: 
      var $50=$theta2_addr;
      var $51=HEAPF64[(($50)>>3)];
      var $52=$theta1_addr;
      var $53=HEAPF64[(($52)>>3)];
      var $sub26=($51)-($53);
      $r1=$sub26;
      var $54=$theta1_addr;
      var $55=HEAPF64[(($54)>>3)];
      var $56=$pi;
      var $mul27=($56)*(2);
      var $add28=($55)+($mul27);
      var $57=$theta3_addr;
      var $58=HEAPF64[(($57)>>3)];
      var $sub29=($add28)-($58);
      $r2=$sub29;
      var $59=$theta3_addr;
      var $60=HEAPF64[(($59)>>3)];
      var $61=$pi;
      var $mul30=($61)*(2);
      var $add31=($60)+($mul30);
      var $62=$theta2_addr;
      var $63=HEAPF64[(($62)>>3)];
      var $sub32=($add31)-($63);
      $r3=$sub32;
      var $64=$r2;
      var $65=$r1;
      var $cmp33=$64 < $65;
      if ($cmp33) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $66=$r2;
      var $67=$r3;
      var $cmp35=$66 < $67;
      if ($cmp35) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $68=$theta1_addr;
      var $69=HEAPF64[(($68)>>3)];
      var $70=$pi;
      var $mul37=($70)*(2);
      var $add38=($69)+($mul37);
      var $71=$theta1_addr;
      HEAPF64[(($71)>>3)]=$add38;
      label = 21; break;
    case 17: 
      var $72=$r3;
      var $73=$r1;
      var $cmp40=$72 < $73;
      if ($cmp40) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $74=$r3;
      var $75=$r2;
      var $cmp42=$74 < $75;
      if ($cmp42) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $76=$theta1_addr;
      var $77=HEAPF64[(($76)>>3)];
      var $78=$pi;
      var $mul44=($78)*(2);
      var $add45=($77)+($mul44);
      var $79=$theta1_addr;
      HEAPF64[(($79)>>3)]=$add45;
      var $80=$theta3_addr;
      var $81=HEAPF64[(($80)>>3)];
      var $82=$pi;
      var $mul46=($82)*(2);
      var $add47=($81)+($mul46);
      var $83=$theta3_addr;
      HEAPF64[(($83)>>3)]=$add47;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 66; break;
    case 22: 
      var $84=$theta2_addr;
      var $85=HEAPF64[(($84)>>3)];
      var $86=$theta1_addr;
      var $87=HEAPF64[(($86)>>3)];
      var $cmp51=$85 <= $87;
      if ($cmp51) { label = 23; break; } else { label = 32; break; }
    case 23: 
      var $88=$theta1_addr;
      var $89=HEAPF64[(($88)>>3)];
      var $90=$theta3_addr;
      var $91=HEAPF64[(($90)>>3)];
      var $cmp53=$89 <= $91;
      if ($cmp53) { label = 24; break; } else { label = 32; break; }
    case 24: 
      var $92=$theta3_addr;
      var $93=HEAPF64[(($92)>>3)];
      var $94=$theta2_addr;
      var $95=HEAPF64[(($94)>>3)];
      var $sub55=($93)-($95);
      $r1=$sub55;
      var $96=$theta2_addr;
      var $97=HEAPF64[(($96)>>3)];
      var $98=$pi;
      var $mul56=($98)*(2);
      var $add57=($97)+($mul56);
      var $99=$theta1_addr;
      var $100=HEAPF64[(($99)>>3)];
      var $sub58=($add57)-($100);
      $r2=$sub58;
      var $101=$theta1_addr;
      var $102=HEAPF64[(($101)>>3)];
      var $103=$pi;
      var $mul59=($103)*(2);
      var $add60=($102)+($mul59);
      var $104=$theta3_addr;
      var $105=HEAPF64[(($104)>>3)];
      var $sub61=($add60)-($105);
      $r3=$sub61;
      var $106=$r2;
      var $107=$r1;
      var $cmp62=$106 < $107;
      if ($cmp62) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $108=$r2;
      var $109=$r3;
      var $cmp64=$108 < $109;
      if ($cmp64) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $110=$theta2_addr;
      var $111=HEAPF64[(($110)>>3)];
      var $112=$pi;
      var $mul66=($112)*(2);
      var $add67=($111)+($mul66);
      var $113=$theta2_addr;
      HEAPF64[(($113)>>3)]=$add67;
      label = 31; break;
    case 27: 
      var $114=$r3;
      var $115=$r1;
      var $cmp69=$114 < $115;
      if ($cmp69) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $116=$r3;
      var $117=$r2;
      var $cmp71=$116 < $117;
      if ($cmp71) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $118=$theta2_addr;
      var $119=HEAPF64[(($118)>>3)];
      var $120=$pi;
      var $mul73=($120)*(2);
      var $add74=($119)+($mul73);
      var $121=$theta2_addr;
      HEAPF64[(($121)>>3)]=$add74;
      var $122=$theta1_addr;
      var $123=HEAPF64[(($122)>>3)];
      var $124=$pi;
      var $mul75=($124)*(2);
      var $add76=($123)+($mul75);
      var $125=$theta1_addr;
      HEAPF64[(($125)>>3)]=$add76;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 65; break;
    case 32: 
      var $126=$theta2_addr;
      var $127=HEAPF64[(($126)>>3)];
      var $128=$theta3_addr;
      var $129=HEAPF64[(($128)>>3)];
      var $cmp80=$127 <= $129;
      if ($cmp80) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $130=$theta3_addr;
      var $131=HEAPF64[(($130)>>3)];
      var $132=$theta1_addr;
      var $133=HEAPF64[(($132)>>3)];
      var $cmp82=$131 <= $133;
      if ($cmp82) { label = 34; break; } else { label = 42; break; }
    case 34: 
      var $134=$theta1_addr;
      var $135=HEAPF64[(($134)>>3)];
      var $136=$theta2_addr;
      var $137=HEAPF64[(($136)>>3)];
      var $sub84=($135)-($137);
      $r1=$sub84;
      var $138=$theta2_addr;
      var $139=HEAPF64[(($138)>>3)];
      var $140=$pi;
      var $mul85=($140)*(2);
      var $add86=($139)+($mul85);
      var $141=$theta3_addr;
      var $142=HEAPF64[(($141)>>3)];
      var $sub87=($add86)-($142);
      $r2=$sub87;
      var $143=$theta3_addr;
      var $144=HEAPF64[(($143)>>3)];
      var $145=$pi;
      var $mul88=($145)*(2);
      var $add89=($144)+($mul88);
      var $146=$theta1_addr;
      var $147=HEAPF64[(($146)>>3)];
      var $sub90=($add89)-($147);
      $r3=$sub90;
      var $148=$r2;
      var $149=$r1;
      var $cmp91=$148 < $149;
      if ($cmp91) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $150=$r2;
      var $151=$r3;
      var $cmp93=$150 < $151;
      if ($cmp93) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $152=$theta2_addr;
      var $153=HEAPF64[(($152)>>3)];
      var $154=$pi;
      var $mul95=($154)*(2);
      var $add96=($153)+($mul95);
      var $155=$theta2_addr;
      HEAPF64[(($155)>>3)]=$add96;
      label = 41; break;
    case 37: 
      var $156=$r3;
      var $157=$r1;
      var $cmp98=$156 < $157;
      if ($cmp98) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $158=$r3;
      var $159=$r2;
      var $cmp100=$158 < $159;
      if ($cmp100) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $160=$theta2_addr;
      var $161=HEAPF64[(($160)>>3)];
      var $162=$pi;
      var $mul102=($162)*(2);
      var $add103=($161)+($mul102);
      var $163=$theta2_addr;
      HEAPF64[(($163)>>3)]=$add103;
      var $164=$theta3_addr;
      var $165=HEAPF64[(($164)>>3)];
      var $166=$pi;
      var $mul104=($166)*(2);
      var $add105=($165)+($mul104);
      var $167=$theta3_addr;
      HEAPF64[(($167)>>3)]=$add105;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 64; break;
    case 42: 
      var $168=$theta3_addr;
      var $169=HEAPF64[(($168)>>3)];
      var $170=$theta1_addr;
      var $171=HEAPF64[(($170)>>3)];
      var $cmp109=$169 <= $171;
      if ($cmp109) { label = 43; break; } else { label = 52; break; }
    case 43: 
      var $172=$theta1_addr;
      var $173=HEAPF64[(($172)>>3)];
      var $174=$theta2_addr;
      var $175=HEAPF64[(($174)>>3)];
      var $cmp111=$173 <= $175;
      if ($cmp111) { label = 44; break; } else { label = 52; break; }
    case 44: 
      var $176=$theta2_addr;
      var $177=HEAPF64[(($176)>>3)];
      var $178=$theta3_addr;
      var $179=HEAPF64[(($178)>>3)];
      var $sub113=($177)-($179);
      $r1=$sub113;
      var $180=$theta3_addr;
      var $181=HEAPF64[(($180)>>3)];
      var $182=$pi;
      var $mul114=($182)*(2);
      var $add115=($181)+($mul114);
      var $183=$theta1_addr;
      var $184=HEAPF64[(($183)>>3)];
      var $sub116=($add115)-($184);
      $r2=$sub116;
      var $185=$theta1_addr;
      var $186=HEAPF64[(($185)>>3)];
      var $187=$pi;
      var $mul117=($187)*(2);
      var $add118=($186)+($mul117);
      var $188=$theta2_addr;
      var $189=HEAPF64[(($188)>>3)];
      var $sub119=($add118)-($189);
      $r3=$sub119;
      var $190=$r2;
      var $191=$r1;
      var $cmp120=$190 < $191;
      if ($cmp120) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $192=$r2;
      var $193=$r3;
      var $cmp122=$192 < $193;
      if ($cmp122) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $194=$theta3_addr;
      var $195=HEAPF64[(($194)>>3)];
      var $196=$pi;
      var $mul124=($196)*(2);
      var $add125=($195)+($mul124);
      var $197=$theta3_addr;
      HEAPF64[(($197)>>3)]=$add125;
      label = 51; break;
    case 47: 
      var $198=$r3;
      var $199=$r1;
      var $cmp127=$198 < $199;
      if ($cmp127) { label = 48; break; } else { label = 50; break; }
    case 48: 
      var $200=$r3;
      var $201=$r2;
      var $cmp129=$200 < $201;
      if ($cmp129) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $202=$theta3_addr;
      var $203=HEAPF64[(($202)>>3)];
      var $204=$pi;
      var $mul131=($204)*(2);
      var $add132=($203)+($mul131);
      var $205=$theta3_addr;
      HEAPF64[(($205)>>3)]=$add132;
      var $206=$theta1_addr;
      var $207=HEAPF64[(($206)>>3)];
      var $208=$pi;
      var $mul133=($208)*(2);
      var $add134=($207)+($mul133);
      var $209=$theta1_addr;
      HEAPF64[(($209)>>3)]=$add134;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 63; break;
    case 52: 
      var $210=$theta3_addr;
      var $211=HEAPF64[(($210)>>3)];
      var $212=$theta2_addr;
      var $213=HEAPF64[(($212)>>3)];
      var $cmp138=$211 <= $213;
      if ($cmp138) { label = 53; break; } else { label = 62; break; }
    case 53: 
      var $214=$theta2_addr;
      var $215=HEAPF64[(($214)>>3)];
      var $216=$theta1_addr;
      var $217=HEAPF64[(($216)>>3)];
      var $cmp140=$215 <= $217;
      if ($cmp140) { label = 54; break; } else { label = 62; break; }
    case 54: 
      var $218=$theta1_addr;
      var $219=HEAPF64[(($218)>>3)];
      var $220=$theta3_addr;
      var $221=HEAPF64[(($220)>>3)];
      var $sub142=($219)-($221);
      $r1=$sub142;
      var $222=$theta3_addr;
      var $223=HEAPF64[(($222)>>3)];
      var $224=$pi;
      var $mul143=($224)*(2);
      var $add144=($223)+($mul143);
      var $225=$theta2_addr;
      var $226=HEAPF64[(($225)>>3)];
      var $sub145=($add144)-($226);
      $r2=$sub145;
      var $227=$theta2_addr;
      var $228=HEAPF64[(($227)>>3)];
      var $229=$pi;
      var $mul146=($229)*(2);
      var $add147=($228)+($mul146);
      var $230=$theta1_addr;
      var $231=HEAPF64[(($230)>>3)];
      var $sub148=($add147)-($231);
      $r3=$sub148;
      var $232=$r2;
      var $233=$r1;
      var $cmp149=$232 < $233;
      if ($cmp149) { label = 55; break; } else { label = 57; break; }
    case 55: 
      var $234=$r2;
      var $235=$r3;
      var $cmp151=$234 < $235;
      if ($cmp151) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $236=$theta3_addr;
      var $237=HEAPF64[(($236)>>3)];
      var $238=$pi;
      var $mul153=($238)*(2);
      var $add154=($237)+($mul153);
      var $239=$theta3_addr;
      HEAPF64[(($239)>>3)]=$add154;
      label = 61; break;
    case 57: 
      var $240=$r3;
      var $241=$r1;
      var $cmp156=$240 < $241;
      if ($cmp156) { label = 58; break; } else { label = 60; break; }
    case 58: 
      var $242=$r3;
      var $243=$r2;
      var $cmp158=$242 < $243;
      if ($cmp158) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $244=$theta3_addr;
      var $245=HEAPF64[(($244)>>3)];
      var $246=$pi;
      var $mul160=($246)*(2);
      var $add161=($245)+($mul160);
      var $247=$theta3_addr;
      HEAPF64[(($247)>>3)]=$add161;
      var $248=$theta2_addr;
      var $249=HEAPF64[(($248)>>3)];
      var $250=$pi;
      var $mul162=($250)*(2);
      var $add163=($249)+($mul162);
      var $251=$theta2_addr;
      HEAPF64[(($251)>>3)]=$add163;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_theta3_adjust"] = _theta3_adjust;
function _xyz_to_rtp($xyz, $r, $theta, $phi) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xyz_addr;
      var $r_addr;
      var $theta_addr;
      var $phi_addr;
      $xyz_addr=$xyz;
      $r_addr=$r;
      $theta_addr=$theta;
      $phi_addr=$phi;
      var $0=$xyz_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=Math.pow($1, 2);
      var $3=$xyz_addr;
      var $arrayidx1=(($3+8)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $5=Math.pow($4, 2);
      var $add=($2)+($5);
      var $6=$xyz_addr;
      var $arrayidx2=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=Math.pow($7, 2);
      var $add3=($add)+($8);
      var $call=Math.sqrt($add3);
      var $9=$r_addr;
      HEAPF64[(($9)>>3)]=$call;
      var $10=$r_addr;
      var $11=HEAPF64[(($10)>>3)];
      var $cmp=$11 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$theta_addr;
      HEAPF64[(($12)>>3)]=0;
      var $13=$phi_addr;
      HEAPF64[(($13)>>3)]=0;
      label = 5; break;
    case 4: 
      var $14=$xyz_addr;
      var $arrayidx4=(($14+16)|0);
      var $15=HEAPF64[(($arrayidx4)>>3)];
      var $16=$r_addr;
      var $17=HEAPF64[(($16)>>3)];
      var $div=($15)/($17);
      var $call5=_r8_acos($div);
      var $18=$phi_addr;
      HEAPF64[(($18)>>3)]=$call5;
      var $19=$xyz_addr;
      var $arrayidx6=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx6)>>3)];
      var $21=$xyz_addr;
      var $arrayidx7=(($21)|0);
      var $22=HEAPF64[(($arrayidx7)>>3)];
      var $call8=_r8_atan($20, $22);
      var $23=$theta_addr;
      HEAPF64[(($23)>>3)]=$call8;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_xyz_to_rtp"] = _xyz_to_rtp;
function _sphere_imp_volume_3d($r) {
  var label = 0;
  var $r_addr;
  var $pi;
  var $volume;
  $r_addr=$r;
  $pi=3.141592653589793;
  var $0=$pi;
  var $mul=($0)*(4);
  var $1=$r_addr;
  var $mul1=($mul)*($1);
  var $2=$r_addr;
  var $mul2=($mul1)*($2);
  var $3=$r_addr;
  var $mul3=($mul2)*($3);
  var $div=($mul3)/(3);
  $volume=$div;
  var $4=$volume;
  return $4;
}
Module["_sphere_imp_volume_3d"] = _sphere_imp_volume_3d;
function _sphere_imp_line_project_3d($r, $pc, $n, $p, $maxpnt2, $pp, $thetamin, $thetamax) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $pc_addr;
      var $n_addr;
      var $p_addr;
      var $maxpnt2_addr;
      var $pp_addr;
      var $thetamin_addr;
      var $thetamax_addr;
      var $alpha;
      var $ang3d;
      var $dot;
      var $i;
      var $j;
      var $nfill;
      var $n2;
      var $tnorm;
      var $p1=__stackBase__;
      var $p2=(__stackBase__)+(24);
      var $pi=(__stackBase__)+(48);
      $r_addr=$r;
      $pc_addr=$pc;
      $n_addr=$n;
      $p_addr=$p;
      $maxpnt2_addr=$maxpnt2;
      $pp_addr=$pp;
      $thetamin_addr=$thetamin;
      $thetamax_addr=$thetamax;
      var $0=$r_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $n2=0;
      var $1=$n2;
      $retval=$1;
      label = 28; break;
    case 4: 
      var $2=$pc_addr;
      var $arraydecay=(($p1)|0);
      _r8vec_copy(3, $2, $arraydecay);
      var $3=$pc_addr;
      var $arraydecay1=(($p2)|0);
      _r8vec_copy(3, $3, $arraydecay1);
      $n2=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $4=$i;
      var $5=$n_addr;
      var $cmp2=(($4)|(0)) < (($5)|(0));
      if ($cmp2) { label = 6; break; } else { label = 27; break; }
    case 6: 
      var $6=$p_addr;
      var $7=$pc_addr;
      var $call=_r8vec_eq(3, $6, $7);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 25; break;
    case 8: 
      var $arraydecay4=(($p2)|0);
      var $arraydecay5=(($p1)|0);
      _r8vec_copy(3, $arraydecay4, $arraydecay5);
      var $8=$i;
      var $mul=((($8)*(3))&-1);
      var $add=(($mul)|0);
      var $9=$p_addr;
      var $arrayidx=(($9+($add<<3))|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $11=$pc_addr;
      var $arrayidx6=(($11)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $sub=($10)-($12);
      var $13=Math.pow($sub, 2);
      var $14=$i;
      var $mul7=((($14)*(3))&-1);
      var $add8=((($mul7)+(1))|0);
      var $15=$p_addr;
      var $arrayidx9=(($15+($add8<<3))|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$pc_addr;
      var $arrayidx10=(($17+8)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($16)-($18);
      var $19=Math.pow($sub11, 2);
      var $add12=($13)+($19);
      var $20=$i;
      var $mul13=((($20)*(3))&-1);
      var $add14=((($mul13)+(2))|0);
      var $21=$p_addr;
      var $arrayidx15=(($21+($add14<<3))|0);
      var $22=HEAPF64[(($arrayidx15)>>3)];
      var $23=$pc_addr;
      var $arrayidx16=(($23+16)|0);
      var $24=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($22)-($24);
      var $25=Math.pow($sub17, 2);
      var $add18=($add12)+($25);
      var $call19=Math.sqrt($add18);
      $alpha=$call19;
      var $26=$pc_addr;
      var $arrayidx20=(($26)|0);
      var $27=HEAPF64[(($arrayidx20)>>3)];
      var $28=$r_addr;
      var $29=$i;
      var $mul21=((($29)*(3))&-1);
      var $add22=(($mul21)|0);
      var $30=$p_addr;
      var $arrayidx23=(($30+($add22<<3))|0);
      var $31=HEAPF64[(($arrayidx23)>>3)];
      var $32=$pc_addr;
      var $arrayidx24=(($32)|0);
      var $33=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($31)-($33);
      var $mul26=($28)*($sub25);
      var $34=$alpha;
      var $div=($mul26)/($34);
      var $add27=($27)+($div);
      var $arrayidx28=(($p2)|0);
      HEAPF64[(($arrayidx28)>>3)]=$add27;
      var $35=$pc_addr;
      var $arrayidx29=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx29)>>3)];
      var $37=$r_addr;
      var $38=$i;
      var $mul30=((($38)*(3))&-1);
      var $add31=((($mul30)+(1))|0);
      var $39=$p_addr;
      var $arrayidx32=(($39+($add31<<3))|0);
      var $40=HEAPF64[(($arrayidx32)>>3)];
      var $41=$pc_addr;
      var $arrayidx33=(($41+8)|0);
      var $42=HEAPF64[(($arrayidx33)>>3)];
      var $sub34=($40)-($42);
      var $mul35=($37)*($sub34);
      var $43=$alpha;
      var $div36=($mul35)/($43);
      var $add37=($36)+($div36);
      var $arrayidx38=(($p2+8)|0);
      HEAPF64[(($arrayidx38)>>3)]=$add37;
      var $44=$pc_addr;
      var $arrayidx39=(($44+16)|0);
      var $45=HEAPF64[(($arrayidx39)>>3)];
      var $46=$r_addr;
      var $47=$i;
      var $mul40=((($47)*(3))&-1);
      var $add41=((($mul40)+(2))|0);
      var $48=$p_addr;
      var $arrayidx42=(($48+($add41<<3))|0);
      var $49=HEAPF64[(($arrayidx42)>>3)];
      var $50=$pc_addr;
      var $arrayidx43=(($50+16)|0);
      var $51=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=($49)-($51);
      var $mul45=($46)*($sub44);
      var $52=$alpha;
      var $div46=($mul45)/($52);
      var $add47=($45)+($div46);
      var $arrayidx48=(($p2+16)|0);
      HEAPF64[(($arrayidx48)>>3)]=$add47;
      var $53=$n2;
      var $cmp49=(($53)|(0))==0;
      if ($cmp49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $arrayidx51=(($p2)|0);
      var $54=HEAPF64[(($arrayidx51)>>3)];
      var $55=$n2;
      var $mul52=((($55)*(3))&-1);
      var $add53=(($mul52)|0);
      var $56=$pp_addr;
      var $arrayidx54=(($56+($add53<<3))|0);
      HEAPF64[(($arrayidx54)>>3)]=$54;
      var $arrayidx55=(($p2+8)|0);
      var $57=HEAPF64[(($arrayidx55)>>3)];
      var $58=$n2;
      var $mul56=((($58)*(3))&-1);
      var $add57=((($mul56)+(1))|0);
      var $59=$pp_addr;
      var $arrayidx58=(($59+($add57<<3))|0);
      HEAPF64[(($arrayidx58)>>3)]=$57;
      var $arrayidx59=(($p2+16)|0);
      var $60=HEAPF64[(($arrayidx59)>>3)];
      var $61=$n2;
      var $mul60=((($61)*(3))&-1);
      var $add61=((($mul60)+(2))|0);
      var $62=$pp_addr;
      var $arrayidx62=(($62+($add61<<3))|0);
      HEAPF64[(($arrayidx62)>>3)]=$60;
      var $63=$n2;
      var $add63=((($63)+(1))|0);
      $n2=$add63;
      label = 24; break;
    case 10: 
      var $64=$n2;
      var $cmp65=1 <= (($64)|(0));
      if ($cmp65) { label = 11; break; } else { label = 23; break; }
    case 11: 
      var $arrayidx67=(($p1)|0);
      var $65=HEAPF64[(($arrayidx67)>>3)];
      var $66=$pc_addr;
      var $arrayidx68=(($66)|0);
      var $67=HEAPF64[(($arrayidx68)>>3)];
      var $sub69=($65)-($67);
      var $arrayidx70=(($p2)|0);
      var $68=HEAPF64[(($arrayidx70)>>3)];
      var $69=$pc_addr;
      var $arrayidx71=(($69)|0);
      var $70=HEAPF64[(($arrayidx71)>>3)];
      var $sub72=($68)-($70);
      var $mul73=($sub69)*($sub72);
      var $arrayidx74=(($p1+8)|0);
      var $71=HEAPF64[(($arrayidx74)>>3)];
      var $72=$pc_addr;
      var $arrayidx75=(($72+8)|0);
      var $73=HEAPF64[(($arrayidx75)>>3)];
      var $sub76=($71)-($73);
      var $arrayidx77=(($p2+8)|0);
      var $74=HEAPF64[(($arrayidx77)>>3)];
      var $75=$pc_addr;
      var $arrayidx78=(($75+8)|0);
      var $76=HEAPF64[(($arrayidx78)>>3)];
      var $sub79=($74)-($76);
      var $mul80=($sub76)*($sub79);
      var $add81=($mul73)+($mul80);
      var $arrayidx82=(($p1+16)|0);
      var $77=HEAPF64[(($arrayidx82)>>3)];
      var $78=$pc_addr;
      var $arrayidx83=(($78+16)|0);
      var $79=HEAPF64[(($arrayidx83)>>3)];
      var $sub84=($77)-($79);
      var $arrayidx85=(($p2+16)|0);
      var $80=HEAPF64[(($arrayidx85)>>3)];
      var $81=$pc_addr;
      var $arrayidx86=(($81+16)|0);
      var $82=HEAPF64[(($arrayidx86)>>3)];
      var $sub87=($80)-($82);
      var $mul88=($sub84)*($sub87);
      var $add89=($add81)+($mul88);
      $dot=$add89;
      var $83=$dot;
      var $84=$r_addr;
      var $85=$r_addr;
      var $mul90=($84)*($85);
      var $div91=($83)/($mul90);
      var $call92=_r8_acos($div91);
      $ang3d=$call92;
      var $86=$thetamin_addr;
      var $87=$ang3d;
      var $call93=_r8_abs($87);
      var $cmp94=$86 < $call93;
      if ($cmp94) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $88=$i;
      var $89=$n_addr;
      var $cmp95=(($88)|(0))==(($89)|(0));
      if ($cmp95) { label = 13; break; } else { label = 22; break; }
    case 13: 
      var $90=$thetamax_addr;
      var $91=$ang3d;
      var $call97=_r8_abs($91);
      var $cmp98=$90 < $call97;
      if ($cmp98) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $92=$ang3d;
      var $call100=_r8_abs($92);
      var $93=$thetamax_addr;
      var $div101=($call100)/($93);
      var $conv=(($div101)&-1);
      $nfill=$conv;
      $j=1;
      label = 15; break;
    case 15: 
      var $94=$j;
      var $95=$nfill;
      var $cmp103=(($94)|(0)) < (($95)|(0));
      if ($cmp103) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $96=$nfill;
      var $97=$j;
      var $sub106=((($96)-($97))|0);
      var $conv107=(($sub106)|(0));
      var $arrayidx108=(($p1)|0);
      var $98=HEAPF64[(($arrayidx108)>>3)];
      var $99=$pc_addr;
      var $arrayidx109=(($99)|0);
      var $100=HEAPF64[(($arrayidx109)>>3)];
      var $sub110=($98)-($100);
      var $mul111=($conv107)*($sub110);
      var $101=$j;
      var $conv112=(($101)|(0));
      var $arrayidx113=(($p2)|0);
      var $102=HEAPF64[(($arrayidx113)>>3)];
      var $103=$pc_addr;
      var $arrayidx114=(($103)|0);
      var $104=HEAPF64[(($arrayidx114)>>3)];
      var $sub115=($102)-($104);
      var $mul116=($conv112)*($sub115);
      var $add117=($mul111)+($mul116);
      var $arrayidx118=(($pi)|0);
      HEAPF64[(($arrayidx118)>>3)]=$add117;
      var $105=$nfill;
      var $106=$j;
      var $sub119=((($105)-($106))|0);
      var $conv120=(($sub119)|(0));
      var $arrayidx121=(($p1+8)|0);
      var $107=HEAPF64[(($arrayidx121)>>3)];
      var $108=$pc_addr;
      var $arrayidx122=(($108+8)|0);
      var $109=HEAPF64[(($arrayidx122)>>3)];
      var $sub123=($107)-($109);
      var $mul124=($conv120)*($sub123);
      var $110=$j;
      var $conv125=(($110)|(0));
      var $arrayidx126=(($p2+8)|0);
      var $111=HEAPF64[(($arrayidx126)>>3)];
      var $112=$pc_addr;
      var $arrayidx127=(($112+8)|0);
      var $113=HEAPF64[(($arrayidx127)>>3)];
      var $sub128=($111)-($113);
      var $mul129=($conv125)*($sub128);
      var $add130=($mul124)+($mul129);
      var $arrayidx131=(($pi+8)|0);
      HEAPF64[(($arrayidx131)>>3)]=$add130;
      var $114=$nfill;
      var $115=$j;
      var $sub132=((($114)-($115))|0);
      var $conv133=(($sub132)|(0));
      var $arrayidx134=(($p1+16)|0);
      var $116=HEAPF64[(($arrayidx134)>>3)];
      var $117=$pc_addr;
      var $arrayidx135=(($117+16)|0);
      var $118=HEAPF64[(($arrayidx135)>>3)];
      var $sub136=($116)-($118);
      var $mul137=($conv133)*($sub136);
      var $119=$j;
      var $conv138=(($119)|(0));
      var $arrayidx139=(($p2+16)|0);
      var $120=HEAPF64[(($arrayidx139)>>3)];
      var $121=$pc_addr;
      var $arrayidx140=(($121+16)|0);
      var $122=HEAPF64[(($arrayidx140)>>3)];
      var $sub141=($120)-($122);
      var $mul142=($conv138)*($sub141);
      var $add143=($mul137)+($mul142);
      var $arrayidx144=(($pi+16)|0);
      HEAPF64[(($arrayidx144)>>3)]=$add143;
      var $arraydecay145=(($pi)|0);
      var $call146=_r8vec_norm(3, $arraydecay145);
      $tnorm=$call146;
      var $123=$tnorm;
      var $cmp147=$123 != 0;
      if ($cmp147) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $124=$pc_addr;
      var $arrayidx150=(($124)|0);
      var $125=HEAPF64[(($arrayidx150)>>3)];
      var $126=$r_addr;
      var $arrayidx151=(($pi)|0);
      var $127=HEAPF64[(($arrayidx151)>>3)];
      var $mul152=($126)*($127);
      var $128=$tnorm;
      var $div153=($mul152)/($128);
      var $add154=($125)+($div153);
      var $arrayidx155=(($pi)|0);
      HEAPF64[(($arrayidx155)>>3)]=$add154;
      var $129=$pc_addr;
      var $arrayidx156=(($129+8)|0);
      var $130=HEAPF64[(($arrayidx156)>>3)];
      var $131=$r_addr;
      var $arrayidx157=(($pi+8)|0);
      var $132=HEAPF64[(($arrayidx157)>>3)];
      var $mul158=($131)*($132);
      var $133=$tnorm;
      var $div159=($mul158)/($133);
      var $add160=($130)+($div159);
      var $arrayidx161=(($pi+8)|0);
      HEAPF64[(($arrayidx161)>>3)]=$add160;
      var $134=$pc_addr;
      var $arrayidx162=(($134+16)|0);
      var $135=HEAPF64[(($arrayidx162)>>3)];
      var $136=$r_addr;
      var $arrayidx163=(($pi+16)|0);
      var $137=HEAPF64[(($arrayidx163)>>3)];
      var $mul164=($136)*($137);
      var $138=$tnorm;
      var $div165=($mul164)/($138);
      var $add166=($135)+($div165);
      var $arrayidx167=(($pi+16)|0);
      HEAPF64[(($arrayidx167)>>3)]=$add166;
      var $arrayidx168=(($pi)|0);
      var $139=HEAPF64[(($arrayidx168)>>3)];
      var $140=$n2;
      var $mul169=((($140)*(3))&-1);
      var $add170=(($mul169)|0);
      var $141=$pp_addr;
      var $arrayidx171=(($141+($add170<<3))|0);
      HEAPF64[(($arrayidx171)>>3)]=$139;
      var $arrayidx172=(($pi+8)|0);
      var $142=HEAPF64[(($arrayidx172)>>3)];
      var $143=$n2;
      var $mul173=((($143)*(3))&-1);
      var $add174=((($mul173)+(1))|0);
      var $144=$pp_addr;
      var $arrayidx175=(($144+($add174<<3))|0);
      HEAPF64[(($arrayidx175)>>3)]=$142;
      var $arrayidx176=(($pi+16)|0);
      var $145=HEAPF64[(($arrayidx176)>>3)];
      var $146=$n2;
      var $mul177=((($146)*(3))&-1);
      var $add178=((($mul177)+(2))|0);
      var $147=$pp_addr;
      var $arrayidx179=(($147+($add178<<3))|0);
      HEAPF64[(($arrayidx179)>>3)]=$145;
      var $148=$n2;
      var $add180=((($148)+(1))|0);
      $n2=$add180;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $149=$j;
      var $inc=((($149)+(1))|0);
      $j=$inc;
      label = 15; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $arrayidx183=(($p2)|0);
      var $150=HEAPF64[(($arrayidx183)>>3)];
      var $151=$n2;
      var $mul184=((($151)*(3))&-1);
      var $add185=(($mul184)|0);
      var $152=$pp_addr;
      var $arrayidx186=(($152+($add185<<3))|0);
      HEAPF64[(($arrayidx186)>>3)]=$150;
      var $arrayidx187=(($p2+8)|0);
      var $153=HEAPF64[(($arrayidx187)>>3)];
      var $154=$n2;
      var $mul188=((($154)*(3))&-1);
      var $add189=((($mul188)+(1))|0);
      var $155=$pp_addr;
      var $arrayidx190=(($155+($add189<<3))|0);
      HEAPF64[(($arrayidx190)>>3)]=$153;
      var $arrayidx191=(($p2+16)|0);
      var $156=HEAPF64[(($arrayidx191)>>3)];
      var $157=$n2;
      var $mul192=((($157)*(3))&-1);
      var $add193=((($mul192)+(2))|0);
      var $158=$pp_addr;
      var $arrayidx194=(($158+($add193<<3))|0);
      HEAPF64[(($arrayidx194)>>3)]=$156;
      var $159=$n2;
      var $add195=((($159)+(1))|0);
      $n2=$add195;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $160=$i;
      var $inc201=((($160)+(1))|0);
      $i=$inc201;
      label = 5; break;
    case 27: 
      var $161=$n2;
      $retval=$161;
      label = 28; break;
    case 28: 
      var $162=$retval;
      STACKTOP = __stackBase__;
      return $162;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_line_project_3d"] = _sphere_imp_line_project_3d;
function _sphere_imp_point_near_3d($r, $pc, $p, $pn) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $p_addr;
      var $pn_addr;
      var $norm;
      $r_addr=$r;
      $pc_addr=$pc;
      $p_addr=$p;
      $pn_addr=$pn;
      var $0=$p_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$pc_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$p_addr;
      var $arrayidx2=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$pc_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$p_addr;
      var $arrayidx5=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$pc_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $add8=($add)+($14);
      var $call=Math.sqrt($add8);
      $norm=$call;
      var $15=$norm;
      var $cmp=$15 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$pc_addr;
      var $arrayidx9=(($16)|0);
      var $17=HEAPF64[(($arrayidx9)>>3)];
      var $18=$r_addr;
      var $add10=($17)+($18);
      var $19=$pn_addr;
      var $arrayidx11=(($19)|0);
      HEAPF64[(($arrayidx11)>>3)]=$add10;
      var $20=$pc_addr;
      var $arrayidx12=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx12)>>3)];
      var $22=$pn_addr;
      var $arrayidx13=(($22+8)|0);
      HEAPF64[(($arrayidx13)>>3)]=$21;
      var $23=$pc_addr;
      var $arrayidx14=(($23+16)|0);
      var $24=HEAPF64[(($arrayidx14)>>3)];
      var $25=$pn_addr;
      var $arrayidx15=(($25+16)|0);
      HEAPF64[(($arrayidx15)>>3)]=$24;
      label = 5; break;
    case 4: 
      var $26=$pc_addr;
      var $arrayidx16=(($26)|0);
      var $27=HEAPF64[(($arrayidx16)>>3)];
      var $28=$r_addr;
      var $29=$p_addr;
      var $arrayidx17=(($29)|0);
      var $30=HEAPF64[(($arrayidx17)>>3)];
      var $31=$pc_addr;
      var $arrayidx18=(($31)|0);
      var $32=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($30)-($32);
      var $mul=($28)*($sub19);
      var $33=$norm;
      var $div=($mul)/($33);
      var $add20=($27)+($div);
      var $34=$pn_addr;
      var $arrayidx21=(($34)|0);
      HEAPF64[(($arrayidx21)>>3)]=$add20;
      var $35=$pc_addr;
      var $arrayidx22=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx22)>>3)];
      var $37=$r_addr;
      var $38=$p_addr;
      var $arrayidx23=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx23)>>3)];
      var $40=$pc_addr;
      var $arrayidx24=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($39)-($41);
      var $mul26=($37)*($sub25);
      var $42=$norm;
      var $div27=($mul26)/($42);
      var $add28=($36)+($div27);
      var $43=$pn_addr;
      var $arrayidx29=(($43+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $44=$pc_addr;
      var $arrayidx30=(($44+16)|0);
      var $45=HEAPF64[(($arrayidx30)>>3)];
      var $46=$r_addr;
      var $47=$p_addr;
      var $arrayidx31=(($47+16)|0);
      var $48=HEAPF64[(($arrayidx31)>>3)];
      var $49=$pc_addr;
      var $arrayidx32=(($49+16)|0);
      var $50=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($48)-($50);
      var $mul34=($46)*($sub33);
      var $51=$norm;
      var $div35=($mul34)/($51);
      var $add36=($45)+($div35);
      var $52=$pn_addr;
      var $arrayidx37=(($52+16)|0);
      HEAPF64[(($arrayidx37)>>3)]=$add36;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_point_near_3d"] = _sphere_imp_point_near_3d;
function _sphere_imp_point_project_3d($r, $pc, $p, $pp) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $p_addr;
      var $pp_addr;
      var $norm;
      $r_addr=$r;
      $pc_addr=$pc;
      $p_addr=$p;
      $pp_addr=$pp;
      var $0=$r_addr;
      var $cmp=$0 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$pc_addr;
      var $2=$pp_addr;
      _r8vec_copy(3, $1, $2);
      label = 8; break;
    case 4: 
      var $3=$p_addr;
      var $4=$pc_addr;
      var $call=_r8vec_eq(3, $3, $4);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$pc_addr;
      var $arrayidx=(($5)|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$pp_addr;
      var $arrayidx2=(($7)|0);
      HEAPF64[(($arrayidx2)>>3)]=$6;
      var $8=$pc_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $10=$pp_addr;
      var $arrayidx4=(($10+8)|0);
      HEAPF64[(($arrayidx4)>>3)]=$9;
      var $11=$pc_addr;
      var $arrayidx5=(($11+16)|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $13=$r_addr;
      var $add=($12)+($13);
      var $14=$pp_addr;
      var $arrayidx6=(($14+16)|0);
      HEAPF64[(($arrayidx6)>>3)]=$add;
      label = 7; break;
    case 6: 
      var $15=$p_addr;
      var $arrayidx8=(($15)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$pc_addr;
      var $arrayidx9=(($17)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub=($16)-($18);
      var $19=Math.pow($sub, 2);
      var $20=$p_addr;
      var $arrayidx10=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx10)>>3)];
      var $22=$pc_addr;
      var $arrayidx11=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($21)-($23);
      var $24=Math.pow($sub12, 2);
      var $add13=($19)+($24);
      var $25=$p_addr;
      var $arrayidx14=(($25+16)|0);
      var $26=HEAPF64[(($arrayidx14)>>3)];
      var $27=$pc_addr;
      var $arrayidx15=(($27+16)|0);
      var $28=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($26)-($28);
      var $29=Math.pow($sub16, 2);
      var $add17=($add13)+($29);
      var $call18=Math.sqrt($add17);
      $norm=$call18;
      var $30=$pc_addr;
      var $arrayidx19=(($30)|0);
      var $31=HEAPF64[(($arrayidx19)>>3)];
      var $32=$r_addr;
      var $33=$p_addr;
      var $arrayidx20=(($33)|0);
      var $34=HEAPF64[(($arrayidx20)>>3)];
      var $35=$pc_addr;
      var $arrayidx21=(($35)|0);
      var $36=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($34)-($36);
      var $mul=($32)*($sub22);
      var $37=$norm;
      var $div=($mul)/($37);
      var $add23=($31)+($div);
      var $38=$pp_addr;
      var $arrayidx24=(($38)|0);
      HEAPF64[(($arrayidx24)>>3)]=$add23;
      var $39=$pc_addr;
      var $arrayidx25=(($39+8)|0);
      var $40=HEAPF64[(($arrayidx25)>>3)];
      var $41=$r_addr;
      var $42=$p_addr;
      var $arrayidx26=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx26)>>3)];
      var $44=$pc_addr;
      var $arrayidx27=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx27)>>3)];
      var $sub28=($43)-($45);
      var $mul29=($41)*($sub28);
      var $46=$norm;
      var $div30=($mul29)/($46);
      var $add31=($40)+($div30);
      var $47=$pp_addr;
      var $arrayidx32=(($47+8)|0);
      HEAPF64[(($arrayidx32)>>3)]=$add31;
      var $48=$pc_addr;
      var $arrayidx33=(($48+16)|0);
      var $49=HEAPF64[(($arrayidx33)>>3)];
      var $50=$r_addr;
      var $51=$p_addr;
      var $arrayidx34=(($51+16)|0);
      var $52=HEAPF64[(($arrayidx34)>>3)];
      var $53=$pc_addr;
      var $arrayidx35=(($53+16)|0);
      var $54=HEAPF64[(($arrayidx35)>>3)];
      var $sub36=($52)-($54);
      var $mul37=($50)*($sub36);
      var $55=$norm;
      var $div38=($mul37)/($55);
      var $add39=($49)+($div38);
      var $56=$pp_addr;
      var $arrayidx40=(($56+16)|0);
      HEAPF64[(($arrayidx40)>>3)]=$add39;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_point_project_3d"] = _sphere_imp_point_project_3d;
function _sphere_imp_spiralpoints_3d($r, $pc, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $pc_addr;
      var $n_addr;
      var $p_addr;
      var $cosphi;
      var $i;
      var $pi;
      var $sinphi;
      var $theta;
      $r_addr=$r;
      $pc_addr=$pc;
      $n_addr=$n;
      $p_addr=$p;
      $cosphi=0;
      $pi=3.141592653589793;
      $sinphi=0;
      $theta=0;
      $i=1;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $2=$n_addr;
      var $3=$i;
      var $sub=((($2)-($3))|0);
      var $conv=(($sub)|(0));
      var $mul=($conv)*(-1);
      var $4=$i;
      var $sub1=((($4)-(1))|0);
      var $conv2=(($sub1)|(0));
      var $mul3=$conv2;
      var $add=($mul)+($mul3);
      var $5=$n_addr;
      var $sub4=((($5)-(1))|0);
      var $conv5=(($sub4)|(0));
      var $div=($add)/($conv5);
      $cosphi=$div;
      var $6=$cosphi;
      var $7=$cosphi;
      var $mul6=($6)*($7);
      var $sub7=(1)-($mul6);
      var $call=Math.sqrt($sub7);
      $sinphi=$call;
      var $8=$i;
      var $cmp8=(($8)|(0))==1;
      if ($cmp8) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $9=$i;
      var $10=$n_addr;
      var $cmp10=(($9)|(0))==(($10)|(0));
      if ($cmp10) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $theta=0;
      label = 8; break;
    case 7: 
      var $11=$theta;
      var $12=$sinphi;
      var $13=$n_addr;
      var $conv12=(($13)|(0));
      var $call13=Math.sqrt($conv12);
      var $mul14=($12)*($call13);
      var $div15=(3.6)/($mul14);
      var $add16=($11)+($div15);
      $theta=$add16;
      var $14=$theta;
      var $15=$pi;
      var $mul17=($15)*(2);
      var $call18=_r8_modp($14, $mul17);
      $theta=$call18;
      label = 8; break;
    case 8: 
      var $16=$pc_addr;
      var $arrayidx=(($16)|0);
      var $17=HEAPF64[(($arrayidx)>>3)];
      var $18=$r_addr;
      var $19=$sinphi;
      var $mul19=($18)*($19);
      var $20=$theta;
      var $call20=Math.cos($20);
      var $mul21=($mul19)*($call20);
      var $add22=($17)+($mul21);
      var $21=$i;
      var $sub23=((($21)-(1))|0);
      var $mul24=((($sub23)*(3))&-1);
      var $add25=(($mul24)|0);
      var $22=$p_addr;
      var $arrayidx26=(($22+($add25<<3))|0);
      HEAPF64[(($arrayidx26)>>3)]=$add22;
      var $23=$pc_addr;
      var $arrayidx27=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx27)>>3)];
      var $25=$r_addr;
      var $26=$sinphi;
      var $mul28=($25)*($26);
      var $27=$theta;
      var $call29=Math.sin($27);
      var $mul30=($mul28)*($call29);
      var $add31=($24)+($mul30);
      var $28=$i;
      var $sub32=((($28)-(1))|0);
      var $mul33=((($sub32)*(3))&-1);
      var $add34=((($mul33)+(1))|0);
      var $29=$p_addr;
      var $arrayidx35=(($29+($add34<<3))|0);
      HEAPF64[(($arrayidx35)>>3)]=$add31;
      var $30=$pc_addr;
      var $arrayidx36=(($30+16)|0);
      var $31=HEAPF64[(($arrayidx36)>>3)];
      var $32=$r_addr;
      var $33=$cosphi;
      var $mul37=($32)*($33);
      var $add38=($31)+($mul37);
      var $34=$i;
      var $sub39=((($34)-(1))|0);
      var $mul40=((($sub39)*(3))&-1);
      var $add41=((($mul40)+(2))|0);
      var $35=$p_addr;
      var $arrayidx42=(($35+($add41<<3))|0);
      HEAPF64[(($arrayidx42)>>3)]=$add38;
      label = 9; break;
    case 9: 
      var $36=$i;
      var $inc=((($36)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_spiralpoints_3d"] = _sphere_imp_spiralpoints_3d;
function _sphere_imp_zone_area_3d($r, $h1, $h2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $h1_addr;
      var $h2_addr;
      var $h;
      var $pi;
      $r_addr=$r;
      $h1_addr=$h1;
      $h2_addr=$h2;
      $pi=3.141592653589793;
      var $0=$h1_addr;
      var $1=$h2_addr;
      var $sub=($0)-($1);
      var $call=_r8_abs($sub);
      $h=$call;
      var $2=$h;
      var $cmp=$2 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $3=$r_addr;
      var $mul=($3)*(2);
      var $4=$h;
      var $cmp1=$mul <= $4;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $5=$pi;
      var $mul3=($5)*(4);
      var $6=$r_addr;
      var $mul4=($mul3)*($6);
      var $7=$r_addr;
      var $mul5=($mul4)*($7);
      $retval=$mul5;
      label = 7; break;
    case 6: 
      var $8=$pi;
      var $mul7=($8)*(2);
      var $9=$r_addr;
      var $mul8=($mul7)*($9);
      var $10=$h;
      var $mul9=($mul8)*($10);
      $retval=$mul9;
      label = 7; break;
    case 7: 
      var $11=$retval;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_zone_area_3d"] = _sphere_imp_zone_area_3d;
function _sphere_triangle_angles_to_area($r, $a, $b, $c) {
  var label = 0;
  var $r_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $area;
  var $pi;
  $r_addr=$r;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $pi=3.141592653589793;
  var $0=$r_addr;
  var $1=$r_addr;
  var $mul=($0)*($1);
  var $2=$a_addr;
  var $3=$b_addr;
  var $add=($2)+($3);
  var $4=$c_addr;
  var $add1=($add)+($4);
  var $5=$pi;
  var $sub=($add1)-($5);
  var $mul2=($mul)*($sub);
  $area=$mul2;
  var $6=$area;
  return $6;
}
Module["_sphere_triangle_angles_to_area"] = _sphere_triangle_angles_to_area;
function _sphere_imp_zone_volume_3d($r, $h1, $h2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $r_addr;
      var $h1_addr;
      var $h2_addr;
      var $h11;
      var $h22;
      var $pi;
      $r_addr=$r;
      $h1_addr=$h1;
      $h2_addr=$h2;
      $pi=3.141592653589793;
      var $0=$h1_addr;
      var $1=$h2_addr;
      var $call=_r8_min($0, $1);
      $h11=$call;
      var $2=$h11;
      var $call1=_r8_max($2, 0);
      $h11=$call1;
      var $3=$r_addr;
      var $mul=($3)*(2);
      var $4=$h11;
      var $cmp=$mul <= $4;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $retval=0;
      label = 7; break;
    case 4: 
      var $5=$h1_addr;
      var $6=$h2_addr;
      var $call2=_r8_max($5, $6);
      $h22=$call2;
      var $7=$h22;
      var $8=$r_addr;
      var $mul3=($8)*(2);
      var $call4=_r8_min($7, $mul3);
      $h22=$call4;
      var $9=$h22;
      var $cmp5=$9 <= 0;
      if ($cmp5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 7; break;
    case 6: 
      var $10=$pi;
      var $mul8=($10)*(0.3333333333333333);
      var $11=$h22;
      var $12=$h22;
      var $mul9=($11)*($12);
      var $13=$r_addr;
      var $mul10=($13)*(3);
      var $14=$h22;
      var $sub=($mul10)-($14);
      var $mul11=($mul9)*($sub);
      var $15=$h11;
      var $16=$h11;
      var $mul12=($15)*($16);
      var $17=$r_addr;
      var $mul13=($17)*(3);
      var $18=$h11;
      var $sub14=($mul13)-($18);
      var $mul15=($mul12)*($sub14);
      var $sub16=($mul11)-($mul15);
      var $mul17=($mul8)*($sub16);
      $retval=$mul17;
      label = 7; break;
    case 7: 
      var $19=$retval;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_imp_zone_volume_3d"] = _sphere_imp_zone_volume_3d;
function _sphere_imp2exp_3d($r, $pc, $p1, $p2, $p3, $p4) {
  var label = 0;
  var $r_addr;
  var $pc_addr;
  var $p1_addr;
  var $p2_addr;
  var $p3_addr;
  var $p4_addr;
  var $phi;
  var $pi;
  var $theta;
  $r_addr=$r;
  $pc_addr=$pc;
  $p1_addr=$p1;
  $p2_addr=$p2;
  $p3_addr=$p3;
  $p4_addr=$p4;
  $pi=3.141592653589793;
  $theta=0;
  $phi=0;
  var $0=$pc_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$r_addr;
  var $3=$theta;
  var $call=Math.cos($3);
  var $mul=($2)*($call);
  var $4=$phi;
  var $call1=Math.sin($4);
  var $mul2=($mul)*($call1);
  var $add=($1)+($mul2);
  var $5=$p1_addr;
  var $arrayidx3=(($5)|0);
  HEAPF64[(($arrayidx3)>>3)]=$add;
  var $6=$pc_addr;
  var $arrayidx4=(($6+8)|0);
  var $7=HEAPF64[(($arrayidx4)>>3)];
  var $8=$r_addr;
  var $9=$theta;
  var $call5=Math.sin($9);
  var $mul6=($8)*($call5);
  var $10=$phi;
  var $call7=Math.sin($10);
  var $mul8=($mul6)*($call7);
  var $add9=($7)+($mul8);
  var $11=$p1_addr;
  var $arrayidx10=(($11+8)|0);
  HEAPF64[(($arrayidx10)>>3)]=$add9;
  var $12=$pc_addr;
  var $arrayidx11=(($12+16)|0);
  var $13=HEAPF64[(($arrayidx11)>>3)];
  var $14=$r_addr;
  var $15=$phi;
  var $call12=Math.cos($15);
  var $mul13=($14)*($call12);
  var $add14=($13)+($mul13);
  var $16=$p1_addr;
  var $arrayidx15=(($16+16)|0);
  HEAPF64[(($arrayidx15)>>3)]=$add14;
  $theta=0;
  var $17=$pi;
  var $mul16=($17)*(2);
  var $div=($mul16)/(3);
  $phi=$div;
  var $18=$pc_addr;
  var $arrayidx17=(($18)|0);
  var $19=HEAPF64[(($arrayidx17)>>3)];
  var $20=$r_addr;
  var $21=$theta;
  var $call18=Math.cos($21);
  var $mul19=($20)*($call18);
  var $22=$phi;
  var $call20=Math.sin($22);
  var $mul21=($mul19)*($call20);
  var $add22=($19)+($mul21);
  var $23=$p2_addr;
  var $arrayidx23=(($23)|0);
  HEAPF64[(($arrayidx23)>>3)]=$add22;
  var $24=$pc_addr;
  var $arrayidx24=(($24+8)|0);
  var $25=HEAPF64[(($arrayidx24)>>3)];
  var $26=$r_addr;
  var $27=$theta;
  var $call25=Math.sin($27);
  var $mul26=($26)*($call25);
  var $28=$phi;
  var $call27=Math.sin($28);
  var $mul28=($mul26)*($call27);
  var $add29=($25)+($mul28);
  var $29=$p2_addr;
  var $arrayidx30=(($29+8)|0);
  HEAPF64[(($arrayidx30)>>3)]=$add29;
  var $30=$pc_addr;
  var $arrayidx31=(($30+16)|0);
  var $31=HEAPF64[(($arrayidx31)>>3)];
  var $32=$r_addr;
  var $33=$phi;
  var $call32=Math.cos($33);
  var $mul33=($32)*($call32);
  var $add34=($31)+($mul33);
  var $34=$p2_addr;
  var $arrayidx35=(($34+16)|0);
  HEAPF64[(($arrayidx35)>>3)]=$add34;
  var $35=$pi;
  var $mul36=($35)*(2);
  var $div37=($mul36)/(3);
  $theta=$div37;
  var $36=$pi;
  var $mul38=($36)*(2);
  var $div39=($mul38)/(3);
  $phi=$div39;
  var $37=$pc_addr;
  var $arrayidx40=(($37)|0);
  var $38=HEAPF64[(($arrayidx40)>>3)];
  var $39=$r_addr;
  var $40=$theta;
  var $call41=Math.cos($40);
  var $mul42=($39)*($call41);
  var $41=$phi;
  var $call43=Math.sin($41);
  var $mul44=($mul42)*($call43);
  var $add45=($38)+($mul44);
  var $42=$p3_addr;
  var $arrayidx46=(($42)|0);
  HEAPF64[(($arrayidx46)>>3)]=$add45;
  var $43=$pc_addr;
  var $arrayidx47=(($43+8)|0);
  var $44=HEAPF64[(($arrayidx47)>>3)];
  var $45=$r_addr;
  var $46=$theta;
  var $call48=Math.sin($46);
  var $mul49=($45)*($call48);
  var $47=$phi;
  var $call50=Math.sin($47);
  var $mul51=($mul49)*($call50);
  var $add52=($44)+($mul51);
  var $48=$p3_addr;
  var $arrayidx53=(($48+8)|0);
  HEAPF64[(($arrayidx53)>>3)]=$add52;
  var $49=$pc_addr;
  var $arrayidx54=(($49+16)|0);
  var $50=HEAPF64[(($arrayidx54)>>3)];
  var $51=$r_addr;
  var $52=$phi;
  var $call55=Math.cos($52);
  var $mul56=($51)*($call55);
  var $add57=($50)+($mul56);
  var $53=$p3_addr;
  var $arrayidx58=(($53+16)|0);
  HEAPF64[(($arrayidx58)>>3)]=$add57;
  var $54=$pi;
  var $mul59=($54)*(4);
  var $div60=($mul59)/(3);
  $theta=$div60;
  var $55=$pi;
  var $mul61=($55)*(2);
  var $div62=($mul61)/(3);
  $phi=$div62;
  var $56=$pc_addr;
  var $arrayidx63=(($56)|0);
  var $57=HEAPF64[(($arrayidx63)>>3)];
  var $58=$r_addr;
  var $59=$theta;
  var $call64=Math.cos($59);
  var $mul65=($58)*($call64);
  var $60=$phi;
  var $call66=Math.sin($60);
  var $mul67=($mul65)*($call66);
  var $add68=($57)+($mul67);
  var $61=$p4_addr;
  var $arrayidx69=(($61)|0);
  HEAPF64[(($arrayidx69)>>3)]=$add68;
  var $62=$pc_addr;
  var $arrayidx70=(($62+8)|0);
  var $63=HEAPF64[(($arrayidx70)>>3)];
  var $64=$r_addr;
  var $65=$theta;
  var $call71=Math.sin($65);
  var $mul72=($64)*($call71);
  var $66=$phi;
  var $call73=Math.sin($66);
  var $mul74=($mul72)*($call73);
  var $add75=($63)+($mul74);
  var $67=$p4_addr;
  var $arrayidx76=(($67+8)|0);
  HEAPF64[(($arrayidx76)>>3)]=$add75;
  var $68=$pc_addr;
  var $arrayidx77=(($68+16)|0);
  var $69=HEAPF64[(($arrayidx77)>>3)];
  var $70=$r_addr;
  var $71=$phi;
  var $call78=Math.cos($71);
  var $mul79=($70)*($call78);
  var $add80=($69)+($mul79);
  var $72=$p4_addr;
  var $arrayidx81=(($72+16)|0);
  HEAPF64[(($arrayidx81)>>3)]=$add80;
  return;
}
Module["_sphere_imp2exp_3d"] = _sphere_imp2exp_3d;
function _sphere_triangle_contains_point($v1, $v2, $v3, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $v1_addr;
      var $v2_addr;
      var $v3_addr;
      var $p_addr;
      var $contains;
      var $dim;
      var $dim_num;
      var $p_direction=__stackBase__;
      var $p_norm;
      var $normal_direction=(__stackBase__)+(24);
      var $normal_norm;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $v3_addr=$v3;
      $p_addr=$p;
      $dim_num=3;
      var $0=$v2_addr;
      var $arrayidx=(($0+8)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$v1_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$v3_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$v1_addr;
      var $arrayidx3=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$v2_addr;
      var $arrayidx5=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$v1_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$v3_addr;
      var $arrayidx8=(($12+8)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$v1_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      var $arrayidx13=(($normal_direction)|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub12;
      var $16=$v2_addr;
      var $arrayidx14=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $18=$v1_addr;
      var $arrayidx15=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($17)-($19);
      var $20=$v3_addr;
      var $arrayidx17=(($20)|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $22=$v1_addr;
      var $arrayidx18=(($22)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($21)-($23);
      var $mul20=($sub16)*($sub19);
      var $24=$v2_addr;
      var $arrayidx21=(($24)|0);
      var $25=HEAPF64[(($arrayidx21)>>3)];
      var $26=$v1_addr;
      var $arrayidx22=(($26)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($25)-($27);
      var $28=$v3_addr;
      var $arrayidx24=(($28+16)|0);
      var $29=HEAPF64[(($arrayidx24)>>3)];
      var $30=$v1_addr;
      var $arrayidx25=(($30+16)|0);
      var $31=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($29)-($31);
      var $mul27=($sub23)*($sub26);
      var $sub28=($mul20)-($mul27);
      var $arrayidx29=(($normal_direction+8)|0);
      HEAPF64[(($arrayidx29)>>3)]=$sub28;
      var $32=$v2_addr;
      var $arrayidx30=(($32)|0);
      var $33=HEAPF64[(($arrayidx30)>>3)];
      var $34=$v1_addr;
      var $arrayidx31=(($34)|0);
      var $35=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($33)-($35);
      var $36=$v3_addr;
      var $arrayidx33=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx33)>>3)];
      var $38=$v1_addr;
      var $arrayidx34=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($37)-($39);
      var $mul36=($sub32)*($sub35);
      var $40=$v2_addr;
      var $arrayidx37=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx37)>>3)];
      var $42=$v1_addr;
      var $arrayidx38=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($41)-($43);
      var $44=$v3_addr;
      var $arrayidx40=(($44)|0);
      var $45=HEAPF64[(($arrayidx40)>>3)];
      var $46=$v1_addr;
      var $arrayidx41=(($46)|0);
      var $47=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($45)-($47);
      var $mul43=($sub39)*($sub42);
      var $sub44=($mul36)-($mul43);
      var $arrayidx45=(($normal_direction+16)|0);
      HEAPF64[(($arrayidx45)>>3)]=$sub44;
      var $48=$dim_num;
      var $arraydecay=(($normal_direction)|0);
      var $call=_r8vec_norm($48, $arraydecay);
      $normal_norm=$call;
      var $49=$normal_norm;
      var $cmp=$49 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call46=_r8_huge();
      var $sub47=(-$call46);
      $contains=$sub47;
      var $50=$contains;
      $retval=$50;
      label = 15; break;
    case 4: 
      $dim=0;
      label = 5; break;
    case 5: 
      var $51=$dim;
      var $52=$dim_num;
      var $cmp48=(($51)|(0)) < (($52)|(0));
      if ($cmp48) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $53=$dim;
      var $arrayidx49=(($normal_direction+($53<<3))|0);
      var $54=HEAPF64[(($arrayidx49)>>3)];
      var $55=$normal_norm;
      var $div=($54)/($55);
      var $56=$dim;
      var $arrayidx50=(($normal_direction+($56<<3))|0);
      HEAPF64[(($arrayidx50)>>3)]=$div;
      label = 7; break;
    case 7: 
      var $57=$dim;
      var $inc=((($57)+(1))|0);
      $dim=$inc;
      label = 5; break;
    case 8: 
      var $58=$dim_num;
      var $59=$p_addr;
      var $call51=_r8vec_norm($58, $59);
      $p_norm=$call51;
      var $60=$p_norm;
      var $cmp52=$60 == 0;
      if ($cmp52) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $call54=_r8_huge();
      var $sub55=(-$call54);
      $contains=$sub55;
      var $61=$contains;
      $retval=$61;
      label = 15; break;
    case 10: 
      $dim=0;
      label = 11; break;
    case 11: 
      var $62=$dim;
      var $63=$dim_num;
      var $cmp58=(($62)|(0)) < (($63)|(0));
      if ($cmp58) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $64=$dim;
      var $arrayidx60=(($p_direction+($64<<3))|0);
      var $65=HEAPF64[(($arrayidx60)>>3)];
      var $66=$p_norm;
      var $div61=($65)/($66);
      var $67=$dim;
      var $arrayidx62=(($p_direction+($67<<3))|0);
      HEAPF64[(($arrayidx62)>>3)]=$div61;
      label = 13; break;
    case 13: 
      var $68=$dim;
      var $inc64=((($68)+(1))|0);
      $dim=$inc64;
      label = 11; break;
    case 14: 
      var $69=$dim_num;
      var $arraydecay66=(($normal_direction)|0);
      var $arraydecay67=(($p_direction)|0);
      var $call68=_r8vec_dot_product($69, $arraydecay66, $arraydecay67);
      $contains=$call68;
      var $70=$contains;
      $retval=$70;
      label = 15; break;
    case 15: 
      var $71=$retval;
      STACKTOP = __stackBase__;
      return $71;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_triangle_contains_point"] = _sphere_triangle_contains_point;
function _sphere_triangle_sides_to_angles($r, $as, $bs, $cs, $a, $b, $c) {
  var label = 0;
  var $r_addr;
  var $as_addr;
  var $bs_addr;
  var $cs_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $asu;
  var $bsu;
  var $csu;
  var $ssu;
  var $tan_a2;
  var $tan_b2;
  var $tan_c2;
  $r_addr=$r;
  $as_addr=$as;
  $bs_addr=$bs;
  $cs_addr=$cs;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$as_addr;
  var $1=$r_addr;
  var $div=($0)/($1);
  $asu=$div;
  var $2=$bs_addr;
  var $3=$r_addr;
  var $div1=($2)/($3);
  $bsu=$div1;
  var $4=$cs_addr;
  var $5=$r_addr;
  var $div2=($4)/($5);
  $csu=$div2;
  var $6=$asu;
  var $7=$bsu;
  var $add=($6)+($7);
  var $8=$csu;
  var $add3=($add)+($8);
  var $div4=($add3)/(2);
  $ssu=$div4;
  var $9=$ssu;
  var $10=$bsu;
  var $sub=($9)-($10);
  var $call=Math.sin($sub);
  var $11=$ssu;
  var $12=$csu;
  var $sub5=($11)-($12);
  var $call6=Math.sin($sub5);
  var $mul=($call)*($call6);
  var $13=$ssu;
  var $call7=Math.sin($13);
  var $14=$ssu;
  var $15=$asu;
  var $sub8=($14)-($15);
  var $call9=Math.sin($sub8);
  var $mul10=($call7)*($call9);
  var $div11=($mul)/($mul10);
  var $call12=Math.sqrt($div11);
  $tan_a2=$call12;
  var $16=$tan_a2;
  var $call13=Math.atan($16);
  var $mul14=($call13)*(2);
  var $17=$a_addr;
  HEAPF64[(($17)>>3)]=$mul14;
  var $18=$ssu;
  var $19=$asu;
  var $sub15=($18)-($19);
  var $call16=Math.sin($sub15);
  var $20=$ssu;
  var $21=$csu;
  var $sub17=($20)-($21);
  var $call18=Math.sin($sub17);
  var $mul19=($call16)*($call18);
  var $22=$ssu;
  var $call20=Math.sin($22);
  var $23=$ssu;
  var $24=$bsu;
  var $sub21=($23)-($24);
  var $call22=Math.sin($sub21);
  var $mul23=($call20)*($call22);
  var $div24=($mul19)/($mul23);
  var $call25=Math.sqrt($div24);
  $tan_b2=$call25;
  var $25=$tan_b2;
  var $call26=Math.atan($25);
  var $mul27=($call26)*(2);
  var $26=$b_addr;
  HEAPF64[(($26)>>3)]=$mul27;
  var $27=$ssu;
  var $28=$asu;
  var $sub28=($27)-($28);
  var $call29=Math.sin($sub28);
  var $29=$ssu;
  var $30=$bsu;
  var $sub30=($29)-($30);
  var $call31=Math.sin($sub30);
  var $mul32=($call29)*($call31);
  var $31=$ssu;
  var $call33=Math.sin($31);
  var $32=$ssu;
  var $33=$csu;
  var $sub34=($32)-($33);
  var $call35=Math.sin($sub34);
  var $mul36=($call33)*($call35);
  var $div37=($mul32)/($mul36);
  var $call38=Math.sqrt($div37);
  $tan_c2=$call38;
  var $34=$tan_c2;
  var $call39=Math.atan($34);
  var $mul40=($call39)*(2);
  var $35=$c_addr;
  HEAPF64[(($35)>>3)]=$mul40;
  return;
}
Module["_sphere_triangle_sides_to_angles"] = _sphere_triangle_sides_to_angles;
function _sphere_triangle_vertices_to_angles($r, $v1, $v2, $v3, $a, $b, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $r_addr;
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $as=__stackBase__;
  var $bs=(__stackBase__)+(8);
  var $cs=(__stackBase__)+(16);
  $r_addr=$r;
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$r_addr;
  var $1=$v1_addr;
  var $2=$v2_addr;
  var $3=$v3_addr;
  _sphere_triangle_vertices_to_sides($0, $1, $2, $3, $as, $bs, $cs);
  var $4=$r_addr;
  var $5=HEAPF64[(($as)>>3)];
  var $6=HEAPF64[(($bs)>>3)];
  var $7=HEAPF64[(($cs)>>3)];
  var $8=$a_addr;
  var $9=$b_addr;
  var $10=$c_addr;
  _sphere_triangle_sides_to_angles($4, $5, $6, $7, $8, $9, $10);
  STACKTOP = __stackBase__;
  return;
}
Module["_sphere_triangle_vertices_to_angles"] = _sphere_triangle_vertices_to_angles;
function _sphere_triangle_vertices_to_sides($r, $v1, $v2, $v3, $as, $bs, $cs) {
  var label = 0;
  var $r_addr;
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $as_addr;
  var $bs_addr;
  var $cs_addr;
  $r_addr=$r;
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  $as_addr=$as;
  $bs_addr=$bs;
  $cs_addr=$cs;
  var $0=$r_addr;
  var $1=$v2_addr;
  var $2=$v3_addr;
  var $call=_r8vec_dot_product(3, $1, $2);
  var $3=$r_addr;
  var $4=$r_addr;
  var $mul=($3)*($4);
  var $div=($call)/($mul);
  var $call1=_r8_acos($div);
  var $mul2=($0)*($call1);
  var $5=$as_addr;
  HEAPF64[(($5)>>3)]=$mul2;
  var $6=$r_addr;
  var $7=$v3_addr;
  var $8=$v1_addr;
  var $call3=_r8vec_dot_product(3, $7, $8);
  var $9=$r_addr;
  var $10=$r_addr;
  var $mul4=($9)*($10);
  var $div5=($call3)/($mul4);
  var $call6=_r8_acos($div5);
  var $mul7=($6)*($call6);
  var $11=$bs_addr;
  HEAPF64[(($11)>>3)]=$mul7;
  var $12=$r_addr;
  var $13=$v1_addr;
  var $14=$v2_addr;
  var $call8=_r8vec_dot_product(3, $13, $14);
  var $15=$r_addr;
  var $16=$r_addr;
  var $mul9=($15)*($16);
  var $div10=($call8)/($mul9);
  var $call11=_r8_acos($div10);
  var $mul12=($12)*($call11);
  var $17=$cs_addr;
  HEAPF64[(($17)>>3)]=$mul12;
  return;
}
Module["_sphere_triangle_vertices_to_sides"] = _sphere_triangle_vertices_to_sides;
function _sphere_triangle_vertices_to_area($r, $v1, $v2, $v3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $r_addr;
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $area;
  var $a=__stackBase__;
  var $as=(__stackBase__)+(8);
  var $b=(__stackBase__)+(16);
  var $bs=(__stackBase__)+(24);
  var $c=(__stackBase__)+(32);
  var $cs=(__stackBase__)+(40);
  $r_addr=$r;
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  var $0=$r_addr;
  var $1=$v1_addr;
  var $2=$v2_addr;
  var $3=$v3_addr;
  _sphere_triangle_vertices_to_sides($0, $1, $2, $3, $as, $bs, $cs);
  var $4=$r_addr;
  var $5=HEAPF64[(($as)>>3)];
  var $6=HEAPF64[(($bs)>>3)];
  var $7=HEAPF64[(($cs)>>3)];
  _sphere_triangle_sides_to_angles($4, $5, $6, $7, $a, $b, $c);
  var $8=$r_addr;
  var $9=HEAPF64[(($a)>>3)];
  var $10=HEAPF64[(($b)>>3)];
  var $11=HEAPF64[(($c)>>3)];
  var $call=_sphere_triangle_angles_to_area($8, $9, $10, $11);
  $area=$call;
  var $12=$area;
  STACKTOP = __stackBase__;
  return $12;
}
Module["_sphere_triangle_vertices_to_area"] = _sphere_triangle_vertices_to_area;
function _sphere_triangle_vertices_to_centroid($r, $v1, $v2, $v3, $vs) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $r_addr;
      var $v1_addr;
      var $v2_addr;
      var $v3_addr;
      var $vs_addr;
      var $i;
      var $norm;
      $r_addr=$r;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $v3_addr=$v3;
      $vs_addr=$vs;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$v1_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$v2_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $add=($3)+($6);
      var $7=$i;
      var $8=$v3_addr;
      var $arrayidx2=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx2)>>3)];
      var $add3=($add)+($9);
      var $div=($add3)/(3);
      var $10=$i;
      var $11=$vs_addr;
      var $arrayidx4=(($11+($10<<3))|0);
      HEAPF64[(($arrayidx4)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $13=$vs_addr;
      var $call=_r8vec_norm(3, $13);
      $norm=$call;
      $i=0;
      label = 7; break;
    case 7: 
      var $14=$i;
      var $cmp6=(($14)|(0)) < 3;
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $15=$r_addr;
      var $16=$i;
      var $17=$vs_addr;
      var $arrayidx8=(($17+($16<<3))|0);
      var $18=HEAPF64[(($arrayidx8)>>3)];
      var $mul=($15)*($18);
      var $19=$norm;
      var $div9=($mul)/($19);
      var $20=$i;
      var $21=$vs_addr;
      var $arrayidx10=(($21+($20<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$div9;
      label = 9; break;
    case 9: 
      var $22=$i;
      var $inc12=((($22)+(1))|0);
      $i=$inc12;
      label = 7; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_triangle_vertices_to_centroid"] = _sphere_triangle_vertices_to_centroid;
function _sphere_triangle_vertices_to_orientation($a, $b, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $cd=__stackBase__;
      var $cp=(__stackBase__)+(24);
      var $i;
      var $o;
      var $v1=(__stackBase__)+(48);
      var $v2=(__stackBase__)+(72);
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$a_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$b_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $add=($3)+($6);
      var $7=$i;
      var $8=$c_addr;
      var $arrayidx2=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx2)>>3)];
      var $add3=($add)+($9);
      var $div=($add3)/(3);
      var $10=$i;
      var $arrayidx4=(($cd+($10<<3))|0);
      HEAPF64[(($arrayidx4)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $12=$i;
      var $cmp6=(($12)|(0)) < 3;
      if ($cmp6) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $13=$i;
      var $14=$c_addr;
      var $arrayidx8=(($14+($13<<3))|0);
      var $15=HEAPF64[(($arrayidx8)>>3)];
      var $16=$i;
      var $17=$b_addr;
      var $arrayidx9=(($17+($16<<3))|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub=($15)-($18);
      var $19=$i;
      var $arrayidx10=(($v1+($19<<3))|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub;
      var $20=$i;
      var $21=$a_addr;
      var $arrayidx11=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx11)>>3)];
      var $23=$i;
      var $24=$b_addr;
      var $arrayidx12=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($22)-($25);
      var $26=$i;
      var $arrayidx14=(($v2+($26<<3))|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      label = 9; break;
    case 9: 
      var $27=$i;
      var $inc16=((($27)+(1))|0);
      $i=$inc16;
      label = 7; break;
    case 10: 
      var $arrayidx18=(($v1+8)|0);
      var $28=HEAPF64[(($arrayidx18)>>3)];
      var $arrayidx19=(($v2+16)|0);
      var $29=HEAPF64[(($arrayidx19)>>3)];
      var $mul=($28)*($29);
      var $arrayidx20=(($v1+16)|0);
      var $30=HEAPF64[(($arrayidx20)>>3)];
      var $arrayidx21=(($v2+8)|0);
      var $31=HEAPF64[(($arrayidx21)>>3)];
      var $mul22=($30)*($31);
      var $sub23=($mul)-($mul22);
      var $arrayidx24=(($cp)|0);
      HEAPF64[(($arrayidx24)>>3)]=$sub23;
      var $arrayidx25=(($v1+16)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $arrayidx26=(($v2)|0);
      var $33=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($32)*($33);
      var $arrayidx28=(($v1)|0);
      var $34=HEAPF64[(($arrayidx28)>>3)];
      var $arrayidx29=(($v2+16)|0);
      var $35=HEAPF64[(($arrayidx29)>>3)];
      var $mul30=($34)*($35);
      var $sub31=($mul27)-($mul30);
      var $arrayidx32=(($cp+8)|0);
      HEAPF64[(($arrayidx32)>>3)]=$sub31;
      var $arrayidx33=(($v1)|0);
      var $36=HEAPF64[(($arrayidx33)>>3)];
      var $arrayidx34=(($v2+8)|0);
      var $37=HEAPF64[(($arrayidx34)>>3)];
      var $mul35=($36)*($37);
      var $arrayidx36=(($v1+8)|0);
      var $38=HEAPF64[(($arrayidx36)>>3)];
      var $arrayidx37=(($v2)|0);
      var $39=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($38)*($39);
      var $sub39=($mul35)-($mul38);
      var $arrayidx40=(($cp+16)|0);
      HEAPF64[(($arrayidx40)>>3)]=$sub39;
      var $arraydecay=(($cp)|0);
      var $arraydecay41=(($cd)|0);
      var $call=_r8vec_dot_product(3, $arraydecay, $arraydecay41);
      var $cmp42=$call < 0;
      if ($cmp42) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $o=-1;
      label = 13; break;
    case 12: 
      $o=1;
      label = 13; break;
    case 13: 
      var $40=$o;
      STACKTOP = __stackBase__;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_triangle_vertices_to_orientation"] = _sphere_triangle_vertices_to_orientation;
function _sphere_unit_area_values($n_data, $dim_num, $area) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_data_addr;
      var $dim_num_addr;
      var $area_addr;
      var $area_vec=__stackBase__;
      var $dim_num_vec=(__stackBase__)+(72);
      $n_data_addr=$n_data;
      $dim_num_addr=$dim_num;
      $area_addr=$area;
      var $0=$area_vec;
      assert(72 % 1 === 0);(_memcpy($0, 2304, 72)|0);
      var $1=$dim_num_vec;
      assert(36 % 1 === 0);(_memcpy($1, 2264, 36)|0);
      var $2=$n_data_addr;
      var $3=HEAP32[(($2)>>2)];
      var $cmp=(($3)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$n_data_addr;
      HEAP32[(($4)>>2)]=0;
      label = 4; break;
    case 4: 
      var $5=$n_data_addr;
      var $6=HEAP32[(($5)>>2)];
      var $cmp1=9 <= (($6)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$n_data_addr;
      HEAP32[(($7)>>2)]=0;
      var $8=$dim_num_addr;
      HEAP32[(($8)>>2)]=0;
      var $9=$area_addr;
      HEAPF64[(($9)>>3)]=0;
      label = 7; break;
    case 6: 
      var $10=$n_data_addr;
      var $11=HEAP32[(($10)>>2)];
      var $arrayidx=(($dim_num_vec+($11<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $13=$dim_num_addr;
      HEAP32[(($13)>>2)]=$12;
      var $14=$n_data_addr;
      var $15=HEAP32[(($14)>>2)];
      var $arrayidx3=(($area_vec+($15<<3))|0);
      var $16=HEAPF64[(($arrayidx3)>>3)];
      var $17=$area_addr;
      HEAPF64[(($17)>>3)]=$16;
      var $18=$n_data_addr;
      var $19=HEAP32[(($18)>>2)];
      var $add=((($19)+(1))|0);
      var $20=$n_data_addr;
      HEAP32[(($20)>>2)]=$add;
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_area_values"] = _sphere_unit_area_values;
function _sphere_unit_sample_2d($seed) {
  var label = 0;
  var $seed_addr;
  var $pi;
  var $u;
  var $x;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$seed_addr;
  var $call=_r8_uniform_01($0);
  $u=$call;
  var $call1=_malloc(16);
  var $1=$call1;
  $x=$1;
  var $2=$pi;
  var $mul=($2)*(2);
  var $3=$u;
  var $mul2=($mul)*($3);
  var $call3=Math.cos($mul2);
  var $4=$x;
  var $arrayidx=(($4)|0);
  HEAPF64[(($arrayidx)>>3)]=$call3;
  var $5=$pi;
  var $mul4=($5)*(2);
  var $6=$u;
  var $mul5=($mul4)*($6);
  var $call6=Math.sin($mul5);
  var $7=$x;
  var $arrayidx7=(($7+8)|0);
  HEAPF64[(($arrayidx7)>>3)]=$call6;
  var $8=$x;
  return $8;
}
Module["_sphere_unit_sample_2d"] = _sphere_unit_sample_2d;
function _sphere_unit_sample_3d($seed) {
  var label = 0;
  var $seed_addr;
  var $phi;
  var $pi;
  var $theta;
  var $vdot;
  var $x;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$seed_addr;
  var $call=_r8_uniform_01($0);
  var $mul=($call)*(2);
  var $sub=($mul)-(1);
  $vdot=$sub;
  var $1=$vdot;
  var $call1=_r8_acos($1);
  $phi=$call1;
  var $2=$pi;
  var $mul2=($2)*(2);
  var $3=$seed_addr;
  var $call3=_r8_uniform_01($3);
  var $mul4=($mul2)*($call3);
  $theta=$mul4;
  var $call5=_malloc(24);
  var $4=$call5;
  $x=$4;
  var $5=$theta;
  var $call6=Math.cos($5);
  var $6=$phi;
  var $call7=Math.sin($6);
  var $mul8=($call6)*($call7);
  var $7=$x;
  var $arrayidx=(($7)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul8;
  var $8=$theta;
  var $call9=Math.sin($8);
  var $9=$phi;
  var $call10=Math.sin($9);
  var $mul11=($call9)*($call10);
  var $10=$x;
  var $arrayidx12=(($10+8)|0);
  HEAPF64[(($arrayidx12)>>3)]=$mul11;
  var $11=$phi;
  var $call13=Math.cos($11);
  var $12=$x;
  var $arrayidx14=(($12+16)|0);
  HEAPF64[(($arrayidx14)>>3)]=$call13;
  var $13=$x;
  return $13;
}
Module["_sphere_unit_sample_3d"] = _sphere_unit_sample_3d;
function _sphere_unit_sample_3d_2($seed) {
  var label = 0;
  var $seed_addr;
  var $phi;
  var $pi;
  var $theta;
  var $x;
  $seed_addr=$seed;
  $pi=3.141592653589793;
  var $0=$pi;
  var $1=$seed_addr;
  var $call=_r8_uniform_01($1);
  var $mul=($0)*($call);
  $phi=$mul;
  var $2=$pi;
  var $mul1=($2)*(2);
  var $3=$seed_addr;
  var $call2=_r8_uniform_01($3);
  var $mul3=($mul1)*($call2);
  $theta=$mul3;
  var $call4=_malloc(24);
  var $4=$call4;
  $x=$4;
  var $5=$theta;
  var $call5=Math.cos($5);
  var $6=$phi;
  var $call6=Math.sin($6);
  var $mul7=($call5)*($call6);
  var $7=$x;
  var $arrayidx=(($7)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul7;
  var $8=$theta;
  var $call8=Math.sin($8);
  var $9=$phi;
  var $call9=Math.sin($9);
  var $mul10=($call8)*($call9);
  var $10=$x;
  var $arrayidx11=(($10+8)|0);
  HEAPF64[(($arrayidx11)>>3)]=$mul10;
  var $11=$phi;
  var $call12=Math.cos($11);
  var $12=$x;
  var $arrayidx13=(($12+16)|0);
  HEAPF64[(($arrayidx13)>>3)]=$call12;
  var $13=$x;
  return $13;
}
Module["_sphere_unit_sample_3d_2"] = _sphere_unit_sample_3d_2;
function _sphere_unit_sample_nd($dim_num, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $seed_addr;
      var $i;
      var $random_cosine;
      var $random_sign;
      var $random_sine;
      var $p;
      var $pi;
      $dim_num_addr=$dim_num;
      $seed_addr=$seed;
      var $0=$dim_num_addr;
      var $mul=($0<<3);
      var $call=_malloc($mul);
      var $1=$call;
      $p=$1;
      var $2=$p;
      var $arrayidx=(($2)|0);
      HEAPF64[(($arrayidx)>>3)]=1;
      $i=1;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=$dim_num_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $5=$i;
      var $6=$p;
      var $arrayidx1=(($6+($5<<3))|0);
      HEAPF64[(($arrayidx1)>>3)]=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $8=$i;
      var $9=$dim_num_addr;
      var $sub=((($9)-(1))|0);
      var $cmp3=(($8)|(0)) < (($sub)|(0));
      if ($cmp3) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$seed_addr;
      var $call5=_r8_uniform_01($10);
      var $mul6=($call5)*(2);
      var $sub7=($mul6)-(1);
      $random_cosine=$sub7;
      var $11=$seed_addr;
      var $call8=_r8_uniform_01($11);
      var $mul9=($call8)*(2);
      var $conv=(($mul9)&-1);
      var $mul10=($conv<<1);
      var $sub11=((($mul10)-(1))|0);
      var $conv12=(($sub11)|(0));
      $random_sign=$conv12;
      var $12=$random_sign;
      var $13=$random_cosine;
      var $14=$random_cosine;
      var $mul13=($13)*($14);
      var $sub14=(1)-($mul13);
      var $call15=Math.sqrt($sub14);
      var $mul16=($12)*($call15);
      $random_sine=$mul16;
      var $15=$i;
      var $16=$p;
      var $arrayidx17=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx17)>>3)];
      $pi=$17;
      var $18=$random_cosine;
      var $19=$pi;
      var $mul18=($18)*($19);
      var $20=$i;
      var $21=$p;
      var $arrayidx19=(($21+($20<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$mul18;
      var $22=$random_sine;
      var $23=$pi;
      var $mul20=($22)*($23);
      var $24=$i;
      var $add=((($24)+(1))|0);
      var $25=$p;
      var $arrayidx21=(($25+($add<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$mul20;
      label = 9; break;
    case 9: 
      var $26=$i;
      var $inc23=((($26)+(1))|0);
      $i=$inc23;
      label = 7; break;
    case 10: 
      var $27=$p;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_sample_nd"] = _sphere_unit_sample_nd;
function _sphere_unit_sample_nd_2($dim_num, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $seed_addr;
      var $i;
      var $norm;
      var $p;
      $dim_num_addr=$dim_num;
      $seed_addr=$seed;
      var $0=$dim_num_addr;
      var $1=$seed_addr;
      var $call=_r8vec_normal_01_new($0, $1);
      $p=$call;
      var $2=$dim_num_addr;
      var $3=$p;
      var $call1=_r8vec_norm($2, $3);
      $norm=$call1;
      $i=0;
      label = 3; break;
    case 3: 
      var $4=$i;
      var $5=$dim_num_addr;
      var $cmp=(($4)|(0)) < (($5)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$i;
      var $7=$p;
      var $arrayidx=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$norm;
      var $div=($8)/($9);
      var $10=$i;
      var $11=$p;
      var $arrayidx2=(($11+($10<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $13=$p;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_sample_nd_2"] = _sphere_unit_sample_nd_2;
function _sphere_unit_sample_nd_3($dim_num, $seed) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $seed_addr;
      var $i;
      var $norm;
      var $p;
      $dim_num_addr=$dim_num;
      $seed_addr=$seed;
      label = 3; break;
    case 3: 
      var $0=$dim_num_addr;
      var $1=$seed_addr;
      var $call=_r8vec_uniform_01_new($0, $1);
      $p=$call;
      $i=0;
      label = 4; break;
    case 4: 
      var $2=$i;
      var $3=$dim_num_addr;
      var $cmp=(($2)|(0)) < (($3)|(0));
      if ($cmp) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $4=$i;
      var $5=$p;
      var $arrayidx=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $mul=($6)*(2);
      var $sub=($mul)-(1);
      var $7=$i;
      var $8=$p;
      var $arrayidx2=(($8+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      label = 6; break;
    case 6: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 4; break;
    case 7: 
      var $10=$dim_num_addr;
      var $11=$p;
      var $call3=_r8vec_norm($10, $11);
      $norm=$call3;
      var $12=$norm;
      var $cmp4=$12 <= 1;
      if ($cmp4) { label = 8; break; } else { label = 13; break; }
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $13=$i;
      var $14=$dim_num_addr;
      var $cmp6=(($13)|(0)) < (($14)|(0));
      if ($cmp6) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $15=$i;
      var $16=$p;
      var $arrayidx8=(($16+($15<<3))|0);
      var $17=HEAPF64[(($arrayidx8)>>3)];
      var $18=$norm;
      var $div=($17)/($18);
      var $19=$i;
      var $20=$p;
      var $arrayidx9=(($20+($19<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$div;
      label = 11; break;
    case 11: 
      var $21=$i;
      var $inc11=((($21)+(1))|0);
      $i=$inc11;
      label = 9; break;
    case 12: 
      label = 14; break;
    case 13: 
      var $22=$p;
      var $23=$22;
      _free($23);
      label = 3; break;
    case 14: 
      var $24=$p;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_sample_nd_3"] = _sphere_unit_sample_nd_3;
function _sphere_unit_volume_values($n_data, $dim_num, $volume) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_data_addr;
      var $dim_num_addr;
      var $volume_addr;
      var $dim_num_vec=__stackBase__;
      var $volume_vec=(__stackBase__)+(40);
      $n_data_addr=$n_data;
      $dim_num_addr=$dim_num;
      $volume_addr=$volume;
      var $0=$dim_num_vec;
      assert(40 % 1 === 0);(_memcpy($0, 2224, 40)|0);
      var $1=$volume_vec;
      assert(80 % 1 === 0);(_memcpy($1, 2144, 80)|0);
      var $2=$n_data_addr;
      var $3=HEAP32[(($2)>>2)];
      var $cmp=(($3)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $4=$n_data_addr;
      HEAP32[(($4)>>2)]=0;
      label = 4; break;
    case 4: 
      var $5=$n_data_addr;
      var $6=HEAP32[(($5)>>2)];
      var $cmp1=10 <= (($6)|(0));
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $7=$n_data_addr;
      HEAP32[(($7)>>2)]=0;
      var $8=$dim_num_addr;
      HEAP32[(($8)>>2)]=0;
      var $9=$volume_addr;
      HEAPF64[(($9)>>3)]=0;
      label = 7; break;
    case 6: 
      var $10=$n_data_addr;
      var $11=HEAP32[(($10)>>2)];
      var $arrayidx=(($dim_num_vec+($11<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $13=$dim_num_addr;
      HEAP32[(($13)>>2)]=$12;
      var $14=$n_data_addr;
      var $15=HEAP32[(($14)>>2)];
      var $arrayidx3=(($volume_vec+($15<<3))|0);
      var $16=HEAPF64[(($arrayidx3)>>3)];
      var $17=$volume_addr;
      HEAPF64[(($17)>>3)]=$16;
      var $18=$n_data_addr;
      var $19=HEAP32[(($18)>>2)];
      var $add=((($19)+(1))|0);
      var $20=$n_data_addr;
      HEAP32[(($20)>>2)]=$add;
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere_unit_volume_values"] = _sphere_unit_volume_values;
function _sphere01_distance_xyz($xyz1, $xyz2) {
  var label = 0;
  var $xyz1_addr;
  var $xyz2_addr;
  var $bot;
  var $dist;
  var $lat1;
  var $lat2;
  var $lon1;
  var $lon2;
  var $top;
  $xyz1_addr=$xyz1;
  $xyz2_addr=$xyz2;
  var $0=$xyz1_addr;
  var $arrayidx=(($0+16)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $call=_r8_asin($1);
  $lat1=$call;
  var $2=$xyz1_addr;
  var $arrayidx1=(($2+8)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $4=$xyz1_addr;
  var $arrayidx2=(($4)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $call3=_r8_atan($3, $5);
  $lon1=$call3;
  var $6=$xyz2_addr;
  var $arrayidx4=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx4)>>3)];
  var $call5=_r8_asin($7);
  $lat2=$call5;
  var $8=$xyz2_addr;
  var $arrayidx6=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx6)>>3)];
  var $10=$xyz2_addr;
  var $arrayidx7=(($10)|0);
  var $11=HEAPF64[(($arrayidx7)>>3)];
  var $call8=_r8_atan($9, $11);
  $lon2=$call8;
  var $12=$lat2;
  var $call9=Math.cos($12);
  var $13=$lon1;
  var $14=$lon2;
  var $sub=($13)-($14);
  var $call10=Math.sin($sub);
  var $mul=($call9)*($call10);
  var $15=Math.pow($mul, 2);
  var $16=$lat1;
  var $call11=Math.cos($16);
  var $17=$lat2;
  var $call12=Math.sin($17);
  var $mul13=($call11)*($call12);
  var $18=$lat1;
  var $call14=Math.sin($18);
  var $19=$lat2;
  var $call15=Math.cos($19);
  var $mul16=($call14)*($call15);
  var $20=$lon1;
  var $21=$lon2;
  var $sub17=($20)-($21);
  var $call18=Math.cos($sub17);
  var $mul19=($mul16)*($call18);
  var $sub20=($mul13)-($mul19);
  var $22=Math.pow($sub20, 2);
  var $add=($15)+($22);
  $top=$add;
  var $23=$top;
  var $call21=Math.sqrt($23);
  $top=$call21;
  var $24=$lat1;
  var $call22=Math.sin($24);
  var $25=$lat2;
  var $call23=Math.sin($25);
  var $mul24=($call22)*($call23);
  var $26=$lat1;
  var $call25=Math.cos($26);
  var $27=$lat2;
  var $call26=Math.cos($27);
  var $mul27=($call25)*($call26);
  var $28=$lon1;
  var $29=$lon2;
  var $sub28=($28)-($29);
  var $call29=Math.cos($sub28);
  var $mul30=($mul27)*($call29);
  var $add31=($mul24)+($mul30);
  $bot=$add31;
  var $30=$top;
  var $31=$bot;
  var $call32=Math.atan2($30, $31);
  $dist=$call32;
  var $32=$dist;
  return $32;
}
Module["_sphere01_distance_xyz"] = _sphere01_distance_xyz;
function _sphere01_triangle_angles_to_area($a, $b, $c) {
  var label = 0;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $area;
  var $pi;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  $pi=3.141592653589793;
  var $0=$a_addr;
  var $1=$b_addr;
  var $add=($0)+($1);
  var $2=$c_addr;
  var $add1=($add)+($2);
  var $3=$pi;
  var $sub=($add1)-($3);
  $area=$sub;
  var $4=$area;
  return $4;
}
Module["_sphere01_triangle_angles_to_area"] = _sphere01_triangle_angles_to_area;
function _sphere01_polygon_area($n, $lat, $lon) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $lat_addr;
      var $lon_addr;
      var $a;
      var $area;
      var $b;
      var $beta1;
      var $beta2;
      var $c;
      var $cos_b1;
      var $cos_b2;
      var $excess;
      var $hav_a;
      var $j;
      var $k;
      var $lam;
      var $lam1;
      var $lam2;
      var $s;
      var $t;
      $n_addr=$n;
      $lat_addr=$lat;
      $lon_addr=$lon;
      $a=0;
      $area=0;
      $b=0;
      $beta1=0;
      $beta2=0;
      $c=0;
      $cos_b1=0;
      $cos_b2=0;
      $excess=0;
      $hav_a=0;
      $lam=0;
      $lam1=0;
      $lam2=0;
      $area=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) <= (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $2=$j;
      var $cmp1=(($2)|(0))==0;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $3=$j;
      var $4=$lon_addr;
      var $arrayidx=(($4+($3<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      $lam1=$5;
      var $6=$j;
      var $7=$lat_addr;
      var $arrayidx2=(($7+($6<<3))|0);
      var $8=HEAPF64[(($arrayidx2)>>3)];
      $beta1=$8;
      var $9=$j;
      var $add=((($9)+(1))|0);
      var $10=$lon_addr;
      var $arrayidx3=(($10+($add<<3))|0);
      var $11=HEAPF64[(($arrayidx3)>>3)];
      $lam2=$11;
      var $12=$j;
      var $add4=((($12)+(1))|0);
      var $13=$lat_addr;
      var $arrayidx5=(($13+($add4<<3))|0);
      var $14=HEAPF64[(($arrayidx5)>>3)];
      $beta2=$14;
      var $15=$beta1;
      var $call=Math.cos($15);
      $cos_b1=$call;
      var $16=$beta2;
      var $call6=Math.cos($16);
      $cos_b2=$call6;
      label = 7; break;
    case 6: 
      var $17=$j;
      var $add7=((($17)+(1))|0);
      var $18=$n_addr;
      var $add8=((($18)+(1))|0);
      var $rem=((((($add7)|(0)))%((($add8)|(0))))&-1);
      $k=$rem;
      var $19=$lam2;
      $lam1=$19;
      var $20=$beta2;
      $beta1=$20;
      var $21=$k;
      var $22=$lon_addr;
      var $arrayidx9=(($22+($21<<3))|0);
      var $23=HEAPF64[(($arrayidx9)>>3)];
      $lam2=$23;
      var $24=$k;
      var $25=$lat_addr;
      var $arrayidx10=(($25+($24<<3))|0);
      var $26=HEAPF64[(($arrayidx10)>>3)];
      $beta2=$26;
      var $27=$cos_b2;
      $cos_b1=$27;
      var $28=$beta2;
      var $call11=Math.cos($28);
      $cos_b2=$call11;
      label = 7; break;
    case 7: 
      var $29=$lam1;
      var $30=$lam2;
      var $cmp12=$29 != $30;
      if ($cmp12) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $31=$beta2;
      var $32=$beta1;
      var $sub=($31)-($32);
      var $call14=_haversine($sub);
      var $33=$cos_b1;
      var $34=$cos_b2;
      var $mul=($33)*($34);
      var $35=$lam2;
      var $36=$lam1;
      var $sub15=($35)-($36);
      var $call16=_haversine($sub15);
      var $mul17=($mul)*($call16);
      var $add18=($call14)+($mul17);
      $hav_a=$add18;
      var $37=$hav_a;
      var $call19=Math.sqrt($37);
      var $call20=Math.asin($call19);
      var $mul21=($call20)*(2);
      $a=$mul21;
      var $38=$beta2;
      var $sub22=(1.5707963267948966)-($38);
      $b=$sub22;
      var $39=$beta1;
      var $sub23=(1.5707963267948966)-($39);
      $c=$sub23;
      var $40=$a;
      var $41=$b;
      var $add24=($40)+($41);
      var $42=$c;
      var $add25=($add24)+($42);
      var $mul26=($add25)*(0.5);
      $s=$mul26;
      var $43=$s;
      var $div=($43)/(2);
      var $call27=Math.tan($div);
      var $44=$s;
      var $45=$a;
      var $sub28=($44)-($45);
      var $div29=($sub28)/(2);
      var $call30=Math.tan($div29);
      var $mul31=($call27)*($call30);
      var $46=$s;
      var $47=$b;
      var $sub32=($46)-($47);
      var $div33=($sub32)/(2);
      var $call34=Math.tan($div33);
      var $mul35=($mul31)*($call34);
      var $48=$s;
      var $49=$c;
      var $sub36=($48)-($49);
      var $div37=($sub36)/(2);
      var $call38=Math.tan($div37);
      var $mul39=($mul35)*($call38);
      $t=$mul39;
      var $50=$t;
      var $call40=_r8_abs($50);
      var $call41=Math.sqrt($call40);
      var $call42=Math.atan($call41);
      var $mul43=($call42)*(4);
      var $call44=_r8_abs($mul43);
      $excess=$call44;
      var $51=$lam1;
      var $52=$lam2;
      var $cmp45=$51 < $52;
      if ($cmp45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $53=$lam2;
      var $54=$lam1;
      var $sub47=($53)-($54);
      $lam=$sub47;
      label = 11; break;
    case 10: 
      var $55=$lam2;
      var $56=$lam1;
      var $sub49=($55)-($56);
      var $add50=($sub49)+(6.283185307179586);
      $lam=$add50;
      label = 11; break;
    case 11: 
      var $57=$lam;
      var $cmp52=3.141592653589793 < $57;
      if ($cmp52) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $58=$excess;
      var $sub54=(-$58);
      $excess=$sub54;
      label = 13; break;
    case 13: 
      var $59=$area;
      var $60=$excess;
      var $add56=($59)+($60);
      $area=$add56;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $61=$j;
      var $inc=((($61)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 16: 
      var $62=$area;
      var $call58=_r8_abs($62);
      $area=$call58;
      var $63=$area;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere01_polygon_area"] = _sphere01_polygon_area;
function _sphere01_triangle_sides_to_angles($as, $bs, $cs, $a, $b, $c) {
  var label = 0;
  var $as_addr;
  var $bs_addr;
  var $cs_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $asu;
  var $bsu;
  var $csu;
  var $ssu;
  var $tan_a2;
  var $tan_b2;
  var $tan_c2;
  $as_addr=$as;
  $bs_addr=$bs;
  $cs_addr=$cs;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$as_addr;
  $asu=$0;
  var $1=$bs_addr;
  $bsu=$1;
  var $2=$cs_addr;
  $csu=$2;
  var $3=$asu;
  var $4=$bsu;
  var $add=($3)+($4);
  var $5=$csu;
  var $add1=($add)+($5);
  var $div=($add1)/(2);
  $ssu=$div;
  var $6=$ssu;
  var $7=$bsu;
  var $sub=($6)-($7);
  var $call=Math.sin($sub);
  var $8=$ssu;
  var $9=$csu;
  var $sub2=($8)-($9);
  var $call3=Math.sin($sub2);
  var $mul=($call)*($call3);
  var $10=$ssu;
  var $call4=Math.sin($10);
  var $11=$ssu;
  var $12=$asu;
  var $sub5=($11)-($12);
  var $call6=Math.sin($sub5);
  var $mul7=($call4)*($call6);
  var $div8=($mul)/($mul7);
  var $call9=Math.sqrt($div8);
  $tan_a2=$call9;
  var $13=$tan_a2;
  var $call10=Math.atan($13);
  var $mul11=($call10)*(2);
  var $14=$a_addr;
  HEAPF64[(($14)>>3)]=$mul11;
  var $15=$ssu;
  var $16=$asu;
  var $sub12=($15)-($16);
  var $call13=Math.sin($sub12);
  var $17=$ssu;
  var $18=$csu;
  var $sub14=($17)-($18);
  var $call15=Math.sin($sub14);
  var $mul16=($call13)*($call15);
  var $19=$ssu;
  var $call17=Math.sin($19);
  var $20=$ssu;
  var $21=$bsu;
  var $sub18=($20)-($21);
  var $call19=Math.sin($sub18);
  var $mul20=($call17)*($call19);
  var $div21=($mul16)/($mul20);
  var $call22=Math.sqrt($div21);
  $tan_b2=$call22;
  var $22=$tan_b2;
  var $call23=Math.atan($22);
  var $mul24=($call23)*(2);
  var $23=$b_addr;
  HEAPF64[(($23)>>3)]=$mul24;
  var $24=$ssu;
  var $25=$asu;
  var $sub25=($24)-($25);
  var $call26=Math.sin($sub25);
  var $26=$ssu;
  var $27=$bsu;
  var $sub27=($26)-($27);
  var $call28=Math.sin($sub27);
  var $mul29=($call26)*($call28);
  var $28=$ssu;
  var $call30=Math.sin($28);
  var $29=$ssu;
  var $30=$csu;
  var $sub31=($29)-($30);
  var $call32=Math.sin($sub31);
  var $mul33=($call30)*($call32);
  var $div34=($mul29)/($mul33);
  var $call35=Math.sqrt($div34);
  $tan_c2=$call35;
  var $31=$tan_c2;
  var $call36=Math.atan($31);
  var $mul37=($call36)*(2);
  var $32=$c_addr;
  HEAPF64[(($32)>>3)]=$mul37;
  return;
}
Module["_sphere01_triangle_sides_to_angles"] = _sphere01_triangle_sides_to_angles;
function _sphere01_triangle_vertices_to_angles($v1, $v2, $v3, $a, $b, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $a_addr;
  var $b_addr;
  var $c_addr;
  var $as=__stackBase__;
  var $bs=(__stackBase__)+(8);
  var $cs=(__stackBase__)+(16);
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  $a_addr=$a;
  $b_addr=$b;
  $c_addr=$c;
  var $0=$v1_addr;
  var $1=$v2_addr;
  var $2=$v3_addr;
  _sphere01_triangle_vertices_to_sides($0, $1, $2, $as, $bs, $cs);
  var $3=HEAPF64[(($as)>>3)];
  var $4=HEAPF64[(($bs)>>3)];
  var $5=HEAPF64[(($cs)>>3)];
  var $6=$a_addr;
  var $7=$b_addr;
  var $8=$c_addr;
  _sphere01_triangle_sides_to_angles($3, $4, $5, $6, $7, $8);
  STACKTOP = __stackBase__;
  return;
}
Module["_sphere01_triangle_vertices_to_angles"] = _sphere01_triangle_vertices_to_angles;
function _sphere01_triangle_vertices_to_sides($v1, $v2, $v3, $as, $bs, $cs) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $as_addr;
  var $bs_addr;
  var $cs_addr;
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  $as_addr=$as;
  $bs_addr=$bs;
  $cs_addr=$cs;
  var $0=$v2_addr;
  var $1=$v3_addr;
  var $call=_r8vec_dot_product(3, $0, $1);
  var $call1=_r8_acos($call);
  var $2=$as_addr;
  HEAPF64[(($2)>>3)]=$call1;
  var $3=$v3_addr;
  var $4=$v1_addr;
  var $call2=_r8vec_dot_product(3, $3, $4);
  var $call3=_r8_acos($call2);
  var $5=$bs_addr;
  HEAPF64[(($5)>>3)]=$call3;
  var $6=$v1_addr;
  var $7=$v2_addr;
  var $call4=_r8vec_dot_product(3, $6, $7);
  var $call5=_r8_acos($call4);
  var $8=$cs_addr;
  HEAPF64[(($8)>>3)]=$call5;
  return;
}
Module["_sphere01_triangle_vertices_to_sides"] = _sphere01_triangle_vertices_to_sides;
function _sphere01_triangle_vertices_to_area($v1, $v2, $v3) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $v1_addr;
  var $v2_addr;
  var $v3_addr;
  var $area;
  var $a=__stackBase__;
  var $as=(__stackBase__)+(8);
  var $b=(__stackBase__)+(16);
  var $bs=(__stackBase__)+(24);
  var $c=(__stackBase__)+(32);
  var $cs=(__stackBase__)+(40);
  $v1_addr=$v1;
  $v2_addr=$v2;
  $v3_addr=$v3;
  var $0=$v1_addr;
  var $1=$v2_addr;
  var $2=$v3_addr;
  _sphere01_triangle_vertices_to_sides($0, $1, $2, $as, $bs, $cs);
  var $3=HEAPF64[(($as)>>3)];
  var $4=HEAPF64[(($bs)>>3)];
  var $5=HEAPF64[(($cs)>>3)];
  _sphere01_triangle_sides_to_angles($3, $4, $5, $a, $b, $c);
  var $6=HEAPF64[(($a)>>3)];
  var $7=HEAPF64[(($b)>>3)];
  var $8=HEAPF64[(($c)>>3)];
  var $call=_sphere01_triangle_angles_to_area($6, $7, $8);
  $area=$call;
  var $9=$area;
  STACKTOP = __stackBase__;
  return $9;
}
Module["_sphere01_triangle_vertices_to_area"] = _sphere01_triangle_vertices_to_area;
function _sphere01_triangle_vertices_to_centroid($v1, $v2, $v3) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v1_addr;
      var $v2_addr;
      var $v3_addr;
      var $i;
      var $norm;
      var $vs;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $v3_addr=$v3;
      var $call=_malloc(24);
      var $0=$call;
      $vs=$0;
      $i=0;
      label = 3; break;
    case 3: 
      var $1=$i;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$v1_addr;
      var $arrayidx=(($3+($2<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $6=$v2_addr;
      var $arrayidx1=(($6+($5<<3))|0);
      var $7=HEAPF64[(($arrayidx1)>>3)];
      var $add=($4)+($7);
      var $8=$i;
      var $9=$v3_addr;
      var $arrayidx2=(($9+($8<<3))|0);
      var $10=HEAPF64[(($arrayidx2)>>3)];
      var $add3=($add)+($10);
      var $div=($add3)/(3);
      var $11=$i;
      var $12=$vs;
      var $arrayidx4=(($12+($11<<3))|0);
      HEAPF64[(($arrayidx4)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $14=$vs;
      var $call5=_r8vec_norm(3, $14);
      $norm=$call5;
      $i=0;
      label = 7; break;
    case 7: 
      var $15=$i;
      var $cmp7=(($15)|(0)) < 3;
      if ($cmp7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $16=$i;
      var $17=$vs;
      var $arrayidx9=(($17+($16<<3))|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $19=$norm;
      var $div10=($18)/($19);
      var $20=$i;
      var $21=$vs;
      var $arrayidx11=(($21+($20<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$div10;
      label = 9; break;
    case 9: 
      var $22=$i;
      var $inc13=((($22)+(1))|0);
      $i=$inc13;
      label = 7; break;
    case 10: 
      var $23=$vs;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere01_triangle_vertices_to_centroid"] = _sphere01_triangle_vertices_to_centroid;
function _sphere01_triangle_vertices_to_midpoints($v1, $v2, $v3, $m1, $m2, $m3) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v1_addr;
      var $v2_addr;
      var $v3_addr;
      var $m1_addr;
      var $m2_addr;
      var $m3_addr;
      var $i;
      var $norm;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $v3_addr=$v3;
      $m1_addr=$m1;
      $m2_addr=$m2;
      $m3_addr=$m3;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $2=$v1_addr;
      var $arrayidx=(($2+($1<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $5=$v2_addr;
      var $arrayidx1=(($5+($4<<3))|0);
      var $6=HEAPF64[(($arrayidx1)>>3)];
      var $add=($3)+($6);
      var $div=($add)/(2);
      var $7=$i;
      var $8=$m1_addr;
      var $arrayidx2=(($8+($7<<3))|0);
      HEAPF64[(($arrayidx2)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $10=$m1_addr;
      var $call=_r8vec_norm(3, $10);
      $norm=$call;
      $i=0;
      label = 7; break;
    case 7: 
      var $11=$i;
      var $cmp4=(($11)|(0)) < 3;
      if ($cmp4) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $12=$i;
      var $13=$m1_addr;
      var $arrayidx6=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx6)>>3)];
      var $15=$norm;
      var $div7=($14)/($15);
      var $16=$i;
      var $17=$m1_addr;
      var $arrayidx8=(($17+($16<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$div7;
      label = 9; break;
    case 9: 
      var $18=$i;
      var $inc10=((($18)+(1))|0);
      $i=$inc10;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $19=$i;
      var $cmp13=(($19)|(0)) < 3;
      if ($cmp13) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $20=$i;
      var $21=$v2_addr;
      var $arrayidx15=(($21+($20<<3))|0);
      var $22=HEAPF64[(($arrayidx15)>>3)];
      var $23=$i;
      var $24=$v3_addr;
      var $arrayidx16=(($24+($23<<3))|0);
      var $25=HEAPF64[(($arrayidx16)>>3)];
      var $add17=($22)+($25);
      var $div18=($add17)/(2);
      var $26=$i;
      var $27=$m2_addr;
      var $arrayidx19=(($27+($26<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$div18;
      label = 13; break;
    case 13: 
      var $28=$i;
      var $inc21=((($28)+(1))|0);
      $i=$inc21;
      label = 11; break;
    case 14: 
      var $29=$m2_addr;
      var $call23=_r8vec_norm(3, $29);
      $norm=$call23;
      $i=0;
      label = 15; break;
    case 15: 
      var $30=$i;
      var $cmp25=(($30)|(0)) < 3;
      if ($cmp25) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $31=$i;
      var $32=$m2_addr;
      var $arrayidx27=(($32+($31<<3))|0);
      var $33=HEAPF64[(($arrayidx27)>>3)];
      var $34=$norm;
      var $div28=($33)/($34);
      var $35=$i;
      var $36=$m2_addr;
      var $arrayidx29=(($36+($35<<3))|0);
      HEAPF64[(($arrayidx29)>>3)]=$div28;
      label = 17; break;
    case 17: 
      var $37=$i;
      var $inc31=((($37)+(1))|0);
      $i=$inc31;
      label = 15; break;
    case 18: 
      $i=0;
      label = 19; break;
    case 19: 
      var $38=$i;
      var $cmp34=(($38)|(0)) < 3;
      if ($cmp34) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $39=$i;
      var $40=$v3_addr;
      var $arrayidx36=(($40+($39<<3))|0);
      var $41=HEAPF64[(($arrayidx36)>>3)];
      var $42=$i;
      var $43=$v1_addr;
      var $arrayidx37=(($43+($42<<3))|0);
      var $44=HEAPF64[(($arrayidx37)>>3)];
      var $add38=($41)+($44);
      var $div39=($add38)/(2);
      var $45=$i;
      var $46=$m3_addr;
      var $arrayidx40=(($46+($45<<3))|0);
      HEAPF64[(($arrayidx40)>>3)]=$div39;
      label = 21; break;
    case 21: 
      var $47=$i;
      var $inc42=((($47)+(1))|0);
      $i=$inc42;
      label = 19; break;
    case 22: 
      var $48=$m3_addr;
      var $call44=_r8vec_norm(3, $48);
      $norm=$call44;
      $i=0;
      label = 23; break;
    case 23: 
      var $49=$i;
      var $cmp46=(($49)|(0)) < 3;
      if ($cmp46) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $50=$i;
      var $51=$m3_addr;
      var $arrayidx48=(($51+($50<<3))|0);
      var $52=HEAPF64[(($arrayidx48)>>3)];
      var $53=$norm;
      var $div49=($52)/($53);
      var $54=$i;
      var $55=$m3_addr;
      var $arrayidx50=(($55+($54<<3))|0);
      HEAPF64[(($arrayidx50)>>3)]=$div49;
      label = 25; break;
    case 25: 
      var $56=$i;
      var $inc52=((($56)+(1))|0);
      $i=$inc52;
      label = 23; break;
    case 26: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_sphere01_triangle_vertices_to_midpoints"] = _sphere01_triangle_vertices_to_midpoints;
function _string_2d($vec_num, $p1, $p2, $string_num, $order, $string) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $vec_num_addr;
      var $p1_addr;
      var $p2_addr;
      var $string_num_addr;
      var $order_addr;
      var $string_addr;
      var $i=__stackBase__;
      var $indx=(__stackBase__)+(8);
      var $isgn;
      var $itemp;
      var $j=(__stackBase__)+(16);
      var $jval;
      var $kval;
      var $match;
      var $seed;
      var $temp;
      var $x1val;
      var $x2val;
      var $y1val;
      var $y2val;
      $vec_num_addr=$vec_num;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $string_num_addr=$string_num;
      $order_addr=$order;
      $string_addr=$string;
      HEAP32[(($i)>>2)]=0;
      label = 3; break;
    case 3: 
      var $0=HEAP32[(($i)>>2)];
      var $1=$vec_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=HEAP32[(($i)>>2)];
      var $3=$order_addr;
      var $arrayidx=(($3+($2<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $4=$vec_num_addr;
      var $5=HEAP32[(($i)>>2)];
      var $add=((($4)+($5))|0);
      var $add1=((($add)+(1))|0);
      var $6=HEAP32[(($i)>>2)];
      var $7=$string_addr;
      var $arrayidx2=(($7+($6<<2))|0);
      HEAP32[(($arrayidx2)>>2)]=$add1;
      label = 5; break;
    case 5: 
      var $8=HEAP32[(($i)>>2)];
      var $inc=((($8)+(1))|0);
      HEAP32[(($i)>>2)]=$inc;
      label = 3; break;
    case 6: 
      $seed=0;
      var $9=$string_num_addr;
      HEAP32[(($9)>>2)]=1;
      var $10=$string_num_addr;
      var $11=HEAP32[(($10)>>2)];
      var $12=$seed;
      var $13=$string_addr;
      var $arrayidx3=(($13+($12<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=$11;
      label = 7; break;
    case 7: 
      var $14=$seed;
      var $mul=($14<<1);
      var $add5=(($mul)|0);
      var $15=$p1_addr;
      var $arrayidx6=(($15+($add5<<3))|0);
      var $16=HEAPF64[(($arrayidx6)>>3)];
      $x1val=$16;
      var $17=$seed;
      var $mul7=($17<<1);
      var $add8=(($mul7)|0);
      var $18=$p2_addr;
      var $arrayidx9=(($18+($add8<<3))|0);
      var $19=HEAPF64[(($arrayidx9)>>3)];
      $x2val=$19;
      var $20=$seed;
      var $mul10=($20<<1);
      var $add11=((($mul10)+(1))|0);
      var $21=$p1_addr;
      var $arrayidx12=(($21+($add11<<3))|0);
      var $22=HEAPF64[(($arrayidx12)>>3)];
      $y1val=$22;
      var $23=$seed;
      var $mul13=($23<<1);
      var $add14=((($mul13)+(1))|0);
      var $24=$p2_addr;
      var $arrayidx15=(($24+($add14<<3))|0);
      var $25=HEAPF64[(($arrayidx15)>>3)];
      $y2val=$25;
      var $26=$seed;
      var $27=$order_addr;
      var $arrayidx16=(($27+($26<<2))|0);
      var $28=HEAP32[(($arrayidx16)>>2)];
      $jval=$28;
      var $29=$seed;
      var $30=$order_addr;
      var $arrayidx17=(($30+($29<<2))|0);
      var $31=HEAP32[(($arrayidx17)>>2)];
      $kval=$31;
      label = 8; break;
    case 8: 
      $match=0;
      HEAP32[(($j)>>2)]=0;
      label = 9; break;
    case 9: 
      var $32=HEAP32[(($j)>>2)];
      var $33=$vec_num_addr;
      var $cmp20=(($32)|(0)) < (($33)|(0));
      if ($cmp20) { label = 10; break; } else { label = 29; break; }
    case 10: 
      var $34=$string_num_addr;
      var $35=HEAP32[(($34)>>2)];
      var $36=HEAP32[(($j)>>2)];
      var $37=$string_addr;
      var $arrayidx22=(($37+($36<<2))|0);
      var $38=HEAP32[(($arrayidx22)>>2)];
      var $cmp23=(($35)|(0)) < (($38)|(0));
      if ($cmp23) { label = 11; break; } else { label = 27; break; }
    case 11: 
      var $39=$x1val;
      var $40=HEAP32[(($j)>>2)];
      var $mul24=($40<<1);
      var $add25=(($mul24)|0);
      var $41=$p1_addr;
      var $arrayidx26=(($41+($add25<<3))|0);
      var $42=HEAPF64[(($arrayidx26)>>3)];
      var $cmp27=$39 == $42;
      if ($cmp27) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $43=$y1val;
      var $44=HEAP32[(($j)>>2)];
      var $mul28=($44<<1);
      var $add29=((($mul28)+(1))|0);
      var $45=$p1_addr;
      var $arrayidx30=(($45+($add29<<3))|0);
      var $46=HEAPF64[(($arrayidx30)>>3)];
      var $cmp31=$43 == $46;
      if ($cmp31) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $47=$jval;
      var $sub=((($47)-(1))|0);
      $jval=$sub;
      var $48=$jval;
      var $49=HEAP32[(($j)>>2)];
      var $50=$order_addr;
      var $arrayidx33=(($50+($49<<2))|0);
      HEAP32[(($arrayidx33)>>2)]=$48;
      var $51=$string_num_addr;
      var $52=HEAP32[(($51)>>2)];
      var $53=HEAP32[(($j)>>2)];
      var $54=$string_addr;
      var $arrayidx34=(($54+($53<<2))|0);
      HEAP32[(($arrayidx34)>>2)]=$52;
      var $55=HEAP32[(($j)>>2)];
      var $mul35=($55<<1);
      var $add36=(($mul35)|0);
      var $56=$p2_addr;
      var $arrayidx37=(($56+($add36<<3))|0);
      var $57=HEAPF64[(($arrayidx37)>>3)];
      $x1val=$57;
      var $58=HEAP32[(($j)>>2)];
      var $mul38=($58<<1);
      var $add39=((($mul38)+(1))|0);
      var $59=$p2_addr;
      var $arrayidx40=(($59+($add39<<3))|0);
      var $60=HEAPF64[(($arrayidx40)>>3)];
      $y1val=$60;
      var $61=$match;
      var $add41=((($61)+(1))|0);
      $match=$add41;
      var $62=HEAP32[(($j)>>2)];
      var $mul42=($62<<1);
      var $add43=(($mul42)|0);
      var $63=$p1_addr;
      var $arrayidx44=(($63+($add43<<3))|0);
      var $64=HEAPF64[(($arrayidx44)>>3)];
      $temp=$64;
      var $65=HEAP32[(($j)>>2)];
      var $mul45=($65<<1);
      var $add46=(($mul45)|0);
      var $66=$p2_addr;
      var $arrayidx47=(($66+($add46<<3))|0);
      var $67=HEAPF64[(($arrayidx47)>>3)];
      var $68=HEAP32[(($j)>>2)];
      var $mul48=($68<<1);
      var $add49=(($mul48)|0);
      var $69=$p1_addr;
      var $arrayidx50=(($69+($add49<<3))|0);
      HEAPF64[(($arrayidx50)>>3)]=$67;
      var $70=$temp;
      var $71=HEAP32[(($j)>>2)];
      var $mul51=($71<<1);
      var $add52=(($mul51)|0);
      var $72=$p2_addr;
      var $arrayidx53=(($72+($add52<<3))|0);
      HEAPF64[(($arrayidx53)>>3)]=$70;
      var $73=HEAP32[(($j)>>2)];
      var $mul54=($73<<1);
      var $add55=((($mul54)+(1))|0);
      var $74=$p1_addr;
      var $arrayidx56=(($74+($add55<<3))|0);
      var $75=HEAPF64[(($arrayidx56)>>3)];
      $temp=$75;
      var $76=HEAP32[(($j)>>2)];
      var $mul57=($76<<1);
      var $add58=((($mul57)+(1))|0);
      var $77=$p2_addr;
      var $arrayidx59=(($77+($add58<<3))|0);
      var $78=HEAPF64[(($arrayidx59)>>3)];
      var $79=HEAP32[(($j)>>2)];
      var $mul60=($79<<1);
      var $add61=((($mul60)+(1))|0);
      var $80=$p1_addr;
      var $arrayidx62=(($80+($add61<<3))|0);
      HEAPF64[(($arrayidx62)>>3)]=$78;
      var $81=$temp;
      var $82=HEAP32[(($j)>>2)];
      var $mul63=($82<<1);
      var $add64=((($mul63)+(1))|0);
      var $83=$p2_addr;
      var $arrayidx65=(($83+($add64<<3))|0);
      HEAPF64[(($arrayidx65)>>3)]=$81;
      label = 26; break;
    case 14: 
      var $84=$x1val;
      var $85=HEAP32[(($j)>>2)];
      var $mul66=($85<<1);
      var $add67=(($mul66)|0);
      var $86=$p2_addr;
      var $arrayidx68=(($86+($add67<<3))|0);
      var $87=HEAPF64[(($arrayidx68)>>3)];
      var $cmp69=$84 == $87;
      if ($cmp69) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $88=$y1val;
      var $89=HEAP32[(($j)>>2)];
      var $mul71=($89<<1);
      var $add72=((($mul71)+(1))|0);
      var $90=$p2_addr;
      var $arrayidx73=(($90+($add72<<3))|0);
      var $91=HEAPF64[(($arrayidx73)>>3)];
      var $cmp74=$88 == $91;
      if ($cmp74) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $92=$jval;
      var $sub76=((($92)-(1))|0);
      $jval=$sub76;
      var $93=$jval;
      var $94=HEAP32[(($j)>>2)];
      var $95=$order_addr;
      var $arrayidx77=(($95+($94<<2))|0);
      HEAP32[(($arrayidx77)>>2)]=$93;
      var $96=$string_num_addr;
      var $97=HEAP32[(($96)>>2)];
      var $98=HEAP32[(($j)>>2)];
      var $99=$string_addr;
      var $arrayidx78=(($99+($98<<2))|0);
      HEAP32[(($arrayidx78)>>2)]=$97;
      var $100=HEAP32[(($j)>>2)];
      var $mul79=($100<<1);
      var $add80=(($mul79)|0);
      var $101=$p1_addr;
      var $arrayidx81=(($101+($add80<<3))|0);
      var $102=HEAPF64[(($arrayidx81)>>3)];
      $x1val=$102;
      var $103=HEAP32[(($j)>>2)];
      var $mul82=($103<<1);
      var $add83=((($mul82)+(1))|0);
      var $104=$p1_addr;
      var $arrayidx84=(($104+($add83<<3))|0);
      var $105=HEAPF64[(($arrayidx84)>>3)];
      $y1val=$105;
      var $106=$match;
      var $add85=((($106)+(1))|0);
      $match=$add85;
      label = 25; break;
    case 17: 
      var $107=$x2val;
      var $108=HEAP32[(($j)>>2)];
      var $mul87=($108<<1);
      var $add88=(($mul87)|0);
      var $109=$p1_addr;
      var $arrayidx89=(($109+($add88<<3))|0);
      var $110=HEAPF64[(($arrayidx89)>>3)];
      var $cmp90=$107 == $110;
      if ($cmp90) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $111=$y2val;
      var $112=HEAP32[(($j)>>2)];
      var $mul92=($112<<1);
      var $add93=((($mul92)+(1))|0);
      var $113=$p1_addr;
      var $arrayidx94=(($113+($add93<<3))|0);
      var $114=HEAPF64[(($arrayidx94)>>3)];
      var $cmp95=$111 == $114;
      if ($cmp95) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $115=$kval;
      var $add97=((($115)+(1))|0);
      $kval=$add97;
      var $116=$kval;
      var $117=HEAP32[(($j)>>2)];
      var $118=$order_addr;
      var $arrayidx98=(($118+($117<<2))|0);
      HEAP32[(($arrayidx98)>>2)]=$116;
      var $119=$string_num_addr;
      var $120=HEAP32[(($119)>>2)];
      var $121=HEAP32[(($j)>>2)];
      var $122=$string_addr;
      var $arrayidx99=(($122+($121<<2))|0);
      HEAP32[(($arrayidx99)>>2)]=$120;
      var $123=HEAP32[(($j)>>2)];
      var $mul100=($123<<1);
      var $add101=(($mul100)|0);
      var $124=$p2_addr;
      var $arrayidx102=(($124+($add101<<3))|0);
      var $125=HEAPF64[(($arrayidx102)>>3)];
      $x2val=$125;
      var $126=HEAP32[(($j)>>2)];
      var $mul103=($126<<1);
      var $add104=((($mul103)+(1))|0);
      var $127=$p2_addr;
      var $arrayidx105=(($127+($add104<<3))|0);
      var $128=HEAPF64[(($arrayidx105)>>3)];
      $y2val=$128;
      var $129=$match;
      var $add106=((($129)+(1))|0);
      $match=$add106;
      label = 24; break;
    case 20: 
      var $130=$x2val;
      var $131=HEAP32[(($j)>>2)];
      var $mul108=($131<<1);
      var $add109=(($mul108)|0);
      var $132=$p2_addr;
      var $arrayidx110=(($132+($add109<<3))|0);
      var $133=HEAPF64[(($arrayidx110)>>3)];
      var $cmp111=$130 == $133;
      if ($cmp111) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $134=$y2val;
      var $135=HEAP32[(($j)>>2)];
      var $mul113=($135<<1);
      var $add114=((($mul113)+(1))|0);
      var $136=$p2_addr;
      var $arrayidx115=(($136+($add114<<3))|0);
      var $137=HEAPF64[(($arrayidx115)>>3)];
      var $cmp116=$134 == $137;
      if ($cmp116) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $138=$kval;
      var $add118=((($138)+(1))|0);
      $kval=$add118;
      var $139=$kval;
      var $140=HEAP32[(($j)>>2)];
      var $141=$order_addr;
      var $arrayidx119=(($141+($140<<2))|0);
      HEAP32[(($arrayidx119)>>2)]=$139;
      var $142=$string_num_addr;
      var $143=HEAP32[(($142)>>2)];
      var $144=HEAP32[(($j)>>2)];
      var $145=$string_addr;
      var $arrayidx120=(($145+($144<<2))|0);
      HEAP32[(($arrayidx120)>>2)]=$143;
      var $146=HEAP32[(($j)>>2)];
      var $mul121=($146<<1);
      var $add122=(($mul121)|0);
      var $147=$p1_addr;
      var $arrayidx123=(($147+($add122<<3))|0);
      var $148=HEAPF64[(($arrayidx123)>>3)];
      $x2val=$148;
      var $149=HEAP32[(($j)>>2)];
      var $mul124=($149<<1);
      var $add125=((($mul124)+(1))|0);
      var $150=$p1_addr;
      var $arrayidx126=(($150+($add125<<3))|0);
      var $151=HEAPF64[(($arrayidx126)>>3)];
      $y2val=$151;
      var $152=$match;
      var $add127=((($152)+(1))|0);
      $match=$add127;
      var $153=HEAP32[(($j)>>2)];
      var $mul128=($153<<1);
      var $add129=(($mul128)|0);
      var $154=$p1_addr;
      var $arrayidx130=(($154+($add129<<3))|0);
      var $155=HEAPF64[(($arrayidx130)>>3)];
      $temp=$155;
      var $156=HEAP32[(($j)>>2)];
      var $mul131=($156<<1);
      var $add132=(($mul131)|0);
      var $157=$p2_addr;
      var $arrayidx133=(($157+($add132<<3))|0);
      var $158=HEAPF64[(($arrayidx133)>>3)];
      var $159=HEAP32[(($j)>>2)];
      var $mul134=($159<<1);
      var $add135=(($mul134)|0);
      var $160=$p1_addr;
      var $arrayidx136=(($160+($add135<<3))|0);
      HEAPF64[(($arrayidx136)>>3)]=$158;
      var $161=$temp;
      var $162=HEAP32[(($j)>>2)];
      var $mul137=($162<<1);
      var $add138=(($mul137)|0);
      var $163=$p2_addr;
      var $arrayidx139=(($163+($add138<<3))|0);
      HEAPF64[(($arrayidx139)>>3)]=$161;
      var $164=HEAP32[(($j)>>2)];
      var $mul140=($164<<1);
      var $add141=((($mul140)+(1))|0);
      var $165=$p1_addr;
      var $arrayidx142=(($165+($add141<<3))|0);
      var $166=HEAPF64[(($arrayidx142)>>3)];
      $temp=$166;
      var $167=HEAP32[(($j)>>2)];
      var $mul143=($167<<1);
      var $add144=((($mul143)+(1))|0);
      var $168=$p2_addr;
      var $arrayidx145=(($168+($add144<<3))|0);
      var $169=HEAPF64[(($arrayidx145)>>3)];
      var $170=HEAP32[(($j)>>2)];
      var $mul146=($170<<1);
      var $add147=((($mul146)+(1))|0);
      var $171=$p1_addr;
      var $arrayidx148=(($171+($add147<<3))|0);
      HEAPF64[(($arrayidx148)>>3)]=$169;
      var $172=$temp;
      var $173=HEAP32[(($j)>>2)];
      var $mul149=($173<<1);
      var $add150=((($mul149)+(1))|0);
      var $174=$p2_addr;
      var $arrayidx151=(($174+($add150<<3))|0);
      HEAPF64[(($arrayidx151)>>3)]=$172;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $175=HEAP32[(($j)>>2)];
      var $inc157=((($175)+(1))|0);
      HEAP32[(($j)>>2)]=$inc157;
      label = 9; break;
    case 29: 
      var $176=$x1val;
      var $177=$x2val;
      var $cmp159=$176 == $177;
      if ($cmp159) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $178=$y1val;
      var $179=$y2val;
      var $cmp161=$178 == $179;
      if ($cmp161) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 35; break;
    case 32: 
      var $180=$match;
      var $cmp164=(($180)|(0)) <= 0;
      if ($cmp164) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 35; break;
    case 34: 
      label = 8; break;
    case 35: 
      $seed=0;
      HEAP32[(($i)>>2)]=0;
      label = 36; break;
    case 36: 
      var $181=HEAP32[(($i)>>2)];
      var $182=$vec_num_addr;
      var $cmp169=(($181)|(0)) < (($182)|(0));
      if ($cmp169) { label = 37; break; } else { label = 41; break; }
    case 37: 
      var $183=$string_num_addr;
      var $184=HEAP32[(($183)>>2)];
      var $185=HEAP32[(($i)>>2)];
      var $186=$string_addr;
      var $arrayidx171=(($186+($185<<2))|0);
      var $187=HEAP32[(($arrayidx171)>>2)];
      var $cmp172=(($184)|(0)) < (($187)|(0));
      if ($cmp172) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $188=HEAP32[(($i)>>2)];
      $seed=$188;
      var $189=$string_num_addr;
      var $190=HEAP32[(($189)>>2)];
      var $add174=((($190)+(1))|0);
      var $191=$string_num_addr;
      HEAP32[(($191)>>2)]=$add174;
      var $192=$string_num_addr;
      var $193=HEAP32[(($192)>>2)];
      var $194=HEAP32[(($i)>>2)];
      var $195=$string_addr;
      var $arrayidx175=(($195+($194<<2))|0);
      HEAP32[(($arrayidx175)>>2)]=$193;
      label = 41; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $196=HEAP32[(($i)>>2)];
      var $inc178=((($196)+(1))|0);
      HEAP32[(($i)>>2)]=$inc178;
      label = 36; break;
    case 41: 
      var $197=$seed;
      var $cmp180=(($197)|(0))==0;
      if ($cmp180) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 44; break;
    case 43: 
      label = 7; break;
    case 44: 
      HEAP32[(($i)>>2)]=0;
      label = 45; break;
    case 45: 
      var $198=HEAP32[(($i)>>2)];
      var $199=$vec_num_addr;
      var $cmp185=(($198)|(0)) < (($199)|(0));
      if ($cmp185) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $200=$vec_num_addr;
      var $201=HEAP32[(($i)>>2)];
      var $202=$string_addr;
      var $arrayidx187=(($202+($201<<2))|0);
      var $203=HEAP32[(($arrayidx187)>>2)];
      var $cmp188=(($200)|(0)) < (($203)|(0));
      if ($cmp188) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $204=$string_num_addr;
      var $205=HEAP32[(($204)>>2)];
      var $add190=((($205)+(1))|0);
      var $206=$string_num_addr;
      HEAP32[(($206)>>2)]=$add190;
      var $207=$string_num_addr;
      var $208=HEAP32[(($207)>>2)];
      var $209=HEAP32[(($i)>>2)];
      var $210=$string_addr;
      var $arrayidx191=(($210+($209<<2))|0);
      HEAP32[(($arrayidx191)>>2)]=$208;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $211=HEAP32[(($i)>>2)];
      var $inc194=((($211)+(1))|0);
      HEAP32[(($i)>>2)]=$inc194;
      label = 45; break;
    case 50: 
      HEAP32[(($i)>>2)]=0;
      $isgn=0;
      HEAP32[(($j)>>2)]=0;
      HEAP32[(($indx)>>2)]=0;
      label = 51; break;
    case 51: 
      var $212=$vec_num_addr;
      var $213=$isgn;
      _sort_heap_external($212, $indx, $i, $j, $213);
      var $214=HEAP32[(($indx)>>2)];
      var $cmp197=0 < (($214)|(0));
      if ($cmp197) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $215=HEAP32[(($i)>>2)];
      var $sub199=((($215)-(1))|0);
      var $216=$order_addr;
      var $arrayidx200=(($216+($sub199<<2))|0);
      var $217=HEAP32[(($arrayidx200)>>2)];
      $itemp=$217;
      var $218=HEAP32[(($j)>>2)];
      var $sub201=((($218)-(1))|0);
      var $219=$order_addr;
      var $arrayidx202=(($219+($sub201<<2))|0);
      var $220=HEAP32[(($arrayidx202)>>2)];
      var $221=HEAP32[(($i)>>2)];
      var $sub203=((($221)-(1))|0);
      var $222=$order_addr;
      var $arrayidx204=(($222+($sub203<<2))|0);
      HEAP32[(($arrayidx204)>>2)]=$220;
      var $223=$itemp;
      var $224=HEAP32[(($j)>>2)];
      var $sub205=((($224)-(1))|0);
      var $225=$order_addr;
      var $arrayidx206=(($225+($sub205<<2))|0);
      HEAP32[(($arrayidx206)>>2)]=$223;
      var $226=HEAP32[(($i)>>2)];
      var $sub207=((($226)-(1))|0);
      var $227=$string_addr;
      var $arrayidx208=(($227+($sub207<<2))|0);
      var $228=HEAP32[(($arrayidx208)>>2)];
      $itemp=$228;
      var $229=HEAP32[(($j)>>2)];
      var $sub209=((($229)-(1))|0);
      var $230=$string_addr;
      var $arrayidx210=(($230+($sub209<<2))|0);
      var $231=HEAP32[(($arrayidx210)>>2)];
      var $232=HEAP32[(($i)>>2)];
      var $sub211=((($232)-(1))|0);
      var $233=$string_addr;
      var $arrayidx212=(($233+($sub211<<2))|0);
      HEAP32[(($arrayidx212)>>2)]=$231;
      var $234=$itemp;
      var $235=HEAP32[(($j)>>2)];
      var $sub213=((($235)-(1))|0);
      var $236=$string_addr;
      var $arrayidx214=(($236+($sub213<<2))|0);
      HEAP32[(($arrayidx214)>>2)]=$234;
      var $237=HEAP32[(($i)>>2)];
      var $sub215=((($237)-(1))|0);
      var $mul216=($sub215<<1);
      var $add217=(($mul216)|0);
      var $238=$p1_addr;
      var $arrayidx218=(($238+($add217<<3))|0);
      var $239=HEAPF64[(($arrayidx218)>>3)];
      $temp=$239;
      var $240=HEAP32[(($j)>>2)];
      var $sub219=((($240)-(1))|0);
      var $mul220=($sub219<<1);
      var $add221=(($mul220)|0);
      var $241=$p1_addr;
      var $arrayidx222=(($241+($add221<<3))|0);
      var $242=HEAPF64[(($arrayidx222)>>3)];
      var $243=HEAP32[(($i)>>2)];
      var $sub223=((($243)-(1))|0);
      var $mul224=($sub223<<1);
      var $add225=(($mul224)|0);
      var $244=$p1_addr;
      var $arrayidx226=(($244+($add225<<3))|0);
      HEAPF64[(($arrayidx226)>>3)]=$242;
      var $245=$temp;
      var $246=HEAP32[(($j)>>2)];
      var $sub227=((($246)-(1))|0);
      var $mul228=($sub227<<1);
      var $add229=(($mul228)|0);
      var $247=$p1_addr;
      var $arrayidx230=(($247+($add229<<3))|0);
      HEAPF64[(($arrayidx230)>>3)]=$245;
      var $248=HEAP32[(($i)>>2)];
      var $sub231=((($248)-(1))|0);
      var $mul232=($sub231<<1);
      var $add233=((($mul232)+(1))|0);
      var $249=$p1_addr;
      var $arrayidx234=(($249+($add233<<3))|0);
      var $250=HEAPF64[(($arrayidx234)>>3)];
      $temp=$250;
      var $251=HEAP32[(($j)>>2)];
      var $sub235=((($251)-(1))|0);
      var $mul236=($sub235<<1);
      var $add237=((($mul236)+(1))|0);
      var $252=$p1_addr;
      var $arrayidx238=(($252+($add237<<3))|0);
      var $253=HEAPF64[(($arrayidx238)>>3)];
      var $254=HEAP32[(($i)>>2)];
      var $sub239=((($254)-(1))|0);
      var $mul240=($sub239<<1);
      var $add241=((($mul240)+(1))|0);
      var $255=$p1_addr;
      var $arrayidx242=(($255+($add241<<3))|0);
      HEAPF64[(($arrayidx242)>>3)]=$253;
      var $256=$temp;
      var $257=HEAP32[(($j)>>2)];
      var $sub243=((($257)-(1))|0);
      var $mul244=($sub243<<1);
      var $add245=((($mul244)+(1))|0);
      var $258=$p1_addr;
      var $arrayidx246=(($258+($add245<<3))|0);
      HEAPF64[(($arrayidx246)>>3)]=$256;
      var $259=HEAP32[(($i)>>2)];
      var $sub247=((($259)-(1))|0);
      var $mul248=($sub247<<1);
      var $add249=(($mul248)|0);
      var $260=$p2_addr;
      var $arrayidx250=(($260+($add249<<3))|0);
      var $261=HEAPF64[(($arrayidx250)>>3)];
      $temp=$261;
      var $262=HEAP32[(($j)>>2)];
      var $sub251=((($262)-(1))|0);
      var $mul252=($sub251<<1);
      var $add253=(($mul252)|0);
      var $263=$p2_addr;
      var $arrayidx254=(($263+($add253<<3))|0);
      var $264=HEAPF64[(($arrayidx254)>>3)];
      var $265=HEAP32[(($i)>>2)];
      var $sub255=((($265)-(1))|0);
      var $mul256=($sub255<<1);
      var $add257=(($mul256)|0);
      var $266=$p2_addr;
      var $arrayidx258=(($266+($add257<<3))|0);
      HEAPF64[(($arrayidx258)>>3)]=$264;
      var $267=$temp;
      var $268=HEAP32[(($j)>>2)];
      var $sub259=((($268)-(1))|0);
      var $mul260=($sub259<<1);
      var $add261=(($mul260)|0);
      var $269=$p2_addr;
      var $arrayidx262=(($269+($add261<<3))|0);
      HEAPF64[(($arrayidx262)>>3)]=$267;
      var $270=HEAP32[(($i)>>2)];
      var $sub263=((($270)-(1))|0);
      var $mul264=($sub263<<1);
      var $add265=((($mul264)+(1))|0);
      var $271=$p2_addr;
      var $arrayidx266=(($271+($add265<<3))|0);
      var $272=HEAPF64[(($arrayidx266)>>3)];
      $temp=$272;
      var $273=HEAP32[(($j)>>2)];
      var $sub267=((($273)-(1))|0);
      var $mul268=($sub267<<1);
      var $add269=((($mul268)+(1))|0);
      var $274=$p2_addr;
      var $arrayidx270=(($274+($add269<<3))|0);
      var $275=HEAPF64[(($arrayidx270)>>3)];
      var $276=HEAP32[(($i)>>2)];
      var $sub271=((($276)-(1))|0);
      var $mul272=($sub271<<1);
      var $add273=((($mul272)+(1))|0);
      var $277=$p2_addr;
      var $arrayidx274=(($277+($add273<<3))|0);
      HEAPF64[(($arrayidx274)>>3)]=$275;
      var $278=$temp;
      var $279=HEAP32[(($j)>>2)];
      var $sub275=((($279)-(1))|0);
      var $mul276=($sub275<<1);
      var $add277=((($mul276)+(1))|0);
      var $280=$p2_addr;
      var $arrayidx278=(($280+($add277<<3))|0);
      HEAPF64[(($arrayidx278)>>3)]=$278;
      label = 64; break;
    case 53: 
      var $281=HEAP32[(($indx)>>2)];
      var $cmp280=(($281)|(0)) < 0;
      if ($cmp280) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $282=HEAP32[(($i)>>2)];
      var $sub282=((($282)-(1))|0);
      var $283=$string_addr;
      var $arrayidx283=(($283+($sub282<<2))|0);
      var $284=HEAP32[(($arrayidx283)>>2)];
      var $285=HEAP32[(($j)>>2)];
      var $sub284=((($285)-(1))|0);
      var $286=$string_addr;
      var $arrayidx285=(($286+($sub284<<2))|0);
      var $287=HEAP32[(($arrayidx285)>>2)];
      var $cmp286=(($284)|(0)) < (($287)|(0));
      if ($cmp286) { label = 57; break; } else { label = 55; break; }
    case 55: 
      var $288=HEAP32[(($i)>>2)];
      var $sub287=((($288)-(1))|0);
      var $289=$string_addr;
      var $arrayidx288=(($289+($sub287<<2))|0);
      var $290=HEAP32[(($arrayidx288)>>2)];
      var $291=HEAP32[(($j)>>2)];
      var $sub289=((($291)-(1))|0);
      var $292=$string_addr;
      var $arrayidx290=(($292+($sub289<<2))|0);
      var $293=HEAP32[(($arrayidx290)>>2)];
      var $cmp291=(($290)|(0))==(($293)|(0));
      if ($cmp291) { label = 56; break; } else { label = 58; break; }
    case 56: 
      var $294=HEAP32[(($i)>>2)];
      var $sub293=((($294)-(1))|0);
      var $295=$order_addr;
      var $arrayidx294=(($295+($sub293<<2))|0);
      var $296=HEAP32[(($arrayidx294)>>2)];
      var $297=HEAP32[(($j)>>2)];
      var $sub295=((($297)-(1))|0);
      var $298=$order_addr;
      var $arrayidx296=(($298+($sub295<<2))|0);
      var $299=HEAP32[(($arrayidx296)>>2)];
      var $cmp297=(($296)|(0)) < (($299)|(0));
      if ($cmp297) { label = 57; break; } else { label = 58; break; }
    case 57: 
      $isgn=-1;
      label = 59; break;
    case 58: 
      $isgn=1;
      label = 59; break;
    case 59: 
      label = 63; break;
    case 60: 
      var $300=HEAP32[(($indx)>>2)];
      var $cmp302=(($300)|(0))==0;
      if ($cmp302) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 65; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 51; break;
    case 65: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_string_2d"] = _string_2d;
function _super_ellipse_points_2d($pc, $r1, $r2, $expo, $psi, $n, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $pc_addr;
      var $r1_addr;
      var $r2_addr;
      var $expo_addr;
      var $psi_addr;
      var $n_addr;
      var $p_addr;
      var $act;
      var $ast;
      var $i;
      var $pi;
      var $sct;
      var $sst;
      var $theta;
      $pc_addr=$pc;
      $r1_addr=$r1;
      $r2_addr=$r2;
      $expo_addr=$expo;
      $psi_addr=$psi;
      $n_addr=$n;
      $p_addr=$p;
      $pi=3.141592653589793;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$pi;
      var $mul=($2)*(2);
      var $3=$i;
      var $conv=(($3)|(0));
      var $mul1=($mul)*($conv);
      var $4=$n_addr;
      var $conv2=(($4)|(0));
      var $div=($mul1)/($conv2);
      $theta=$div;
      var $5=$theta;
      var $call=Math.cos($5);
      var $call3=_r8_abs($call);
      $act=$call3;
      var $6=$theta;
      var $call4=Math.cos($6);
      var $call5=_r8_sign($call4);
      $sct=$call5;
      var $7=$theta;
      var $call6=Math.sin($7);
      var $call7=_r8_abs($call6);
      $ast=$call7;
      var $8=$theta;
      var $call8=Math.sin($8);
      var $call9=_r8_sign($call8);
      $sst=$call9;
      var $9=$pc_addr;
      var $arrayidx=(($9)|0);
      var $10=HEAPF64[(($arrayidx)>>3)];
      var $11=$r1_addr;
      var $12=$psi_addr;
      var $call10=Math.cos($12);
      var $mul11=($11)*($call10);
      var $13=$sct;
      var $mul12=($mul11)*($13);
      var $14=$act;
      var $15=$expo_addr;
      var $16=Math.pow($14, $15);
      var $mul13=($mul12)*($16);
      var $add=($10)+($mul13);
      var $17=$r2_addr;
      var $18=$psi_addr;
      var $call14=Math.sin($18);
      var $mul15=($17)*($call14);
      var $19=$sst;
      var $mul16=($mul15)*($19);
      var $20=$ast;
      var $21=$expo_addr;
      var $22=Math.pow($20, $21);
      var $mul17=($mul16)*($22);
      var $sub=($add)-($mul17);
      var $23=$i;
      var $mul18=($23<<1);
      var $add19=(($mul18)|0);
      var $24=$p_addr;
      var $arrayidx20=(($24+($add19<<3))|0);
      HEAPF64[(($arrayidx20)>>3)]=$sub;
      var $25=$pc_addr;
      var $arrayidx21=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx21)>>3)];
      var $27=$r1_addr;
      var $28=$psi_addr;
      var $call22=Math.sin($28);
      var $mul23=($27)*($call22);
      var $29=$sct;
      var $mul24=($mul23)*($29);
      var $30=$act;
      var $31=$expo_addr;
      var $32=Math.pow($30, $31);
      var $mul25=($mul24)*($32);
      var $add26=($26)+($mul25);
      var $33=$r2_addr;
      var $34=$psi_addr;
      var $call27=Math.cos($34);
      var $mul28=($33)*($call27);
      var $35=$sst;
      var $mul29=($mul28)*($35);
      var $36=$ast;
      var $37=$expo_addr;
      var $38=Math.pow($36, $37);
      var $mul30=($mul29)*($38);
      var $add31=($add26)+($mul30);
      var $39=$i;
      var $mul32=($39<<1);
      var $add33=((($mul32)+(1))|0);
      var $40=$p_addr;
      var $arrayidx34=(($40+($add33<<3))|0);
      HEAPF64[(($arrayidx34)>>3)]=$add31;
      label = 5; break;
    case 5: 
      var $41=$i;
      var $inc=((($41)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_super_ellipse_points_2d"] = _super_ellipse_points_2d;
function _tetrahedron_contains_point_3d($tetra, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $p_addr;
      var $c;
      var $value;
      $tetra_addr=$tetra;
      $p_addr=$p;
      var $0=$tetra_addr;
      var $1=$p_addr;
      var $call=_tetrahedron_barycentric_3d($0, $1);
      $c=$call;
      var $2=$c;
      var $arrayidx=(($2)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $cmp=0 <= $3;
      if ($cmp) { label = 3; break; } else { var $10 = 0;label = 6; break; }
    case 3: 
      var $4=$c;
      var $arrayidx1=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx1)>>3)];
      var $cmp2=0 <= $5;
      if ($cmp2) { label = 4; break; } else { var $10 = 0;label = 6; break; }
    case 4: 
      var $6=$c;
      var $arrayidx4=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $cmp5=0 <= $7;
      if ($cmp5) { label = 5; break; } else { var $10 = 0;label = 6; break; }
    case 5: 
      var $8=$c;
      var $arrayidx6=(($8+24)|0);
      var $9=HEAPF64[(($arrayidx6)>>3)];
      var $cmp7=0 <= $9;
      var $10 = $cmp7;label = 6; break;
    case 6: 
      var $10;
      var $land_ext=(($10)&(1));
      $value=$land_ext;
      var $11=$c;
      var $12=$11;
      _free($12);
      var $13=$value;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_contains_point_3d"] = _tetrahedron_contains_point_3d;
function _tetrahedron_dihedral_angles_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $ab=__stackBase__;
      var $abc_normal;
      var $abd_normal;
      var $ac=(__stackBase__)+(24);
      var $acd_normal;
      var $ad=(__stackBase__)+(48);
      var $angle;
      var $bc=(__stackBase__)+(72);
      var $bcd_normal;
      var $bd=(__stackBase__)+(96);
      var $i;
      var $pi;
      $tetra_addr=$tetra;
      $pi=3.141592653589793;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $add=((($1)+(3))|0);
      var $2=$tetra_addr;
      var $arrayidx=(($2+($add<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $add1=(($4)|0);
      var $5=$tetra_addr;
      var $arrayidx2=(($5+($add1<<3))|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx3=(($ab+($7<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub;
      var $8=$i;
      var $add4=((($8)+(6))|0);
      var $9=$tetra_addr;
      var $arrayidx5=(($9+($add4<<3))|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$i;
      var $add6=(($11)|0);
      var $12=$tetra_addr;
      var $arrayidx7=(($12+($add6<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($10)-($13);
      var $14=$i;
      var $arrayidx9=(($ac+($14<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      var $15=$i;
      var $add10=((($15)+(9))|0);
      var $16=$tetra_addr;
      var $arrayidx11=(($16+($add10<<3))|0);
      var $17=HEAPF64[(($arrayidx11)>>3)];
      var $18=$i;
      var $add12=(($18)|0);
      var $19=$tetra_addr;
      var $arrayidx13=(($19+($add12<<3))|0);
      var $20=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($20);
      var $21=$i;
      var $arrayidx15=(($ad+($21<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=$sub14;
      var $22=$i;
      var $add16=((($22)+(6))|0);
      var $23=$tetra_addr;
      var $arrayidx17=(($23+($add16<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $25=$i;
      var $add18=((($25)+(3))|0);
      var $26=$tetra_addr;
      var $arrayidx19=(($26+($add18<<3))|0);
      var $27=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($24)-($27);
      var $28=$i;
      var $arrayidx21=(($bc+($28<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $29=$i;
      var $add22=((($29)+(9))|0);
      var $30=$tetra_addr;
      var $arrayidx23=(($30+($add22<<3))|0);
      var $31=HEAPF64[(($arrayidx23)>>3)];
      var $32=$i;
      var $add24=((($32)+(3))|0);
      var $33=$tetra_addr;
      var $arrayidx25=(($33+($add24<<3))|0);
      var $34=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($31)-($34);
      var $35=$i;
      var $arrayidx27=(($bd+($35<<3))|0);
      HEAPF64[(($arrayidx27)>>3)]=$sub26;
      label = 5; break;
    case 5: 
      var $36=$i;
      var $inc=((($36)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($ac)|0);
      var $arraydecay28=(($ab)|0);
      var $call=_r8vec_cross_product_3d($arraydecay, $arraydecay28);
      $abc_normal=$call;
      var $arraydecay29=(($ab)|0);
      var $arraydecay30=(($ad)|0);
      var $call31=_r8vec_cross_product_3d($arraydecay29, $arraydecay30);
      $abd_normal=$call31;
      var $arraydecay32=(($ad)|0);
      var $arraydecay33=(($ac)|0);
      var $call34=_r8vec_cross_product_3d($arraydecay32, $arraydecay33);
      $acd_normal=$call34;
      var $arraydecay35=(($bc)|0);
      var $arraydecay36=(($bd)|0);
      var $call37=_r8vec_cross_product_3d($arraydecay35, $arraydecay36);
      $bcd_normal=$call37;
      var $call38=_malloc(48);
      var $37=$call38;
      $angle=$37;
      var $38=$abc_normal;
      var $39=$abd_normal;
      var $call39=_r8vec_angle_3d($38, $39);
      var $40=$angle;
      var $arrayidx40=(($40)|0);
      HEAPF64[(($arrayidx40)>>3)]=$call39;
      var $41=$abc_normal;
      var $42=$acd_normal;
      var $call41=_r8vec_angle_3d($41, $42);
      var $43=$angle;
      var $arrayidx42=(($43+8)|0);
      HEAPF64[(($arrayidx42)>>3)]=$call41;
      var $44=$abd_normal;
      var $45=$acd_normal;
      var $call43=_r8vec_angle_3d($44, $45);
      var $46=$angle;
      var $arrayidx44=(($46+16)|0);
      HEAPF64[(($arrayidx44)>>3)]=$call43;
      var $47=$abc_normal;
      var $48=$bcd_normal;
      var $call45=_r8vec_angle_3d($47, $48);
      var $49=$angle;
      var $arrayidx46=(($49+24)|0);
      HEAPF64[(($arrayidx46)>>3)]=$call45;
      var $50=$abd_normal;
      var $51=$bcd_normal;
      var $call47=_r8vec_angle_3d($50, $51);
      var $52=$angle;
      var $arrayidx48=(($52+32)|0);
      HEAPF64[(($arrayidx48)>>3)]=$call47;
      var $53=$acd_normal;
      var $54=$bcd_normal;
      var $call49=_r8vec_angle_3d($53, $54);
      var $55=$angle;
      var $arrayidx50=(($55+40)|0);
      HEAPF64[(($arrayidx50)>>3)]=$call49;
      $i=0;
      label = 7; break;
    case 7: 
      var $56=$i;
      var $cmp52=(($56)|(0)) < 6;
      if ($cmp52) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $57=$pi;
      var $58=$i;
      var $59=$angle;
      var $arrayidx54=(($59+($58<<3))|0);
      var $60=HEAPF64[(($arrayidx54)>>3)];
      var $sub55=($57)-($60);
      var $61=$i;
      var $62=$angle;
      var $arrayidx56=(($62+($61<<3))|0);
      HEAPF64[(($arrayidx56)>>3)]=$sub55;
      label = 9; break;
    case 9: 
      var $63=$i;
      var $inc58=((($63)+(1))|0);
      $i=$inc58;
      label = 7; break;
    case 10: 
      var $64=$abc_normal;
      var $65=$64;
      _free($65);
      var $66=$abd_normal;
      var $67=$66;
      _free($67);
      var $68=$acd_normal;
      var $69=$68;
      _free($69);
      var $70=$bcd_normal;
      var $71=$70;
      _free($71);
      var $72=$angle;
      STACKTOP = __stackBase__;
      return $72;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_dihedral_angles_3d"] = _tetrahedron_dihedral_angles_3d;
function _tetrahedron_edge_length_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $edge_length;
      var $i;
      var $j1;
      var $j2;
      var $k;
      var $v=__stackBase__;
      $tetra_addr=$tetra;
      var $call=_malloc(48);
      var $0=$call;
      $edge_length=$0;
      $k=0;
      $j1=0;
      label = 3; break;
    case 3: 
      var $1=$j1;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      var $2=$j1;
      var $add=((($2)+(1))|0);
      $j2=$add;
      label = 5; break;
    case 5: 
      var $3=$j2;
      var $cmp2=(($3)|(0)) < 4;
      if ($cmp2) { label = 6; break; } else { label = 12; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $4=$i;
      var $cmp5=(($4)|(0)) < 3;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $5=$i;
      var $6=$j2;
      var $mul=((($6)*(3))&-1);
      var $add7=((($5)+($mul))|0);
      var $7=$tetra_addr;
      var $arrayidx=(($7+($add7<<3))|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$i;
      var $10=$j1;
      var $mul8=((($10)*(3))&-1);
      var $add9=((($9)+($mul8))|0);
      var $11=$tetra_addr;
      var $arrayidx10=(($11+($add9<<3))|0);
      var $12=HEAPF64[(($arrayidx10)>>3)];
      var $sub=($8)-($12);
      var $13=$i;
      var $arrayidx11=(($v+($13<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$sub;
      label = 9; break;
    case 9: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      var $arraydecay=(($v)|0);
      var $call12=_r8vec_norm(3, $arraydecay);
      var $15=$k;
      var $16=$edge_length;
      var $arrayidx13=(($16+($15<<3))|0);
      HEAPF64[(($arrayidx13)>>3)]=$call12;
      var $17=$k;
      var $add14=((($17)+(1))|0);
      $k=$add14;
      label = 11; break;
    case 11: 
      var $18=$j2;
      var $inc16=((($18)+(1))|0);
      $j2=$inc16;
      label = 5; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $19=$j1;
      var $inc19=((($19)+(1))|0);
      $j1=$inc19;
      label = 3; break;
    case 14: 
      var $20=$edge_length;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_edge_length_3d"] = _tetrahedron_edge_length_3d;
function _tetrahedron_face_angles_3d($tetra, $angles) {
  var label = 0;
  var $tetra_addr;
  var $angles_addr;
  var $tri;
  $tetra_addr=$tetra;
  $angles_addr=$angles;
  var $call=_malloc(72);
  var $0=$call;
  $tri=$0;
  var $1=$tetra_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$tri;
  var $arrayidx1=(($3)|0);
  HEAPF64[(($arrayidx1)>>3)]=$2;
  var $4=$tetra_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$tri;
  var $arrayidx3=(($6+8)|0);
  HEAPF64[(($arrayidx3)>>3)]=$5;
  var $7=$tetra_addr;
  var $arrayidx4=(($7+16)|0);
  var $8=HEAPF64[(($arrayidx4)>>3)];
  var $9=$tri;
  var $arrayidx5=(($9+16)|0);
  HEAPF64[(($arrayidx5)>>3)]=$8;
  var $10=$tetra_addr;
  var $arrayidx6=(($10+24)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $12=$tri;
  var $arrayidx7=(($12+24)|0);
  HEAPF64[(($arrayidx7)>>3)]=$11;
  var $13=$tetra_addr;
  var $arrayidx8=(($13+32)|0);
  var $14=HEAPF64[(($arrayidx8)>>3)];
  var $15=$tri;
  var $arrayidx9=(($15+32)|0);
  HEAPF64[(($arrayidx9)>>3)]=$14;
  var $16=$tetra_addr;
  var $arrayidx10=(($16+40)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $18=$tri;
  var $arrayidx11=(($18+40)|0);
  HEAPF64[(($arrayidx11)>>3)]=$17;
  var $19=$tetra_addr;
  var $arrayidx12=(($19+48)|0);
  var $20=HEAPF64[(($arrayidx12)>>3)];
  var $21=$tri;
  var $arrayidx13=(($21+48)|0);
  HEAPF64[(($arrayidx13)>>3)]=$20;
  var $22=$tetra_addr;
  var $arrayidx14=(($22+56)|0);
  var $23=HEAPF64[(($arrayidx14)>>3)];
  var $24=$tri;
  var $arrayidx15=(($24+56)|0);
  HEAPF64[(($arrayidx15)>>3)]=$23;
  var $25=$tetra_addr;
  var $arrayidx16=(($25+64)|0);
  var $26=HEAPF64[(($arrayidx16)>>3)];
  var $27=$tri;
  var $arrayidx17=(($27+64)|0);
  HEAPF64[(($arrayidx17)>>3)]=$26;
  var $28=$tri;
  var $29=$angles_addr;
  _triangle_angles_3d($28, $29);
  var $30=$tetra_addr;
  var $arrayidx18=(($30)|0);
  var $31=HEAPF64[(($arrayidx18)>>3)];
  var $32=$tri;
  var $arrayidx19=(($32)|0);
  HEAPF64[(($arrayidx19)>>3)]=$31;
  var $33=$tetra_addr;
  var $arrayidx20=(($33+8)|0);
  var $34=HEAPF64[(($arrayidx20)>>3)];
  var $35=$tri;
  var $arrayidx21=(($35+8)|0);
  HEAPF64[(($arrayidx21)>>3)]=$34;
  var $36=$tetra_addr;
  var $arrayidx22=(($36+16)|0);
  var $37=HEAPF64[(($arrayidx22)>>3)];
  var $38=$tri;
  var $arrayidx23=(($38+16)|0);
  HEAPF64[(($arrayidx23)>>3)]=$37;
  var $39=$tetra_addr;
  var $arrayidx24=(($39+24)|0);
  var $40=HEAPF64[(($arrayidx24)>>3)];
  var $41=$tri;
  var $arrayidx25=(($41+24)|0);
  HEAPF64[(($arrayidx25)>>3)]=$40;
  var $42=$tetra_addr;
  var $arrayidx26=(($42+32)|0);
  var $43=HEAPF64[(($arrayidx26)>>3)];
  var $44=$tri;
  var $arrayidx27=(($44+32)|0);
  HEAPF64[(($arrayidx27)>>3)]=$43;
  var $45=$tetra_addr;
  var $arrayidx28=(($45+40)|0);
  var $46=HEAPF64[(($arrayidx28)>>3)];
  var $47=$tri;
  var $arrayidx29=(($47+40)|0);
  HEAPF64[(($arrayidx29)>>3)]=$46;
  var $48=$tetra_addr;
  var $arrayidx30=(($48+72)|0);
  var $49=HEAPF64[(($arrayidx30)>>3)];
  var $50=$tri;
  var $arrayidx31=(($50+48)|0);
  HEAPF64[(($arrayidx31)>>3)]=$49;
  var $51=$tetra_addr;
  var $arrayidx32=(($51+80)|0);
  var $52=HEAPF64[(($arrayidx32)>>3)];
  var $53=$tri;
  var $arrayidx33=(($53+56)|0);
  HEAPF64[(($arrayidx33)>>3)]=$52;
  var $54=$tetra_addr;
  var $arrayidx34=(($54+88)|0);
  var $55=HEAPF64[(($arrayidx34)>>3)];
  var $56=$tri;
  var $arrayidx35=(($56+64)|0);
  HEAPF64[(($arrayidx35)>>3)]=$55;
  var $57=$tri;
  var $58=$angles_addr;
  var $add_ptr=(($58+24)|0);
  _triangle_angles_3d($57, $add_ptr);
  var $59=$tetra_addr;
  var $arrayidx36=(($59)|0);
  var $60=HEAPF64[(($arrayidx36)>>3)];
  var $61=$tri;
  var $arrayidx37=(($61)|0);
  HEAPF64[(($arrayidx37)>>3)]=$60;
  var $62=$tetra_addr;
  var $arrayidx38=(($62+8)|0);
  var $63=HEAPF64[(($arrayidx38)>>3)];
  var $64=$tri;
  var $arrayidx39=(($64+8)|0);
  HEAPF64[(($arrayidx39)>>3)]=$63;
  var $65=$tetra_addr;
  var $arrayidx40=(($65+16)|0);
  var $66=HEAPF64[(($arrayidx40)>>3)];
  var $67=$tri;
  var $arrayidx41=(($67+16)|0);
  HEAPF64[(($arrayidx41)>>3)]=$66;
  var $68=$tetra_addr;
  var $arrayidx42=(($68+48)|0);
  var $69=HEAPF64[(($arrayidx42)>>3)];
  var $70=$tri;
  var $arrayidx43=(($70+24)|0);
  HEAPF64[(($arrayidx43)>>3)]=$69;
  var $71=$tetra_addr;
  var $arrayidx44=(($71+56)|0);
  var $72=HEAPF64[(($arrayidx44)>>3)];
  var $73=$tri;
  var $arrayidx45=(($73+32)|0);
  HEAPF64[(($arrayidx45)>>3)]=$72;
  var $74=$tetra_addr;
  var $arrayidx46=(($74+64)|0);
  var $75=HEAPF64[(($arrayidx46)>>3)];
  var $76=$tri;
  var $arrayidx47=(($76+40)|0);
  HEAPF64[(($arrayidx47)>>3)]=$75;
  var $77=$tetra_addr;
  var $arrayidx48=(($77+72)|0);
  var $78=HEAPF64[(($arrayidx48)>>3)];
  var $79=$tri;
  var $arrayidx49=(($79+48)|0);
  HEAPF64[(($arrayidx49)>>3)]=$78;
  var $80=$tetra_addr;
  var $arrayidx50=(($80+80)|0);
  var $81=HEAPF64[(($arrayidx50)>>3)];
  var $82=$tri;
  var $arrayidx51=(($82+56)|0);
  HEAPF64[(($arrayidx51)>>3)]=$81;
  var $83=$tetra_addr;
  var $arrayidx52=(($83+88)|0);
  var $84=HEAPF64[(($arrayidx52)>>3)];
  var $85=$tri;
  var $arrayidx53=(($85+64)|0);
  HEAPF64[(($arrayidx53)>>3)]=$84;
  var $86=$tri;
  var $87=$angles_addr;
  var $add_ptr54=(($87+48)|0);
  _triangle_angles_3d($86, $add_ptr54);
  var $88=$tetra_addr;
  var $arrayidx55=(($88+24)|0);
  var $89=HEAPF64[(($arrayidx55)>>3)];
  var $90=$tri;
  var $arrayidx56=(($90)|0);
  HEAPF64[(($arrayidx56)>>3)]=$89;
  var $91=$tetra_addr;
  var $arrayidx57=(($91+32)|0);
  var $92=HEAPF64[(($arrayidx57)>>3)];
  var $93=$tri;
  var $arrayidx58=(($93+8)|0);
  HEAPF64[(($arrayidx58)>>3)]=$92;
  var $94=$tetra_addr;
  var $arrayidx59=(($94+40)|0);
  var $95=HEAPF64[(($arrayidx59)>>3)];
  var $96=$tri;
  var $arrayidx60=(($96+16)|0);
  HEAPF64[(($arrayidx60)>>3)]=$95;
  var $97=$tetra_addr;
  var $arrayidx61=(($97+48)|0);
  var $98=HEAPF64[(($arrayidx61)>>3)];
  var $99=$tri;
  var $arrayidx62=(($99+24)|0);
  HEAPF64[(($arrayidx62)>>3)]=$98;
  var $100=$tetra_addr;
  var $arrayidx63=(($100+56)|0);
  var $101=HEAPF64[(($arrayidx63)>>3)];
  var $102=$tri;
  var $arrayidx64=(($102+32)|0);
  HEAPF64[(($arrayidx64)>>3)]=$101;
  var $103=$tetra_addr;
  var $arrayidx65=(($103+64)|0);
  var $104=HEAPF64[(($arrayidx65)>>3)];
  var $105=$tri;
  var $arrayidx66=(($105+40)|0);
  HEAPF64[(($arrayidx66)>>3)]=$104;
  var $106=$tetra_addr;
  var $arrayidx67=(($106+72)|0);
  var $107=HEAPF64[(($arrayidx67)>>3)];
  var $108=$tri;
  var $arrayidx68=(($108+48)|0);
  HEAPF64[(($arrayidx68)>>3)]=$107;
  var $109=$tetra_addr;
  var $arrayidx69=(($109+80)|0);
  var $110=HEAPF64[(($arrayidx69)>>3)];
  var $111=$tri;
  var $arrayidx70=(($111+56)|0);
  HEAPF64[(($arrayidx70)>>3)]=$110;
  var $112=$tetra_addr;
  var $arrayidx71=(($112+88)|0);
  var $113=HEAPF64[(($arrayidx71)>>3)];
  var $114=$tri;
  var $arrayidx72=(($114+64)|0);
  HEAPF64[(($arrayidx72)>>3)]=$113;
  var $115=$tri;
  var $116=$angles_addr;
  var $add_ptr73=(($116+72)|0);
  _triangle_angles_3d($115, $add_ptr73);
  var $117=$tri;
  var $118=$117;
  _free($118);
  return;
}
Module["_tetrahedron_face_angles_3d"] = _tetrahedron_face_angles_3d;
function _tetrahedron_barycentric_3d($tetra, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $p_addr;
      var $a=__stackBase__;
      var $c;
      var $info;
      $tetra_addr=$tetra;
      $p_addr=$p;
      var $0=$tetra_addr;
      var $arrayidx=(($0+24)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$tetra_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$tetra_addr;
      var $arrayidx3=(($4+32)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$tetra_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$tetra_addr;
      var $arrayidx7=(($8+40)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$tetra_addr;
      var $arrayidx8=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($a+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $12=$tetra_addr;
      var $arrayidx11=(($12+48)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$tetra_addr;
      var $arrayidx12=(($14)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $arrayidx14=(($a+24)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      var $16=$tetra_addr;
      var $arrayidx15=(($16+56)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $18=$tetra_addr;
      var $arrayidx16=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($17)-($19);
      var $arrayidx18=(($a+32)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $20=$tetra_addr;
      var $arrayidx19=(($20+64)|0);
      var $21=HEAPF64[(($arrayidx19)>>3)];
      var $22=$tetra_addr;
      var $arrayidx20=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($21)-($23);
      var $arrayidx22=(($a+40)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $24=$tetra_addr;
      var $arrayidx23=(($24+72)|0);
      var $25=HEAPF64[(($arrayidx23)>>3)];
      var $26=$tetra_addr;
      var $arrayidx24=(($26)|0);
      var $27=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($25)-($27);
      var $arrayidx26=(($a+48)|0);
      HEAPF64[(($arrayidx26)>>3)]=$sub25;
      var $28=$tetra_addr;
      var $arrayidx27=(($28+80)|0);
      var $29=HEAPF64[(($arrayidx27)>>3)];
      var $30=$tetra_addr;
      var $arrayidx28=(($30+8)|0);
      var $31=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($29)-($31);
      var $arrayidx30=(($a+56)|0);
      HEAPF64[(($arrayidx30)>>3)]=$sub29;
      var $32=$tetra_addr;
      var $arrayidx31=(($32+88)|0);
      var $33=HEAPF64[(($arrayidx31)>>3)];
      var $34=$tetra_addr;
      var $arrayidx32=(($34+16)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($33)-($35);
      var $arrayidx34=(($a+64)|0);
      HEAPF64[(($arrayidx34)>>3)]=$sub33;
      var $36=$p_addr;
      var $arrayidx35=(($36)|0);
      var $37=HEAPF64[(($arrayidx35)>>3)];
      var $38=$tetra_addr;
      var $arrayidx36=(($38)|0);
      var $39=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($37)-($39);
      var $arrayidx38=(($a+72)|0);
      HEAPF64[(($arrayidx38)>>3)]=$sub37;
      var $40=$p_addr;
      var $arrayidx39=(($40+8)|0);
      var $41=HEAPF64[(($arrayidx39)>>3)];
      var $42=$tetra_addr;
      var $arrayidx40=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx40)>>3)];
      var $sub41=($41)-($43);
      var $arrayidx42=(($a+80)|0);
      HEAPF64[(($arrayidx42)>>3)]=$sub41;
      var $44=$p_addr;
      var $arrayidx43=(($44+16)|0);
      var $45=HEAPF64[(($arrayidx43)>>3)];
      var $46=$tetra_addr;
      var $arrayidx44=(($46+16)|0);
      var $47=HEAPF64[(($arrayidx44)>>3)];
      var $sub45=($45)-($47);
      var $arrayidx46=(($a+88)|0);
      HEAPF64[(($arrayidx46)>>3)]=$sub45;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_solve(3, 1, $arraydecay);
      $info=$call;
      var $48=$info;
      var $cmp=(($48)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $49=HEAP32[((_stderr)>>2)];
      var $call47=_fprintf($49, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $50=HEAP32[((_stderr)>>2)];
      var $call48=_fprintf($50, ((12376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $51=HEAP32[((_stderr)>>2)];
      var $call49=_fprintf($51, ((7400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $52=HEAP32[((_stderr)>>2)];
      var $call50=_fprintf($52, ((12320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $call51=_malloc(32);
      var $53=$call51;
      $c=$53;
      var $arrayidx52=(($a+72)|0);
      var $54=HEAPF64[(($arrayidx52)>>3)];
      var $55=$c;
      var $arrayidx53=(($55+8)|0);
      HEAPF64[(($arrayidx53)>>3)]=$54;
      var $arrayidx54=(($a+80)|0);
      var $56=HEAPF64[(($arrayidx54)>>3)];
      var $57=$c;
      var $arrayidx55=(($57+16)|0);
      HEAPF64[(($arrayidx55)>>3)]=$56;
      var $arrayidx56=(($a+88)|0);
      var $58=HEAPF64[(($arrayidx56)>>3)];
      var $59=$c;
      var $arrayidx57=(($59+24)|0);
      HEAPF64[(($arrayidx57)>>3)]=$58;
      var $60=$c;
      var $arrayidx58=(($60+8)|0);
      var $61=HEAPF64[(($arrayidx58)>>3)];
      var $sub59=(1)-($61);
      var $62=$c;
      var $arrayidx60=(($62+16)|0);
      var $63=HEAPF64[(($arrayidx60)>>3)];
      var $sub61=($sub59)-($63);
      var $64=$c;
      var $arrayidx62=(($64+24)|0);
      var $65=HEAPF64[(($arrayidx62)>>3)];
      var $sub63=($sub61)-($65);
      var $66=$c;
      var $arrayidx64=(($66)|0);
      HEAPF64[(($arrayidx64)>>3)]=$sub63;
      var $67=$c;
      STACKTOP = __stackBase__;
      return $67;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_barycentric_3d"] = _tetrahedron_barycentric_3d;
function _triangle_angles_3d($t, $angle) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $angle_addr;
      var $a;
      var $b;
      var $c;
      var $pi;
      $t_addr=$t;
      $angle_addr=$angle;
      $pi=3.141592653589793;
      var $0=$t_addr;
      var $arrayidx=(($0+24)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+32)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $10=$t_addr;
      var $arrayidx5=(($10+40)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $add8=($add)+($14);
      var $call=Math.sqrt($add8);
      $a=$call;
      var $15=$t_addr;
      var $arrayidx9=(($15+48)|0);
      var $16=HEAPF64[(($arrayidx9)>>3)];
      var $17=$t_addr;
      var $arrayidx10=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($16)-($18);
      var $19=Math.pow($sub11, 2);
      var $20=$t_addr;
      var $arrayidx12=(($20+56)|0);
      var $21=HEAPF64[(($arrayidx12)>>3)];
      var $22=$t_addr;
      var $arrayidx13=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($21)-($23);
      var $24=Math.pow($sub14, 2);
      var $add15=($19)+($24);
      var $25=$t_addr;
      var $arrayidx16=(($25+64)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($add15)+($29);
      var $call20=Math.sqrt($add19);
      $b=$call20;
      var $30=$t_addr;
      var $arrayidx21=(($30)|0);
      var $31=HEAPF64[(($arrayidx21)>>3)];
      var $32=$t_addr;
      var $arrayidx22=(($32+48)|0);
      var $33=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($31)-($33);
      var $34=Math.pow($sub23, 2);
      var $35=$t_addr;
      var $arrayidx24=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx24)>>3)];
      var $37=$t_addr;
      var $arrayidx25=(($37+56)|0);
      var $38=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($36)-($38);
      var $39=Math.pow($sub26, 2);
      var $add27=($34)+($39);
      var $40=$t_addr;
      var $arrayidx28=(($40+16)|0);
      var $41=HEAPF64[(($arrayidx28)>>3)];
      var $42=$t_addr;
      var $arrayidx29=(($42+64)|0);
      var $43=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($41)-($43);
      var $44=Math.pow($sub30, 2);
      var $add31=($add27)+($44);
      var $call32=Math.sqrt($add31);
      $c=$call32;
      var $45=$a;
      var $cmp=$45 == 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $46=$b;
      var $cmp33=$46 == 0;
      if ($cmp33) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $47=$c;
      var $cmp35=$47 == 0;
      if ($cmp35) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $48=$pi;
      var $mul=($48)*(2);
      var $div=($mul)/(3);
      var $49=$angle_addr;
      var $arrayidx36=(($49)|0);
      HEAPF64[(($arrayidx36)>>3)]=$div;
      var $50=$pi;
      var $mul37=($50)*(2);
      var $div38=($mul37)/(3);
      var $51=$angle_addr;
      var $arrayidx39=(($51+8)|0);
      HEAPF64[(($arrayidx39)>>3)]=$div38;
      var $52=$pi;
      var $mul40=($52)*(2);
      var $div41=($mul40)/(3);
      var $53=$angle_addr;
      var $arrayidx42=(($53+16)|0);
      HEAPF64[(($arrayidx42)>>3)]=$div41;
      label = 19; break;
    case 6: 
      var $54=$c;
      var $cmp43=$54 == 0;
      if ($cmp43) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $55=$a;
      var $cmp44=$55 == 0;
      if ($cmp44) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $56=$pi;
      var $57=$angle_addr;
      var $arrayidx46=(($57)|0);
      HEAPF64[(($arrayidx46)>>3)]=$56;
      label = 10; break;
    case 9: 
      var $58=$c;
      var $59=$c;
      var $mul47=($58)*($59);
      var $60=$a;
      var $61=$a;
      var $mul48=($60)*($61);
      var $add49=($mul47)+($mul48);
      var $62=$b;
      var $63=$b;
      var $mul50=($62)*($63);
      var $sub51=($add49)-($mul50);
      var $64=$c;
      var $mul52=($64)*(2);
      var $65=$a;
      var $mul53=($mul52)*($65);
      var $div54=($sub51)/($mul53);
      var $call55=_r8_acos($div54);
      var $66=$angle_addr;
      var $arrayidx56=(($66)|0);
      HEAPF64[(($arrayidx56)>>3)]=$call55;
      label = 10; break;
    case 10: 
      var $67=$a;
      var $cmp58=$67 == 0;
      if ($cmp58) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $68=$b;
      var $cmp60=$68 == 0;
      if ($cmp60) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $69=$pi;
      var $70=$angle_addr;
      var $arrayidx62=(($70+8)|0);
      HEAPF64[(($arrayidx62)>>3)]=$69;
      label = 14; break;
    case 13: 
      var $71=$a;
      var $72=$a;
      var $mul64=($71)*($72);
      var $73=$b;
      var $74=$b;
      var $mul65=($73)*($74);
      var $add66=($mul64)+($mul65);
      var $75=$c;
      var $76=$c;
      var $mul67=($75)*($76);
      var $sub68=($add66)-($mul67);
      var $77=$a;
      var $mul69=($77)*(2);
      var $78=$b;
      var $mul70=($mul69)*($78);
      var $div71=($sub68)/($mul70);
      var $call72=_r8_acos($div71);
      var $79=$angle_addr;
      var $arrayidx73=(($79+8)|0);
      HEAPF64[(($arrayidx73)>>3)]=$call72;
      label = 14; break;
    case 14: 
      var $80=$b;
      var $cmp75=$80 == 0;
      if ($cmp75) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $81=$c;
      var $cmp77=$81 == 0;
      if ($cmp77) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $82=$pi;
      var $83=$angle_addr;
      var $arrayidx79=(($83+16)|0);
      HEAPF64[(($arrayidx79)>>3)]=$82;
      label = 18; break;
    case 17: 
      var $84=$b;
      var $85=$b;
      var $mul81=($84)*($85);
      var $86=$c;
      var $87=$c;
      var $mul82=($86)*($87);
      var $add83=($mul81)+($mul82);
      var $88=$a;
      var $89=$a;
      var $mul84=($88)*($89);
      var $sub85=($add83)-($mul84);
      var $90=$b;
      var $mul86=($90)*(2);
      var $91=$c;
      var $mul87=($mul86)*($91);
      var $div88=($sub85)/($mul87);
      var $call89=_r8_acos($div88);
      var $92=$angle_addr;
      var $arrayidx90=(($92+16)|0);
      HEAPF64[(($arrayidx90)>>3)]=$call89;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_angles_3d"] = _triangle_angles_3d;
function _tetrahedron_face_areas_3d($tetra, $areas) {
  var label = 0;
  var $tetra_addr;
  var $areas_addr;
  var $tri;
  $tetra_addr=$tetra;
  $areas_addr=$areas;
  var $call=_malloc(72);
  var $0=$call;
  $tri=$0;
  var $1=$tetra_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$tri;
  var $arrayidx1=(($3)|0);
  HEAPF64[(($arrayidx1)>>3)]=$2;
  var $4=$tetra_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$tri;
  var $arrayidx3=(($6+8)|0);
  HEAPF64[(($arrayidx3)>>3)]=$5;
  var $7=$tetra_addr;
  var $arrayidx4=(($7+16)|0);
  var $8=HEAPF64[(($arrayidx4)>>3)];
  var $9=$tri;
  var $arrayidx5=(($9+16)|0);
  HEAPF64[(($arrayidx5)>>3)]=$8;
  var $10=$tetra_addr;
  var $arrayidx6=(($10+24)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $12=$tri;
  var $arrayidx7=(($12+24)|0);
  HEAPF64[(($arrayidx7)>>3)]=$11;
  var $13=$tetra_addr;
  var $arrayidx8=(($13+32)|0);
  var $14=HEAPF64[(($arrayidx8)>>3)];
  var $15=$tri;
  var $arrayidx9=(($15+32)|0);
  HEAPF64[(($arrayidx9)>>3)]=$14;
  var $16=$tetra_addr;
  var $arrayidx10=(($16+40)|0);
  var $17=HEAPF64[(($arrayidx10)>>3)];
  var $18=$tri;
  var $arrayidx11=(($18+40)|0);
  HEAPF64[(($arrayidx11)>>3)]=$17;
  var $19=$tetra_addr;
  var $arrayidx12=(($19+48)|0);
  var $20=HEAPF64[(($arrayidx12)>>3)];
  var $21=$tri;
  var $arrayidx13=(($21+48)|0);
  HEAPF64[(($arrayidx13)>>3)]=$20;
  var $22=$tetra_addr;
  var $arrayidx14=(($22+56)|0);
  var $23=HEAPF64[(($arrayidx14)>>3)];
  var $24=$tri;
  var $arrayidx15=(($24+56)|0);
  HEAPF64[(($arrayidx15)>>3)]=$23;
  var $25=$tetra_addr;
  var $arrayidx16=(($25+64)|0);
  var $26=HEAPF64[(($arrayidx16)>>3)];
  var $27=$tri;
  var $arrayidx17=(($27+64)|0);
  HEAPF64[(($arrayidx17)>>3)]=$26;
  var $28=$tri;
  var $call18=_triangle_area_3d($28);
  var $29=$areas_addr;
  var $arrayidx19=(($29)|0);
  HEAPF64[(($arrayidx19)>>3)]=$call18;
  var $30=$tetra_addr;
  var $arrayidx20=(($30)|0);
  var $31=HEAPF64[(($arrayidx20)>>3)];
  var $32=$tri;
  var $arrayidx21=(($32)|0);
  HEAPF64[(($arrayidx21)>>3)]=$31;
  var $33=$tetra_addr;
  var $arrayidx22=(($33+8)|0);
  var $34=HEAPF64[(($arrayidx22)>>3)];
  var $35=$tri;
  var $arrayidx23=(($35+8)|0);
  HEAPF64[(($arrayidx23)>>3)]=$34;
  var $36=$tetra_addr;
  var $arrayidx24=(($36+16)|0);
  var $37=HEAPF64[(($arrayidx24)>>3)];
  var $38=$tri;
  var $arrayidx25=(($38+16)|0);
  HEAPF64[(($arrayidx25)>>3)]=$37;
  var $39=$tetra_addr;
  var $arrayidx26=(($39+24)|0);
  var $40=HEAPF64[(($arrayidx26)>>3)];
  var $41=$tri;
  var $arrayidx27=(($41+24)|0);
  HEAPF64[(($arrayidx27)>>3)]=$40;
  var $42=$tetra_addr;
  var $arrayidx28=(($42+32)|0);
  var $43=HEAPF64[(($arrayidx28)>>3)];
  var $44=$tri;
  var $arrayidx29=(($44+32)|0);
  HEAPF64[(($arrayidx29)>>3)]=$43;
  var $45=$tetra_addr;
  var $arrayidx30=(($45+40)|0);
  var $46=HEAPF64[(($arrayidx30)>>3)];
  var $47=$tri;
  var $arrayidx31=(($47+40)|0);
  HEAPF64[(($arrayidx31)>>3)]=$46;
  var $48=$tetra_addr;
  var $arrayidx32=(($48+72)|0);
  var $49=HEAPF64[(($arrayidx32)>>3)];
  var $50=$tri;
  var $arrayidx33=(($50+48)|0);
  HEAPF64[(($arrayidx33)>>3)]=$49;
  var $51=$tetra_addr;
  var $arrayidx34=(($51+80)|0);
  var $52=HEAPF64[(($arrayidx34)>>3)];
  var $53=$tri;
  var $arrayidx35=(($53+56)|0);
  HEAPF64[(($arrayidx35)>>3)]=$52;
  var $54=$tetra_addr;
  var $arrayidx36=(($54+88)|0);
  var $55=HEAPF64[(($arrayidx36)>>3)];
  var $56=$tri;
  var $arrayidx37=(($56+64)|0);
  HEAPF64[(($arrayidx37)>>3)]=$55;
  var $57=$tri;
  var $call38=_triangle_area_3d($57);
  var $58=$areas_addr;
  var $arrayidx39=(($58+8)|0);
  HEAPF64[(($arrayidx39)>>3)]=$call38;
  var $59=$tetra_addr;
  var $arrayidx40=(($59)|0);
  var $60=HEAPF64[(($arrayidx40)>>3)];
  var $61=$tri;
  var $arrayidx41=(($61)|0);
  HEAPF64[(($arrayidx41)>>3)]=$60;
  var $62=$tetra_addr;
  var $arrayidx42=(($62+8)|0);
  var $63=HEAPF64[(($arrayidx42)>>3)];
  var $64=$tri;
  var $arrayidx43=(($64+8)|0);
  HEAPF64[(($arrayidx43)>>3)]=$63;
  var $65=$tetra_addr;
  var $arrayidx44=(($65+16)|0);
  var $66=HEAPF64[(($arrayidx44)>>3)];
  var $67=$tri;
  var $arrayidx45=(($67+16)|0);
  HEAPF64[(($arrayidx45)>>3)]=$66;
  var $68=$tetra_addr;
  var $arrayidx46=(($68+48)|0);
  var $69=HEAPF64[(($arrayidx46)>>3)];
  var $70=$tri;
  var $arrayidx47=(($70+24)|0);
  HEAPF64[(($arrayidx47)>>3)]=$69;
  var $71=$tetra_addr;
  var $arrayidx48=(($71+56)|0);
  var $72=HEAPF64[(($arrayidx48)>>3)];
  var $73=$tri;
  var $arrayidx49=(($73+32)|0);
  HEAPF64[(($arrayidx49)>>3)]=$72;
  var $74=$tetra_addr;
  var $arrayidx50=(($74+64)|0);
  var $75=HEAPF64[(($arrayidx50)>>3)];
  var $76=$tri;
  var $arrayidx51=(($76+40)|0);
  HEAPF64[(($arrayidx51)>>3)]=$75;
  var $77=$tetra_addr;
  var $arrayidx52=(($77+72)|0);
  var $78=HEAPF64[(($arrayidx52)>>3)];
  var $79=$tri;
  var $arrayidx53=(($79+48)|0);
  HEAPF64[(($arrayidx53)>>3)]=$78;
  var $80=$tetra_addr;
  var $arrayidx54=(($80+80)|0);
  var $81=HEAPF64[(($arrayidx54)>>3)];
  var $82=$tri;
  var $arrayidx55=(($82+56)|0);
  HEAPF64[(($arrayidx55)>>3)]=$81;
  var $83=$tetra_addr;
  var $arrayidx56=(($83+88)|0);
  var $84=HEAPF64[(($arrayidx56)>>3)];
  var $85=$tri;
  var $arrayidx57=(($85+64)|0);
  HEAPF64[(($arrayidx57)>>3)]=$84;
  var $86=$tri;
  var $call58=_triangle_area_3d($86);
  var $87=$areas_addr;
  var $arrayidx59=(($87+16)|0);
  HEAPF64[(($arrayidx59)>>3)]=$call58;
  var $88=$tetra_addr;
  var $arrayidx60=(($88+24)|0);
  var $89=HEAPF64[(($arrayidx60)>>3)];
  var $90=$tri;
  var $arrayidx61=(($90)|0);
  HEAPF64[(($arrayidx61)>>3)]=$89;
  var $91=$tetra_addr;
  var $arrayidx62=(($91+32)|0);
  var $92=HEAPF64[(($arrayidx62)>>3)];
  var $93=$tri;
  var $arrayidx63=(($93+8)|0);
  HEAPF64[(($arrayidx63)>>3)]=$92;
  var $94=$tetra_addr;
  var $arrayidx64=(($94+40)|0);
  var $95=HEAPF64[(($arrayidx64)>>3)];
  var $96=$tri;
  var $arrayidx65=(($96+16)|0);
  HEAPF64[(($arrayidx65)>>3)]=$95;
  var $97=$tetra_addr;
  var $arrayidx66=(($97+48)|0);
  var $98=HEAPF64[(($arrayidx66)>>3)];
  var $99=$tri;
  var $arrayidx67=(($99+24)|0);
  HEAPF64[(($arrayidx67)>>3)]=$98;
  var $100=$tetra_addr;
  var $arrayidx68=(($100+56)|0);
  var $101=HEAPF64[(($arrayidx68)>>3)];
  var $102=$tri;
  var $arrayidx69=(($102+32)|0);
  HEAPF64[(($arrayidx69)>>3)]=$101;
  var $103=$tetra_addr;
  var $arrayidx70=(($103+64)|0);
  var $104=HEAPF64[(($arrayidx70)>>3)];
  var $105=$tri;
  var $arrayidx71=(($105+40)|0);
  HEAPF64[(($arrayidx71)>>3)]=$104;
  var $106=$tetra_addr;
  var $arrayidx72=(($106+72)|0);
  var $107=HEAPF64[(($arrayidx72)>>3)];
  var $108=$tri;
  var $arrayidx73=(($108+48)|0);
  HEAPF64[(($arrayidx73)>>3)]=$107;
  var $109=$tetra_addr;
  var $arrayidx74=(($109+80)|0);
  var $110=HEAPF64[(($arrayidx74)>>3)];
  var $111=$tri;
  var $arrayidx75=(($111+56)|0);
  HEAPF64[(($arrayidx75)>>3)]=$110;
  var $112=$tetra_addr;
  var $arrayidx76=(($112+88)|0);
  var $113=HEAPF64[(($arrayidx76)>>3)];
  var $114=$tri;
  var $arrayidx77=(($114+64)|0);
  HEAPF64[(($arrayidx77)>>3)]=$113;
  var $115=$tri;
  var $call78=_triangle_area_3d($115);
  var $116=$areas_addr;
  var $arrayidx79=(($116+24)|0);
  HEAPF64[(($arrayidx79)>>3)]=$call78;
  var $117=$tri;
  var $118=$117;
  _free($118);
  return;
}
Module["_tetrahedron_face_areas_3d"] = _tetrahedron_face_areas_3d;
function _tetrahedron_insphere_3d($tetra, $r, $pc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 248)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $r_addr;
      var $pc_addr;
      var $b=__stackBase__;
      var $gamma;
      var $i;
      var $j;
      var $l123;
      var $l124;
      var $l134;
      var $l234;
      var $n123;
      var $n124;
      var $n134;
      var $n234;
      var $v21=(__stackBase__)+(128);
      var $v31=(__stackBase__)+(152);
      var $v41=(__stackBase__)+(176);
      var $v32=(__stackBase__)+(200);
      var $v42=(__stackBase__)+(224);
      $tetra_addr=$tetra;
      $r_addr=$r;
      $pc_addr=$pc;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $add=((($1)+(3))|0);
      var $2=$tetra_addr;
      var $arrayidx=(($2+($add<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $add1=(($4)|0);
      var $5=$tetra_addr;
      var $arrayidx2=(($5+($add1<<3))|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx3=(($v21+($7<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp5=(($9)|(0)) < 3;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $add7=((($10)+(6))|0);
      var $11=$tetra_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $13=$i;
      var $add9=(($13)|0);
      var $14=$tetra_addr;
      var $arrayidx10=(($14+($add9<<3))|0);
      var $15=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($12)-($15);
      var $16=$i;
      var $arrayidx12=(($v31+($16<<3))|0);
      HEAPF64[(($arrayidx12)>>3)]=$sub11;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc14=((($17)+(1))|0);
      $i=$inc14;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp17=(($18)|(0)) < 3;
      if ($cmp17) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $add19=((($19)+(9))|0);
      var $20=$tetra_addr;
      var $arrayidx20=(($20+($add19<<3))|0);
      var $21=HEAPF64[(($arrayidx20)>>3)];
      var $22=$i;
      var $add21=(($22)|0);
      var $23=$tetra_addr;
      var $arrayidx22=(($23+($add21<<3))|0);
      var $24=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=($21)-($24);
      var $25=$i;
      var $arrayidx24=(($v41+($25<<3))|0);
      HEAPF64[(($arrayidx24)>>3)]=$sub23;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc26=((($26)+(1))|0);
      $i=$inc26;
      label = 11; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $27=$i;
      var $cmp29=(($27)|(0)) < 3;
      if ($cmp29) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $28=$i;
      var $add31=((($28)+(6))|0);
      var $29=$tetra_addr;
      var $arrayidx32=(($29+($add31<<3))|0);
      var $30=HEAPF64[(($arrayidx32)>>3)];
      var $31=$i;
      var $add33=((($31)+(3))|0);
      var $32=$tetra_addr;
      var $arrayidx34=(($32+($add33<<3))|0);
      var $33=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($30)-($33);
      var $34=$i;
      var $arrayidx36=(($v32+($34<<3))|0);
      HEAPF64[(($arrayidx36)>>3)]=$sub35;
      label = 17; break;
    case 17: 
      var $35=$i;
      var $inc38=((($35)+(1))|0);
      $i=$inc38;
      label = 15; break;
    case 18: 
      $i=0;
      label = 19; break;
    case 19: 
      var $36=$i;
      var $cmp41=(($36)|(0)) < 3;
      if ($cmp41) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $37=$i;
      var $add43=((($37)+(9))|0);
      var $38=$tetra_addr;
      var $arrayidx44=(($38+($add43<<3))|0);
      var $39=HEAPF64[(($arrayidx44)>>3)];
      var $40=$i;
      var $add45=((($40)+(3))|0);
      var $41=$tetra_addr;
      var $arrayidx46=(($41+($add45<<3))|0);
      var $42=HEAPF64[(($arrayidx46)>>3)];
      var $sub47=($39)-($42);
      var $43=$i;
      var $arrayidx48=(($v42+($43<<3))|0);
      HEAPF64[(($arrayidx48)>>3)]=$sub47;
      label = 21; break;
    case 21: 
      var $44=$i;
      var $inc50=((($44)+(1))|0);
      $i=$inc50;
      label = 19; break;
    case 22: 
      var $arraydecay=(($v21)|0);
      var $arraydecay52=(($v31)|0);
      var $call=_r8vec_cross_product_3d($arraydecay, $arraydecay52);
      $n123=$call;
      var $arraydecay53=(($v41)|0);
      var $arraydecay54=(($v21)|0);
      var $call55=_r8vec_cross_product_3d($arraydecay53, $arraydecay54);
      $n124=$call55;
      var $arraydecay56=(($v31)|0);
      var $arraydecay57=(($v41)|0);
      var $call58=_r8vec_cross_product_3d($arraydecay56, $arraydecay57);
      $n134=$call58;
      var $arraydecay59=(($v42)|0);
      var $arraydecay60=(($v32)|0);
      var $call61=_r8vec_cross_product_3d($arraydecay59, $arraydecay60);
      $n234=$call61;
      var $45=$n123;
      var $call62=_r8vec_norm(3, $45);
      $l123=$call62;
      var $46=$n124;
      var $call63=_r8vec_norm(3, $46);
      $l124=$call63;
      var $47=$n134;
      var $call64=_r8vec_norm(3, $47);
      $l134=$call64;
      var $48=$n234;
      var $call65=_r8vec_norm(3, $48);
      $l234=$call65;
      var $49=$n123;
      var $50=$49;
      _free($50);
      var $51=$n124;
      var $52=$51;
      _free($52);
      var $53=$n134;
      var $54=$53;
      _free($54);
      var $55=$n234;
      var $56=$55;
      _free($56);
      $i=0;
      label = 23; break;
    case 23: 
      var $57=$i;
      var $cmp67=(($57)|(0)) < 3;
      if ($cmp67) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $58=$l234;
      var $59=$i;
      var $add69=(($59)|0);
      var $60=$tetra_addr;
      var $arrayidx70=(($60+($add69<<3))|0);
      var $61=HEAPF64[(($arrayidx70)>>3)];
      var $mul=($58)*($61);
      var $62=$l134;
      var $63=$i;
      var $add71=((($63)+(3))|0);
      var $64=$tetra_addr;
      var $arrayidx72=(($64+($add71<<3))|0);
      var $65=HEAPF64[(($arrayidx72)>>3)];
      var $mul73=($62)*($65);
      var $add74=($mul)+($mul73);
      var $66=$l124;
      var $67=$i;
      var $add75=((($67)+(6))|0);
      var $68=$tetra_addr;
      var $arrayidx76=(($68+($add75<<3))|0);
      var $69=HEAPF64[(($arrayidx76)>>3)];
      var $mul77=($66)*($69);
      var $add78=($add74)+($mul77);
      var $70=$l123;
      var $71=$i;
      var $add79=((($71)+(9))|0);
      var $72=$tetra_addr;
      var $arrayidx80=(($72+($add79<<3))|0);
      var $73=HEAPF64[(($arrayidx80)>>3)];
      var $mul81=($70)*($73);
      var $add82=($add78)+($mul81);
      var $74=$l234;
      var $75=$l134;
      var $add83=($74)+($75);
      var $76=$l124;
      var $add84=($add83)+($76);
      var $77=$l123;
      var $add85=($add84)+($77);
      var $div=($add82)/($add85);
      var $78=$i;
      var $79=$pc_addr;
      var $arrayidx86=(($79+($78<<3))|0);
      HEAPF64[(($arrayidx86)>>3)]=$div;
      label = 25; break;
    case 25: 
      var $80=$i;
      var $inc88=((($80)+(1))|0);
      $i=$inc88;
      label = 23; break;
    case 26: 
      $j=0;
      label = 27; break;
    case 27: 
      var $81=$j;
      var $cmp91=(($81)|(0)) < 4;
      if ($cmp91) { label = 28; break; } else { label = 34; break; }
    case 28: 
      $i=0;
      label = 29; break;
    case 29: 
      var $82=$i;
      var $cmp94=(($82)|(0)) < 3;
      if ($cmp94) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $83=$i;
      var $84=$j;
      var $mul96=((($84)*(3))&-1);
      var $add97=((($83)+($mul96))|0);
      var $85=$tetra_addr;
      var $arrayidx98=(($85+($add97<<3))|0);
      var $86=HEAPF64[(($arrayidx98)>>3)];
      var $87=$i;
      var $88=$j;
      var $mul99=($88<<2);
      var $add100=((($87)+($mul99))|0);
      var $arrayidx101=(($b+($add100<<3))|0);
      HEAPF64[(($arrayidx101)>>3)]=$86;
      label = 31; break;
    case 31: 
      var $89=$i;
      var $inc103=((($89)+(1))|0);
      $i=$inc103;
      label = 29; break;
    case 32: 
      var $90=$j;
      var $mul105=($90<<2);
      var $add106=((($mul105)+(3))|0);
      var $arrayidx107=(($b+($add106<<3))|0);
      HEAPF64[(($arrayidx107)>>3)]=1;
      label = 33; break;
    case 33: 
      var $91=$j;
      var $inc109=((($91)+(1))|0);
      $j=$inc109;
      label = 27; break;
    case 34: 
      var $arraydecay111=(($b)|0);
      var $call112=_r8mat_det_4d($arraydecay111);
      var $call113=_r8_abs($call112);
      $gamma=$call113;
      var $92=$gamma;
      var $93=$l234;
      var $94=$l134;
      var $add114=($93)+($94);
      var $95=$l124;
      var $add115=($add114)+($95);
      var $96=$l123;
      var $add116=($add115)+($96);
      var $div117=($92)/($add116);
      var $97=$r_addr;
      HEAPF64[(($97)>>3)]=$div117;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_insphere_3d"] = _tetrahedron_insphere_3d;
function _tetrahedron_lattice_layer_point_next($c, $v, $more) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $c_addr;
      var $v_addr;
      var $more_addr;
      var $c1n;
      var $lhs;
      var $n;
      var $rhs1;
      var $rhs2;
      $c_addr=$c;
      $v_addr=$v;
      $more_addr=$more;
      $n=3;
      var $0=$c_addr;
      var $arrayidx=(($0+12)|0);
      var $1=HEAP32[(($arrayidx)>>2)];
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $2=$more_addr;
      var $3=HEAP32[(($2)>>2)];
      var $tobool=(($3)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$v_addr;
      var $arrayidx2=(($4)|0);
      HEAP32[(($arrayidx2)>>2)]=0;
      var $5=$v_addr;
      var $arrayidx3=(($5+4)|0);
      HEAP32[(($arrayidx3)>>2)]=0;
      var $6=$v_addr;
      var $arrayidx4=(($6+8)|0);
      HEAP32[(($arrayidx4)>>2)]=0;
      var $7=$more_addr;
      HEAP32[(($7)>>2)]=1;
      label = 6; break;
    case 5: 
      var $8=$more_addr;
      HEAP32[(($8)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 24; break;
    case 7: 
      var $9=$more_addr;
      var $10=HEAP32[(($9)>>2)];
      var $tobool6=(($10)|(0))!=0;
      if ($tobool6) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $11=$n;
      var $12=$c_addr;
      var $arrayidx8=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx8)>>2)];
      var $sub=((($13)-(1))|0);
      var $14=$c_addr;
      var $arrayidx9=(($14)|0);
      var $15=HEAP32[(($arrayidx9)>>2)];
      var $mul=(Math.imul($sub,$15)|0);
      var $add=((($mul)+(1))|0);
      var $16=$v_addr;
      var $arrayidx10=(($16)|0);
      HEAP32[(($arrayidx10)>>2)]=$add;
      var $17=$v_addr;
      var $arrayidx11=(($17+4)|0);
      HEAP32[(($arrayidx11)>>2)]=0;
      var $18=$v_addr;
      var $arrayidx12=(($18+8)|0);
      HEAP32[(($arrayidx12)>>2)]=0;
      var $19=$more_addr;
      HEAP32[(($19)>>2)]=1;
      label = 23; break;
    case 9: 
      var $20=$n;
      var $21=$c_addr;
      var $call=_i4vec_lcm($20, $21);
      $c1n=$call;
      var $22=$c1n;
      var $23=$n;
      var $24=$c_addr;
      var $arrayidx14=(($24+($23<<2))|0);
      var $25=HEAP32[(($arrayidx14)>>2)];
      var $sub15=((($25)-(1))|0);
      var $mul16=(Math.imul($22,$sub15)|0);
      $rhs1=$mul16;
      var $26=$c1n;
      var $27=$n;
      var $28=$c_addr;
      var $arrayidx17=(($28+($27<<2))|0);
      var $29=HEAP32[(($arrayidx17)>>2)];
      var $mul18=(Math.imul($26,$29)|0);
      $rhs2=$mul18;
      var $30=$v_addr;
      var $arrayidx19=(($30)|0);
      var $31=HEAP32[(($arrayidx19)>>2)];
      var $add20=((($31)+(1))|0);
      var $32=$v_addr;
      var $arrayidx21=(($32)|0);
      HEAP32[(($arrayidx21)>>2)]=$add20;
      var $33=$c1n;
      var $34=$c_addr;
      var $arrayidx22=(($34)|0);
      var $35=HEAP32[(($arrayidx22)>>2)];
      var $div=((((($33)|(0)))/((($35)|(0))))&-1);
      var $36=$v_addr;
      var $arrayidx23=(($36)|0);
      var $37=HEAP32[(($arrayidx23)>>2)];
      var $mul24=(Math.imul($div,$37)|0);
      var $38=$c1n;
      var $39=$c_addr;
      var $arrayidx25=(($39+4)|0);
      var $40=HEAP32[(($arrayidx25)>>2)];
      var $div26=((((($38)|(0)))/((($40)|(0))))&-1);
      var $41=$v_addr;
      var $arrayidx27=(($41+4)|0);
      var $42=HEAP32[(($arrayidx27)>>2)];
      var $mul28=(Math.imul($div26,$42)|0);
      var $add29=((($mul24)+($mul28))|0);
      var $43=$c1n;
      var $44=$c_addr;
      var $arrayidx30=(($44+8)|0);
      var $45=HEAP32[(($arrayidx30)>>2)];
      var $div31=((((($43)|(0)))/((($45)|(0))))&-1);
      var $46=$v_addr;
      var $arrayidx32=(($46+8)|0);
      var $47=HEAP32[(($arrayidx32)>>2)];
      var $mul33=(Math.imul($div31,$47)|0);
      var $add34=((($add29)+($mul33))|0);
      $lhs=$add34;
      var $48=$lhs;
      var $49=$rhs2;
      var $cmp35=(($48)|(0)) <= (($49)|(0));
      if ($cmp35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      label = 22; break;
    case 11: 
      var $50=$v_addr;
      var $arrayidx38=(($50+4)|0);
      var $51=HEAP32[(($arrayidx38)>>2)];
      var $add39=((($51)+(1))|0);
      var $52=$v_addr;
      var $arrayidx40=(($52+4)|0);
      HEAP32[(($arrayidx40)>>2)]=$add39;
      var $53=$c_addr;
      var $arrayidx41=(($53)|0);
      var $54=HEAP32[(($arrayidx41)>>2)];
      var $55=$rhs1;
      var $56=$c1n;
      var $57=$c_addr;
      var $arrayidx42=(($57+4)|0);
      var $58=HEAP32[(($arrayidx42)>>2)];
      var $div43=((((($56)|(0)))/((($58)|(0))))&-1);
      var $59=$v_addr;
      var $arrayidx44=(($59+4)|0);
      var $60=HEAP32[(($arrayidx44)>>2)];
      var $mul45=(Math.imul($div43,$60)|0);
      var $sub46=((($55)-($mul45))|0);
      var $61=$c1n;
      var $62=$c_addr;
      var $arrayidx47=(($62+8)|0);
      var $63=HEAP32[(($arrayidx47)>>2)];
      var $div48=((((($61)|(0)))/((($63)|(0))))&-1);
      var $64=$v_addr;
      var $arrayidx49=(($64+8)|0);
      var $65=HEAP32[(($arrayidx49)>>2)];
      var $mul50=(Math.imul($div48,$65)|0);
      var $sub51=((($sub46)-($mul50))|0);
      var $mul52=(Math.imul($54,$sub51)|0);
      var $66=$c1n;
      var $div53=((((($mul52)|(0)))/((($66)|(0))))&-1);
      var $67=$v_addr;
      var $arrayidx54=(($67)|0);
      HEAP32[(($arrayidx54)>>2)]=$div53;
      var $68=$v_addr;
      var $arrayidx55=(($68)|0);
      var $69=HEAP32[(($arrayidx55)>>2)];
      var $call56=_i4_max($69, 0);
      var $70=$v_addr;
      var $arrayidx57=(($70)|0);
      HEAP32[(($arrayidx57)>>2)]=$call56;
      var $71=$c1n;
      var $72=$c_addr;
      var $arrayidx58=(($72)|0);
      var $73=HEAP32[(($arrayidx58)>>2)];
      var $div59=((((($71)|(0)))/((($73)|(0))))&-1);
      var $74=$v_addr;
      var $arrayidx60=(($74)|0);
      var $75=HEAP32[(($arrayidx60)>>2)];
      var $mul61=(Math.imul($div59,$75)|0);
      var $76=$c1n;
      var $77=$c_addr;
      var $arrayidx62=(($77+4)|0);
      var $78=HEAP32[(($arrayidx62)>>2)];
      var $div63=((((($76)|(0)))/((($78)|(0))))&-1);
      var $79=$v_addr;
      var $arrayidx64=(($79+4)|0);
      var $80=HEAP32[(($arrayidx64)>>2)];
      var $mul65=(Math.imul($div63,$80)|0);
      var $add66=((($mul61)+($mul65))|0);
      var $81=$c1n;
      var $82=$c_addr;
      var $arrayidx67=(($82+8)|0);
      var $83=HEAP32[(($arrayidx67)>>2)];
      var $div68=((((($81)|(0)))/((($83)|(0))))&-1);
      var $84=$v_addr;
      var $arrayidx69=(($84+8)|0);
      var $85=HEAP32[(($arrayidx69)>>2)];
      var $mul70=(Math.imul($div68,$85)|0);
      var $add71=((($add66)+($mul70))|0);
      $lhs=$add71;
      var $86=$lhs;
      var $87=$rhs1;
      var $cmp72=(($86)|(0)) <= (($87)|(0));
      if ($cmp72) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $88=$v_addr;
      var $arrayidx74=(($88)|0);
      var $89=HEAP32[(($arrayidx74)>>2)];
      var $add75=((($89)+(1))|0);
      var $90=$v_addr;
      var $arrayidx76=(($90)|0);
      HEAP32[(($arrayidx76)>>2)]=$add75;
      var $91=$lhs;
      var $92=$c1n;
      var $93=$c_addr;
      var $arrayidx77=(($93)|0);
      var $94=HEAP32[(($arrayidx77)>>2)];
      var $div78=((((($92)|(0)))/((($94)|(0))))&-1);
      var $add79=((($91)+($div78))|0);
      $lhs=$add79;
      label = 13; break;
    case 13: 
      var $95=$lhs;
      var $96=$rhs2;
      var $cmp81=(($95)|(0)) <= (($96)|(0));
      if ($cmp81) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 21; break;
    case 15: 
      var $97=$v_addr;
      var $arrayidx84=(($97+8)|0);
      var $98=HEAP32[(($arrayidx84)>>2)];
      var $add85=((($98)+(1))|0);
      var $99=$v_addr;
      var $arrayidx86=(($99+8)|0);
      HEAP32[(($arrayidx86)>>2)]=$add85;
      var $100=$v_addr;
      var $arrayidx87=(($100+4)|0);
      HEAP32[(($arrayidx87)>>2)]=0;
      var $101=$c_addr;
      var $arrayidx88=(($101)|0);
      var $102=HEAP32[(($arrayidx88)>>2)];
      var $103=$rhs1;
      var $104=$c1n;
      var $105=$c_addr;
      var $arrayidx89=(($105+4)|0);
      var $106=HEAP32[(($arrayidx89)>>2)];
      var $div90=((((($104)|(0)))/((($106)|(0))))&-1);
      var $107=$v_addr;
      var $arrayidx91=(($107+4)|0);
      var $108=HEAP32[(($arrayidx91)>>2)];
      var $mul92=(Math.imul($div90,$108)|0);
      var $sub93=((($103)-($mul92))|0);
      var $109=$c1n;
      var $110=$c_addr;
      var $arrayidx94=(($110+8)|0);
      var $111=HEAP32[(($arrayidx94)>>2)];
      var $div95=((((($109)|(0)))/((($111)|(0))))&-1);
      var $112=$v_addr;
      var $arrayidx96=(($112+8)|0);
      var $113=HEAP32[(($arrayidx96)>>2)];
      var $mul97=(Math.imul($div95,$113)|0);
      var $sub98=((($sub93)-($mul97))|0);
      var $mul99=(Math.imul($102,$sub98)|0);
      var $114=$c1n;
      var $div100=((((($mul99)|(0)))/((($114)|(0))))&-1);
      var $115=$v_addr;
      var $arrayidx101=(($115)|0);
      HEAP32[(($arrayidx101)>>2)]=$div100;
      var $116=$v_addr;
      var $arrayidx102=(($116)|0);
      var $117=HEAP32[(($arrayidx102)>>2)];
      var $call103=_i4_max($117, 0);
      var $118=$v_addr;
      var $arrayidx104=(($118)|0);
      HEAP32[(($arrayidx104)>>2)]=$call103;
      var $119=$c1n;
      var $120=$c_addr;
      var $arrayidx105=(($120)|0);
      var $121=HEAP32[(($arrayidx105)>>2)];
      var $div106=((((($119)|(0)))/((($121)|(0))))&-1);
      var $122=$v_addr;
      var $arrayidx107=(($122)|0);
      var $123=HEAP32[(($arrayidx107)>>2)];
      var $mul108=(Math.imul($div106,$123)|0);
      var $124=$c1n;
      var $125=$c_addr;
      var $arrayidx109=(($125+4)|0);
      var $126=HEAP32[(($arrayidx109)>>2)];
      var $div110=((((($124)|(0)))/((($126)|(0))))&-1);
      var $127=$v_addr;
      var $arrayidx111=(($127+4)|0);
      var $128=HEAP32[(($arrayidx111)>>2)];
      var $mul112=(Math.imul($div110,$128)|0);
      var $add113=((($mul108)+($mul112))|0);
      var $129=$c1n;
      var $130=$c_addr;
      var $arrayidx114=(($130+8)|0);
      var $131=HEAP32[(($arrayidx114)>>2)];
      var $div115=((((($129)|(0)))/((($131)|(0))))&-1);
      var $132=$v_addr;
      var $arrayidx116=(($132+8)|0);
      var $133=HEAP32[(($arrayidx116)>>2)];
      var $mul117=(Math.imul($div115,$133)|0);
      var $add118=((($add113)+($mul117))|0);
      $lhs=$add118;
      var $134=$lhs;
      var $135=$rhs1;
      var $cmp119=(($134)|(0)) <= (($135)|(0));
      if ($cmp119) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $136=$v_addr;
      var $arrayidx121=(($136)|0);
      var $137=HEAP32[(($arrayidx121)>>2)];
      var $add122=((($137)+(1))|0);
      var $138=$v_addr;
      var $arrayidx123=(($138)|0);
      HEAP32[(($arrayidx123)>>2)]=$add122;
      var $139=$lhs;
      var $140=$c1n;
      var $141=$c_addr;
      var $arrayidx124=(($141)|0);
      var $142=HEAP32[(($arrayidx124)>>2)];
      var $div125=((((($140)|(0)))/((($142)|(0))))&-1);
      var $add126=((($139)+($div125))|0);
      $lhs=$add126;
      label = 17; break;
    case 17: 
      var $143=$lhs;
      var $144=$rhs2;
      var $cmp128=(($143)|(0)) <= (($144)|(0));
      if ($cmp128) { label = 18; break; } else { label = 19; break; }
    case 18: 
      label = 20; break;
    case 19: 
      var $145=$more_addr;
      HEAP32[(($145)>>2)]=0;
      var $146=$v_addr;
      var $arrayidx131=(($146)|0);
      HEAP32[(($arrayidx131)>>2)]=0;
      var $147=$v_addr;
      var $arrayidx132=(($147+4)|0);
      HEAP32[(($arrayidx132)>>2)]=0;
      var $148=$v_addr;
      var $arrayidx133=(($148+8)|0);
      HEAP32[(($arrayidx133)>>2)]=0;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_lattice_layer_point_next"] = _tetrahedron_lattice_layer_point_next;
function _tetrahedron_lattice_point_next($c, $v, $more) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $c_addr;
      var $v_addr;
      var $more_addr;
      var $c1n;
      var $lhs;
      var $n;
      var $rhs;
      $c_addr=$c;
      $v_addr=$v;
      $more_addr=$more;
      $n=3;
      var $0=$more_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$v_addr;
      var $arrayidx=(($2)|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $3=$v_addr;
      var $arrayidx1=(($3+4)|0);
      HEAP32[(($arrayidx1)>>2)]=0;
      var $4=$v_addr;
      var $arrayidx2=(($4+8)|0);
      HEAP32[(($arrayidx2)>>2)]=0;
      var $5=$more_addr;
      HEAP32[(($5)>>2)]=1;
      label = 14; break;
    case 4: 
      var $6=$n;
      var $7=$c_addr;
      var $call=_i4vec_lcm($6, $7);
      $c1n=$call;
      var $8=$c1n;
      var $9=$n;
      var $10=$c_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      var $11=HEAP32[(($arrayidx3)>>2)];
      var $mul=(Math.imul($8,$11)|0);
      $rhs=$mul;
      var $12=$c_addr;
      var $arrayidx4=(($12+4)|0);
      var $13=HEAP32[(($arrayidx4)>>2)];
      var $14=$c_addr;
      var $arrayidx5=(($14+8)|0);
      var $15=HEAP32[(($arrayidx5)>>2)];
      var $mul6=(Math.imul($13,$15)|0);
      var $16=$v_addr;
      var $arrayidx7=(($16)|0);
      var $17=HEAP32[(($arrayidx7)>>2)];
      var $mul8=(Math.imul($mul6,$17)|0);
      var $18=$c_addr;
      var $arrayidx9=(($18)|0);
      var $19=HEAP32[(($arrayidx9)>>2)];
      var $20=$c_addr;
      var $arrayidx10=(($20+8)|0);
      var $21=HEAP32[(($arrayidx10)>>2)];
      var $mul11=(Math.imul($19,$21)|0);
      var $22=$v_addr;
      var $arrayidx12=(($22+4)|0);
      var $23=HEAP32[(($arrayidx12)>>2)];
      var $mul13=(Math.imul($mul11,$23)|0);
      var $add=((($mul8)+($mul13))|0);
      var $24=$c_addr;
      var $arrayidx14=(($24)|0);
      var $25=HEAP32[(($arrayidx14)>>2)];
      var $26=$c_addr;
      var $arrayidx15=(($26+4)|0);
      var $27=HEAP32[(($arrayidx15)>>2)];
      var $mul16=(Math.imul($25,$27)|0);
      var $28=$v_addr;
      var $arrayidx17=(($28+8)|0);
      var $29=HEAP32[(($arrayidx17)>>2)];
      var $mul18=(Math.imul($mul16,$29)|0);
      var $add19=((($add)+($mul18))|0);
      $lhs=$add19;
      var $30=$lhs;
      var $31=$c1n;
      var $32=$c_addr;
      var $arrayidx20=(($32)|0);
      var $33=HEAP32[(($arrayidx20)>>2)];
      var $div=((((($31)|(0)))/((($33)|(0))))&-1);
      var $add21=((($30)+($div))|0);
      var $34=$rhs;
      var $cmp=(($add21)|(0)) <= (($34)|(0));
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35=$v_addr;
      var $arrayidx23=(($35)|0);
      var $36=HEAP32[(($arrayidx23)>>2)];
      var $add24=((($36)+(1))|0);
      var $37=$v_addr;
      var $arrayidx25=(($37)|0);
      HEAP32[(($arrayidx25)>>2)]=$add24;
      label = 13; break;
    case 6: 
      var $38=$lhs;
      var $39=$c1n;
      var $40=$v_addr;
      var $arrayidx27=(($40)|0);
      var $41=HEAP32[(($arrayidx27)>>2)];
      var $mul28=(Math.imul($39,$41)|0);
      var $42=$c_addr;
      var $arrayidx29=(($42)|0);
      var $43=HEAP32[(($arrayidx29)>>2)];
      var $div30=((((($mul28)|(0)))/((($43)|(0))))&-1);
      var $sub=((($38)-($div30))|0);
      $lhs=$sub;
      var $44=$v_addr;
      var $arrayidx31=(($44)|0);
      HEAP32[(($arrayidx31)>>2)]=0;
      var $45=$lhs;
      var $46=$c1n;
      var $47=$c_addr;
      var $arrayidx32=(($47+4)|0);
      var $48=HEAP32[(($arrayidx32)>>2)];
      var $div33=((((($46)|(0)))/((($48)|(0))))&-1);
      var $add34=((($45)+($div33))|0);
      var $49=$rhs;
      var $cmp35=(($add34)|(0)) <= (($49)|(0));
      if ($cmp35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $50=$v_addr;
      var $arrayidx37=(($50+4)|0);
      var $51=HEAP32[(($arrayidx37)>>2)];
      var $add38=((($51)+(1))|0);
      var $52=$v_addr;
      var $arrayidx39=(($52+4)|0);
      HEAP32[(($arrayidx39)>>2)]=$add38;
      label = 12; break;
    case 8: 
      var $53=$lhs;
      var $54=$c1n;
      var $55=$v_addr;
      var $arrayidx41=(($55+4)|0);
      var $56=HEAP32[(($arrayidx41)>>2)];
      var $mul42=(Math.imul($54,$56)|0);
      var $57=$c_addr;
      var $arrayidx43=(($57+4)|0);
      var $58=HEAP32[(($arrayidx43)>>2)];
      var $div44=((((($mul42)|(0)))/((($58)|(0))))&-1);
      var $sub45=((($53)-($div44))|0);
      $lhs=$sub45;
      var $59=$v_addr;
      var $arrayidx46=(($59+4)|0);
      HEAP32[(($arrayidx46)>>2)]=0;
      var $60=$lhs;
      var $61=$c1n;
      var $62=$c_addr;
      var $arrayidx47=(($62+8)|0);
      var $63=HEAP32[(($arrayidx47)>>2)];
      var $div48=((((($61)|(0)))/((($63)|(0))))&-1);
      var $add49=((($60)+($div48))|0);
      var $64=$rhs;
      var $cmp50=(($add49)|(0)) <= (($64)|(0));
      if ($cmp50) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $65=$v_addr;
      var $arrayidx52=(($65+8)|0);
      var $66=HEAP32[(($arrayidx52)>>2)];
      var $add53=((($66)+(1))|0);
      var $67=$v_addr;
      var $arrayidx54=(($67+8)|0);
      HEAP32[(($arrayidx54)>>2)]=$add53;
      label = 11; break;
    case 10: 
      var $68=$v_addr;
      var $arrayidx56=(($68+8)|0);
      HEAP32[(($arrayidx56)>>2)]=0;
      var $69=$more_addr;
      HEAP32[(($69)>>2)]=0;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_lattice_point_next"] = _tetrahedron_lattice_point_next;
function _tetrahedron_quality1_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $tetra_addr;
  var $pc=__stackBase__;
  var $quality;
  var $r_in=(__stackBase__)+(24);
  var $r_out=(__stackBase__)+(32);
  $tetra_addr=$tetra;
  var $0=$tetra_addr;
  var $arraydecay=(($pc)|0);
  _tetrahedron_circumsphere_3d($0, $r_out, $arraydecay);
  var $1=$tetra_addr;
  var $arraydecay1=(($pc)|0);
  _tetrahedron_insphere_3d($1, $r_in, $arraydecay1);
  var $2=HEAPF64[(($r_in)>>3)];
  var $mul=($2)*(3);
  var $3=HEAPF64[(($r_out)>>3)];
  var $div=($mul)/($3);
  $quality=$div;
  var $4=$quality;
  STACKTOP = __stackBase__;
  return $4;
}
Module["_tetrahedron_quality1_3d"] = _tetrahedron_quality1_3d;
function _tetrahedron_quality2_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $tetra_addr;
  var $edge_length;
  var $l_max;
  var $pc=__stackBase__;
  var $quality2;
  var $r_in=(__stackBase__)+(24);
  $tetra_addr=$tetra;
  var $0=$tetra_addr;
  var $call=_tetrahedron_edge_length_3d($0);
  $edge_length=$call;
  var $1=$edge_length;
  var $call1=_r8vec_max(6, $1);
  $l_max=$call1;
  var $2=$tetra_addr;
  var $arraydecay=(($pc)|0);
  _tetrahedron_insphere_3d($2, $r_in, $arraydecay);
  var $call2=Math.sqrt(6);
  var $mul=($call2)*(2);
  var $3=HEAPF64[(($r_in)>>3)];
  var $mul3=($mul)*($3);
  var $4=$l_max;
  var $div=($mul3)/($4);
  $quality2=$div;
  var $5=$edge_length;
  var $6=$5;
  _free($6);
  var $7=$quality2;
  STACKTOP = __stackBase__;
  return $7;
}
Module["_tetrahedron_quality2_3d"] = _tetrahedron_quality2_3d;
function _tetrahedron_quality3_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $ab=__stackBase__;
      var $ac=(__stackBase__)+(24);
      var $ad=(__stackBase__)+(48);
      var $bc=(__stackBase__)+(72);
      var $bd=(__stackBase__)+(96);
      var $cd=(__stackBase__)+(120);
      var $denom;
      var $i;
      var $lab;
      var $lac;
      var $lad;
      var $lbc;
      var $lbd;
      var $lcd;
      var $quality3;
      var $volume;
      $tetra_addr=$tetra;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $add=((($1)+(3))|0);
      var $2=$tetra_addr;
      var $arrayidx=(($2+($add<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $add1=(($4)|0);
      var $5=$tetra_addr;
      var $arrayidx2=(($5+($add1<<3))|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx3=(($ab+($7<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub;
      var $8=$i;
      var $add4=((($8)+(6))|0);
      var $9=$tetra_addr;
      var $arrayidx5=(($9+($add4<<3))|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$i;
      var $add6=(($11)|0);
      var $12=$tetra_addr;
      var $arrayidx7=(($12+($add6<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($10)-($13);
      var $14=$i;
      var $arrayidx9=(($ac+($14<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      var $15=$i;
      var $add10=((($15)+(9))|0);
      var $16=$tetra_addr;
      var $arrayidx11=(($16+($add10<<3))|0);
      var $17=HEAPF64[(($arrayidx11)>>3)];
      var $18=$i;
      var $add12=(($18)|0);
      var $19=$tetra_addr;
      var $arrayidx13=(($19+($add12<<3))|0);
      var $20=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($20);
      var $21=$i;
      var $arrayidx15=(($ad+($21<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=$sub14;
      var $22=$i;
      var $add16=((($22)+(6))|0);
      var $23=$tetra_addr;
      var $arrayidx17=(($23+($add16<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $25=$i;
      var $add18=((($25)+(3))|0);
      var $26=$tetra_addr;
      var $arrayidx19=(($26+($add18<<3))|0);
      var $27=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($24)-($27);
      var $28=$i;
      var $arrayidx21=(($bc+($28<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $29=$i;
      var $add22=((($29)+(9))|0);
      var $30=$tetra_addr;
      var $arrayidx23=(($30+($add22<<3))|0);
      var $31=HEAPF64[(($arrayidx23)>>3)];
      var $32=$i;
      var $add24=((($32)+(3))|0);
      var $33=$tetra_addr;
      var $arrayidx25=(($33+($add24<<3))|0);
      var $34=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($31)-($34);
      var $35=$i;
      var $arrayidx27=(($bd+($35<<3))|0);
      HEAPF64[(($arrayidx27)>>3)]=$sub26;
      var $36=$i;
      var $add28=((($36)+(9))|0);
      var $37=$tetra_addr;
      var $arrayidx29=(($37+($add28<<3))|0);
      var $38=HEAPF64[(($arrayidx29)>>3)];
      var $39=$i;
      var $add30=((($39)+(6))|0);
      var $40=$tetra_addr;
      var $arrayidx31=(($40+($add30<<3))|0);
      var $41=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($38)-($41);
      var $42=$i;
      var $arrayidx33=(($cd+($42<<3))|0);
      HEAPF64[(($arrayidx33)>>3)]=$sub32;
      label = 5; break;
    case 5: 
      var $43=$i;
      var $inc=((($43)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arrayidx34=(($ab)|0);
      var $44=HEAPF64[(($arrayidx34)>>3)];
      var $45=Math.pow($44, 2);
      var $arrayidx35=(($ab+8)|0);
      var $46=HEAPF64[(($arrayidx35)>>3)];
      var $47=Math.pow($46, 2);
      var $add36=($45)+($47);
      var $arrayidx37=(($ab+16)|0);
      var $48=HEAPF64[(($arrayidx37)>>3)];
      var $49=Math.pow($48, 2);
      var $add38=($add36)+($49);
      $lab=$add38;
      var $arrayidx39=(($ac)|0);
      var $50=HEAPF64[(($arrayidx39)>>3)];
      var $51=Math.pow($50, 2);
      var $arrayidx40=(($ac+8)|0);
      var $52=HEAPF64[(($arrayidx40)>>3)];
      var $53=Math.pow($52, 2);
      var $add41=($51)+($53);
      var $arrayidx42=(($ac+16)|0);
      var $54=HEAPF64[(($arrayidx42)>>3)];
      var $55=Math.pow($54, 2);
      var $add43=($add41)+($55);
      $lac=$add43;
      var $arrayidx44=(($ad)|0);
      var $56=HEAPF64[(($arrayidx44)>>3)];
      var $57=Math.pow($56, 2);
      var $arrayidx45=(($ad+8)|0);
      var $58=HEAPF64[(($arrayidx45)>>3)];
      var $59=Math.pow($58, 2);
      var $add46=($57)+($59);
      var $arrayidx47=(($ad+16)|0);
      var $60=HEAPF64[(($arrayidx47)>>3)];
      var $61=Math.pow($60, 2);
      var $add48=($add46)+($61);
      $lad=$add48;
      var $arrayidx49=(($bc)|0);
      var $62=HEAPF64[(($arrayidx49)>>3)];
      var $63=Math.pow($62, 2);
      var $arrayidx50=(($bc+8)|0);
      var $64=HEAPF64[(($arrayidx50)>>3)];
      var $65=Math.pow($64, 2);
      var $add51=($63)+($65);
      var $arrayidx52=(($bc+16)|0);
      var $66=HEAPF64[(($arrayidx52)>>3)];
      var $67=Math.pow($66, 2);
      var $add53=($add51)+($67);
      $lbc=$add53;
      var $arrayidx54=(($bd)|0);
      var $68=HEAPF64[(($arrayidx54)>>3)];
      var $69=Math.pow($68, 2);
      var $arrayidx55=(($bd+8)|0);
      var $70=HEAPF64[(($arrayidx55)>>3)];
      var $71=Math.pow($70, 2);
      var $add56=($69)+($71);
      var $arrayidx57=(($bd+16)|0);
      var $72=HEAPF64[(($arrayidx57)>>3)];
      var $73=Math.pow($72, 2);
      var $add58=($add56)+($73);
      $lbd=$add58;
      var $arrayidx59=(($cd)|0);
      var $74=HEAPF64[(($arrayidx59)>>3)];
      var $75=Math.pow($74, 2);
      var $arrayidx60=(($cd+8)|0);
      var $76=HEAPF64[(($arrayidx60)>>3)];
      var $77=Math.pow($76, 2);
      var $add61=($75)+($77);
      var $arrayidx62=(($cd+16)|0);
      var $78=HEAPF64[(($arrayidx62)>>3)];
      var $79=Math.pow($78, 2);
      var $add63=($add61)+($79);
      $lcd=$add63;
      var $arrayidx64=(($ab)|0);
      var $80=HEAPF64[(($arrayidx64)>>3)];
      var $arrayidx65=(($ac+8)|0);
      var $81=HEAPF64[(($arrayidx65)>>3)];
      var $arrayidx66=(($ad+16)|0);
      var $82=HEAPF64[(($arrayidx66)>>3)];
      var $mul=($81)*($82);
      var $arrayidx67=(($ac+16)|0);
      var $83=HEAPF64[(($arrayidx67)>>3)];
      var $arrayidx68=(($ad+8)|0);
      var $84=HEAPF64[(($arrayidx68)>>3)];
      var $mul69=($83)*($84);
      var $sub70=($mul)-($mul69);
      var $mul71=($80)*($sub70);
      var $arrayidx72=(($ab+8)|0);
      var $85=HEAPF64[(($arrayidx72)>>3)];
      var $arrayidx73=(($ac+16)|0);
      var $86=HEAPF64[(($arrayidx73)>>3)];
      var $arrayidx74=(($ad)|0);
      var $87=HEAPF64[(($arrayidx74)>>3)];
      var $mul75=($86)*($87);
      var $arrayidx76=(($ac)|0);
      var $88=HEAPF64[(($arrayidx76)>>3)];
      var $arrayidx77=(($ad+16)|0);
      var $89=HEAPF64[(($arrayidx77)>>3)];
      var $mul78=($88)*($89);
      var $sub79=($mul75)-($mul78);
      var $mul80=($85)*($sub79);
      var $add81=($mul71)+($mul80);
      var $arrayidx82=(($ab+16)|0);
      var $90=HEAPF64[(($arrayidx82)>>3)];
      var $arrayidx83=(($ac)|0);
      var $91=HEAPF64[(($arrayidx83)>>3)];
      var $arrayidx84=(($ad+8)|0);
      var $92=HEAPF64[(($arrayidx84)>>3)];
      var $mul85=($91)*($92);
      var $arrayidx86=(($ac+8)|0);
      var $93=HEAPF64[(($arrayidx86)>>3)];
      var $arrayidx87=(($ad)|0);
      var $94=HEAPF64[(($arrayidx87)>>3)];
      var $mul88=($93)*($94);
      var $sub89=($mul85)-($mul88);
      var $mul90=($90)*($sub89);
      var $add91=($add81)+($mul90);
      var $call=_r8_abs($add91);
      var $div=($call)/(6);
      $volume=$div;
      var $95=$lab;
      var $96=$lac;
      var $add92=($95)+($96);
      var $97=$lad;
      var $add93=($add92)+($97);
      var $98=$lbc;
      var $add94=($add93)+($98);
      var $99=$lbd;
      var $add95=($add94)+($99);
      var $100=$lcd;
      var $add96=($add95)+($100);
      $denom=$add96;
      var $101=$denom;
      var $cmp97=$101 == 0;
      if ($cmp97) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $quality3=0;
      label = 9; break;
    case 8: 
      var $102=$volume;
      var $mul98=($102)*(3);
      var $103=Math.pow($mul98, 0.6666666666666666);
      var $mul99=($103)*(12);
      var $104=$denom;
      var $div100=($mul99)/($104);
      $quality3=$div100;
      label = 9; break;
    case 9: 
      var $105=$quality3;
      STACKTOP = __stackBase__;
      return $105;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_quality3_3d"] = _tetrahedron_quality3_3d;
function _tetrahedron_rhombic_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=10;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=6;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=4;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=6;
  return;
}
Module["_tetrahedron_rhombic_size_3d"] = _tetrahedron_rhombic_size_3d;
function _tetrahedron_quality4_3d($tetra) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $ab=__stackBase__;
      var $ac=(__stackBase__)+(24);
      var $ad=(__stackBase__)+(48);
      var $bc=(__stackBase__)+(72);
      var $bd=(__stackBase__)+(96);
      var $cd=(__stackBase__)+(120);
      var $denom;
      var $i;
      var $l1;
      var $l2;
      var $l3;
      var $lab;
      var $lac;
      var $lad;
      var $lbc;
      var $lbd;
      var $lcd;
      var $quality4;
      var $volume;
      $tetra_addr=$tetra;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $add=((($1)+(3))|0);
      var $2=$tetra_addr;
      var $arrayidx=(($2+($add<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $add1=(($4)|0);
      var $5=$tetra_addr;
      var $arrayidx2=(($5+($add1<<3))|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($3)-($6);
      var $7=$i;
      var $arrayidx3=(($ab+($7<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$sub;
      var $8=$i;
      var $add4=((($8)+(6))|0);
      var $9=$tetra_addr;
      var $arrayidx5=(($9+($add4<<3))|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $11=$i;
      var $add6=(($11)|0);
      var $12=$tetra_addr;
      var $arrayidx7=(($12+($add6<<3))|0);
      var $13=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($10)-($13);
      var $14=$i;
      var $arrayidx9=(($ac+($14<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$sub8;
      var $15=$i;
      var $add10=((($15)+(9))|0);
      var $16=$tetra_addr;
      var $arrayidx11=(($16+($add10<<3))|0);
      var $17=HEAPF64[(($arrayidx11)>>3)];
      var $18=$i;
      var $add12=(($18)|0);
      var $19=$tetra_addr;
      var $arrayidx13=(($19+($add12<<3))|0);
      var $20=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($20);
      var $21=$i;
      var $arrayidx15=(($ad+($21<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=$sub14;
      var $22=$i;
      var $add16=((($22)+(6))|0);
      var $23=$tetra_addr;
      var $arrayidx17=(($23+($add16<<3))|0);
      var $24=HEAPF64[(($arrayidx17)>>3)];
      var $25=$i;
      var $add18=((($25)+(3))|0);
      var $26=$tetra_addr;
      var $arrayidx19=(($26+($add18<<3))|0);
      var $27=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($24)-($27);
      var $28=$i;
      var $arrayidx21=(($bc+($28<<3))|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $29=$i;
      var $add22=((($29)+(9))|0);
      var $30=$tetra_addr;
      var $arrayidx23=(($30+($add22<<3))|0);
      var $31=HEAPF64[(($arrayidx23)>>3)];
      var $32=$i;
      var $add24=((($32)+(3))|0);
      var $33=$tetra_addr;
      var $arrayidx25=(($33+($add24<<3))|0);
      var $34=HEAPF64[(($arrayidx25)>>3)];
      var $sub26=($31)-($34);
      var $35=$i;
      var $arrayidx27=(($bd+($35<<3))|0);
      HEAPF64[(($arrayidx27)>>3)]=$sub26;
      var $36=$i;
      var $add28=((($36)+(9))|0);
      var $37=$tetra_addr;
      var $arrayidx29=(($37+($add28<<3))|0);
      var $38=HEAPF64[(($arrayidx29)>>3)];
      var $39=$i;
      var $add30=((($39)+(6))|0);
      var $40=$tetra_addr;
      var $arrayidx31=(($40+($add30<<3))|0);
      var $41=HEAPF64[(($arrayidx31)>>3)];
      var $sub32=($38)-($41);
      var $42=$i;
      var $arrayidx33=(($cd+($42<<3))|0);
      HEAPF64[(($arrayidx33)>>3)]=$sub32;
      label = 5; break;
    case 5: 
      var $43=$i;
      var $inc=((($43)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $arraydecay=(($ab)|0);
      var $call=_r8vec_norm(3, $arraydecay);
      $lab=$call;
      var $arraydecay34=(($ac)|0);
      var $call35=_r8vec_norm(3, $arraydecay34);
      $lac=$call35;
      var $arraydecay36=(($ad)|0);
      var $call37=_r8vec_norm(3, $arraydecay36);
      $lad=$call37;
      var $arraydecay38=(($bc)|0);
      var $call39=_r8vec_norm(3, $arraydecay38);
      $lbc=$call39;
      var $arraydecay40=(($bd)|0);
      var $call41=_r8vec_norm(3, $arraydecay40);
      $lbd=$call41;
      var $arraydecay42=(($cd)|0);
      var $call43=_r8vec_norm(3, $arraydecay42);
      $lcd=$call43;
      var $arrayidx44=(($ab)|0);
      var $44=HEAPF64[(($arrayidx44)>>3)];
      var $arrayidx45=(($ac+8)|0);
      var $45=HEAPF64[(($arrayidx45)>>3)];
      var $arrayidx46=(($ad+16)|0);
      var $46=HEAPF64[(($arrayidx46)>>3)];
      var $mul=($45)*($46);
      var $arrayidx47=(($ac+16)|0);
      var $47=HEAPF64[(($arrayidx47)>>3)];
      var $arrayidx48=(($ad+8)|0);
      var $48=HEAPF64[(($arrayidx48)>>3)];
      var $mul49=($47)*($48);
      var $sub50=($mul)-($mul49);
      var $mul51=($44)*($sub50);
      var $arrayidx52=(($ab+8)|0);
      var $49=HEAPF64[(($arrayidx52)>>3)];
      var $arrayidx53=(($ac+16)|0);
      var $50=HEAPF64[(($arrayidx53)>>3)];
      var $arrayidx54=(($ad)|0);
      var $51=HEAPF64[(($arrayidx54)>>3)];
      var $mul55=($50)*($51);
      var $arrayidx56=(($ac)|0);
      var $52=HEAPF64[(($arrayidx56)>>3)];
      var $arrayidx57=(($ad+16)|0);
      var $53=HEAPF64[(($arrayidx57)>>3)];
      var $mul58=($52)*($53);
      var $sub59=($mul55)-($mul58);
      var $mul60=($49)*($sub59);
      var $add61=($mul51)+($mul60);
      var $arrayidx62=(($ab+16)|0);
      var $54=HEAPF64[(($arrayidx62)>>3)];
      var $arrayidx63=(($ac)|0);
      var $55=HEAPF64[(($arrayidx63)>>3)];
      var $arrayidx64=(($ad+8)|0);
      var $56=HEAPF64[(($arrayidx64)>>3)];
      var $mul65=($55)*($56);
      var $arrayidx66=(($ac+8)|0);
      var $57=HEAPF64[(($arrayidx66)>>3)];
      var $arrayidx67=(($ad)|0);
      var $58=HEAPF64[(($arrayidx67)>>3)];
      var $mul68=($57)*($58);
      var $sub69=($mul65)-($mul68);
      var $mul70=($54)*($sub69);
      var $add71=($add61)+($mul70);
      var $call72=_r8_abs($add71);
      var $div=($call72)/(6);
      $volume=$div;
      $quality4=1;
      var $59=$lab;
      var $60=$lac;
      var $add73=($59)+($60);
      $l1=$add73;
      var $61=$lab;
      var $62=$lad;
      var $add74=($61)+($62);
      $l2=$add74;
      var $63=$lac;
      var $64=$lad;
      var $add75=($63)+($64);
      $l3=$add75;
      var $65=$l1;
      var $66=$lbc;
      var $add76=($65)+($66);
      var $67=$l1;
      var $68=$lbc;
      var $sub77=($67)-($68);
      var $mul78=($add76)*($sub77);
      var $69=$l2;
      var $70=$lbd;
      var $add79=($69)+($70);
      var $mul80=($mul78)*($add79);
      var $71=$l2;
      var $72=$lbd;
      var $sub81=($71)-($72);
      var $mul82=($mul80)*($sub81);
      var $73=$l3;
      var $74=$lcd;
      var $add83=($73)+($74);
      var $mul84=($mul82)*($add83);
      var $75=$l3;
      var $76=$lcd;
      var $sub85=($75)-($76);
      var $mul86=($mul84)*($sub85);
      $denom=$mul86;
      var $77=$denom;
      var $cmp87=$77 <= 0;
      if ($cmp87) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $quality4=0;
      label = 9; break;
    case 8: 
      var $78=$quality4;
      var $79=$volume;
      var $mul88=($79)*(12);
      var $80=$denom;
      var $call89=Math.sqrt($80);
      var $div90=($mul88)/($call89);
      var $call91=_r8_min($78, $div90);
      $quality4=$call91;
      label = 9; break;
    case 9: 
      var $81=$lab;
      var $82=$lbc;
      var $add92=($81)+($82);
      $l1=$add92;
      var $83=$lab;
      var $84=$lbd;
      var $add93=($83)+($84);
      $l2=$add93;
      var $85=$lbc;
      var $86=$lbd;
      var $add94=($85)+($86);
      $l3=$add94;
      var $87=$l1;
      var $88=$lac;
      var $add95=($87)+($88);
      var $89=$l1;
      var $90=$lac;
      var $sub96=($89)-($90);
      var $mul97=($add95)*($sub96);
      var $91=$l2;
      var $92=$lad;
      var $add98=($91)+($92);
      var $mul99=($mul97)*($add98);
      var $93=$l2;
      var $94=$lad;
      var $sub100=($93)-($94);
      var $mul101=($mul99)*($sub100);
      var $95=$l3;
      var $96=$lcd;
      var $add102=($95)+($96);
      var $mul103=($mul101)*($add102);
      var $97=$l3;
      var $98=$lcd;
      var $sub104=($97)-($98);
      var $mul105=($mul103)*($sub104);
      $denom=$mul105;
      var $99=$denom;
      var $cmp106=$99 <= 0;
      if ($cmp106) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $quality4=0;
      label = 12; break;
    case 11: 
      var $100=$quality4;
      var $101=$volume;
      var $mul109=($101)*(12);
      var $102=$denom;
      var $call110=Math.sqrt($102);
      var $div111=($mul109)/($call110);
      var $call112=_r8_min($100, $div111);
      $quality4=$call112;
      label = 12; break;
    case 12: 
      var $103=$lac;
      var $104=$lbc;
      var $add114=($103)+($104);
      $l1=$add114;
      var $105=$lac;
      var $106=$lcd;
      var $add115=($105)+($106);
      $l2=$add115;
      var $107=$lbc;
      var $108=$lcd;
      var $add116=($107)+($108);
      $l3=$add116;
      var $109=$l1;
      var $110=$lab;
      var $add117=($109)+($110);
      var $111=$l1;
      var $112=$lab;
      var $sub118=($111)-($112);
      var $mul119=($add117)*($sub118);
      var $113=$l2;
      var $114=$lad;
      var $add120=($113)+($114);
      var $mul121=($mul119)*($add120);
      var $115=$l2;
      var $116=$lad;
      var $sub122=($115)-($116);
      var $mul123=($mul121)*($sub122);
      var $117=$l3;
      var $118=$lbd;
      var $add124=($117)+($118);
      var $mul125=($mul123)*($add124);
      var $119=$l3;
      var $120=$lbd;
      var $sub126=($119)-($120);
      var $mul127=($mul125)*($sub126);
      $denom=$mul127;
      var $121=$denom;
      var $cmp128=$121 <= 0;
      if ($cmp128) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $quality4=0;
      label = 15; break;
    case 14: 
      var $122=$quality4;
      var $123=$volume;
      var $mul131=($123)*(12);
      var $124=$denom;
      var $call132=Math.sqrt($124);
      var $div133=($mul131)/($call132);
      var $call134=_r8_min($122, $div133);
      $quality4=$call134;
      label = 15; break;
    case 15: 
      var $125=$lad;
      var $126=$lbd;
      var $add136=($125)+($126);
      $l1=$add136;
      var $127=$lad;
      var $128=$lcd;
      var $add137=($127)+($128);
      $l2=$add137;
      var $129=$lbd;
      var $130=$lcd;
      var $add138=($129)+($130);
      $l3=$add138;
      var $131=$l1;
      var $132=$lab;
      var $add139=($131)+($132);
      var $133=$l1;
      var $134=$lab;
      var $sub140=($133)-($134);
      var $mul141=($add139)*($sub140);
      var $135=$l2;
      var $136=$lac;
      var $add142=($135)+($136);
      var $mul143=($mul141)*($add142);
      var $137=$l2;
      var $138=$lac;
      var $sub144=($137)-($138);
      var $mul145=($mul143)*($sub144);
      var $139=$l3;
      var $140=$lbc;
      var $add146=($139)+($140);
      var $mul147=($mul145)*($add146);
      var $141=$l3;
      var $142=$lbc;
      var $sub148=($141)-($142);
      var $mul149=($mul147)*($sub148);
      $denom=$mul149;
      var $143=$denom;
      var $cmp150=$143 <= 0;
      if ($cmp150) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $quality4=0;
      label = 18; break;
    case 17: 
      var $144=$quality4;
      var $145=$volume;
      var $mul153=($145)*(12);
      var $146=$denom;
      var $call154=Math.sqrt($146);
      var $div155=($mul153)/($call154);
      var $call156=_r8_min($144, $div155);
      $quality4=$call156;
      label = 18; break;
    case 18: 
      var $147=$quality4;
      var $mul158=($147)*(1.5);
      var $call159=Math.sqrt(6);
      var $mul160=($mul158)*($call159);
      $quality4=$mul160;
      var $148=$quality4;
      STACKTOP = __stackBase__;
      return $148;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_quality4_3d"] = _tetrahedron_quality4_3d;
function _tetrahedron_rhombic_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $point_num_addr;
      var $face_num_addr;
      var $face_order_max_addr;
      var $point_coord_addr;
      var $face_order_addr;
      var $face_point_addr;
      var $a;
      var $b;
      var $c;
      var $d;
      var $face;
      var $z;
      $point_num_addr=$point_num;
      $face_num_addr=$face_num;
      $face_order_max_addr=$face_order_max;
      $point_coord_addr=$point_coord;
      $face_order_addr=$face_order;
      $face_point_addr=$face_point;
      $z=0;
      var $call=Math.sqrt(3);
      var $div=(1)/($call);
      $a=$div;
      var $call1=Math.sqrt(2);
      var $call2=Math.sqrt(3);
      var $div3=($call1)/($call2);
      $b=$div3;
      var $call4=Math.sqrt(3);
      var $div5=($call4)/(6);
      $c=$div5;
      var $call6=Math.sqrt(6);
      var $div7=(1)/($call6);
      $d=$div7;
      var $0=$b;
      var $sub=(-$0);
      var $1=$point_coord_addr;
      var $arrayidx=(($1)|0);
      HEAPF64[(($arrayidx)>>3)]=$sub;
      var $2=$z;
      var $3=$point_coord_addr;
      var $arrayidx8=(($3+8)|0);
      HEAPF64[(($arrayidx8)>>3)]=$2;
      var $4=$z;
      var $5=$point_coord_addr;
      var $arrayidx9=(($5+16)|0);
      HEAPF64[(($arrayidx9)>>3)]=$4;
      var $6=$z;
      var $7=$point_coord_addr;
      var $arrayidx10=(($7+24)|0);
      HEAPF64[(($arrayidx10)>>3)]=$6;
      var $8=$a;
      var $sub11=(-$8);
      var $9=$point_coord_addr;
      var $arrayidx12=(($9+32)|0);
      HEAPF64[(($arrayidx12)>>3)]=$sub11;
      var $10=$z;
      var $11=$point_coord_addr;
      var $arrayidx13=(($11+40)|0);
      HEAPF64[(($arrayidx13)>>3)]=$10;
      var $12=$z;
      var $13=$point_coord_addr;
      var $arrayidx14=(($13+48)|0);
      HEAPF64[(($arrayidx14)>>3)]=$12;
      var $14=$a;
      var $15=$point_coord_addr;
      var $arrayidx15=(($15+56)|0);
      HEAPF64[(($arrayidx15)>>3)]=$14;
      var $16=$z;
      var $17=$point_coord_addr;
      var $arrayidx16=(($17+64)|0);
      HEAPF64[(($arrayidx16)>>3)]=$16;
      var $18=$z;
      var $19=$point_coord_addr;
      var $arrayidx17=(($19+72)|0);
      HEAPF64[(($arrayidx17)>>3)]=$18;
      var $20=$z;
      var $21=$point_coord_addr;
      var $arrayidx18=(($21+80)|0);
      HEAPF64[(($arrayidx18)>>3)]=$20;
      var $22=$b;
      var $23=$point_coord_addr;
      var $arrayidx19=(($23+88)|0);
      HEAPF64[(($arrayidx19)>>3)]=$22;
      var $24=$d;
      var $sub20=(-$24);
      var $25=$point_coord_addr;
      var $arrayidx21=(($25+96)|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $26=$c;
      var $sub22=(-$26);
      var $27=$point_coord_addr;
      var $arrayidx23=(($27+104)|0);
      HEAPF64[(($arrayidx23)>>3)]=$sub22;
      var $28=$z;
      var $29=$point_coord_addr;
      var $arrayidx24=(($29+112)|0);
      HEAPF64[(($arrayidx24)>>3)]=$28;
      var $30=$d;
      var $sub25=(-$30);
      var $31=$point_coord_addr;
      var $arrayidx26=(($31+120)|0);
      HEAPF64[(($arrayidx26)>>3)]=$sub25;
      var $32=$c;
      var $33=$point_coord_addr;
      var $arrayidx27=(($33+128)|0);
      HEAPF64[(($arrayidx27)>>3)]=$32;
      var $34=$z;
      var $35=$point_coord_addr;
      var $arrayidx28=(($35+136)|0);
      HEAPF64[(($arrayidx28)>>3)]=$34;
      var $36=$d;
      var $sub29=(-$36);
      var $37=$point_coord_addr;
      var $arrayidx30=(($37+144)|0);
      HEAPF64[(($arrayidx30)>>3)]=$sub29;
      var $38=$z;
      var $39=$point_coord_addr;
      var $arrayidx31=(($39+152)|0);
      HEAPF64[(($arrayidx31)>>3)]=$38;
      var $40=$d;
      var $41=$point_coord_addr;
      var $arrayidx32=(($41+160)|0);
      HEAPF64[(($arrayidx32)>>3)]=$40;
      var $42=$z;
      var $43=$point_coord_addr;
      var $arrayidx33=(($43+168)|0);
      HEAPF64[(($arrayidx33)>>3)]=$42;
      var $44=$z;
      var $45=$point_coord_addr;
      var $arrayidx34=(($45+176)|0);
      HEAPF64[(($arrayidx34)>>3)]=$44;
      var $46=$z;
      var $47=$point_coord_addr;
      var $arrayidx35=(($47+184)|0);
      HEAPF64[(($arrayidx35)>>3)]=$46;
      var $48=$z;
      var $49=$point_coord_addr;
      var $arrayidx36=(($49+192)|0);
      HEAPF64[(($arrayidx36)>>3)]=$48;
      var $50=$c;
      var $sub37=(-$50);
      var $51=$point_coord_addr;
      var $arrayidx38=(($51+200)|0);
      HEAPF64[(($arrayidx38)>>3)]=$sub37;
      var $52=$d;
      var $53=$point_coord_addr;
      var $arrayidx39=(($53+208)|0);
      HEAPF64[(($arrayidx39)>>3)]=$52;
      var $54=$z;
      var $55=$point_coord_addr;
      var $arrayidx40=(($55+216)|0);
      HEAPF64[(($arrayidx40)>>3)]=$54;
      var $56=$c;
      var $57=$point_coord_addr;
      var $arrayidx41=(($57+224)|0);
      HEAPF64[(($arrayidx41)>>3)]=$56;
      var $58=$d;
      var $59=$point_coord_addr;
      var $arrayidx42=(($59+232)|0);
      HEAPF64[(($arrayidx42)>>3)]=$58;
      $face=0;
      label = 3; break;
    case 3: 
      var $60=$face;
      var $61=$face_num_addr;
      var $cmp=(($60)|(0)) < (($61)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $62=$face;
      var $63=$face_order_addr;
      var $arrayidx43=(($63+($62<<2))|0);
      HEAP32[(($arrayidx43)>>2)]=6;
      label = 5; break;
    case 5: 
      var $64=$face;
      var $inc=((($64)+(1))|0);
      $face=$inc;
      label = 3; break;
    case 6: 
      var $65=$face_order_max_addr;
      var $mul=0;
      var $add=(($mul)|0);
      var $66=$face_point_addr;
      var $arrayidx44=(($66+($add<<2))|0);
      HEAP32[(($arrayidx44)>>2)]=1;
      var $67=$face_order_max_addr;
      var $mul45=0;
      var $add46=((($mul45)+(1))|0);
      var $68=$face_point_addr;
      var $arrayidx47=(($68+($add46<<2))|0);
      HEAP32[(($arrayidx47)>>2)]=5;
      var $69=$face_order_max_addr;
      var $mul48=0;
      var $add49=((($mul48)+(2))|0);
      var $70=$face_point_addr;
      var $arrayidx50=(($70+($add49<<2))|0);
      HEAP32[(($arrayidx50)>>2)]=2;
      var $71=$face_order_max_addr;
      var $mul51=0;
      var $add52=((($mul51)+(3))|0);
      var $72=$face_point_addr;
      var $arrayidx53=(($72+($add52<<2))|0);
      HEAP32[(($arrayidx53)>>2)]=9;
      var $73=$face_order_max_addr;
      var $mul54=0;
      var $add55=((($mul54)+(4))|0);
      var $74=$face_point_addr;
      var $arrayidx56=(($74+($add55<<2))|0);
      HEAP32[(($arrayidx56)>>2)]=4;
      var $75=$face_order_max_addr;
      var $mul57=0;
      var $add58=((($mul57)+(5))|0);
      var $76=$face_point_addr;
      var $arrayidx59=(($76+($add58<<2))|0);
      HEAP32[(($arrayidx59)>>2)]=7;
      var $77=$face_order_max_addr;
      var $mul60=$77;
      var $add61=(($mul60)|0);
      var $78=$face_point_addr;
      var $arrayidx62=(($78+($add61<<2))|0);
      HEAP32[(($arrayidx62)>>2)]=2;
      var $79=$face_order_max_addr;
      var $mul63=$79;
      var $add64=((($mul63)+(1))|0);
      var $80=$face_point_addr;
      var $arrayidx65=(($80+($add64<<2))|0);
      HEAP32[(($arrayidx65)>>2)]=8;
      var $81=$face_order_max_addr;
      var $mul66=$81;
      var $add67=((($mul66)+(2))|0);
      var $82=$face_point_addr;
      var $arrayidx68=(($82+($add67<<2))|0);
      HEAP32[(($arrayidx68)>>2)]=3;
      var $83=$face_order_max_addr;
      var $mul69=$83;
      var $add70=((($mul69)+(3))|0);
      var $84=$face_point_addr;
      var $arrayidx71=(($84+($add70<<2))|0);
      HEAP32[(($arrayidx71)>>2)]=10;
      var $85=$face_order_max_addr;
      var $mul72=$85;
      var $add73=((($mul72)+(4))|0);
      var $86=$face_point_addr;
      var $arrayidx74=(($86+($add73<<2))|0);
      HEAP32[(($arrayidx74)>>2)]=4;
      var $87=$face_order_max_addr;
      var $mul75=$87;
      var $add76=((($mul75)+(5))|0);
      var $88=$face_point_addr;
      var $arrayidx77=(($88+($add76<<2))|0);
      HEAP32[(($arrayidx77)>>2)]=9;
      var $89=$face_order_max_addr;
      var $mul78=($89<<1);
      var $add79=(($mul78)|0);
      var $90=$face_point_addr;
      var $arrayidx80=(($90+($add79<<2))|0);
      HEAP32[(($arrayidx80)>>2)]=3;
      var $91=$face_order_max_addr;
      var $mul81=($91<<1);
      var $add82=((($mul81)+(1))|0);
      var $92=$face_point_addr;
      var $arrayidx83=(($92+($add82<<2))|0);
      HEAP32[(($arrayidx83)>>2)]=6;
      var $93=$face_order_max_addr;
      var $mul84=($93<<1);
      var $add85=((($mul84)+(2))|0);
      var $94=$face_point_addr;
      var $arrayidx86=(($94+($add85<<2))|0);
      HEAP32[(($arrayidx86)>>2)]=1;
      var $95=$face_order_max_addr;
      var $mul87=($95<<1);
      var $add88=((($mul87)+(3))|0);
      var $96=$face_point_addr;
      var $arrayidx89=(($96+($add88<<2))|0);
      HEAP32[(($arrayidx89)>>2)]=7;
      var $97=$face_order_max_addr;
      var $mul90=($97<<1);
      var $add91=((($mul90)+(4))|0);
      var $98=$face_point_addr;
      var $arrayidx92=(($98+($add91<<2))|0);
      HEAP32[(($arrayidx92)>>2)]=4;
      var $99=$face_order_max_addr;
      var $mul93=($99<<1);
      var $add94=((($mul93)+(5))|0);
      var $100=$face_point_addr;
      var $arrayidx95=(($100+($add94<<2))|0);
      HEAP32[(($arrayidx95)>>2)]=10;
      var $101=$face_order_max_addr;
      var $mul96=((($101)*(3))&-1);
      var $add97=(($mul96)|0);
      var $102=$face_point_addr;
      var $arrayidx98=(($102+($add97<<2))|0);
      HEAP32[(($arrayidx98)>>2)]=1;
      var $103=$face_order_max_addr;
      var $mul99=((($103)*(3))&-1);
      var $add100=((($mul99)+(1))|0);
      var $104=$face_point_addr;
      var $arrayidx101=(($104+($add100<<2))|0);
      HEAP32[(($arrayidx101)>>2)]=6;
      var $105=$face_order_max_addr;
      var $mul102=((($105)*(3))&-1);
      var $add103=((($mul102)+(2))|0);
      var $106=$face_point_addr;
      var $arrayidx104=(($106+($add103<<2))|0);
      HEAP32[(($arrayidx104)>>2)]=3;
      var $107=$face_order_max_addr;
      var $mul105=((($107)*(3))&-1);
      var $add106=((($mul105)+(3))|0);
      var $108=$face_point_addr;
      var $arrayidx107=(($108+($add106<<2))|0);
      HEAP32[(($arrayidx107)>>2)]=8;
      var $109=$face_order_max_addr;
      var $mul108=((($109)*(3))&-1);
      var $add109=((($mul108)+(4))|0);
      var $110=$face_point_addr;
      var $arrayidx110=(($110+($add109<<2))|0);
      HEAP32[(($arrayidx110)>>2)]=2;
      var $111=$face_order_max_addr;
      var $mul111=((($111)*(3))&-1);
      var $add112=((($mul111)+(5))|0);
      var $112=$face_point_addr;
      var $arrayidx113=(($112+($add112<<2))|0);
      HEAP32[(($arrayidx113)>>2)]=5;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_rhombic_shape_3d"] = _tetrahedron_rhombic_shape_3d;
function _tetrahedron_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=4;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=12;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=4;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=3;
  return;
}
Module["_tetrahedron_size_3d"] = _tetrahedron_size_3d;
function _tetrahedron_unit_lattice_point_num_3d($s) {
  var label = 0;
  var $s_addr;
  var $n;
  $s_addr=$s;
  var $0=$s_addr;
  var $add=((($0)+(3))|0);
  var $1=$s_addr;
  var $add1=((($1)+(2))|0);
  var $mul=(Math.imul($add,$add1)|0);
  var $2=$s_addr;
  var $add2=((($2)+(1))|0);
  var $mul3=(Math.imul($mul,$add2)|0);
  var $div=((((($mul3)|(0)))/(6))&-1);
  $n=$div;
  var $3=$n;
  return $3;
}
Module["_tetrahedron_unit_lattice_point_num_3d"] = _tetrahedron_unit_lattice_point_num_3d;
function _tmat_init($a) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $i;
      var $j;
      $a_addr=$a;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 4;
      if ($cmp) { label = 4; break; } else { label = 13; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $1=$j;
      var $cmp2=(($1)|(0)) < 4;
      if ($cmp2) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $2=$i;
      var $3=$j;
      var $cmp4=(($2)|(0))==(($3)|(0));
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $4=$i;
      var $5=$j;
      var $mul=($5<<2);
      var $add=((($4)+($mul))|0);
      var $6=$a_addr;
      var $arrayidx=(($6+($add<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=1;
      label = 9; break;
    case 8: 
      var $7=$i;
      var $8=$j;
      var $mul5=($8<<2);
      var $add6=((($7)+($mul5))|0);
      var $9=$a_addr;
      var $arrayidx7=(($9+($add6<<3))|0);
      HEAPF64[(($arrayidx7)>>3)]=0;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $10=$j;
      var $inc=((($10)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $11=$i;
      var $inc9=((($11)+(1))|0);
      $i=$inc9;
      label = 3; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_init"] = _tmat_init;
function _tmat_mxm($a, $b, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $d=__stackBase__;
      var $i;
      var $j;
      var $k;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 4;
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $1=$k;
      var $cmp2=(($1)|(0)) < 4;
      if ($cmp2) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $2=$i;
      var $3=$k;
      var $mul=($3<<2);
      var $add=((($2)+($mul))|0);
      var $arrayidx=(($d+($add<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $j=0;
      label = 7; break;
    case 7: 
      var $4=$j;
      var $cmp5=(($4)|(0)) < 4;
      if ($cmp5) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $5=$i;
      var $6=$k;
      var $mul7=($6<<2);
      var $add8=((($5)+($mul7))|0);
      var $arrayidx9=(($d+($add8<<3))|0);
      var $7=HEAPF64[(($arrayidx9)>>3)];
      var $8=$i;
      var $9=$j;
      var $mul10=($9<<2);
      var $add11=((($8)+($mul10))|0);
      var $10=$a_addr;
      var $arrayidx12=(($10+($add11<<3))|0);
      var $11=HEAPF64[(($arrayidx12)>>3)];
      var $12=$j;
      var $13=$k;
      var $mul13=($13<<2);
      var $add14=((($12)+($mul13))|0);
      var $14=$b_addr;
      var $arrayidx15=(($14+($add14<<3))|0);
      var $15=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($11)*($15);
      var $add17=($7)+($mul16);
      var $16=$i;
      var $17=$k;
      var $mul18=($17<<2);
      var $add19=((($16)+($mul18))|0);
      var $arrayidx20=(($d+($add19<<3))|0);
      HEAPF64[(($arrayidx20)>>3)]=$add17;
      label = 9; break;
    case 9: 
      var $18=$j;
      var $inc=((($18)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $19=$k;
      var $inc22=((($19)+(1))|0);
      $k=$inc22;
      label = 5; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $20=$i;
      var $inc25=((($20)+(1))|0);
      $i=$inc25;
      label = 3; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $21=$i;
      var $cmp28=(($21)|(0)) < 4;
      if ($cmp28) { label = 16; break; } else { label = 22; break; }
    case 16: 
      $j=0;
      label = 17; break;
    case 17: 
      var $22=$j;
      var $cmp31=(($22)|(0)) < 4;
      if ($cmp31) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $23=$i;
      var $24=$j;
      var $mul33=($24<<2);
      var $add34=((($23)+($mul33))|0);
      var $arrayidx35=(($d+($add34<<3))|0);
      var $25=HEAPF64[(($arrayidx35)>>3)];
      var $26=$i;
      var $27=$j;
      var $mul36=($27<<2);
      var $add37=((($26)+($mul36))|0);
      var $28=$c_addr;
      var $arrayidx38=(($28+($add37<<3))|0);
      HEAPF64[(($arrayidx38)>>3)]=$25;
      label = 19; break;
    case 19: 
      var $29=$j;
      var $inc40=((($29)+(1))|0);
      $j=$inc40;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $30=$i;
      var $inc43=((($30)+(1))|0);
      $i=$inc43;
      label = 15; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_mxm"] = _tmat_mxm;
function _tmat_mxp($a, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $x_addr;
      var $y_addr;
      var $i;
      var $j;
      var $z=__stackBase__;
      $a_addr=$a;
      $x_addr=$x;
      $y_addr=$y;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $1=$i;
      var $add=((($1)+(12))|0);
      var $2=$a_addr;
      var $arrayidx=(($2+($add<<3))|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$i;
      var $arrayidx1=(($z+($4<<3))|0);
      HEAPF64[(($arrayidx1)>>3)]=$3;
      $j=0;
      label = 5; break;
    case 5: 
      var $5=$j;
      var $cmp3=(($5)|(0)) < 3;
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $6=$i;
      var $arrayidx5=(($z+($6<<3))|0);
      var $7=HEAPF64[(($arrayidx5)>>3)];
      var $8=$i;
      var $9=$j;
      var $mul=($9<<2);
      var $add6=((($8)+($mul))|0);
      var $10=$a_addr;
      var $arrayidx7=(($10+($add6<<3))|0);
      var $11=HEAPF64[(($arrayidx7)>>3)];
      var $12=$j;
      var $13=$x_addr;
      var $arrayidx8=(($13+($12<<3))|0);
      var $14=HEAPF64[(($arrayidx8)>>3)];
      var $mul9=($11)*($14);
      var $add10=($7)+($mul9);
      var $15=$i;
      var $arrayidx11=(($z+($15<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$add10;
      label = 7; break;
    case 7: 
      var $16=$j;
      var $inc=((($16)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc13=((($17)+(1))|0);
      $i=$inc13;
      label = 3; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp16=(($18)|(0)) < 3;
      if ($cmp16) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $arrayidx18=(($z+($19<<3))|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$i;
      var $22=$y_addr;
      var $arrayidx19=(($22+($21<<3))|0);
      HEAPF64[(($arrayidx19)>>3)]=$20;
      label = 13; break;
    case 13: 
      var $23=$i;
      var $inc21=((($23)+(1))|0);
      $i=$inc21;
      label = 11; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_mxp"] = _tmat_mxp;
function _tmat_mxp2($a, $p1, $p2, $n) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $p1_addr;
      var $p2_addr;
      var $n_addr;
      var $i;
      var $j;
      var $k;
      $a_addr=$a;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $n_addr=$n;
      $k=0;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 14; break; }
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $2=$i;
      var $cmp2=(($2)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $3=$i;
      var $add=((($3)+(12))|0);
      var $4=$a_addr;
      var $arrayidx=(($4+($add<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$k;
      var $mul=((($7)*(3))&-1);
      var $add4=((($6)+($mul))|0);
      var $8=$p2_addr;
      var $arrayidx5=(($8+($add4<<3))|0);
      HEAPF64[(($arrayidx5)>>3)]=$5;
      $j=0;
      label = 7; break;
    case 7: 
      var $9=$j;
      var $cmp7=(($9)|(0)) < 3;
      if ($cmp7) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $11=$k;
      var $mul9=((($11)*(3))&-1);
      var $add10=((($10)+($mul9))|0);
      var $12=$p2_addr;
      var $arrayidx11=(($12+($add10<<3))|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$i;
      var $15=$j;
      var $mul12=($15<<2);
      var $add13=((($14)+($mul12))|0);
      var $16=$a_addr;
      var $arrayidx14=(($16+($add13<<3))|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $18=$j;
      var $19=$k;
      var $mul15=((($19)*(3))&-1);
      var $add16=((($18)+($mul15))|0);
      var $20=$p1_addr;
      var $arrayidx17=(($20+($add16<<3))|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $mul18=($17)*($21);
      var $add19=($13)+($mul18);
      var $22=$i;
      var $23=$k;
      var $mul20=((($23)*(3))&-1);
      var $add21=((($22)+($mul20))|0);
      var $24=$p2_addr;
      var $arrayidx22=(($24+($add21<<3))|0);
      HEAPF64[(($arrayidx22)>>3)]=$add19;
      label = 9; break;
    case 9: 
      var $25=$j;
      var $inc=((($25)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $26=$i;
      var $inc24=((($26)+(1))|0);
      $i=$inc24;
      label = 5; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $27=$k;
      var $inc27=((($27)+(1))|0);
      $k=$inc27;
      label = 3; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_mxp2"] = _tmat_mxp2;
function _tmat_mxv($a, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $x_addr;
      var $y_addr;
      var $i;
      var $j;
      var $z=__stackBase__;
      $a_addr=$a;
      $x_addr=$x;
      $y_addr=$y;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $1=$i;
      var $arrayidx=(($z+($1<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $cmp2=(($2)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $3=$i;
      var $arrayidx4=(($z+($3<<3))|0);
      var $4=HEAPF64[(($arrayidx4)>>3)];
      var $5=$i;
      var $6=$j;
      var $mul=($6<<2);
      var $add=((($5)+($mul))|0);
      var $7=$a_addr;
      var $arrayidx5=(($7+($add<<3))|0);
      var $8=HEAPF64[(($arrayidx5)>>3)];
      var $9=$j;
      var $10=$x_addr;
      var $arrayidx6=(($10+($9<<3))|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($8)*($11);
      var $add8=($4)+($mul7);
      var $12=$i;
      var $arrayidx9=(($z+($12<<3))|0);
      HEAPF64[(($arrayidx9)>>3)]=$add8;
      label = 7; break;
    case 7: 
      var $13=$j;
      var $inc=((($13)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      var $14=$i;
      var $arrayidx10=(($z+($14<<3))|0);
      var $15=HEAPF64[(($arrayidx10)>>3)];
      var $16=$i;
      var $add11=((($16)+(12))|0);
      var $17=$a_addr;
      var $arrayidx12=(($17+($add11<<3))|0);
      var $18=HEAPF64[(($arrayidx12)>>3)];
      var $add13=($15)+($18);
      var $19=$i;
      var $arrayidx14=(($z+($19<<3))|0);
      HEAPF64[(($arrayidx14)>>3)]=$add13;
      label = 9; break;
    case 9: 
      var $20=$i;
      var $inc16=((($20)+(1))|0);
      $i=$inc16;
      label = 3; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $21=$i;
      var $cmp19=(($21)|(0)) < 3;
      if ($cmp19) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $22=$i;
      var $arrayidx21=(($z+($22<<3))|0);
      var $23=HEAPF64[(($arrayidx21)>>3)];
      var $24=$i;
      var $25=$y_addr;
      var $arrayidx22=(($25+($24<<3))|0);
      HEAPF64[(($arrayidx22)>>3)]=$23;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc24=((($26)+(1))|0);
      $i=$inc24;
      label = 11; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_mxv"] = _tmat_mxv;
function _tetrahedron_sample_3d($tetra, $n, $seed, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $tetra_addr;
      var $n_addr;
      var $seed_addr;
      var $p_addr;
      var $alpha;
      var $beta;
      var $gamma;
      var $i;
      var $j;
      var $k;
      var $p12;
      var $p13;
      var $r;
      var $t;
      $tetra_addr=$tetra;
      $n_addr=$n;
      $seed_addr=$seed;
      $p_addr=$p;
      var $call=_malloc(24);
      var $0=$call;
      $p12=$0;
      var $call1=_malloc(24);
      var $1=$call1;
      $p13=$1;
      var $call2=_malloc(72);
      var $2=$call2;
      $t=$2;
      $k=0;
      label = 3; break;
    case 3: 
      var $3=$k;
      var $4=$n_addr;
      var $cmp=(($3)|(0)) < (($4)|(0));
      if ($cmp) { label = 4; break; } else { label = 22; break; }
    case 4: 
      var $5=$seed_addr;
      var $call3=_r8_uniform_01($5);
      $r=$call3;
      var $6=$r;
      var $7=Math.pow($6, 0.3333333333333333);
      $alpha=$7;
      $i=0;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $cmp5=(($8)|(0)) < 3;
      if ($cmp5) { label = 6; break; } else { label = 12; break; }
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $9=$j;
      var $cmp8=(($9)|(0)) < 3;
      if ($cmp8) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$alpha;
      var $sub=(1)-($10);
      var $11=$i;
      var $add=(($11)|0);
      var $12=$tetra_addr;
      var $arrayidx=(($12+($add<<3))|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $mul=($sub)*($13);
      var $14=$alpha;
      var $15=$i;
      var $16=$j;
      var $add10=((($16)+(1))|0);
      var $mul11=((($add10)*(3))&-1);
      var $add12=((($15)+($mul11))|0);
      var $17=$tetra_addr;
      var $arrayidx13=(($17+($add12<<3))|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      var $mul14=($14)*($18);
      var $add15=($mul)+($mul14);
      var $19=$i;
      var $20=$j;
      var $mul16=((($20)*(3))&-1);
      var $add17=((($19)+($mul16))|0);
      var $21=$t;
      var $arrayidx18=(($21+($add17<<3))|0);
      HEAPF64[(($arrayidx18)>>3)]=$add15;
      label = 9; break;
    case 9: 
      var $22=$j;
      var $inc=((($22)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $23=$i;
      var $inc20=((($23)+(1))|0);
      $i=$inc20;
      label = 5; break;
    case 12: 
      var $24=$seed_addr;
      var $call22=_r8_uniform_01($24);
      $r=$call22;
      var $25=$r;
      var $call23=Math.sqrt($25);
      $beta=$call23;
      $i=0;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $cmp25=(($26)|(0)) < 3;
      if ($cmp25) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $27=$beta;
      var $sub27=(1)-($27);
      var $28=$i;
      var $add28=(($28)|0);
      var $29=$t;
      var $arrayidx29=(($29+($add28<<3))|0);
      var $30=HEAPF64[(($arrayidx29)>>3)];
      var $mul30=($sub27)*($30);
      var $31=$beta;
      var $32=$i;
      var $add31=((($32)+(3))|0);
      var $33=$t;
      var $arrayidx32=(($33+($add31<<3))|0);
      var $34=HEAPF64[(($arrayidx32)>>3)];
      var $mul33=($31)*($34);
      var $add34=($mul30)+($mul33);
      var $35=$i;
      var $36=$p12;
      var $arrayidx35=(($36+($35<<3))|0);
      HEAPF64[(($arrayidx35)>>3)]=$add34;
      var $37=$beta;
      var $sub36=(1)-($37);
      var $38=$i;
      var $add37=(($38)|0);
      var $39=$t;
      var $arrayidx38=(($39+($add37<<3))|0);
      var $40=HEAPF64[(($arrayidx38)>>3)];
      var $mul39=($sub36)*($40);
      var $41=$beta;
      var $42=$i;
      var $add40=((($42)+(6))|0);
      var $43=$t;
      var $arrayidx41=(($43+($add40<<3))|0);
      var $44=HEAPF64[(($arrayidx41)>>3)];
      var $mul42=($41)*($44);
      var $add43=($mul39)+($mul42);
      var $45=$i;
      var $46=$p13;
      var $arrayidx44=(($46+($45<<3))|0);
      HEAPF64[(($arrayidx44)>>3)]=$add43;
      label = 15; break;
    case 15: 
      var $47=$i;
      var $inc46=((($47)+(1))|0);
      $i=$inc46;
      label = 13; break;
    case 16: 
      var $48=$seed_addr;
      var $call48=_r8_uniform_01($48);
      $gamma=$call48;
      $i=0;
      label = 17; break;
    case 17: 
      var $49=$i;
      var $cmp50=(($49)|(0)) < 3;
      if ($cmp50) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $50=$gamma;
      var $51=$i;
      var $52=$p12;
      var $arrayidx52=(($52+($51<<3))|0);
      var $53=HEAPF64[(($arrayidx52)>>3)];
      var $mul53=($50)*($53);
      var $54=$gamma;
      var $sub54=(1)-($54);
      var $55=$i;
      var $56=$p13;
      var $arrayidx55=(($56+($55<<3))|0);
      var $57=HEAPF64[(($arrayidx55)>>3)];
      var $mul56=($sub54)*($57);
      var $add57=($mul53)+($mul56);
      var $58=$i;
      var $59=$k;
      var $mul58=((($59)*(3))&-1);
      var $add59=((($58)+($mul58))|0);
      var $60=$p_addr;
      var $arrayidx60=(($60+($add59<<3))|0);
      HEAPF64[(($arrayidx60)>>3)]=$add57;
      label = 19; break;
    case 19: 
      var $61=$i;
      var $inc62=((($61)+(1))|0);
      $i=$inc62;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $62=$k;
      var $inc65=((($62)+(1))|0);
      $k=$inc65;
      label = 3; break;
    case 22: 
      var $63=$p12;
      var $64=$63;
      _free($64);
      var $65=$p13;
      var $66=$65;
      _free($66);
      var $67=$t;
      var $68=$67;
      _free($68);
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tetrahedron_sample_3d"] = _tetrahedron_sample_3d;
function _tetrahedron_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  var $point_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  var $point_coord_addr;
  var $face_order_addr;
  var $face_point_addr;
  $point_num_addr=$point_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  $point_coord_addr=$point_coord;
  $face_order_addr=$face_order;
  $face_point_addr=$face_point;
  var $0=$face_num_addr;
  var $1=$face_order_addr;
  _i4vec_copy($0, ((1160)|0), $1);
  var $2=$face_order_max_addr;
  var $3=$face_num_addr;
  var $mul=(Math.imul($2,$3)|0);
  var $4=$face_point_addr;
  _i4vec_copy($mul, ((1112)|0), $4);
  var $5=$point_num_addr;
  var $mul1=((($5)*(3))&-1);
  var $6=$point_coord_addr;
  _r8vec_copy($mul1, ((1016)|0), $6);
  return;
}
Module["_tetrahedron_shape_3d"] = _tetrahedron_shape_3d;
function _tetrahedron_solid_angles_3d($tetra) {
  var label = 0;
  var $tetra_addr;
  var $angle;
  var $dihedral_angles;
  var $pi;
  $tetra_addr=$tetra;
  $pi=3.141592653589793;
  var $0=$tetra_addr;
  var $call=_tetrahedron_dihedral_angles_3d($0);
  $dihedral_angles=$call;
  var $call1=_malloc(32);
  var $1=$call1;
  $angle=$1;
  var $2=$dihedral_angles;
  var $arrayidx=(($2)|0);
  var $3=HEAPF64[(($arrayidx)>>3)];
  var $4=$dihedral_angles;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $add=($3)+($5);
  var $6=$dihedral_angles;
  var $arrayidx3=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $add4=($add)+($7);
  var $8=$pi;
  var $sub=($add4)-($8);
  var $9=$angle;
  var $arrayidx5=(($9)|0);
  HEAPF64[(($arrayidx5)>>3)]=$sub;
  var $10=$dihedral_angles;
  var $arrayidx6=(($10)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $12=$dihedral_angles;
  var $arrayidx7=(($12+24)|0);
  var $13=HEAPF64[(($arrayidx7)>>3)];
  var $add8=($11)+($13);
  var $14=$dihedral_angles;
  var $arrayidx9=(($14+32)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $add10=($add8)+($15);
  var $16=$pi;
  var $sub11=($add10)-($16);
  var $17=$angle;
  var $arrayidx12=(($17+8)|0);
  HEAPF64[(($arrayidx12)>>3)]=$sub11;
  var $18=$dihedral_angles;
  var $arrayidx13=(($18+8)|0);
  var $19=HEAPF64[(($arrayidx13)>>3)];
  var $20=$dihedral_angles;
  var $arrayidx14=(($20+24)|0);
  var $21=HEAPF64[(($arrayidx14)>>3)];
  var $add15=($19)+($21);
  var $22=$dihedral_angles;
  var $arrayidx16=(($22+40)|0);
  var $23=HEAPF64[(($arrayidx16)>>3)];
  var $add17=($add15)+($23);
  var $24=$pi;
  var $sub18=($add17)-($24);
  var $25=$angle;
  var $arrayidx19=(($25+16)|0);
  HEAPF64[(($arrayidx19)>>3)]=$sub18;
  var $26=$dihedral_angles;
  var $arrayidx20=(($26+16)|0);
  var $27=HEAPF64[(($arrayidx20)>>3)];
  var $28=$dihedral_angles;
  var $arrayidx21=(($28+32)|0);
  var $29=HEAPF64[(($arrayidx21)>>3)];
  var $add22=($27)+($29);
  var $30=$dihedral_angles;
  var $arrayidx23=(($30+40)|0);
  var $31=HEAPF64[(($arrayidx23)>>3)];
  var $add24=($add22)+($31);
  var $32=$pi;
  var $sub25=($add24)-($32);
  var $33=$angle;
  var $arrayidx26=(($33+24)|0);
  HEAPF64[(($arrayidx26)>>3)]=$sub25;
  var $34=$dihedral_angles;
  var $35=$34;
  _free($35);
  var $36=$angle;
  return $36;
}
Module["_tetrahedron_solid_angles_3d"] = _tetrahedron_solid_angles_3d;
function _timestamp() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  var $tm;
  var $now=__stackBase__;
  var $call=_time(0);
  HEAP32[(($now)>>2)]=$call;
  var $call1=_localtime($now);
  $tm=$call1;
  var $0=$tm;
  var $call2=_strftime(((976)|0), 40, ((12296)|0), $0);
  var $call3=_printf(((8856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=((976)|0),tempInt));
  STACKTOP = __stackBase__;
  return;
}
Module["_timestamp"] = _timestamp;
function _torus_volume_3d($r1, $r2) {
  var label = 0;
  var $r1_addr;
  var $r2_addr;
  var $pi;
  var $volume;
  $r1_addr=$r1;
  $r2_addr=$r2;
  $pi=3.141592653589793;
  var $0=$pi;
  var $mul=($0)*(2);
  var $1=$pi;
  var $mul1=($mul)*($1);
  var $2=$r1_addr;
  var $mul2=($mul1)*($2);
  var $3=$r2_addr;
  var $mul3=($mul2)*($3);
  var $4=$r2_addr;
  var $mul4=($mul3)*($4);
  $volume=$mul4;
  var $5=$volume;
  return $5;
}
Module["_torus_volume_3d"] = _torus_volume_3d;
function _tmat_trans($a, $b, $v) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $v_addr;
      var $i;
      var $j;
      $a_addr=$a;
      $b_addr=$b;
      $v_addr=$v;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 4;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $1=$j;
      var $cmp2=(($1)|(0)) < 4;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $2=$i;
      var $3=$j;
      var $mul=($3<<2);
      var $add=((($2)+($mul))|0);
      var $4=$a_addr;
      var $arrayidx=(($4+($add<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$i;
      var $7=$j;
      var $mul4=($7<<2);
      var $add5=((($6)+($mul4))|0);
      var $8=$b_addr;
      var $arrayidx6=(($8+($add5<<3))|0);
      HEAPF64[(($arrayidx6)>>3)]=$5;
      label = 7; break;
    case 7: 
      var $9=$j;
      var $inc=((($9)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $10=$i;
      var $inc8=((($10)+(1))|0);
      $i=$inc8;
      label = 3; break;
    case 10: 
      var $11=$b_addr;
      var $arrayidx10=(($11+96)|0);
      var $12=HEAPF64[(($arrayidx10)>>3)];
      var $13=$v_addr;
      var $arrayidx11=(($13)|0);
      var $14=HEAPF64[(($arrayidx11)>>3)];
      var $add12=($12)+($14);
      var $15=$b_addr;
      var $arrayidx13=(($15+96)|0);
      HEAPF64[(($arrayidx13)>>3)]=$add12;
      var $16=$b_addr;
      var $arrayidx14=(($16+104)|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $18=$v_addr;
      var $arrayidx15=(($18+8)|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $add16=($17)+($19);
      var $20=$b_addr;
      var $arrayidx17=(($20+104)|0);
      HEAPF64[(($arrayidx17)>>3)]=$add16;
      var $21=$b_addr;
      var $arrayidx18=(($21+112)|0);
      var $22=HEAPF64[(($arrayidx18)>>3)];
      var $23=$v_addr;
      var $arrayidx19=(($23+16)|0);
      var $24=HEAPF64[(($arrayidx19)>>3)];
      var $add20=($22)+($24);
      var $25=$b_addr;
      var $arrayidx21=(($25+112)|0);
      HEAPF64[(($arrayidx21)>>3)]=$add20;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_trans"] = _tmat_trans;
function _tmat_rot_vector($a, $b, $angle, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $angle_addr;
      var $v_addr;
      var $c=__stackBase__;
      var $ca;
      var $d=(__stackBase__)+(128);
      var $i;
      var $j;
      var $sa;
      var $theta;
      $a_addr=$a;
      $b_addr=$b;
      $angle_addr=$angle;
      $v_addr=$v;
      var $0=$v_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=Math.pow($1, 2);
      var $3=$v_addr;
      var $arrayidx1=(($3+8)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $5=Math.pow($4, 2);
      var $add=($2)+($5);
      var $6=$v_addr;
      var $arrayidx2=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=Math.pow($7, 2);
      var $add3=($add)+($8);
      var $cmp=$add3 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 13; break;
    case 4: 
      var $9=$angle_addr;
      var $call=_degrees_to_radians($9);
      $theta=$call;
      var $arraydecay=(($c)|0);
      _tmat_init($arraydecay);
      var $10=$theta;
      var $call4=Math.cos($10);
      $ca=$call4;
      var $11=$theta;
      var $call5=Math.sin($11);
      $sa=$call5;
      var $12=$v_addr;
      var $arrayidx6=(($12)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $14=$v_addr;
      var $arrayidx7=(($14)|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $mul=($13)*($15);
      var $16=$ca;
      var $17=$v_addr;
      var $arrayidx8=(($17)|0);
      var $18=HEAPF64[(($arrayidx8)>>3)];
      var $19=$v_addr;
      var $arrayidx9=(($19)|0);
      var $20=HEAPF64[(($arrayidx9)>>3)];
      var $mul10=($18)*($20);
      var $sub=(1)-($mul10);
      var $mul11=($16)*($sub);
      var $add12=($mul)+($mul11);
      var $arrayidx13=(($c)|0);
      HEAPF64[(($arrayidx13)>>3)]=$add12;
      var $21=$ca;
      var $sub14=(1)-($21);
      var $22=$v_addr;
      var $arrayidx15=(($22)|0);
      var $23=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($sub14)*($23);
      var $24=$v_addr;
      var $arrayidx17=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx17)>>3)];
      var $mul18=($mul16)*($25);
      var $26=$sa;
      var $27=$v_addr;
      var $arrayidx19=(($27+16)|0);
      var $28=HEAPF64[(($arrayidx19)>>3)];
      var $mul20=($26)*($28);
      var $sub21=($mul18)-($mul20);
      var $arrayidx22=(($c+32)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $29=$ca;
      var $sub23=(1)-($29);
      var $30=$v_addr;
      var $arrayidx24=(($30)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $mul25=($sub23)*($31);
      var $32=$v_addr;
      var $arrayidx26=(($32+16)|0);
      var $33=HEAPF64[(($arrayidx26)>>3)];
      var $mul27=($mul25)*($33);
      var $34=$sa;
      var $35=$v_addr;
      var $arrayidx28=(($35+8)|0);
      var $36=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($34)*($36);
      var $add30=($mul27)+($mul29);
      var $arrayidx31=(($c+64)|0);
      HEAPF64[(($arrayidx31)>>3)]=$add30;
      var $37=$ca;
      var $sub32=(1)-($37);
      var $38=$v_addr;
      var $arrayidx33=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($sub32)*($39);
      var $40=$v_addr;
      var $arrayidx35=(($40)|0);
      var $41=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($mul34)*($41);
      var $42=$sa;
      var $43=$v_addr;
      var $arrayidx37=(($43+16)|0);
      var $44=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($42)*($44);
      var $add39=($mul36)+($mul38);
      var $arrayidx40=(($c+8)|0);
      HEAPF64[(($arrayidx40)>>3)]=$add39;
      var $45=$v_addr;
      var $arrayidx41=(($45+8)|0);
      var $46=HEAPF64[(($arrayidx41)>>3)];
      var $47=$v_addr;
      var $arrayidx42=(($47+8)|0);
      var $48=HEAPF64[(($arrayidx42)>>3)];
      var $mul43=($46)*($48);
      var $49=$ca;
      var $50=$v_addr;
      var $arrayidx44=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx44)>>3)];
      var $52=$v_addr;
      var $arrayidx45=(($52+8)|0);
      var $53=HEAPF64[(($arrayidx45)>>3)];
      var $mul46=($51)*($53);
      var $sub47=(1)-($mul46);
      var $mul48=($49)*($sub47);
      var $add49=($mul43)+($mul48);
      var $arrayidx50=(($c+40)|0);
      HEAPF64[(($arrayidx50)>>3)]=$add49;
      var $54=$ca;
      var $sub51=(1)-($54);
      var $55=$v_addr;
      var $arrayidx52=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx52)>>3)];
      var $mul53=($sub51)*($56);
      var $57=$v_addr;
      var $arrayidx54=(($57+16)|0);
      var $58=HEAPF64[(($arrayidx54)>>3)];
      var $mul55=($mul53)*($58);
      var $59=$sa;
      var $60=$v_addr;
      var $arrayidx56=(($60)|0);
      var $61=HEAPF64[(($arrayidx56)>>3)];
      var $mul57=($59)*($61);
      var $sub58=($mul55)-($mul57);
      var $arrayidx59=(($c+72)|0);
      HEAPF64[(($arrayidx59)>>3)]=$sub58;
      var $62=$ca;
      var $sub60=(1)-($62);
      var $63=$v_addr;
      var $arrayidx61=(($63+16)|0);
      var $64=HEAPF64[(($arrayidx61)>>3)];
      var $mul62=($sub60)*($64);
      var $65=$v_addr;
      var $arrayidx63=(($65)|0);
      var $66=HEAPF64[(($arrayidx63)>>3)];
      var $mul64=($mul62)*($66);
      var $67=$sa;
      var $68=$v_addr;
      var $arrayidx65=(($68+8)|0);
      var $69=HEAPF64[(($arrayidx65)>>3)];
      var $mul66=($67)*($69);
      var $sub67=($mul64)-($mul66);
      var $arrayidx68=(($c+16)|0);
      HEAPF64[(($arrayidx68)>>3)]=$sub67;
      var $70=$ca;
      var $sub69=(1)-($70);
      var $71=$v_addr;
      var $arrayidx70=(($71+16)|0);
      var $72=HEAPF64[(($arrayidx70)>>3)];
      var $mul71=($sub69)*($72);
      var $73=$v_addr;
      var $arrayidx72=(($73+8)|0);
      var $74=HEAPF64[(($arrayidx72)>>3)];
      var $mul73=($mul71)*($74);
      var $75=$sa;
      var $76=$v_addr;
      var $arrayidx74=(($76)|0);
      var $77=HEAPF64[(($arrayidx74)>>3)];
      var $mul75=($75)*($77);
      var $add76=($mul73)+($mul75);
      var $arrayidx77=(($c+48)|0);
      HEAPF64[(($arrayidx77)>>3)]=$add76;
      var $78=$v_addr;
      var $arrayidx78=(($78+16)|0);
      var $79=HEAPF64[(($arrayidx78)>>3)];
      var $80=$v_addr;
      var $arrayidx79=(($80+16)|0);
      var $81=HEAPF64[(($arrayidx79)>>3)];
      var $mul80=($79)*($81);
      var $82=$ca;
      var $83=$v_addr;
      var $arrayidx81=(($83+16)|0);
      var $84=HEAPF64[(($arrayidx81)>>3)];
      var $85=$v_addr;
      var $arrayidx82=(($85+16)|0);
      var $86=HEAPF64[(($arrayidx82)>>3)];
      var $mul83=($84)*($86);
      var $sub84=(1)-($mul83);
      var $mul85=($82)*($sub84);
      var $add86=($mul80)+($mul85);
      var $arrayidx87=(($c+80)|0);
      HEAPF64[(($arrayidx87)>>3)]=$add86;
      var $arraydecay88=(($c)|0);
      var $87=$a_addr;
      var $arraydecay89=(($d)|0);
      _tmat_mxm($arraydecay88, $87, $arraydecay89);
      $i=0;
      label = 5; break;
    case 5: 
      var $88=$i;
      var $cmp90=(($88)|(0)) < 4;
      if ($cmp90) { label = 6; break; } else { label = 12; break; }
    case 6: 
      $j=0;
      label = 7; break;
    case 7: 
      var $89=$j;
      var $cmp92=(($89)|(0)) < 4;
      if ($cmp92) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $90=$i;
      var $91=$j;
      var $mul94=($91<<2);
      var $add95=((($90)+($mul94))|0);
      var $arrayidx96=(($d+($add95<<3))|0);
      var $92=HEAPF64[(($arrayidx96)>>3)];
      var $93=$i;
      var $94=$j;
      var $mul97=($94<<2);
      var $add98=((($93)+($mul97))|0);
      var $95=$b_addr;
      var $arrayidx99=(($95+($add98<<3))|0);
      HEAPF64[(($arrayidx99)>>3)]=$92;
      label = 9; break;
    case 9: 
      var $96=$j;
      var $inc=((($96)+(1))|0);
      $j=$inc;
      label = 7; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $97=$i;
      var $inc101=((($97)+(1))|0);
      $i=$inc101;
      label = 5; break;
    case 12: 
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_rot_vector"] = _tmat_rot_vector;
function _tmat_scale($a, $b, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $s_addr;
      var $c=__stackBase__;
      var $d=(__stackBase__)+(128);
      var $i;
      var $j;
      $a_addr=$a;
      $b_addr=$b;
      $s_addr=$s;
      var $arraydecay=(($c)|0);
      _tmat_init($arraydecay);
      var $0=$s_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $arrayidx1=(($c)|0);
      HEAPF64[(($arrayidx1)>>3)]=$1;
      var $2=$s_addr;
      var $arrayidx2=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx2)>>3)];
      var $arrayidx3=(($c+40)|0);
      HEAPF64[(($arrayidx3)>>3)]=$3;
      var $4=$s_addr;
      var $arrayidx4=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $arrayidx5=(($c+80)|0);
      HEAPF64[(($arrayidx5)>>3)]=$5;
      var $arraydecay6=(($c)|0);
      var $6=$a_addr;
      var $arraydecay7=(($d)|0);
      _tmat_mxm($arraydecay6, $6, $arraydecay7);
      $i=0;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $cmp=(($7)|(0)) < 4;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $8=$j;
      var $cmp9=(($8)|(0)) < 4;
      if ($cmp9) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$i;
      var $10=$j;
      var $mul=($10<<2);
      var $add=((($9)+($mul))|0);
      var $arrayidx11=(($d+($add<<3))|0);
      var $11=HEAPF64[(($arrayidx11)>>3)];
      var $12=$i;
      var $13=$j;
      var $mul12=($13<<2);
      var $add13=((($12)+($mul12))|0);
      var $14=$b_addr;
      var $arrayidx14=(($14+($add13<<3))|0);
      HEAPF64[(($arrayidx14)>>3)]=$11;
      label = 7; break;
    case 7: 
      var $15=$j;
      var $inc=((($15)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $16=$i;
      var $inc16=((($16)+(1))|0);
      $i=$inc16;
      label = 3; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_scale"] = _tmat_scale;
function _tp_to_xyz($theta, $phi) {
  var label = 0;
  var $theta_addr;
  var $phi_addr;
  var $v;
  $theta_addr=$theta;
  $phi_addr=$phi;
  var $call=_malloc(24);
  var $0=$call;
  $v=$0;
  var $1=$theta_addr;
  var $call1=Math.cos($1);
  var $2=$phi_addr;
  var $call2=Math.sin($2);
  var $mul=($call1)*($call2);
  var $3=$v;
  var $arrayidx=(($3)|0);
  HEAPF64[(($arrayidx)>>3)]=$mul;
  var $4=$theta_addr;
  var $call3=Math.sin($4);
  var $5=$phi_addr;
  var $call4=Math.sin($5);
  var $mul5=($call3)*($call4);
  var $6=$v;
  var $arrayidx6=(($6+8)|0);
  HEAPF64[(($arrayidx6)>>3)]=$mul5;
  var $7=$phi_addr;
  var $call7=Math.cos($7);
  var $8=$v;
  var $arrayidx8=(($8+16)|0);
  HEAPF64[(($arrayidx8)>>3)]=$call7;
  var $9=$v;
  return $9;
}
Module["_tp_to_xyz"] = _tp_to_xyz;
function _tmat_rot_axis($a, $b, $angle, $axis) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $angle_addr;
      var $axis_addr;
      var $c=__stackBase__;
      var $d=(__stackBase__)+(128);
      var $i;
      var $j;
      var $theta;
      $a_addr=$a;
      $b_addr=$b;
      $angle_addr=$angle;
      $axis_addr=$axis;
      var $0=$angle_addr;
      var $call=_degrees_to_radians($0);
      $theta=$call;
      var $arraydecay=(($c)|0);
      _tmat_init($arraydecay);
      var $1=$axis_addr;
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|(0))==88;
      if ($cmp) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$axis_addr;
      var $conv2=(($2 << 24) >> 24);
      var $cmp3=(($conv2)|(0))==120;
      if ($cmp3) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $3=$theta;
      var $call5=Math.cos($3);
      var $arrayidx=(($c+40)|0);
      HEAPF64[(($arrayidx)>>3)]=$call5;
      var $4=$theta;
      var $call6=Math.sin($4);
      var $sub=(-$call6);
      var $arrayidx7=(($c+72)|0);
      HEAPF64[(($arrayidx7)>>3)]=$sub;
      var $5=$theta;
      var $call8=Math.sin($5);
      var $arrayidx9=(($c+48)|0);
      HEAPF64[(($arrayidx9)>>3)]=$call8;
      var $6=$theta;
      var $call10=Math.cos($6);
      var $arrayidx11=(($c+80)|0);
      HEAPF64[(($arrayidx11)>>3)]=$call10;
      label = 14; break;
    case 5: 
      var $7=$axis_addr;
      var $conv12=(($7 << 24) >> 24);
      var $cmp13=(($conv12)|(0))==89;
      if ($cmp13) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $8=$axis_addr;
      var $conv16=(($8 << 24) >> 24);
      var $cmp17=(($conv16)|(0))==121;
      if ($cmp17) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $9=$theta;
      var $call20=Math.cos($9);
      var $arrayidx21=(($c)|0);
      HEAPF64[(($arrayidx21)>>3)]=$call20;
      var $10=$theta;
      var $call22=Math.sin($10);
      var $arrayidx23=(($c+64)|0);
      HEAPF64[(($arrayidx23)>>3)]=$call22;
      var $11=$theta;
      var $call24=Math.sin($11);
      var $sub25=(-$call24);
      var $arrayidx26=(($c+16)|0);
      HEAPF64[(($arrayidx26)>>3)]=$sub25;
      var $12=$theta;
      var $call27=Math.cos($12);
      var $arrayidx28=(($c+80)|0);
      HEAPF64[(($arrayidx28)>>3)]=$call27;
      label = 13; break;
    case 8: 
      var $13=$axis_addr;
      var $conv30=(($13 << 24) >> 24);
      var $cmp31=(($conv30)|(0))==90;
      if ($cmp31) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $14=$axis_addr;
      var $conv34=(($14 << 24) >> 24);
      var $cmp35=(($conv34)|(0))==122;
      if ($cmp35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $15=$theta;
      var $call38=Math.cos($15);
      var $arrayidx39=(($c)|0);
      HEAPF64[(($arrayidx39)>>3)]=$call38;
      var $16=$theta;
      var $call40=Math.sin($16);
      var $sub41=(-$call40);
      var $arrayidx42=(($c+32)|0);
      HEAPF64[(($arrayidx42)>>3)]=$sub41;
      var $17=$theta;
      var $call43=Math.sin($17);
      var $arrayidx44=(($c+8)|0);
      HEAPF64[(($arrayidx44)>>3)]=$call43;
      var $18=$theta;
      var $call45=Math.cos($18);
      var $arrayidx46=(($c+40)|0);
      HEAPF64[(($arrayidx46)>>3)]=$call45;
      label = 12; break;
    case 11: 
      var $19=HEAP32[((_stderr)>>2)];
      var $call48=_fprintf($19, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=HEAP32[((_stderr)>>2)];
      var $call49=_fprintf($20, ((12264)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAP32[((_stderr)>>2)];
      var $22=$axis_addr;
      var $conv50=(($22 << 24) >> 24);
      var $call51=_fprintf($21, ((12232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$conv50,tempInt));
      var $23=HEAP32[((_stderr)>>2)];
      var $call52=_fprintf($23, ((12192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $arraydecay55=(($c)|0);
      var $24=$a_addr;
      var $arraydecay56=(($d)|0);
      _tmat_mxm($arraydecay55, $24, $arraydecay56);
      $i=0;
      label = 15; break;
    case 15: 
      var $25=$i;
      var $cmp57=(($25)|(0)) < 4;
      if ($cmp57) { label = 16; break; } else { label = 22; break; }
    case 16: 
      $j=0;
      label = 17; break;
    case 17: 
      var $26=$j;
      var $cmp60=(($26)|(0)) < 4;
      if ($cmp60) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $27=$i;
      var $28=$j;
      var $mul=($28<<2);
      var $add=((($27)+($mul))|0);
      var $arrayidx63=(($d+($add<<3))|0);
      var $29=HEAPF64[(($arrayidx63)>>3)];
      var $30=$i;
      var $31=$j;
      var $mul64=($31<<2);
      var $add65=((($30)+($mul64))|0);
      var $32=$b_addr;
      var $arrayidx66=(($32+($add65<<3))|0);
      HEAPF64[(($arrayidx66)>>3)]=$29;
      label = 19; break;
    case 19: 
      var $33=$j;
      var $inc=((($33)+(1))|0);
      $j=$inc;
      label = 17; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $34=$i;
      var $inc68=((($34)+(1))|0);
      $i=$inc68;
      label = 15; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_rot_axis"] = _tmat_rot_axis;
function _tmat_shear($a, $b, $axis, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $a_addr;
      var $b_addr;
      var $axis_addr;
      var $s_addr;
      var $c=__stackBase__;
      var $d=(__stackBase__)+(128);
      var $i;
      var $j;
      $a_addr=$a;
      $b_addr=$b;
      $axis_addr=$axis;
      $s_addr=$s;
      var $arraydecay=(($c)|0);
      _tmat_init($arraydecay);
      var $0=$axis_addr;
      var $call=_strcmp($0, ((12184)|0));
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=$axis_addr;
      var $call1=_strcmp($1, ((12176)|0));
      var $tobool2=(($call1)|(0))!=0;
      if ($tobool2) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $2=$s_addr;
      var $arrayidx=(($c+32)|0);
      HEAPF64[(($arrayidx)>>3)]=$2;
      label = 26; break;
    case 5: 
      var $3=$axis_addr;
      var $call3=_strcmp($3, ((12152)|0));
      var $tobool4=(($call3)|(0))!=0;
      if ($tobool4) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $4=$axis_addr;
      var $call6=_strcmp($4, ((12144)|0));
      var $tobool7=(($call6)|(0))!=0;
      if ($tobool7) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $5=$s_addr;
      var $arrayidx9=(($c+64)|0);
      HEAPF64[(($arrayidx9)>>3)]=$5;
      label = 25; break;
    case 8: 
      var $6=$axis_addr;
      var $call11=_strcmp($6, ((12104)|0));
      var $tobool12=(($call11)|(0))!=0;
      if ($tobool12) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $7=$axis_addr;
      var $call14=_strcmp($7, ((12096)|0));
      var $tobool15=(($call14)|(0))!=0;
      if ($tobool15) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $8=$s_addr;
      var $arrayidx17=(($c+8)|0);
      HEAPF64[(($arrayidx17)>>3)]=$8;
      label = 24; break;
    case 11: 
      var $9=$axis_addr;
      var $call19=_strcmp($9, ((12088)|0));
      var $tobool20=(($call19)|(0))!=0;
      if ($tobool20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $10=$axis_addr;
      var $call22=_strcmp($10, ((12080)|0));
      var $tobool23=(($call22)|(0))!=0;
      if ($tobool23) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $11=$s_addr;
      var $arrayidx25=(($c+72)|0);
      HEAPF64[(($arrayidx25)>>3)]=$11;
      label = 23; break;
    case 14: 
      var $12=$axis_addr;
      var $call27=_strcmp($12, ((12072)|0));
      var $tobool28=(($call27)|(0))!=0;
      if ($tobool28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $13=$axis_addr;
      var $call30=_strcmp($13, ((12064)|0));
      var $tobool31=(($call30)|(0))!=0;
      if ($tobool31) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $14=$s_addr;
      var $arrayidx33=(($c+16)|0);
      HEAPF64[(($arrayidx33)>>3)]=$14;
      label = 22; break;
    case 17: 
      var $15=$axis_addr;
      var $call35=_strcmp($15, ((12056)|0));
      var $tobool36=(($call35)|(0))!=0;
      if ($tobool36) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $16=$axis_addr;
      var $call38=_strcmp($16, ((12048)|0));
      var $tobool39=(($call38)|(0))!=0;
      if ($tobool39) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $17=$s_addr;
      var $arrayidx41=(($c+48)|0);
      HEAPF64[(($arrayidx41)>>3)]=$17;
      label = 21; break;
    case 20: 
      var $18=HEAP32[((_stderr)>>2)];
      var $call43=_fprintf($18, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $19=HEAP32[((_stderr)>>2)];
      var $call44=_fprintf($19, ((11976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=HEAP32[((_stderr)>>2)];
      var $21=$axis_addr;
      var $call45=_fprintf($20, ((11944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$21,tempInt));
      var $22=HEAP32[((_stderr)>>2)];
      var $call46=_fprintf($22, ((11880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $arraydecay52=(($c)|0);
      var $23=$a_addr;
      var $arraydecay53=(($d)|0);
      _tmat_mxm($arraydecay52, $23, $arraydecay53);
      $i=0;
      label = 27; break;
    case 27: 
      var $24=$i;
      var $cmp=(($24)|(0)) < 4;
      if ($cmp) { label = 28; break; } else { label = 34; break; }
    case 28: 
      $j=0;
      label = 29; break;
    case 29: 
      var $25=$j;
      var $cmp55=(($25)|(0)) < 4;
      if ($cmp55) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $26=$i;
      var $27=$j;
      var $mul=($27<<2);
      var $add=((($26)+($mul))|0);
      var $arrayidx57=(($d+($add<<3))|0);
      var $28=HEAPF64[(($arrayidx57)>>3)];
      var $29=$i;
      var $30=$j;
      var $mul58=($30<<2);
      var $add59=((($29)+($mul58))|0);
      var $31=$b_addr;
      var $arrayidx60=(($31+($add59<<3))|0);
      HEAPF64[(($arrayidx60)>>3)]=$28;
      label = 31; break;
    case 31: 
      var $32=$j;
      var $inc=((($32)+(1))|0);
      $j=$inc;
      label = 29; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $33=$i;
      var $inc62=((($33)+(1))|0);
      $i=$inc62;
      label = 27; break;
    case 34: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tmat_shear"] = _tmat_shear;
function _triangle_angles_2d($t, $angle) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $angle_addr;
      var $a;
      var $b;
      var $c;
      var $pi;
      $t_addr=$t;
      $angle_addr=$angle;
      $pi=3.141592653589793;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      $a=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      $b=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      $c=$call20;
      var $30=$a;
      var $cmp=$30 == 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $31=$b;
      var $cmp21=$31 == 0;
      if ($cmp21) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $32=$c;
      var $cmp23=$32 == 0;
      if ($cmp23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=$pi;
      var $mul=($33)*(2);
      var $div=($mul)/(3);
      var $34=$angle_addr;
      var $arrayidx24=(($34)|0);
      HEAPF64[(($arrayidx24)>>3)]=$div;
      var $35=$pi;
      var $mul25=($35)*(2);
      var $div26=($mul25)/(3);
      var $36=$angle_addr;
      var $arrayidx27=(($36+8)|0);
      HEAPF64[(($arrayidx27)>>3)]=$div26;
      var $37=$pi;
      var $mul28=($37)*(2);
      var $div29=($mul28)/(3);
      var $38=$angle_addr;
      var $arrayidx30=(($38+16)|0);
      HEAPF64[(($arrayidx30)>>3)]=$div29;
      label = 19; break;
    case 6: 
      var $39=$c;
      var $cmp31=$39 == 0;
      if ($cmp31) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $40=$a;
      var $cmp32=$40 == 0;
      if ($cmp32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $41=$pi;
      var $42=$angle_addr;
      var $arrayidx34=(($42)|0);
      HEAPF64[(($arrayidx34)>>3)]=$41;
      label = 10; break;
    case 9: 
      var $43=$c;
      var $44=$c;
      var $mul35=($43)*($44);
      var $45=$a;
      var $46=$a;
      var $mul36=($45)*($46);
      var $add37=($mul35)+($mul36);
      var $47=$b;
      var $48=$b;
      var $mul38=($47)*($48);
      var $sub39=($add37)-($mul38);
      var $49=$c;
      var $mul40=($49)*(2);
      var $50=$a;
      var $mul41=($mul40)*($50);
      var $div42=($sub39)/($mul41);
      var $call43=_r8_acos($div42);
      var $51=$angle_addr;
      var $arrayidx44=(($51)|0);
      HEAPF64[(($arrayidx44)>>3)]=$call43;
      label = 10; break;
    case 10: 
      var $52=$a;
      var $cmp46=$52 == 0;
      if ($cmp46) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $53=$b;
      var $cmp48=$53 == 0;
      if ($cmp48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $54=$pi;
      var $55=$angle_addr;
      var $arrayidx50=(($55+8)|0);
      HEAPF64[(($arrayidx50)>>3)]=$54;
      label = 14; break;
    case 13: 
      var $56=$a;
      var $57=$a;
      var $mul52=($56)*($57);
      var $58=$b;
      var $59=$b;
      var $mul53=($58)*($59);
      var $add54=($mul52)+($mul53);
      var $60=$c;
      var $61=$c;
      var $mul55=($60)*($61);
      var $sub56=($add54)-($mul55);
      var $62=$a;
      var $mul57=($62)*(2);
      var $63=$b;
      var $mul58=($mul57)*($63);
      var $div59=($sub56)/($mul58);
      var $call60=_r8_acos($div59);
      var $64=$angle_addr;
      var $arrayidx61=(($64+8)|0);
      HEAPF64[(($arrayidx61)>>3)]=$call60;
      label = 14; break;
    case 14: 
      var $65=$b;
      var $cmp63=$65 == 0;
      if ($cmp63) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $66=$c;
      var $cmp65=$66 == 0;
      if ($cmp65) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $67=$pi;
      var $68=$angle_addr;
      var $arrayidx67=(($68+16)|0);
      HEAPF64[(($arrayidx67)>>3)]=$67;
      label = 18; break;
    case 17: 
      var $69=$b;
      var $70=$b;
      var $mul69=($69)*($70);
      var $71=$c;
      var $72=$c;
      var $mul70=($71)*($72);
      var $add71=($mul69)+($mul70);
      var $73=$a;
      var $74=$a;
      var $mul72=($73)*($74);
      var $sub73=($add71)-($mul72);
      var $75=$b;
      var $mul74=($75)*(2);
      var $76=$c;
      var $mul75=($mul74)*($76);
      var $div76=($sub73)/($mul75);
      var $call77=_r8_acos($div76);
      var $77=$angle_addr;
      var $arrayidx78=(($77+16)|0);
      HEAPF64[(($arrayidx78)>>3)]=$call77;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_angles_2d"] = _triangle_angles_2d;
function _triangle_angles_2d_new($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $a;
      var $angle;
      var $b;
      var $c;
      var $pi;
      $t_addr=$t;
      $pi=3.141592653589793;
      var $call=_malloc(24);
      var $0=$call;
      $angle=$0;
      var $1=$t_addr;
      var $arrayidx=(($1+16)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$t_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=Math.pow($sub, 2);
      var $6=$t_addr;
      var $arrayidx2=(($6+24)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$t_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $10=Math.pow($sub4, 2);
      var $add=($5)+($10);
      var $call5=Math.sqrt($add);
      $a=$call5;
      var $11=$t_addr;
      var $arrayidx6=(($11+32)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $13=$t_addr;
      var $arrayidx7=(($13+16)|0);
      var $14=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($12)-($14);
      var $15=Math.pow($sub8, 2);
      var $16=$t_addr;
      var $arrayidx9=(($16+40)|0);
      var $17=HEAPF64[(($arrayidx9)>>3)];
      var $18=$t_addr;
      var $arrayidx10=(($18+24)|0);
      var $19=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($17)-($19);
      var $20=Math.pow($sub11, 2);
      var $add12=($15)+($20);
      var $call13=Math.sqrt($add12);
      $b=$call13;
      var $21=$t_addr;
      var $arrayidx14=(($21)|0);
      var $22=HEAPF64[(($arrayidx14)>>3)];
      var $23=$t_addr;
      var $arrayidx15=(($23+32)|0);
      var $24=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($22)-($24);
      var $25=Math.pow($sub16, 2);
      var $26=$t_addr;
      var $arrayidx17=(($26+8)|0);
      var $27=HEAPF64[(($arrayidx17)>>3)];
      var $28=$t_addr;
      var $arrayidx18=(($28+40)|0);
      var $29=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($27)-($29);
      var $30=Math.pow($sub19, 2);
      var $add20=($25)+($30);
      var $call21=Math.sqrt($add20);
      $c=$call21;
      var $31=$a;
      var $cmp=$31 == 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $32=$b;
      var $cmp22=$32 == 0;
      if ($cmp22) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $33=$c;
      var $cmp24=$33 == 0;
      if ($cmp24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $34=$pi;
      var $mul=($34)*(2);
      var $div=($mul)/(3);
      var $35=$angle;
      var $arrayidx25=(($35)|0);
      HEAPF64[(($arrayidx25)>>3)]=$div;
      var $36=$pi;
      var $mul26=($36)*(2);
      var $div27=($mul26)/(3);
      var $37=$angle;
      var $arrayidx28=(($37+8)|0);
      HEAPF64[(($arrayidx28)>>3)]=$div27;
      var $38=$pi;
      var $mul29=($38)*(2);
      var $div30=($mul29)/(3);
      var $39=$angle;
      var $arrayidx31=(($39+16)|0);
      HEAPF64[(($arrayidx31)>>3)]=$div30;
      var $40=$angle;
      $retval=$40;
      label = 19; break;
    case 6: 
      var $41=$c;
      var $cmp32=$41 == 0;
      if ($cmp32) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $42=$a;
      var $cmp33=$42 == 0;
      if ($cmp33) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $43=$pi;
      var $44=$angle;
      var $arrayidx35=(($44)|0);
      HEAPF64[(($arrayidx35)>>3)]=$43;
      label = 10; break;
    case 9: 
      var $45=$c;
      var $46=$c;
      var $mul36=($45)*($46);
      var $47=$a;
      var $48=$a;
      var $mul37=($47)*($48);
      var $add38=($mul36)+($mul37);
      var $49=$b;
      var $50=$b;
      var $mul39=($49)*($50);
      var $sub40=($add38)-($mul39);
      var $51=$c;
      var $mul41=($51)*(2);
      var $52=$a;
      var $mul42=($mul41)*($52);
      var $div43=($sub40)/($mul42);
      var $call44=_r8_acos($div43);
      var $53=$angle;
      var $arrayidx45=(($53)|0);
      HEAPF64[(($arrayidx45)>>3)]=$call44;
      label = 10; break;
    case 10: 
      var $54=$a;
      var $cmp47=$54 == 0;
      if ($cmp47) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $55=$b;
      var $cmp49=$55 == 0;
      if ($cmp49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $56=$pi;
      var $57=$angle;
      var $arrayidx51=(($57+8)|0);
      HEAPF64[(($arrayidx51)>>3)]=$56;
      label = 14; break;
    case 13: 
      var $58=$a;
      var $59=$a;
      var $mul53=($58)*($59);
      var $60=$b;
      var $61=$b;
      var $mul54=($60)*($61);
      var $add55=($mul53)+($mul54);
      var $62=$c;
      var $63=$c;
      var $mul56=($62)*($63);
      var $sub57=($add55)-($mul56);
      var $64=$a;
      var $mul58=($64)*(2);
      var $65=$b;
      var $mul59=($mul58)*($65);
      var $div60=($sub57)/($mul59);
      var $call61=_r8_acos($div60);
      var $66=$angle;
      var $arrayidx62=(($66+8)|0);
      HEAPF64[(($arrayidx62)>>3)]=$call61;
      label = 14; break;
    case 14: 
      var $67=$b;
      var $cmp64=$67 == 0;
      if ($cmp64) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $68=$c;
      var $cmp66=$68 == 0;
      if ($cmp66) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $69=$pi;
      var $70=$angle;
      var $arrayidx68=(($70+16)|0);
      HEAPF64[(($arrayidx68)>>3)]=$69;
      label = 18; break;
    case 17: 
      var $71=$b;
      var $72=$b;
      var $mul70=($71)*($72);
      var $73=$c;
      var $74=$c;
      var $mul71=($73)*($74);
      var $add72=($mul70)+($mul71);
      var $75=$a;
      var $76=$a;
      var $mul73=($75)*($76);
      var $sub74=($add72)-($mul73);
      var $77=$b;
      var $mul75=($77)*(2);
      var $78=$c;
      var $mul76=($mul75)*($78);
      var $div77=($sub74)/($mul76);
      var $call78=_r8_acos($div77);
      var $79=$angle;
      var $arrayidx79=(($79+16)|0);
      HEAPF64[(($arrayidx79)>>3)]=$call78;
      label = 18; break;
    case 18: 
      var $80=$angle;
      $retval=$80;
      label = 19; break;
    case 19: 
      var $81=$retval;
      return $81;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_angles_2d_new"] = _triangle_angles_2d_new;
function _triangle_angles_3d_new($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $a;
      var $angle;
      var $b;
      var $c;
      var $pi;
      $t_addr=$t;
      $pi=3.141592653589793;
      var $call=_malloc(24);
      var $0=$call;
      $angle=$0;
      var $1=$t_addr;
      var $arrayidx=(($1+24)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$t_addr;
      var $arrayidx1=(($3)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($2)-($4);
      var $5=Math.pow($sub, 2);
      var $6=$t_addr;
      var $arrayidx2=(($6+32)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=$t_addr;
      var $arrayidx3=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($7)-($9);
      var $10=Math.pow($sub4, 2);
      var $add=($5)+($10);
      var $11=$t_addr;
      var $arrayidx5=(($11+40)|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $13=$t_addr;
      var $arrayidx6=(($13+16)|0);
      var $14=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($12)-($14);
      var $15=Math.pow($sub7, 2);
      var $add8=($add)+($15);
      var $call9=Math.sqrt($add8);
      $a=$call9;
      var $16=$t_addr;
      var $arrayidx10=(($16+48)|0);
      var $17=HEAPF64[(($arrayidx10)>>3)];
      var $18=$t_addr;
      var $arrayidx11=(($18+24)|0);
      var $19=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($17)-($19);
      var $20=Math.pow($sub12, 2);
      var $21=$t_addr;
      var $arrayidx13=(($21+56)|0);
      var $22=HEAPF64[(($arrayidx13)>>3)];
      var $23=$t_addr;
      var $arrayidx14=(($23+32)|0);
      var $24=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($22)-($24);
      var $25=Math.pow($sub15, 2);
      var $add16=($20)+($25);
      var $26=$t_addr;
      var $arrayidx17=(($26+64)|0);
      var $27=HEAPF64[(($arrayidx17)>>3)];
      var $28=$t_addr;
      var $arrayidx18=(($28+40)|0);
      var $29=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($27)-($29);
      var $30=Math.pow($sub19, 2);
      var $add20=($add16)+($30);
      var $call21=Math.sqrt($add20);
      $b=$call21;
      var $31=$t_addr;
      var $arrayidx22=(($31)|0);
      var $32=HEAPF64[(($arrayidx22)>>3)];
      var $33=$t_addr;
      var $arrayidx23=(($33+48)|0);
      var $34=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($32)-($34);
      var $35=Math.pow($sub24, 2);
      var $36=$t_addr;
      var $arrayidx25=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx25)>>3)];
      var $38=$t_addr;
      var $arrayidx26=(($38+56)|0);
      var $39=HEAPF64[(($arrayidx26)>>3)];
      var $sub27=($37)-($39);
      var $40=Math.pow($sub27, 2);
      var $add28=($35)+($40);
      var $41=$t_addr;
      var $arrayidx29=(($41+16)|0);
      var $42=HEAPF64[(($arrayidx29)>>3)];
      var $43=$t_addr;
      var $arrayidx30=(($43+64)|0);
      var $44=HEAPF64[(($arrayidx30)>>3)];
      var $sub31=($42)-($44);
      var $45=Math.pow($sub31, 2);
      var $add32=($add28)+($45);
      var $call33=Math.sqrt($add32);
      $c=$call33;
      var $46=$a;
      var $cmp=$46 == 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $47=$b;
      var $cmp34=$47 == 0;
      if ($cmp34) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $48=$c;
      var $cmp36=$48 == 0;
      if ($cmp36) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $49=$pi;
      var $mul=($49)*(2);
      var $div=($mul)/(3);
      var $50=$angle;
      var $arrayidx37=(($50)|0);
      HEAPF64[(($arrayidx37)>>3)]=$div;
      var $51=$pi;
      var $mul38=($51)*(2);
      var $div39=($mul38)/(3);
      var $52=$angle;
      var $arrayidx40=(($52+8)|0);
      HEAPF64[(($arrayidx40)>>3)]=$div39;
      var $53=$pi;
      var $mul41=($53)*(2);
      var $div42=($mul41)/(3);
      var $54=$angle;
      var $arrayidx43=(($54+16)|0);
      HEAPF64[(($arrayidx43)>>3)]=$div42;
      var $55=$angle;
      $retval=$55;
      label = 19; break;
    case 6: 
      var $56=$c;
      var $cmp44=$56 == 0;
      if ($cmp44) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $57=$a;
      var $cmp45=$57 == 0;
      if ($cmp45) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $58=$pi;
      var $59=$angle;
      var $arrayidx47=(($59)|0);
      HEAPF64[(($arrayidx47)>>3)]=$58;
      label = 10; break;
    case 9: 
      var $60=$c;
      var $61=$c;
      var $mul48=($60)*($61);
      var $62=$a;
      var $63=$a;
      var $mul49=($62)*($63);
      var $add50=($mul48)+($mul49);
      var $64=$b;
      var $65=$b;
      var $mul51=($64)*($65);
      var $sub52=($add50)-($mul51);
      var $66=$c;
      var $mul53=($66)*(2);
      var $67=$a;
      var $mul54=($mul53)*($67);
      var $div55=($sub52)/($mul54);
      var $call56=_r8_acos($div55);
      var $68=$angle;
      var $arrayidx57=(($68)|0);
      HEAPF64[(($arrayidx57)>>3)]=$call56;
      label = 10; break;
    case 10: 
      var $69=$a;
      var $cmp59=$69 == 0;
      if ($cmp59) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $70=$b;
      var $cmp61=$70 == 0;
      if ($cmp61) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $71=$pi;
      var $72=$angle;
      var $arrayidx63=(($72+8)|0);
      HEAPF64[(($arrayidx63)>>3)]=$71;
      label = 14; break;
    case 13: 
      var $73=$a;
      var $74=$a;
      var $mul65=($73)*($74);
      var $75=$b;
      var $76=$b;
      var $mul66=($75)*($76);
      var $add67=($mul65)+($mul66);
      var $77=$c;
      var $78=$c;
      var $mul68=($77)*($78);
      var $sub69=($add67)-($mul68);
      var $79=$a;
      var $mul70=($79)*(2);
      var $80=$b;
      var $mul71=($mul70)*($80);
      var $div72=($sub69)/($mul71);
      var $call73=_r8_acos($div72);
      var $81=$angle;
      var $arrayidx74=(($81+8)|0);
      HEAPF64[(($arrayidx74)>>3)]=$call73;
      label = 14; break;
    case 14: 
      var $82=$b;
      var $cmp76=$82 == 0;
      if ($cmp76) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $83=$c;
      var $cmp78=$83 == 0;
      if ($cmp78) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $84=$pi;
      var $85=$angle;
      var $arrayidx80=(($85+16)|0);
      HEAPF64[(($arrayidx80)>>3)]=$84;
      label = 18; break;
    case 17: 
      var $86=$b;
      var $87=$b;
      var $mul82=($86)*($87);
      var $88=$c;
      var $89=$c;
      var $mul83=($88)*($89);
      var $add84=($mul82)+($mul83);
      var $90=$a;
      var $91=$a;
      var $mul85=($90)*($91);
      var $sub86=($add84)-($mul85);
      var $92=$b;
      var $mul87=($92)*(2);
      var $93=$c;
      var $mul88=($mul87)*($93);
      var $div89=($sub86)/($mul88);
      var $call90=_r8_acos($div89);
      var $94=$angle;
      var $arrayidx91=(($94+16)|0);
      HEAPF64[(($arrayidx91)>>3)]=$call90;
      label = 18; break;
    case 18: 
      var $95=$angle;
      $retval=$95;
      label = 19; break;
    case 19: 
      var $96=$retval;
      return $96;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_angles_3d_new"] = _triangle_angles_3d_new;
function _triangle_area_3d_2($t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $alpha;
      var $area;
      var $base;
      var $dot;
      var $height;
      var $ph=__stackBase__;
      $t_addr=$t;
      var $0=$t_addr;
      var $arrayidx=(($0+24)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$t_addr;
      var $arrayidx2=(($4+48)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$t_addr;
      var $arrayidx3=(($6)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$t_addr;
      var $arrayidx5=(($8+32)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$t_addr;
      var $arrayidx6=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$t_addr;
      var $arrayidx8=(($12+56)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$t_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $add=($mul)+($mul11);
      var $16=$t_addr;
      var $arrayidx12=(($16+40)|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $18=$t_addr;
      var $arrayidx13=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($17)-($19);
      var $20=$t_addr;
      var $arrayidx15=(($20+64)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $22=$t_addr;
      var $arrayidx16=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($21)-($23);
      var $mul18=($sub14)*($sub17);
      var $add19=($add)+($mul18);
      $dot=$add19;
      var $24=$t_addr;
      var $arrayidx20=(($24+24)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$t_addr;
      var $arrayidx21=(($26)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=Math.pow($sub22, 2);
      var $29=$t_addr;
      var $arrayidx23=(($29+32)|0);
      var $30=HEAPF64[(($arrayidx23)>>3)];
      var $31=$t_addr;
      var $arrayidx24=(($31+8)|0);
      var $32=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($30)-($32);
      var $33=Math.pow($sub25, 2);
      var $add26=($28)+($33);
      var $34=$t_addr;
      var $arrayidx27=(($34+40)|0);
      var $35=HEAPF64[(($arrayidx27)>>3)];
      var $36=$t_addr;
      var $arrayidx28=(($36+16)|0);
      var $37=HEAPF64[(($arrayidx28)>>3)];
      var $sub29=($35)-($37);
      var $38=Math.pow($sub29, 2);
      var $add30=($add26)+($38);
      var $call=Math.sqrt($add30);
      $base=$call;
      var $39=$base;
      var $cmp=$39 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $height=0;
      label = 5; break;
    case 4: 
      var $40=$dot;
      var $41=$base;
      var $42=$base;
      var $mul31=($41)*($42);
      var $div=($40)/($mul31);
      $alpha=$div;
      var $43=$t_addr;
      var $arrayidx32=(($43)|0);
      var $44=HEAPF64[(($arrayidx32)>>3)];
      var $45=$alpha;
      var $46=$t_addr;
      var $arrayidx33=(($46+24)|0);
      var $47=HEAPF64[(($arrayidx33)>>3)];
      var $48=$t_addr;
      var $arrayidx34=(($48)|0);
      var $49=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($47)-($49);
      var $mul36=($45)*($sub35);
      var $add37=($44)+($mul36);
      var $arrayidx38=(($ph)|0);
      HEAPF64[(($arrayidx38)>>3)]=$add37;
      var $50=$t_addr;
      var $arrayidx39=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx39)>>3)];
      var $52=$alpha;
      var $53=$t_addr;
      var $arrayidx40=(($53+32)|0);
      var $54=HEAPF64[(($arrayidx40)>>3)];
      var $55=$t_addr;
      var $arrayidx41=(($55+8)|0);
      var $56=HEAPF64[(($arrayidx41)>>3)];
      var $sub42=($54)-($56);
      var $mul43=($52)*($sub42);
      var $add44=($51)+($mul43);
      var $arrayidx45=(($ph+8)|0);
      HEAPF64[(($arrayidx45)>>3)]=$add44;
      var $57=$t_addr;
      var $arrayidx46=(($57+16)|0);
      var $58=HEAPF64[(($arrayidx46)>>3)];
      var $59=$alpha;
      var $60=$t_addr;
      var $arrayidx47=(($60+40)|0);
      var $61=HEAPF64[(($arrayidx47)>>3)];
      var $62=$t_addr;
      var $arrayidx48=(($62+16)|0);
      var $63=HEAPF64[(($arrayidx48)>>3)];
      var $sub49=($61)-($63);
      var $mul50=($59)*($sub49);
      var $add51=($58)+($mul50);
      var $arrayidx52=(($ph+16)|0);
      HEAPF64[(($arrayidx52)>>3)]=$add51;
      var $arrayidx53=(($ph)|0);
      var $64=HEAPF64[(($arrayidx53)>>3)];
      var $65=$t_addr;
      var $arrayidx54=(($65+48)|0);
      var $66=HEAPF64[(($arrayidx54)>>3)];
      var $sub55=($64)-($66);
      var $67=Math.pow($sub55, 2);
      var $arrayidx56=(($ph+8)|0);
      var $68=HEAPF64[(($arrayidx56)>>3)];
      var $69=$t_addr;
      var $arrayidx57=(($69+56)|0);
      var $70=HEAPF64[(($arrayidx57)>>3)];
      var $sub58=($68)-($70);
      var $71=Math.pow($sub58, 2);
      var $add59=($67)+($71);
      var $arrayidx60=(($ph+16)|0);
      var $72=HEAPF64[(($arrayidx60)>>3)];
      var $73=$t_addr;
      var $arrayidx61=(($73+64)|0);
      var $74=HEAPF64[(($arrayidx61)>>3)];
      var $sub62=($72)-($74);
      var $75=Math.pow($sub62, 2);
      var $add63=($add59)+($75);
      var $call64=Math.sqrt($add63);
      $height=$call64;
      label = 5; break;
    case 5: 
      var $76=$base;
      var $mul65=($76)*(0.5);
      var $77=$height;
      var $mul66=($mul65)*($77);
      $area=$mul66;
      var $78=$area;
      STACKTOP = __stackBase__;
      return $78;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_area_3d_2"] = _triangle_area_3d_2;
function _triangle_area_3d_3($t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $area;
      var $i;
      var $j;
      var $jp1;
      var $s=__stackBase__;
      $t_addr=$t;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $1=$j;
      var $add=((($1)+(1))|0);
      var $rem=((((($add)|(0)))%(3))&-1);
      $jp1=$rem;
      var $2=$j;
      var $arrayidx=(($s+($2<<3))|0);
      HEAPF64[(($arrayidx)>>3)]=0;
      $i=0;
      label = 5; break;
    case 5: 
      var $3=$i;
      var $cmp2=(($3)|(0)) < 3;
      if ($cmp2) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $4=$j;
      var $arrayidx4=(($s+($4<<3))|0);
      var $5=HEAPF64[(($arrayidx4)>>3)];
      var $6=$i;
      var $7=$j;
      var $mul=((($7)*(3))&-1);
      var $add5=((($6)+($mul))|0);
      var $8=$t_addr;
      var $arrayidx6=(($8+($add5<<3))|0);
      var $9=HEAPF64[(($arrayidx6)>>3)];
      var $10=$i;
      var $11=$jp1;
      var $mul7=((($11)*(3))&-1);
      var $add8=((($10)+($mul7))|0);
      var $12=$t_addr;
      var $arrayidx9=(($12+($add8<<3))|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $sub=($9)-($13);
      var $14=Math.pow($sub, 2);
      var $add10=($5)+($14);
      var $15=$j;
      var $arrayidx11=(($s+($15<<3))|0);
      HEAPF64[(($arrayidx11)>>3)]=$add10;
      label = 7; break;
    case 7: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $17=$j;
      var $arrayidx12=(($s+($17<<3))|0);
      var $18=HEAPF64[(($arrayidx12)>>3)];
      var $call=Math.sqrt($18);
      var $19=$j;
      var $arrayidx13=(($s+($19<<3))|0);
      HEAPF64[(($arrayidx13)>>3)]=$call;
      label = 9; break;
    case 9: 
      var $20=$j;
      var $inc15=((($20)+(1))|0);
      $j=$inc15;
      label = 3; break;
    case 10: 
      var $arrayidx17=(($s)|0);
      var $21=HEAPF64[(($arrayidx17)>>3)];
      var $arrayidx18=(($s+8)|0);
      var $22=HEAPF64[(($arrayidx18)>>3)];
      var $add19=($21)+($22);
      var $arrayidx20=(($s+16)|0);
      var $23=HEAPF64[(($arrayidx20)>>3)];
      var $add21=($add19)+($23);
      var $arrayidx22=(($s)|0);
      var $24=HEAPF64[(($arrayidx22)>>3)];
      var $sub23=(-$24);
      var $arrayidx24=(($s+8)|0);
      var $25=HEAPF64[(($arrayidx24)>>3)];
      var $add25=($sub23)+($25);
      var $arrayidx26=(($s+16)|0);
      var $26=HEAPF64[(($arrayidx26)>>3)];
      var $add27=($add25)+($26);
      var $mul28=($add21)*($add27);
      var $arrayidx29=(($s)|0);
      var $27=HEAPF64[(($arrayidx29)>>3)];
      var $arrayidx30=(($s+8)|0);
      var $28=HEAPF64[(($arrayidx30)>>3)];
      var $sub31=($27)-($28);
      var $arrayidx32=(($s+16)|0);
      var $29=HEAPF64[(($arrayidx32)>>3)];
      var $add33=($sub31)+($29);
      var $mul34=($mul28)*($add33);
      var $arrayidx35=(($s)|0);
      var $30=HEAPF64[(($arrayidx35)>>3)];
      var $arrayidx36=(($s+8)|0);
      var $31=HEAPF64[(($arrayidx36)>>3)];
      var $add37=($30)+($31);
      var $arrayidx38=(($s+16)|0);
      var $32=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($add37)-($32);
      var $mul40=($mul34)*($sub39);
      $area=$mul40;
      var $33=$area;
      var $cmp41=$33 < 0;
      if ($cmp41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $area=-1;
      var $34=$area;
      $retval=$34;
      label = 13; break;
    case 12: 
      var $35=$area;
      var $call42=Math.sqrt($35);
      var $mul43=($call42)*(0.25);
      $area=$mul43;
      var $36=$area;
      $retval=$36;
      label = 13; break;
    case 13: 
      var $37=$retval;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_area_3d_3"] = _triangle_area_3d_3;
function _triangle_area_heron($s) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $s_addr;
      var $area;
      $s_addr=$s;
      var $0=$s_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$s_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $add=($1)+($3);
      var $4=$s_addr;
      var $arrayidx2=(($4+16)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $add3=($add)+($5);
      var $6=$s_addr;
      var $arrayidx4=(($6)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub=(-$7);
      var $8=$s_addr;
      var $arrayidx5=(($8+8)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $add6=($sub)+($9);
      var $10=$s_addr;
      var $arrayidx7=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx7)>>3)];
      var $add8=($add6)+($11);
      var $mul=($add3)*($add8);
      var $12=$s_addr;
      var $arrayidx9=(($12)|0);
      var $13=HEAPF64[(($arrayidx9)>>3)];
      var $14=$s_addr;
      var $arrayidx10=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx10)>>3)];
      var $sub11=($13)-($15);
      var $16=$s_addr;
      var $arrayidx12=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx12)>>3)];
      var $add13=($sub11)+($17);
      var $mul14=($mul)*($add13);
      var $18=$s_addr;
      var $arrayidx15=(($18)|0);
      var $19=HEAPF64[(($arrayidx15)>>3)];
      var $20=$s_addr;
      var $arrayidx16=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $add17=($19)+($21);
      var $22=$s_addr;
      var $arrayidx18=(($22+16)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $sub19=($add17)-($23);
      var $mul20=($mul14)*($sub19);
      $area=$mul20;
      var $24=$area;
      var $cmp=$24 < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $area=-1;
      var $25=$area;
      $retval=$25;
      label = 5; break;
    case 4: 
      var $26=$area;
      var $call=Math.sqrt($26);
      var $mul21=($call)*(0.25);
      $area=$mul21;
      var $27=$area;
      $retval=$27;
      label = 5; break;
    case 5: 
      var $28=$retval;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_area_heron"] = _triangle_area_heron;
function _triangle_centroid_2d($t) {
  var label = 0;
  var $t_addr;
  var $centroid;
  $t_addr=$t;
  var $call=_malloc(16);
  var $0=$call;
  $centroid=$0;
  var $1=$t_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$t_addr;
  var $arrayidx1=(($3+16)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $add=($2)+($4);
  var $5=$t_addr;
  var $arrayidx2=(($5+32)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $add3=($add)+($6);
  var $div=($add3)/(3);
  var $7=$centroid;
  var $arrayidx4=(($7)|0);
  HEAPF64[(($arrayidx4)>>3)]=$div;
  var $8=$t_addr;
  var $arrayidx5=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$t_addr;
  var $arrayidx6=(($10+24)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $add7=($9)+($11);
  var $12=$t_addr;
  var $arrayidx8=(($12+40)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $add9=($add7)+($13);
  var $div10=($add9)/(3);
  var $14=$centroid;
  var $arrayidx11=(($14+8)|0);
  HEAPF64[(($arrayidx11)>>3)]=$div10;
  var $15=$centroid;
  return $15;
}
Module["_triangle_centroid_2d"] = _triangle_centroid_2d;
function _triangle_centroid_3d($t) {
  var label = 0;
  var $t_addr;
  var $centroid;
  $t_addr=$t;
  var $call=_malloc(24);
  var $0=$call;
  $centroid=$0;
  var $1=$t_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$t_addr;
  var $arrayidx1=(($3+24)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $add=($2)+($4);
  var $5=$t_addr;
  var $arrayidx2=(($5+48)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $add3=($add)+($6);
  var $div=($add3)/(3);
  var $7=$centroid;
  var $arrayidx4=(($7)|0);
  HEAPF64[(($arrayidx4)>>3)]=$div;
  var $8=$t_addr;
  var $arrayidx5=(($8+8)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$t_addr;
  var $arrayidx6=(($10+32)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $add7=($9)+($11);
  var $12=$t_addr;
  var $arrayidx8=(($12+56)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $add9=($add7)+($13);
  var $div10=($add9)/(3);
  var $14=$centroid;
  var $arrayidx11=(($14+8)|0);
  HEAPF64[(($arrayidx11)>>3)]=$div10;
  var $15=$t_addr;
  var $arrayidx12=(($15+16)|0);
  var $16=HEAPF64[(($arrayidx12)>>3)];
  var $17=$t_addr;
  var $arrayidx13=(($17+40)|0);
  var $18=HEAPF64[(($arrayidx13)>>3)];
  var $add14=($16)+($18);
  var $19=$t_addr;
  var $arrayidx15=(($19+64)|0);
  var $20=HEAPF64[(($arrayidx15)>>3)];
  var $add16=($add14)+($20);
  var $div17=($add16)/(3);
  var $21=$centroid;
  var $arrayidx18=(($21+16)|0);
  HEAPF64[(($arrayidx18)>>3)]=$div17;
  var $22=$centroid;
  return $22;
}
Module["_triangle_centroid_3d"] = _triangle_centroid_3d;
function _triangle_circumcenter_2d($t) {
  var label = 0;
  var $t_addr;
  var $asq;
  var $bot;
  var $pc;
  var $csq;
  var $top1;
  var $top2;
  $t_addr=$t;
  var $call=_malloc(16);
  var $0=$call;
  $pc=$0;
  var $1=$t_addr;
  var $arrayidx=(($1+16)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $3=$t_addr;
  var $arrayidx1=(($3)|0);
  var $4=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($2)-($4);
  var $5=$t_addr;
  var $arrayidx2=(($5+16)|0);
  var $6=HEAPF64[(($arrayidx2)>>3)];
  var $7=$t_addr;
  var $arrayidx3=(($7)|0);
  var $8=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($6)-($8);
  var $mul=($sub)*($sub4);
  var $9=$t_addr;
  var $arrayidx5=(($9+24)|0);
  var $10=HEAPF64[(($arrayidx5)>>3)];
  var $11=$t_addr;
  var $arrayidx6=(($11+8)|0);
  var $12=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($10)-($12);
  var $13=$t_addr;
  var $arrayidx8=(($13+24)|0);
  var $14=HEAPF64[(($arrayidx8)>>3)];
  var $15=$t_addr;
  var $arrayidx9=(($15+8)|0);
  var $16=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($14)-($16);
  var $mul11=($sub7)*($sub10);
  var $add=($mul)+($mul11);
  $asq=$add;
  var $17=$t_addr;
  var $arrayidx12=(($17+32)|0);
  var $18=HEAPF64[(($arrayidx12)>>3)];
  var $19=$t_addr;
  var $arrayidx13=(($19)|0);
  var $20=HEAPF64[(($arrayidx13)>>3)];
  var $sub14=($18)-($20);
  var $21=$t_addr;
  var $arrayidx15=(($21+32)|0);
  var $22=HEAPF64[(($arrayidx15)>>3)];
  var $23=$t_addr;
  var $arrayidx16=(($23)|0);
  var $24=HEAPF64[(($arrayidx16)>>3)];
  var $sub17=($22)-($24);
  var $mul18=($sub14)*($sub17);
  var $25=$t_addr;
  var $arrayidx19=(($25+40)|0);
  var $26=HEAPF64[(($arrayidx19)>>3)];
  var $27=$t_addr;
  var $arrayidx20=(($27+8)|0);
  var $28=HEAPF64[(($arrayidx20)>>3)];
  var $sub21=($26)-($28);
  var $29=$t_addr;
  var $arrayidx22=(($29+40)|0);
  var $30=HEAPF64[(($arrayidx22)>>3)];
  var $31=$t_addr;
  var $arrayidx23=(($31+8)|0);
  var $32=HEAPF64[(($arrayidx23)>>3)];
  var $sub24=($30)-($32);
  var $mul25=($sub21)*($sub24);
  var $add26=($mul18)+($mul25);
  $csq=$add26;
  var $33=$t_addr;
  var $arrayidx27=(($33+24)|0);
  var $34=HEAPF64[(($arrayidx27)>>3)];
  var $35=$t_addr;
  var $arrayidx28=(($35+8)|0);
  var $36=HEAPF64[(($arrayidx28)>>3)];
  var $sub29=($34)-($36);
  var $37=$csq;
  var $mul30=($sub29)*($37);
  var $38=$t_addr;
  var $arrayidx31=(($38+40)|0);
  var $39=HEAPF64[(($arrayidx31)>>3)];
  var $40=$t_addr;
  var $arrayidx32=(($40+8)|0);
  var $41=HEAPF64[(($arrayidx32)>>3)];
  var $sub33=($39)-($41);
  var $42=$asq;
  var $mul34=($sub33)*($42);
  var $sub35=($mul30)-($mul34);
  $top1=$sub35;
  var $43=$t_addr;
  var $arrayidx36=(($43+16)|0);
  var $44=HEAPF64[(($arrayidx36)>>3)];
  var $45=$t_addr;
  var $arrayidx37=(($45)|0);
  var $46=HEAPF64[(($arrayidx37)>>3)];
  var $sub38=($44)-($46);
  var $sub39=(-$sub38);
  var $47=$csq;
  var $mul40=($sub39)*($47);
  var $48=$t_addr;
  var $arrayidx41=(($48+32)|0);
  var $49=HEAPF64[(($arrayidx41)>>3)];
  var $50=$t_addr;
  var $arrayidx42=(($50)|0);
  var $51=HEAPF64[(($arrayidx42)>>3)];
  var $sub43=($49)-($51);
  var $52=$asq;
  var $mul44=($sub43)*($52);
  var $add45=($mul40)+($mul44);
  $top2=$add45;
  var $53=$t_addr;
  var $arrayidx46=(($53+24)|0);
  var $54=HEAPF64[(($arrayidx46)>>3)];
  var $55=$t_addr;
  var $arrayidx47=(($55+8)|0);
  var $56=HEAPF64[(($arrayidx47)>>3)];
  var $sub48=($54)-($56);
  var $57=$t_addr;
  var $arrayidx49=(($57+32)|0);
  var $58=HEAPF64[(($arrayidx49)>>3)];
  var $59=$t_addr;
  var $arrayidx50=(($59)|0);
  var $60=HEAPF64[(($arrayidx50)>>3)];
  var $sub51=($58)-($60);
  var $mul52=($sub48)*($sub51);
  var $61=$t_addr;
  var $arrayidx53=(($61+40)|0);
  var $62=HEAPF64[(($arrayidx53)>>3)];
  var $63=$t_addr;
  var $arrayidx54=(($63+8)|0);
  var $64=HEAPF64[(($arrayidx54)>>3)];
  var $sub55=($62)-($64);
  var $65=$t_addr;
  var $arrayidx56=(($65+16)|0);
  var $66=HEAPF64[(($arrayidx56)>>3)];
  var $67=$t_addr;
  var $arrayidx57=(($67)|0);
  var $68=HEAPF64[(($arrayidx57)>>3)];
  var $sub58=($66)-($68);
  var $mul59=($sub55)*($sub58);
  var $sub60=($mul52)-($mul59);
  $bot=$sub60;
  var $69=$t_addr;
  var $arrayidx61=(($69)|0);
  var $70=HEAPF64[(($arrayidx61)>>3)];
  var $71=$top1;
  var $mul62=($71)*(0.5);
  var $72=$bot;
  var $div=($mul62)/($72);
  var $add63=($70)+($div);
  var $73=$pc;
  var $arrayidx64=(($73)|0);
  HEAPF64[(($arrayidx64)>>3)]=$add63;
  var $74=$t_addr;
  var $arrayidx65=(($74+8)|0);
  var $75=HEAPF64[(($arrayidx65)>>3)];
  var $76=$top2;
  var $mul66=($76)*(0.5);
  var $77=$bot;
  var $div67=($mul66)/($77);
  var $add68=($75)+($div67);
  var $78=$pc;
  var $arrayidx69=(($78+8)|0);
  HEAPF64[(($arrayidx69)>>3)]=$add68;
  var $79=$pc;
  return $79;
}
Module["_triangle_circumcenter_2d"] = _triangle_circumcenter_2d;
function _triangle_circumcenter_2d_2($t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $a=__stackBase__;
      var $pc;
      var $info;
      $t_addr=$t;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$t_addr;
      var $arrayidx3=(($4+24)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$t_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a+16)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$t_addr;
      var $arrayidx7=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$t_addr;
      var $arrayidx8=(($10)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $12=Math.pow($sub9, 2);
      var $13=$t_addr;
      var $arrayidx10=(($13+24)|0);
      var $14=HEAPF64[(($arrayidx10)>>3)];
      var $15=$t_addr;
      var $arrayidx11=(($15+8)|0);
      var $16=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($14)-($16);
      var $17=Math.pow($sub12, 2);
      var $add=($12)+($17);
      var $arrayidx13=(($a+32)|0);
      HEAPF64[(($arrayidx13)>>3)]=$add;
      var $18=$t_addr;
      var $arrayidx14=(($18+32)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $20=$t_addr;
      var $arrayidx15=(($20)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $sub16=($19)-($21);
      var $arrayidx17=(($a+8)|0);
      HEAPF64[(($arrayidx17)>>3)]=$sub16;
      var $22=$t_addr;
      var $arrayidx18=(($22+40)|0);
      var $23=HEAPF64[(($arrayidx18)>>3)];
      var $24=$t_addr;
      var $arrayidx19=(($24+8)|0);
      var $25=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($23)-($25);
      var $arrayidx21=(($a+24)|0);
      HEAPF64[(($arrayidx21)>>3)]=$sub20;
      var $26=$t_addr;
      var $arrayidx22=(($26+32)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $28=$t_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($27)-($29);
      var $30=Math.pow($sub24, 2);
      var $31=$t_addr;
      var $arrayidx25=(($31+40)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $33=$t_addr;
      var $arrayidx26=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx26)>>3)];
      var $sub27=($32)-($34);
      var $35=Math.pow($sub27, 2);
      var $add28=($30)+($35);
      var $arrayidx29=(($a+40)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_solve(2, 1, $arraydecay);
      $info=$call;
      var $call30=_malloc(16);
      var $36=$call30;
      $pc=$36;
      var $37=$info;
      var $cmp=(($37)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $38=$pc;
      var $arrayidx31=(($38)|0);
      HEAPF64[(($arrayidx31)>>3)]=0;
      var $39=$pc;
      var $arrayidx32=(($39+8)|0);
      HEAPF64[(($arrayidx32)>>3)]=0;
      label = 5; break;
    case 4: 
      var $40=$t_addr;
      var $arrayidx33=(($40)|0);
      var $41=HEAPF64[(($arrayidx33)>>3)];
      var $arrayidx34=(($a+32)|0);
      var $42=HEAPF64[(($arrayidx34)>>3)];
      var $mul=($42)*(0.5);
      var $add35=($41)+($mul);
      var $43=$pc;
      var $arrayidx36=(($43)|0);
      HEAPF64[(($arrayidx36)>>3)]=$add35;
      var $44=$t_addr;
      var $arrayidx37=(($44+8)|0);
      var $45=HEAPF64[(($arrayidx37)>>3)];
      var $arrayidx38=(($a+40)|0);
      var $46=HEAPF64[(($arrayidx38)>>3)];
      var $mul39=($46)*(0.5);
      var $add40=($45)+($mul39);
      var $47=$pc;
      var $arrayidx41=(($47+8)|0);
      HEAPF64[(($arrayidx41)>>3)]=$add40;
      label = 5; break;
    case 5: 
      var $48=$pc;
      STACKTOP = __stackBase__;
      return $48;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_circumcenter_2d_2"] = _triangle_circumcenter_2d_2;
function _triangle_circumcenter($n, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $t_addr;
      var $a;
      var $abp;
      var $apc;
      var $b;
      var $c;
      var $i;
      var $p;
      var $pbc;
      $n_addr=$n;
      $t_addr=$t;
      var $0=$n_addr;
      var $1=$t_addr;
      var $2=$n_addr;
      var $mul=$2;
      var $add_ptr=(($1+($mul<<3))|0);
      var $3=$t_addr;
      var $4=$n_addr;
      var $mul1=($4<<1);
      var $add_ptr2=(($3+($mul1<<3))|0);
      var $call=_r8vec_normsq_affine($0, $add_ptr, $add_ptr2);
      $a=$call;
      var $5=$n_addr;
      var $6=$t_addr;
      var $7=$n_addr;
      var $mul3=($7<<1);
      var $add_ptr4=(($6+($mul3<<3))|0);
      var $8=$t_addr;
      var $9=$n_addr;
      var $mul5=0;
      var $add_ptr6=(($8+($mul5<<3))|0);
      var $call7=_r8vec_normsq_affine($5, $add_ptr4, $add_ptr6);
      $b=$call7;
      var $10=$n_addr;
      var $11=$t_addr;
      var $12=$n_addr;
      var $mul8=0;
      var $add_ptr9=(($11+($mul8<<3))|0);
      var $13=$t_addr;
      var $14=$n_addr;
      var $mul10=$14;
      var $add_ptr11=(($13+($mul10<<3))|0);
      var $call12=_r8vec_normsq_affine($10, $add_ptr9, $add_ptr11);
      $c=$call12;
      var $15=$a;
      var $16=$a;
      var $sub=(-$16);
      var $17=$b;
      var $add=($sub)+($17);
      var $18=$c;
      var $add13=($add)+($18);
      var $mul14=($15)*($add13);
      $pbc=$mul14;
      var $19=$b;
      var $20=$a;
      var $21=$b;
      var $sub15=($20)-($21);
      var $22=$c;
      var $add16=($sub15)+($22);
      var $mul17=($19)*($add16);
      $apc=$mul17;
      var $23=$c;
      var $24=$a;
      var $25=$b;
      var $add18=($24)+($25);
      var $26=$c;
      var $sub19=($add18)-($26);
      var $mul20=($23)*($sub19);
      $abp=$mul20;
      var $27=$n_addr;
      var $mul21=($27<<3);
      var $call22=_malloc($mul21);
      var $28=$call22;
      $p=$28;
      $i=0;
      label = 3; break;
    case 3: 
      var $29=$i;
      var $30=$n_addr;
      var $cmp=(($29)|(0)) < (($30)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $31=$pbc;
      var $32=$i;
      var $33=$n_addr;
      var $mul23=0;
      var $add24=((($32)+($mul23))|0);
      var $34=$t_addr;
      var $arrayidx=(($34+($add24<<3))|0);
      var $35=HEAPF64[(($arrayidx)>>3)];
      var $mul25=($31)*($35);
      var $36=$apc;
      var $37=$i;
      var $38=$n_addr;
      var $mul26=$38;
      var $add27=((($37)+($mul26))|0);
      var $39=$t_addr;
      var $arrayidx28=(($39+($add27<<3))|0);
      var $40=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($36)*($40);
      var $add30=($mul25)+($mul29);
      var $41=$abp;
      var $42=$i;
      var $43=$n_addr;
      var $mul31=($43<<1);
      var $add32=((($42)+($mul31))|0);
      var $44=$t_addr;
      var $arrayidx33=(($44+($add32<<3))|0);
      var $45=HEAPF64[(($arrayidx33)>>3)];
      var $mul34=($41)*($45);
      var $add35=($add30)+($mul34);
      var $46=$pbc;
      var $47=$apc;
      var $add36=($46)+($47);
      var $48=$abp;
      var $add37=($add36)+($48);
      var $div=($add35)/($add37);
      var $49=$i;
      var $50=$p;
      var $arrayidx38=(($50+($49<<3))|0);
      HEAPF64[(($arrayidx38)>>3)]=$div;
      label = 5; break;
    case 5: 
      var $51=$i;
      var $inc=((($51)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $52=$p;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_circumcenter"] = _triangle_circumcenter;
function _triangle_barycentric_2d($t, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p_addr;
      var $a=__stackBase__;
      var $c;
      var $info;
      $t_addr=$t;
      $p_addr=$p;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$t_addr;
      var $arrayidx3=(($4+24)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$t_addr;
      var $arrayidx4=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$t_addr;
      var $arrayidx7=(($8+32)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$t_addr;
      var $arrayidx8=(($10)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($a+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $12=$t_addr;
      var $arrayidx11=(($12+40)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$t_addr;
      var $arrayidx12=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $arrayidx14=(($a+24)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      var $16=$p_addr;
      var $arrayidx15=(($16)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $18=$t_addr;
      var $arrayidx16=(($18)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($17)-($19);
      var $arrayidx18=(($a+32)|0);
      HEAPF64[(($arrayidx18)>>3)]=$sub17;
      var $20=$p_addr;
      var $arrayidx19=(($20+8)|0);
      var $21=HEAPF64[(($arrayidx19)>>3)];
      var $22=$t_addr;
      var $arrayidx20=(($22+8)|0);
      var $23=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($21)-($23);
      var $arrayidx22=(($a+40)|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_solve(2, 1, $arraydecay);
      $info=$call;
      var $24=$info;
      var $cmp=(($24)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=HEAP32[((_stderr)>>2)];
      var $call23=_fprintf($25, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=HEAP32[((_stderr)>>2)];
      var $call24=_fprintf($26, ((11840)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=HEAP32[((_stderr)>>2)];
      var $call25=_fprintf($27, ((7400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $28=HEAP32[((_stderr)>>2)];
      var $call26=_fprintf($28, ((7336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $call27=_malloc(24);
      var $29=$call27;
      $c=$29;
      var $arrayidx28=(($a+32)|0);
      var $30=HEAPF64[(($arrayidx28)>>3)];
      var $31=$c;
      var $arrayidx29=(($31)|0);
      HEAPF64[(($arrayidx29)>>3)]=$30;
      var $arrayidx30=(($a+40)|0);
      var $32=HEAPF64[(($arrayidx30)>>3)];
      var $33=$c;
      var $arrayidx31=(($33+8)|0);
      HEAPF64[(($arrayidx31)>>3)]=$32;
      var $34=$c;
      var $arrayidx32=(($34)|0);
      var $35=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=(1)-($35);
      var $36=$c;
      var $arrayidx34=(($36+8)|0);
      var $37=HEAPF64[(($arrayidx34)>>3)];
      var $sub35=($sub33)-($37);
      var $38=$c;
      var $arrayidx36=(($38+16)|0);
      HEAPF64[(($arrayidx36)>>3)]=$sub35;
      var $39=$c;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_barycentric_2d"] = _triangle_barycentric_2d;
function _triangle_circumcircle_2d($t, $r, $pc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $r_addr;
      var $pc_addr;
      var $a;
      var $b;
      var $bot;
      var $c;
      var $top1;
      var $top2;
      $t_addr=$t;
      $r_addr=$r;
      $pc_addr=$pc;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      $a=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      $b=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      $c=$call20;
      var $30=$a;
      var $31=$b;
      var $add21=($30)+($31);
      var $32=$c;
      var $add22=($add21)+($32);
      var $33=$a;
      var $sub23=(-$33);
      var $34=$b;
      var $add24=($sub23)+($34);
      var $35=$c;
      var $add25=($add24)+($35);
      var $mul=($add22)*($add25);
      var $36=$a;
      var $37=$b;
      var $sub26=($36)-($37);
      var $38=$c;
      var $add27=($sub26)+($38);
      var $mul28=($mul)*($add27);
      var $39=$a;
      var $40=$b;
      var $add29=($39)+($40);
      var $41=$c;
      var $sub30=($add29)-($41);
      var $mul31=($mul28)*($sub30);
      $bot=$mul31;
      var $42=$bot;
      var $cmp=$42 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $43=$r_addr;
      HEAPF64[(($43)>>3)]=-1;
      var $44=$pc_addr;
      var $arrayidx32=(($44)|0);
      HEAPF64[(($arrayidx32)>>3)]=0;
      var $45=$pc_addr;
      var $arrayidx33=(($45+8)|0);
      HEAPF64[(($arrayidx33)>>3)]=0;
      label = 5; break;
    case 4: 
      var $46=$a;
      var $47=$b;
      var $mul34=($46)*($47);
      var $48=$c;
      var $mul35=($mul34)*($48);
      var $49=$bot;
      var $call36=Math.sqrt($49);
      var $div=($mul35)/($call36);
      var $50=$r_addr;
      HEAPF64[(($50)>>3)]=$div;
      var $51=$t_addr;
      var $arrayidx37=(($51+24)|0);
      var $52=HEAPF64[(($arrayidx37)>>3)];
      var $53=$t_addr;
      var $arrayidx38=(($53+8)|0);
      var $54=HEAPF64[(($arrayidx38)>>3)];
      var $sub39=($52)-($54);
      var $55=$c;
      var $mul40=($sub39)*($55);
      var $56=$c;
      var $mul41=($mul40)*($56);
      var $57=$t_addr;
      var $arrayidx42=(($57+40)|0);
      var $58=HEAPF64[(($arrayidx42)>>3)];
      var $59=$t_addr;
      var $arrayidx43=(($59+8)|0);
      var $60=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=($58)-($60);
      var $61=$a;
      var $mul45=($sub44)*($61);
      var $62=$a;
      var $mul46=($mul45)*($62);
      var $sub47=($mul41)-($mul46);
      $top1=$sub47;
      var $63=$t_addr;
      var $arrayidx48=(($63+16)|0);
      var $64=HEAPF64[(($arrayidx48)>>3)];
      var $65=$t_addr;
      var $arrayidx49=(($65)|0);
      var $66=HEAPF64[(($arrayidx49)>>3)];
      var $sub50=($64)-($66);
      var $67=$c;
      var $mul51=($sub50)*($67);
      var $68=$c;
      var $mul52=($mul51)*($68);
      var $69=$t_addr;
      var $arrayidx53=(($69+32)|0);
      var $70=HEAPF64[(($arrayidx53)>>3)];
      var $71=$t_addr;
      var $arrayidx54=(($71)|0);
      var $72=HEAPF64[(($arrayidx54)>>3)];
      var $sub55=($70)-($72);
      var $73=$a;
      var $mul56=($sub55)*($73);
      var $74=$a;
      var $mul57=($mul56)*($74);
      var $sub58=($mul52)-($mul57);
      $top2=$sub58;
      var $75=$t_addr;
      var $arrayidx59=(($75+24)|0);
      var $76=HEAPF64[(($arrayidx59)>>3)];
      var $77=$t_addr;
      var $arrayidx60=(($77+8)|0);
      var $78=HEAPF64[(($arrayidx60)>>3)];
      var $sub61=($76)-($78);
      var $79=$t_addr;
      var $arrayidx62=(($79+32)|0);
      var $80=HEAPF64[(($arrayidx62)>>3)];
      var $81=$t_addr;
      var $arrayidx63=(($81)|0);
      var $82=HEAPF64[(($arrayidx63)>>3)];
      var $sub64=($80)-($82);
      var $mul65=($sub61)*($sub64);
      var $83=$t_addr;
      var $arrayidx66=(($83+40)|0);
      var $84=HEAPF64[(($arrayidx66)>>3)];
      var $85=$t_addr;
      var $arrayidx67=(($85+8)|0);
      var $86=HEAPF64[(($arrayidx67)>>3)];
      var $sub68=($84)-($86);
      var $87=$t_addr;
      var $arrayidx69=(($87+16)|0);
      var $88=HEAPF64[(($arrayidx69)>>3)];
      var $89=$t_addr;
      var $arrayidx70=(($89)|0);
      var $90=HEAPF64[(($arrayidx70)>>3)];
      var $sub71=($88)-($90);
      var $mul72=($sub68)*($sub71);
      var $sub73=($mul65)-($mul72);
      $bot=$sub73;
      var $91=$t_addr;
      var $arrayidx74=(($91)|0);
      var $92=HEAPF64[(($arrayidx74)>>3)];
      var $93=$top1;
      var $mul75=($93)*(0.5);
      var $94=$bot;
      var $div76=($mul75)/($94);
      var $add77=($92)+($div76);
      var $95=$pc_addr;
      var $arrayidx78=(($95)|0);
      HEAPF64[(($arrayidx78)>>3)]=$add77;
      var $96=$t_addr;
      var $arrayidx79=(($96+8)|0);
      var $97=HEAPF64[(($arrayidx79)>>3)];
      var $98=$top2;
      var $mul80=($98)*(0.5);
      var $99=$bot;
      var $div81=($mul80)/($99);
      var $sub82=($97)-($div81);
      var $100=$pc_addr;
      var $arrayidx83=(($100+8)|0);
      HEAPF64[(($arrayidx83)>>3)]=$sub82;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_circumcircle_2d"] = _triangle_circumcircle_2d;
function _triangle_circumcircle_2d_2($t, $r, $pc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $r_addr;
      var $pc_addr;
      var $a=__stackBase__;
      var $info;
      $t_addr=$t;
      $r_addr=$r;
      $pc_addr=$pc;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $arrayidx2=(($a)|0);
      HEAPF64[(($arrayidx2)>>3)]=$sub;
      var $4=$t_addr;
      var $arrayidx3=(($4+32)|0);
      var $5=HEAPF64[(($arrayidx3)>>3)];
      var $6=$t_addr;
      var $arrayidx4=(($6)|0);
      var $7=HEAPF64[(($arrayidx4)>>3)];
      var $sub5=($5)-($7);
      var $arrayidx6=(($a+8)|0);
      HEAPF64[(($arrayidx6)>>3)]=$sub5;
      var $8=$t_addr;
      var $arrayidx7=(($8+24)|0);
      var $9=HEAPF64[(($arrayidx7)>>3)];
      var $10=$t_addr;
      var $arrayidx8=(($10+8)|0);
      var $11=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($11);
      var $arrayidx10=(($a+16)|0);
      HEAPF64[(($arrayidx10)>>3)]=$sub9;
      var $12=$t_addr;
      var $arrayidx11=(($12+40)|0);
      var $13=HEAPF64[(($arrayidx11)>>3)];
      var $14=$t_addr;
      var $arrayidx12=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub13=($13)-($15);
      var $arrayidx14=(($a+24)|0);
      HEAPF64[(($arrayidx14)>>3)]=$sub13;
      var $16=$t_addr;
      var $arrayidx15=(($16+16)|0);
      var $17=HEAPF64[(($arrayidx15)>>3)];
      var $18=$t_addr;
      var $arrayidx16=(($18)|0);
      var $19=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($17)-($19);
      var $20=Math.pow($sub17, 2);
      var $21=$t_addr;
      var $arrayidx18=(($21+24)|0);
      var $22=HEAPF64[(($arrayidx18)>>3)];
      var $23=$t_addr;
      var $arrayidx19=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($22)-($24);
      var $25=Math.pow($sub20, 2);
      var $add=($20)+($25);
      var $arrayidx21=(($a+32)|0);
      HEAPF64[(($arrayidx21)>>3)]=$add;
      var $26=$t_addr;
      var $arrayidx22=(($26+32)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $28=$t_addr;
      var $arrayidx23=(($28)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $sub24=($27)-($29);
      var $30=Math.pow($sub24, 2);
      var $31=$t_addr;
      var $arrayidx25=(($31+40)|0);
      var $32=HEAPF64[(($arrayidx25)>>3)];
      var $33=$t_addr;
      var $arrayidx26=(($33+8)|0);
      var $34=HEAPF64[(($arrayidx26)>>3)];
      var $sub27=($32)-($34);
      var $35=Math.pow($sub27, 2);
      var $add28=($30)+($35);
      var $arrayidx29=(($a+40)|0);
      HEAPF64[(($arrayidx29)>>3)]=$add28;
      var $arraydecay=(($a)|0);
      var $call=_r8mat_solve(2, 1, $arraydecay);
      $info=$call;
      var $36=$info;
      var $cmp=(($36)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $37=$r_addr;
      HEAPF64[(($37)>>3)]=-1;
      var $38=$pc_addr;
      var $arrayidx30=(($38)|0);
      HEAPF64[(($arrayidx30)>>3)]=0;
      var $39=$pc_addr;
      var $arrayidx31=(($39+8)|0);
      HEAPF64[(($arrayidx31)>>3)]=0;
      label = 5; break;
    case 4: 
      var $arrayidx32=(($a+32)|0);
      var $40=HEAPF64[(($arrayidx32)>>3)];
      var $arrayidx33=(($a+32)|0);
      var $41=HEAPF64[(($arrayidx33)>>3)];
      var $mul=($40)*($41);
      var $arrayidx34=(($a+40)|0);
      var $42=HEAPF64[(($arrayidx34)>>3)];
      var $arrayidx35=(($a+40)|0);
      var $43=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($42)*($43);
      var $add37=($mul)+($mul36);
      var $call38=Math.sqrt($add37);
      var $mul39=($call38)*(0.5);
      var $44=$r_addr;
      HEAPF64[(($44)>>3)]=$mul39;
      var $45=$t_addr;
      var $arrayidx40=(($45)|0);
      var $46=HEAPF64[(($arrayidx40)>>3)];
      var $arrayidx41=(($a+32)|0);
      var $47=HEAPF64[(($arrayidx41)>>3)];
      var $mul42=($47)*(0.5);
      var $add43=($46)+($mul42);
      var $48=$pc_addr;
      var $arrayidx44=(($48)|0);
      HEAPF64[(($arrayidx44)>>3)]=$add43;
      var $49=$t_addr;
      var $arrayidx45=(($49+8)|0);
      var $50=HEAPF64[(($arrayidx45)>>3)];
      var $arrayidx46=(($a+40)|0);
      var $51=HEAPF64[(($arrayidx46)>>3)];
      var $mul47=($51)*(0.5);
      var $add48=($50)+($mul47);
      var $52=$pc_addr;
      var $arrayidx49=(($52+8)|0);
      HEAPF64[(($arrayidx49)>>3)]=$add48;
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_circumcircle_2d_2"] = _triangle_circumcircle_2d_2;
function _triangle_circumradius_2d($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $a;
      var $b;
      var $bot;
      var $c;
      var $r;
      $t_addr=$t;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      $a=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      $b=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      $c=$call20;
      var $30=$a;
      var $31=$b;
      var $add21=($30)+($31);
      var $32=$c;
      var $add22=($add21)+($32);
      var $33=$a;
      var $sub23=(-$33);
      var $34=$b;
      var $add24=($sub23)+($34);
      var $35=$c;
      var $add25=($add24)+($35);
      var $mul=($add22)*($add25);
      var $36=$a;
      var $37=$b;
      var $sub26=($36)-($37);
      var $38=$c;
      var $add27=($sub26)+($38);
      var $mul28=($mul)*($add27);
      var $39=$a;
      var $40=$b;
      var $add29=($39)+($40);
      var $41=$c;
      var $sub30=($add29)-($41);
      var $mul31=($mul28)*($sub30);
      $bot=$mul31;
      var $42=$bot;
      var $cmp=$42 <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $r=-1;
      var $43=$r;
      $retval=$43;
      label = 5; break;
    case 4: 
      var $44=$a;
      var $45=$b;
      var $mul32=($44)*($45);
      var $46=$c;
      var $mul33=($mul32)*($46);
      var $47=$bot;
      var $call34=Math.sqrt($47);
      var $div=($mul33)/($call34);
      $r=$div;
      var $48=$r;
      $retval=$48;
      label = 5; break;
    case 5: 
      var $49=$retval;
      return $49;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_circumradius_2d"] = _triangle_circumradius_2d;
function _triangle_is_degenerate_nd($dim_num, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $t_addr;
      var $value;
      $dim_num_addr=$dim_num;
      $t_addr=$t;
      var $0=$dim_num_addr;
      var $1=$t_addr;
      var $2=$dim_num_addr;
      var $mul=0;
      var $add_ptr=(($1+($mul<<3))|0);
      var $3=$t_addr;
      var $4=$dim_num_addr;
      var $mul1=$4;
      var $add_ptr2=(($3+($mul1<<3))|0);
      var $call=_r8vec_eq($0, $add_ptr, $add_ptr2);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { var $15 = 1;label = 5; break; } else { label = 3; break; }
    case 3: 
      var $5=$dim_num_addr;
      var $6=$t_addr;
      var $7=$dim_num_addr;
      var $mul3=$7;
      var $add_ptr4=(($6+($mul3<<3))|0);
      var $8=$t_addr;
      var $9=$dim_num_addr;
      var $mul5=($9<<1);
      var $add_ptr6=(($8+($mul5<<3))|0);
      var $call7=_r8vec_eq($5, $add_ptr4, $add_ptr6);
      var $tobool8=(($call7)|(0))!=0;
      if ($tobool8) { var $15 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $10=$dim_num_addr;
      var $11=$t_addr;
      var $12=$dim_num_addr;
      var $mul9=($12<<1);
      var $add_ptr10=(($11+($mul9<<3))|0);
      var $13=$t_addr;
      var $14=$dim_num_addr;
      var $mul11=0;
      var $add_ptr12=(($13+($mul11<<3))|0);
      var $call13=_r8vec_eq($10, $add_ptr10, $add_ptr12);
      var $tobool14=(($call13)|(0))!=0;
      var $15 = $tobool14;label = 5; break;
    case 5: 
      var $15;
      var $lor_ext=(($15)&(1));
      $value=$lor_ext;
      var $16=$value;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_is_degenerate_nd"] = _triangle_is_degenerate_nd;
function _triangle_contains_line_exp_3d($t, $p1, $p2, $inside, $pint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p1_addr;
      var $p2_addr;
      var $inside_addr;
      var $pint_addr;
      var $i;
      var $ival;
      var $normal=__stackBase__;
      var $normal2=(__stackBase__)+(24);
      var $temp;
      var $v1=(__stackBase__)+(48);
      var $v2=(__stackBase__)+(72);
      $t_addr=$t;
      $p1_addr=$p1;
      $p2_addr=$p2;
      $inside_addr=$inside;
      $pint_addr=$pint;
      var $0=$p1_addr;
      var $1=$p2_addr;
      var $call=_line_exp_is_degenerate_nd(3, $0, $1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((11792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $call3=_fprintf($4, ((11752)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $5=$t_addr;
      var $call4=_triangle_is_degenerate_nd(3, $5);
      var $tobool5=(($call4)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $6=HEAP32[((_stderr)>>2)];
      var $call7=_fprintf($6, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $7=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($7, ((11792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $8=HEAP32[((_stderr)>>2)];
      var $call9=_fprintf($8, ((11720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $9=$i;
      var $cmp=(($9)|(0)) < 3;
      if ($cmp) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $10=$i;
      var $add=((($10)+(3))|0);
      var $11=$t_addr;
      var $arrayidx=(($11+($add<<3))|0);
      var $12=HEAPF64[(($arrayidx)>>3)];
      var $13=$i;
      var $add11=(($13)|0);
      var $14=$t_addr;
      var $arrayidx12=(($14+($add11<<3))|0);
      var $15=HEAPF64[(($arrayidx12)>>3)];
      var $sub=($12)-($15);
      var $16=$i;
      var $arrayidx13=(($v1+($16<<3))|0);
      HEAPF64[(($arrayidx13)>>3)]=$sub;
      label = 9; break;
    case 9: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 10: 
      $i=0;
      label = 11; break;
    case 11: 
      var $18=$i;
      var $cmp15=(($18)|(0)) < 3;
      if ($cmp15) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $19=$i;
      var $add17=((($19)+(6))|0);
      var $20=$t_addr;
      var $arrayidx18=(($20+($add17<<3))|0);
      var $21=HEAPF64[(($arrayidx18)>>3)];
      var $22=$i;
      var $add19=(($22)|0);
      var $23=$t_addr;
      var $arrayidx20=(($23+($add19<<3))|0);
      var $24=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($21)-($24);
      var $25=$i;
      var $arrayidx22=(($v2+($25<<3))|0);
      HEAPF64[(($arrayidx22)>>3)]=$sub21;
      label = 13; break;
    case 13: 
      var $26=$i;
      var $inc24=((($26)+(1))|0);
      $i=$inc24;
      label = 11; break;
    case 14: 
      var $arrayidx26=(($v1+8)|0);
      var $27=HEAPF64[(($arrayidx26)>>3)];
      var $arrayidx27=(($v2+16)|0);
      var $28=HEAPF64[(($arrayidx27)>>3)];
      var $mul=($27)*($28);
      var $arrayidx28=(($v1+16)|0);
      var $29=HEAPF64[(($arrayidx28)>>3)];
      var $arrayidx29=(($v2+8)|0);
      var $30=HEAPF64[(($arrayidx29)>>3)];
      var $mul30=($29)*($30);
      var $sub31=($mul)-($mul30);
      var $arrayidx32=(($normal)|0);
      HEAPF64[(($arrayidx32)>>3)]=$sub31;
      var $arrayidx33=(($v1+16)|0);
      var $31=HEAPF64[(($arrayidx33)>>3)];
      var $arrayidx34=(($v2)|0);
      var $32=HEAPF64[(($arrayidx34)>>3)];
      var $mul35=($31)*($32);
      var $arrayidx36=(($v1)|0);
      var $33=HEAPF64[(($arrayidx36)>>3)];
      var $arrayidx37=(($v2+16)|0);
      var $34=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($33)*($34);
      var $sub39=($mul35)-($mul38);
      var $arrayidx40=(($normal+8)|0);
      HEAPF64[(($arrayidx40)>>3)]=$sub39;
      var $arrayidx41=(($v1)|0);
      var $35=HEAPF64[(($arrayidx41)>>3)];
      var $arrayidx42=(($v2+8)|0);
      var $36=HEAPF64[(($arrayidx42)>>3)];
      var $mul43=($35)*($36);
      var $arrayidx44=(($v1+8)|0);
      var $37=HEAPF64[(($arrayidx44)>>3)];
      var $arrayidx45=(($v2)|0);
      var $38=HEAPF64[(($arrayidx45)>>3)];
      var $mul46=($37)*($38);
      var $sub47=($mul43)-($mul46);
      var $arrayidx48=(($normal+16)|0);
      HEAPF64[(($arrayidx48)>>3)]=$sub47;
      $temp=0;
      $i=0;
      label = 15; break;
    case 15: 
      var $39=$i;
      var $cmp50=(($39)|(0)) < 3;
      if ($cmp50) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $40=$temp;
      var $41=$i;
      var $arrayidx52=(($normal+($41<<3))|0);
      var $42=HEAPF64[(($arrayidx52)>>3)];
      var $43=Math.pow($42, 2);
      var $add53=($40)+($43);
      $temp=$add53;
      label = 17; break;
    case 17: 
      var $44=$i;
      var $inc55=((($44)+(1))|0);
      $i=$inc55;
      label = 15; break;
    case 18: 
      var $45=$temp;
      var $call57=Math.sqrt($45);
      $temp=$call57;
      $i=0;
      label = 19; break;
    case 19: 
      var $46=$i;
      var $cmp59=(($46)|(0)) < 3;
      if ($cmp59) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $47=$i;
      var $arrayidx61=(($normal+($47<<3))|0);
      var $48=HEAPF64[(($arrayidx61)>>3)];
      var $49=$temp;
      var $div=($48)/($49);
      var $50=$i;
      var $arrayidx62=(($normal+($50<<3))|0);
      HEAPF64[(($arrayidx62)>>3)]=$div;
      label = 21; break;
    case 21: 
      var $51=$i;
      var $inc64=((($51)+(1))|0);
      $i=$inc64;
      label = 19; break;
    case 22: 
      var $52=$t_addr;
      var $arraydecay=(($normal)|0);
      var $53=$p1_addr;
      var $54=$p2_addr;
      var $55=$pint_addr;
      var $call66=_plane_normal_line_exp_int_3d($52, $arraydecay, $53, $54, $55);
      $ival=$call66;
      var $56=$ival;
      var $cmp67=(($56)|(0))==0;
      if ($cmp67) { label = 23; break; } else { label = 28; break; }
    case 23: 
      var $57=$inside_addr;
      HEAP32[(($57)>>2)]=0;
      $i=0;
      label = 24; break;
    case 24: 
      var $58=$i;
      var $cmp70=(($58)|(0)) < 3;
      if ($cmp70) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $call72=_r8_huge();
      var $59=$i;
      var $60=$pint_addr;
      var $arrayidx73=(($60+($59<<3))|0);
      HEAPF64[(($arrayidx73)>>3)]=$call72;
      label = 26; break;
    case 26: 
      var $61=$i;
      var $inc75=((($61)+(1))|0);
      $i=$inc75;
      label = 24; break;
    case 27: 
      label = 62; break;
    case 28: 
      var $62=$ival;
      var $cmp77=(($62)|(0))==2;
      if ($cmp77) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $63=$inside_addr;
      HEAP32[(($63)>>2)]=0;
      var $64=$p1_addr;
      var $65=$pint_addr;
      _r8vec_copy(3, $64, $65);
      label = 62; break;
    case 30: 
      label = 31; break;
    case 31: 
      $i=0;
      label = 32; break;
    case 32: 
      var $66=$i;
      var $cmp82=(($66)|(0)) < 3;
      if ($cmp82) { label = 33; break; } else { label = 35; break; }
    case 33: 
      var $67=$i;
      var $add84=((($67)+(3))|0);
      var $68=$t_addr;
      var $arrayidx85=(($68+($add84<<3))|0);
      var $69=HEAPF64[(($arrayidx85)>>3)];
      var $70=$i;
      var $add86=(($70)|0);
      var $71=$t_addr;
      var $arrayidx87=(($71+($add86<<3))|0);
      var $72=HEAPF64[(($arrayidx87)>>3)];
      var $sub88=($69)-($72);
      var $73=$i;
      var $arrayidx89=(($v1+($73<<3))|0);
      HEAPF64[(($arrayidx89)>>3)]=$sub88;
      label = 34; break;
    case 34: 
      var $74=$i;
      var $inc91=((($74)+(1))|0);
      $i=$inc91;
      label = 32; break;
    case 35: 
      $i=0;
      label = 36; break;
    case 36: 
      var $75=$i;
      var $cmp94=(($75)|(0)) < 3;
      if ($cmp94) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $76=$i;
      var $77=$pint_addr;
      var $arrayidx96=(($77+($76<<3))|0);
      var $78=HEAPF64[(($arrayidx96)>>3)];
      var $79=$i;
      var $add97=(($79)|0);
      var $80=$t_addr;
      var $arrayidx98=(($80+($add97<<3))|0);
      var $81=HEAPF64[(($arrayidx98)>>3)];
      var $sub99=($78)-($81);
      var $82=$i;
      var $arrayidx100=(($v2+($82<<3))|0);
      HEAPF64[(($arrayidx100)>>3)]=$sub99;
      label = 38; break;
    case 38: 
      var $83=$i;
      var $inc102=((($83)+(1))|0);
      $i=$inc102;
      label = 36; break;
    case 39: 
      var $arrayidx104=(($v1+8)|0);
      var $84=HEAPF64[(($arrayidx104)>>3)];
      var $arrayidx105=(($v2+16)|0);
      var $85=HEAPF64[(($arrayidx105)>>3)];
      var $mul106=($84)*($85);
      var $arrayidx107=(($v1+16)|0);
      var $86=HEAPF64[(($arrayidx107)>>3)];
      var $arrayidx108=(($v2+8)|0);
      var $87=HEAPF64[(($arrayidx108)>>3)];
      var $mul109=($86)*($87);
      var $sub110=($mul106)-($mul109);
      var $arrayidx111=(($normal2)|0);
      HEAPF64[(($arrayidx111)>>3)]=$sub110;
      var $arrayidx112=(($v1+16)|0);
      var $88=HEAPF64[(($arrayidx112)>>3)];
      var $arrayidx113=(($v2)|0);
      var $89=HEAPF64[(($arrayidx113)>>3)];
      var $mul114=($88)*($89);
      var $arrayidx115=(($v1)|0);
      var $90=HEAPF64[(($arrayidx115)>>3)];
      var $arrayidx116=(($v2+16)|0);
      var $91=HEAPF64[(($arrayidx116)>>3)];
      var $mul117=($90)*($91);
      var $sub118=($mul114)-($mul117);
      var $arrayidx119=(($normal2+8)|0);
      HEAPF64[(($arrayidx119)>>3)]=$sub118;
      var $arrayidx120=(($v1)|0);
      var $92=HEAPF64[(($arrayidx120)>>3)];
      var $arrayidx121=(($v2+8)|0);
      var $93=HEAPF64[(($arrayidx121)>>3)];
      var $mul122=($92)*($93);
      var $arrayidx123=(($v1+8)|0);
      var $94=HEAPF64[(($arrayidx123)>>3)];
      var $arrayidx124=(($v2)|0);
      var $95=HEAPF64[(($arrayidx124)>>3)];
      var $mul125=($94)*($95);
      var $sub126=($mul122)-($mul125);
      var $arrayidx127=(($normal2+16)|0);
      HEAPF64[(($arrayidx127)>>3)]=$sub126;
      var $arraydecay128=(($normal)|0);
      var $arraydecay129=(($normal2)|0);
      var $call130=_r8vec_dot_product(3, $arraydecay128, $arraydecay129);
      var $cmp131=$call130 < 0;
      if ($cmp131) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $96=$inside_addr;
      HEAP32[(($96)>>2)]=0;
      label = 62; break;
    case 41: 
      $i=0;
      label = 42; break;
    case 42: 
      var $97=$i;
      var $cmp135=(($97)|(0)) < 3;
      if ($cmp135) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $98=$i;
      var $add137=((($98)+(6))|0);
      var $99=$t_addr;
      var $arrayidx138=(($99+($add137<<3))|0);
      var $100=HEAPF64[(($arrayidx138)>>3)];
      var $101=$i;
      var $add139=((($101)+(3))|0);
      var $102=$t_addr;
      var $arrayidx140=(($102+($add139<<3))|0);
      var $103=HEAPF64[(($arrayidx140)>>3)];
      var $sub141=($100)-($103);
      var $104=$i;
      var $arrayidx142=(($v1+($104<<3))|0);
      HEAPF64[(($arrayidx142)>>3)]=$sub141;
      label = 44; break;
    case 44: 
      var $105=$i;
      var $inc144=((($105)+(1))|0);
      $i=$inc144;
      label = 42; break;
    case 45: 
      $i=0;
      label = 46; break;
    case 46: 
      var $106=$i;
      var $cmp147=(($106)|(0)) < 3;
      if ($cmp147) { label = 47; break; } else { label = 49; break; }
    case 47: 
      var $107=$i;
      var $108=$pint_addr;
      var $arrayidx149=(($108+($107<<3))|0);
      var $109=HEAPF64[(($arrayidx149)>>3)];
      var $110=$i;
      var $add150=((($110)+(3))|0);
      var $111=$t_addr;
      var $arrayidx151=(($111+($add150<<3))|0);
      var $112=HEAPF64[(($arrayidx151)>>3)];
      var $sub152=($109)-($112);
      var $113=$i;
      var $arrayidx153=(($v2+($113<<3))|0);
      HEAPF64[(($arrayidx153)>>3)]=$sub152;
      label = 48; break;
    case 48: 
      var $114=$i;
      var $inc155=((($114)+(1))|0);
      $i=$inc155;
      label = 46; break;
    case 49: 
      var $arrayidx157=(($v1+8)|0);
      var $115=HEAPF64[(($arrayidx157)>>3)];
      var $arrayidx158=(($v2+16)|0);
      var $116=HEAPF64[(($arrayidx158)>>3)];
      var $mul159=($115)*($116);
      var $arrayidx160=(($v1+16)|0);
      var $117=HEAPF64[(($arrayidx160)>>3)];
      var $arrayidx161=(($v2+8)|0);
      var $118=HEAPF64[(($arrayidx161)>>3)];
      var $mul162=($117)*($118);
      var $sub163=($mul159)-($mul162);
      var $arrayidx164=(($normal2)|0);
      HEAPF64[(($arrayidx164)>>3)]=$sub163;
      var $arrayidx165=(($v1+16)|0);
      var $119=HEAPF64[(($arrayidx165)>>3)];
      var $arrayidx166=(($v2)|0);
      var $120=HEAPF64[(($arrayidx166)>>3)];
      var $mul167=($119)*($120);
      var $arrayidx168=(($v1)|0);
      var $121=HEAPF64[(($arrayidx168)>>3)];
      var $arrayidx169=(($v2+16)|0);
      var $122=HEAPF64[(($arrayidx169)>>3)];
      var $mul170=($121)*($122);
      var $sub171=($mul167)-($mul170);
      var $arrayidx172=(($normal2+8)|0);
      HEAPF64[(($arrayidx172)>>3)]=$sub171;
      var $arrayidx173=(($v1)|0);
      var $123=HEAPF64[(($arrayidx173)>>3)];
      var $arrayidx174=(($v2+8)|0);
      var $124=HEAPF64[(($arrayidx174)>>3)];
      var $mul175=($123)*($124);
      var $arrayidx176=(($v1+8)|0);
      var $125=HEAPF64[(($arrayidx176)>>3)];
      var $arrayidx177=(($v2)|0);
      var $126=HEAPF64[(($arrayidx177)>>3)];
      var $mul178=($125)*($126);
      var $sub179=($mul175)-($mul178);
      var $arrayidx180=(($normal2+16)|0);
      HEAPF64[(($arrayidx180)>>3)]=$sub179;
      var $arraydecay181=(($normal)|0);
      var $arraydecay182=(($normal2)|0);
      var $call183=_r8vec_dot_product(3, $arraydecay181, $arraydecay182);
      var $cmp184=$call183 < 0;
      if ($cmp184) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $127=$inside_addr;
      HEAP32[(($127)>>2)]=0;
      label = 62; break;
    case 51: 
      $i=0;
      label = 52; break;
    case 52: 
      var $128=$i;
      var $cmp188=(($128)|(0)) < 3;
      if ($cmp188) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $129=$i;
      var $add190=(($129)|0);
      var $130=$t_addr;
      var $arrayidx191=(($130+($add190<<3))|0);
      var $131=HEAPF64[(($arrayidx191)>>3)];
      var $132=$i;
      var $add192=((($132)+(6))|0);
      var $133=$t_addr;
      var $arrayidx193=(($133+($add192<<3))|0);
      var $134=HEAPF64[(($arrayidx193)>>3)];
      var $sub194=($131)-($134);
      var $135=$i;
      var $arrayidx195=(($v1+($135<<3))|0);
      HEAPF64[(($arrayidx195)>>3)]=$sub194;
      label = 54; break;
    case 54: 
      var $136=$i;
      var $inc197=((($136)+(1))|0);
      $i=$inc197;
      label = 52; break;
    case 55: 
      $i=0;
      label = 56; break;
    case 56: 
      var $137=$i;
      var $cmp200=(($137)|(0)) < 3;
      if ($cmp200) { label = 57; break; } else { label = 59; break; }
    case 57: 
      var $138=$i;
      var $139=$pint_addr;
      var $arrayidx202=(($139+($138<<3))|0);
      var $140=HEAPF64[(($arrayidx202)>>3)];
      var $141=$i;
      var $add203=((($141)+(6))|0);
      var $142=$t_addr;
      var $arrayidx204=(($142+($add203<<3))|0);
      var $143=HEAPF64[(($arrayidx204)>>3)];
      var $sub205=($140)-($143);
      var $144=$i;
      var $arrayidx206=(($v2+($144<<3))|0);
      HEAPF64[(($arrayidx206)>>3)]=$sub205;
      label = 58; break;
    case 58: 
      var $145=$i;
      var $inc208=((($145)+(1))|0);
      $i=$inc208;
      label = 56; break;
    case 59: 
      var $arrayidx210=(($v1+8)|0);
      var $146=HEAPF64[(($arrayidx210)>>3)];
      var $arrayidx211=(($v2+16)|0);
      var $147=HEAPF64[(($arrayidx211)>>3)];
      var $mul212=($146)*($147);
      var $arrayidx213=(($v1+16)|0);
      var $148=HEAPF64[(($arrayidx213)>>3)];
      var $arrayidx214=(($v2+8)|0);
      var $149=HEAPF64[(($arrayidx214)>>3)];
      var $mul215=($148)*($149);
      var $sub216=($mul212)-($mul215);
      var $arrayidx217=(($normal2)|0);
      HEAPF64[(($arrayidx217)>>3)]=$sub216;
      var $arrayidx218=(($v1+16)|0);
      var $150=HEAPF64[(($arrayidx218)>>3)];
      var $arrayidx219=(($v2)|0);
      var $151=HEAPF64[(($arrayidx219)>>3)];
      var $mul220=($150)*($151);
      var $arrayidx221=(($v1)|0);
      var $152=HEAPF64[(($arrayidx221)>>3)];
      var $arrayidx222=(($v2+16)|0);
      var $153=HEAPF64[(($arrayidx222)>>3)];
      var $mul223=($152)*($153);
      var $sub224=($mul220)-($mul223);
      var $arrayidx225=(($normal2+8)|0);
      HEAPF64[(($arrayidx225)>>3)]=$sub224;
      var $arrayidx226=(($v1)|0);
      var $154=HEAPF64[(($arrayidx226)>>3)];
      var $arrayidx227=(($v2+8)|0);
      var $155=HEAPF64[(($arrayidx227)>>3)];
      var $mul228=($154)*($155);
      var $arrayidx229=(($v1+8)|0);
      var $156=HEAPF64[(($arrayidx229)>>3)];
      var $arrayidx230=(($v2)|0);
      var $157=HEAPF64[(($arrayidx230)>>3)];
      var $mul231=($156)*($157);
      var $sub232=($mul228)-($mul231);
      var $arrayidx233=(($normal2+16)|0);
      HEAPF64[(($arrayidx233)>>3)]=$sub232;
      var $arraydecay234=(($normal)|0);
      var $arraydecay235=(($normal2)|0);
      var $call236=_r8vec_dot_product(3, $arraydecay234, $arraydecay235);
      var $cmp237=$call236 < 0;
      if ($cmp237) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $158=$inside_addr;
      HEAP32[(($158)>>2)]=0;
      label = 62; break;
    case 61: 
      var $159=$inside_addr;
      HEAP32[(($159)>>2)]=1;
      label = 62; break;
    case 62: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_contains_line_exp_3d"] = _triangle_contains_line_exp_3d;
function _triangle_contains_point_2d_2($t, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $p_addr;
      var $j;
      var $k;
      $t_addr=$t;
      $p_addr=$p;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $1=$j;
      var $add=((($1)+(1))|0);
      var $rem=((((($add)|(0)))%(3))&-1);
      $k=$rem;
      var $2=$p_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$j;
      var $mul=($4<<1);
      var $add1=(($mul)|0);
      var $5=$t_addr;
      var $arrayidx2=(($5+($add1<<3))|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($3)-($6);
      var $7=$k;
      var $mul3=($7<<1);
      var $add4=((($mul3)+(1))|0);
      var $8=$t_addr;
      var $arrayidx5=(($8+($add4<<3))|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$j;
      var $mul6=($10<<1);
      var $add7=((($mul6)+(1))|0);
      var $11=$t_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($12);
      var $mul10=($sub)*($sub9);
      var $13=$p_addr;
      var $arrayidx11=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx11)>>3)];
      var $15=$j;
      var $mul12=($15<<1);
      var $add13=((($mul12)+(1))|0);
      var $16=$t_addr;
      var $arrayidx14=(($16+($add13<<3))|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($14)-($17);
      var $18=$k;
      var $mul16=($18<<1);
      var $add17=(($mul16)|0);
      var $19=$t_addr;
      var $arrayidx18=(($19+($add17<<3))|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$j;
      var $mul19=($21<<1);
      var $add20=(($mul19)|0);
      var $22=$t_addr;
      var $arrayidx21=(($22+($add20<<3))|0);
      var $23=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($20)-($23);
      var $mul23=($sub15)*($sub22);
      var $sub24=($mul10)-($mul23);
      var $cmp25=0 < $sub24;
      if ($cmp25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=$j;
      var $inc=((($24)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 8: 
      $retval=1;
      label = 9; break;
    case 9: 
      var $25=$retval;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_contains_point_2d_2"] = _triangle_contains_point_2d_2;
function _triangle_contains_point_2d_3($t, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $p_addr;
      var $dir_new;
      var $dir_old;
      var $j;
      var $k;
      $t_addr=$t;
      $p_addr=$p;
      $dir_old=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $1=$j;
      var $add=((($1)+(1))|0);
      var $rem=((((($add)|(0)))%(3))&-1);
      $k=$rem;
      var $2=$p_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAPF64[(($arrayidx)>>3)];
      var $4=$j;
      var $mul=($4<<1);
      var $add1=(($mul)|0);
      var $5=$t_addr;
      var $arrayidx2=(($5+($add1<<3))|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($3)-($6);
      var $7=$k;
      var $mul3=($7<<1);
      var $add4=((($mul3)+(1))|0);
      var $8=$t_addr;
      var $arrayidx5=(($8+($add4<<3))|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$j;
      var $mul6=($10<<1);
      var $add7=((($mul6)+(1))|0);
      var $11=$t_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $sub9=($9)-($12);
      var $mul10=($sub)*($sub9);
      var $13=$p_addr;
      var $arrayidx11=(($13+8)|0);
      var $14=HEAPF64[(($arrayidx11)>>3)];
      var $15=$j;
      var $mul12=($15<<1);
      var $add13=((($mul12)+(1))|0);
      var $16=$t_addr;
      var $arrayidx14=(($16+($add13<<3))|0);
      var $17=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($14)-($17);
      var $18=$k;
      var $mul16=($18<<1);
      var $add17=(($mul16)|0);
      var $19=$t_addr;
      var $arrayidx18=(($19+($add17<<3))|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$j;
      var $mul19=($21<<1);
      var $add20=(($mul19)|0);
      var $22=$t_addr;
      var $arrayidx21=(($22+($add20<<3))|0);
      var $23=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($20)-($23);
      var $mul23=($sub15)*($sub22);
      var $sub24=($mul10)-($mul23);
      $dir_new=$sub24;
      var $24=$dir_new;
      var $25=$dir_old;
      var $mul25=($24)*($25);
      var $cmp26=$mul25 < 0;
      if ($cmp26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 11; break;
    case 6: 
      var $26=$dir_new;
      var $cmp27=$26 != 0;
      if ($cmp27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=$dir_new;
      $dir_old=$27;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $28=$j;
      var $inc=((($28)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 10: 
      $retval=1;
      label = 11; break;
    case 11: 
      var $29=$retval;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_contains_point_2d_3"] = _triangle_contains_point_2d_3;
function _triangle_diameter_2d($t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $a=__stackBase__;
      var $b=(__stackBase__)+(8);
      var $c=(__stackBase__)+(16);
      var $diam;
      $t_addr=$t;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      HEAPF64[(($a)>>3)]=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      HEAPF64[(($b)>>3)]=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      HEAPF64[(($c)>>3)]=$call20;
      var $30=HEAPF64[(($a)>>3)];
      var $cmp=$30 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $31=HEAPF64[(($b)>>3)];
      var $call21=Math.sqrt($31);
      $retval=$call21;
      label = 18; break;
    case 4: 
      var $32=HEAPF64[(($b)>>3)];
      var $cmp22=$32 == 0;
      if ($cmp22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=HEAPF64[(($c)>>3)];
      var $call24=Math.sqrt($33);
      $retval=$call24;
      label = 18; break;
    case 6: 
      var $34=HEAPF64[(($c)>>3)];
      var $cmp26=$34 == 0;
      if ($cmp26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $35=HEAPF64[(($a)>>3)];
      var $call28=Math.sqrt($35);
      $retval=$call28;
      label = 18; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $36=HEAPF64[(($a)>>3)];
      var $37=HEAPF64[(($b)>>3)];
      var $cmp31=$36 < $37;
      if ($cmp31) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _r8_swap($a, $b);
      label = 12; break;
    case 12: 
      var $38=HEAPF64[(($a)>>3)];
      var $39=HEAPF64[(($c)>>3)];
      var $cmp34=$38 < $39;
      if ($cmp34) { label = 13; break; } else { label = 14; break; }
    case 13: 
      _r8_swap($a, $c);
      label = 14; break;
    case 14: 
      var $40=HEAPF64[(($b)>>3)];
      var $41=HEAPF64[(($c)>>3)];
      var $add37=($40)+($41);
      var $42=HEAPF64[(($a)>>3)];
      var $cmp38=$add37 < $42;
      if ($cmp38) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $43=HEAPF64[(($a)>>3)];
      var $call40=Math.sqrt($43);
      $diam=$call40;
      label = 17; break;
    case 16: 
      var $44=HEAPF64[(($a)>>3)];
      var $call42=Math.sqrt($44);
      HEAPF64[(($a)>>3)]=$call42;
      var $45=HEAPF64[(($b)>>3)];
      var $call43=Math.sqrt($45);
      HEAPF64[(($b)>>3)]=$call43;
      var $46=HEAPF64[(($c)>>3)];
      var $call44=Math.sqrt($46);
      HEAPF64[(($c)>>3)]=$call44;
      var $47=HEAPF64[(($a)>>3)];
      var $mul=($47)*(2);
      var $48=HEAPF64[(($b)>>3)];
      var $mul45=($mul)*($48);
      var $49=HEAPF64[(($c)>>3)];
      var $mul46=($mul45)*($49);
      var $50=HEAPF64[(($a)>>3)];
      var $51=HEAPF64[(($b)>>3)];
      var $add47=($50)+($51);
      var $52=HEAPF64[(($c)>>3)];
      var $add48=($add47)+($52);
      var $53=HEAPF64[(($a)>>3)];
      var $sub49=(-$53);
      var $54=HEAPF64[(($b)>>3)];
      var $add50=($sub49)+($54);
      var $55=HEAPF64[(($c)>>3)];
      var $add51=($add50)+($55);
      var $mul52=($add48)*($add51);
      var $56=HEAPF64[(($a)>>3)];
      var $57=HEAPF64[(($b)>>3)];
      var $sub53=($56)-($57);
      var $58=HEAPF64[(($c)>>3)];
      var $add54=($sub53)+($58);
      var $mul55=($mul52)*($add54);
      var $59=HEAPF64[(($a)>>3)];
      var $60=HEAPF64[(($b)>>3)];
      var $add56=($59)+($60);
      var $61=HEAPF64[(($c)>>3)];
      var $sub57=($add56)-($61);
      var $mul58=($mul55)*($sub57);
      var $call59=Math.sqrt($mul58);
      var $div=($mul46)/($call59);
      $diam=$div;
      label = 17; break;
    case 17: 
      var $62=$diam;
      $retval=$62;
      label = 18; break;
    case 18: 
      var $63=$retval;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_diameter_2d"] = _triangle_diameter_2d;
function _triangle_contains_line_par_3d($t, $p0, $pd, $inside, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p0_addr;
      var $pd_addr;
      var $inside_addr;
      var $p_addr;
      var $a;
      var $angle_sum;
      var $b;
      var $c;
      var $d;
      var $denom;
      var $dim;
      var $norm;
      var $norm1;
      var $norm2;
      var $pi;
      var $t_int;
      var $tol;
      var $v1=__stackBase__;
      var $v2=(__stackBase__)+(24);
      var $v3=(__stackBase__)+(48);
      $t_addr=$t;
      $p0_addr=$p0;
      $pd_addr=$pd;
      $inside_addr=$inside;
      $p_addr=$p;
      $pi=3.141592653589793;
      $tol=0.00001;
      var $0=$t_addr;
      var $arrayidx=(($0+32)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2+8)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=$t_addr;
      var $arrayidx2=(($4+64)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$t_addr;
      var $arrayidx3=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($5)-($7);
      var $mul=($sub)*($sub4);
      var $8=$t_addr;
      var $arrayidx5=(($8+40)|0);
      var $9=HEAPF64[(($arrayidx5)>>3)];
      var $10=$t_addr;
      var $arrayidx6=(($10+16)|0);
      var $11=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($9)-($11);
      var $12=$t_addr;
      var $arrayidx8=(($12+56)|0);
      var $13=HEAPF64[(($arrayidx8)>>3)];
      var $14=$t_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($13)-($15);
      var $mul11=($sub7)*($sub10);
      var $sub12=($mul)-($mul11);
      $a=$sub12;
      var $16=$t_addr;
      var $arrayidx13=(($16+40)|0);
      var $17=HEAPF64[(($arrayidx13)>>3)];
      var $18=$t_addr;
      var $arrayidx14=(($18+16)|0);
      var $19=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($17)-($19);
      var $20=$t_addr;
      var $arrayidx16=(($20+48)|0);
      var $21=HEAPF64[(($arrayidx16)>>3)];
      var $22=$t_addr;
      var $arrayidx17=(($22)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($21)-($23);
      var $mul19=($sub15)*($sub18);
      var $24=$t_addr;
      var $arrayidx20=(($24+24)|0);
      var $25=HEAPF64[(($arrayidx20)>>3)];
      var $26=$t_addr;
      var $arrayidx21=(($26)|0);
      var $27=HEAPF64[(($arrayidx21)>>3)];
      var $sub22=($25)-($27);
      var $28=$t_addr;
      var $arrayidx23=(($28+64)|0);
      var $29=HEAPF64[(($arrayidx23)>>3)];
      var $30=$t_addr;
      var $arrayidx24=(($30+16)|0);
      var $31=HEAPF64[(($arrayidx24)>>3)];
      var $sub25=($29)-($31);
      var $mul26=($sub22)*($sub25);
      var $sub27=($mul19)-($mul26);
      $b=$sub27;
      var $32=$t_addr;
      var $arrayidx28=(($32+24)|0);
      var $33=HEAPF64[(($arrayidx28)>>3)];
      var $34=$t_addr;
      var $arrayidx29=(($34)|0);
      var $35=HEAPF64[(($arrayidx29)>>3)];
      var $sub30=($33)-($35);
      var $36=$t_addr;
      var $arrayidx31=(($36+56)|0);
      var $37=HEAPF64[(($arrayidx31)>>3)];
      var $38=$t_addr;
      var $arrayidx32=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx32)>>3)];
      var $sub33=($37)-($39);
      var $mul34=($sub30)*($sub33);
      var $40=$t_addr;
      var $arrayidx35=(($40+32)|0);
      var $41=HEAPF64[(($arrayidx35)>>3)];
      var $42=$t_addr;
      var $arrayidx36=(($42+8)|0);
      var $43=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($41)-($43);
      var $44=$t_addr;
      var $arrayidx38=(($44+48)|0);
      var $45=HEAPF64[(($arrayidx38)>>3)];
      var $46=$t_addr;
      var $arrayidx39=(($46)|0);
      var $47=HEAPF64[(($arrayidx39)>>3)];
      var $sub40=($45)-($47);
      var $mul41=($sub37)*($sub40);
      var $sub42=($mul34)-($mul41);
      $c=$sub42;
      var $48=$t_addr;
      var $arrayidx43=(($48+24)|0);
      var $49=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=(-$49);
      var $50=$a;
      var $mul45=($sub44)*($50);
      var $51=$t_addr;
      var $arrayidx46=(($51+32)|0);
      var $52=HEAPF64[(($arrayidx46)>>3)];
      var $53=$b;
      var $mul47=($52)*($53);
      var $sub48=($mul45)-($mul47);
      var $54=$t_addr;
      var $arrayidx49=(($54+40)|0);
      var $55=HEAPF64[(($arrayidx49)>>3)];
      var $56=$c;
      var $mul50=($55)*($56);
      var $sub51=($sub48)-($mul50);
      $d=$sub51;
      var $57=$a;
      var $58=$a;
      var $mul52=($57)*($58);
      var $59=$b;
      var $60=$b;
      var $mul53=($59)*($60);
      var $add=($mul52)+($mul53);
      var $61=$c;
      var $62=$c;
      var $mul54=($61)*($62);
      var $add55=($add)+($mul54);
      var $call=Math.sqrt($add55);
      $norm1=$call;
      var $63=$norm1;
      var $cmp=$63 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $64=HEAP32[((_stderr)>>2)];
      var $call56=_fprintf($64, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $65=HEAP32[((_stderr)>>2)];
      var $call57=_fprintf($65, ((11672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $66=HEAP32[((_stderr)>>2)];
      var $call58=_fprintf($66, ((6392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $67=$inside_addr;
      HEAP32[(($67)>>2)]=0;
      var $68=$p_addr;
      _r8vec_zero(3, $68);
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      var $69=$pd_addr;
      var $call59=_r8vec_norm(3, $69);
      $norm2=$call59;
      var $70=$norm2;
      var $cmp60=$70 == 0;
      if ($cmp60) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $71=HEAP32[((_stderr)>>2)];
      var $call62=_fprintf($71, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $72=HEAP32[((_stderr)>>2)];
      var $call63=_fprintf($72, ((11672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $73=HEAP32[((_stderr)>>2)];
      var $call64=_fprintf($73, ((6320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $74=$inside_addr;
      HEAP32[(($74)>>2)]=0;
      var $75=$p_addr;
      _r8vec_zero(3, $75);
      _exit(1);
      throw "Reached an unreachable!";
    case 6: 
      var $76=$a;
      var $77=$pd_addr;
      var $arrayidx66=(($77)|0);
      var $78=HEAPF64[(($arrayidx66)>>3)];
      var $mul67=($76)*($78);
      var $79=$b;
      var $80=$pd_addr;
      var $arrayidx68=(($80+8)|0);
      var $81=HEAPF64[(($arrayidx68)>>3)];
      var $mul69=($79)*($81);
      var $add70=($mul67)+($mul69);
      var $82=$c;
      var $83=$pd_addr;
      var $arrayidx71=(($83+16)|0);
      var $84=HEAPF64[(($arrayidx71)>>3)];
      var $mul72=($82)*($84);
      var $add73=($add70)+($mul72);
      $denom=$add73;
      var $85=$denom;
      var $call74=_r8_abs($85);
      var $86=$tol;
      var $87=$norm1;
      var $mul75=($86)*($87);
      var $88=$norm2;
      var $mul76=($mul75)*($88);
      var $cmp77=$call74 < $mul76;
      if ($cmp77) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $89=$a;
      var $90=$p0_addr;
      var $arrayidx79=(($90)|0);
      var $91=HEAPF64[(($arrayidx79)>>3)];
      var $mul80=($89)*($91);
      var $92=$b;
      var $93=$p0_addr;
      var $arrayidx81=(($93+8)|0);
      var $94=HEAPF64[(($arrayidx81)>>3)];
      var $mul82=($92)*($94);
      var $add83=($mul80)+($mul82);
      var $95=$c;
      var $96=$p0_addr;
      var $arrayidx84=(($96+16)|0);
      var $97=HEAPF64[(($arrayidx84)>>3)];
      var $mul85=($95)*($97);
      var $add86=($add83)+($mul85);
      var $98=$d;
      var $add87=($add86)+($98);
      var $cmp88=$add87 == 0;
      if ($cmp88) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $99=$inside_addr;
      HEAP32[(($99)>>2)]=0;
      var $100=$p0_addr;
      var $101=$p_addr;
      _r8vec_copy(3, $100, $101);
      label = 10; break;
    case 9: 
      var $102=$inside_addr;
      HEAP32[(($102)>>2)]=0;
      var $103=$p_addr;
      _r8vec_zero(3, $103);
      label = 10; break;
    case 10: 
      label = 49; break;
    case 11: 
      var $104=$a;
      var $105=$p0_addr;
      var $arrayidx92=(($105)|0);
      var $106=HEAPF64[(($arrayidx92)>>3)];
      var $mul93=($104)*($106);
      var $107=$b;
      var $108=$p0_addr;
      var $arrayidx94=(($108+8)|0);
      var $109=HEAPF64[(($arrayidx94)>>3)];
      var $mul95=($107)*($109);
      var $add96=($mul93)+($mul95);
      var $110=$c;
      var $111=$p0_addr;
      var $arrayidx97=(($111+16)|0);
      var $112=HEAPF64[(($arrayidx97)>>3)];
      var $mul98=($110)*($112);
      var $add99=($add96)+($mul98);
      var $113=$d;
      var $add100=($add99)+($113);
      var $sub101=(-$add100);
      var $114=$denom;
      var $div=($sub101)/($114);
      $t_int=$div;
      $dim=0;
      label = 12; break;
    case 12: 
      var $115=$dim;
      var $cmp102=(($115)|(0)) < 3;
      if ($cmp102) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $116=$dim;
      var $117=$p0_addr;
      var $arrayidx103=(($117+($116<<3))|0);
      var $118=HEAPF64[(($arrayidx103)>>3)];
      var $119=$t_int;
      var $120=$dim;
      var $121=$pd_addr;
      var $arrayidx104=(($121+($120<<3))|0);
      var $122=HEAPF64[(($arrayidx104)>>3)];
      var $mul105=($119)*($122);
      var $add106=($118)+($mul105);
      var $123=$dim;
      var $124=$p_addr;
      var $arrayidx107=(($124+($123<<3))|0);
      HEAPF64[(($arrayidx107)>>3)]=$add106;
      label = 14; break;
    case 14: 
      var $125=$dim;
      var $inc=((($125)+(1))|0);
      $dim=$inc;
      label = 12; break;
    case 15: 
      $dim=0;
      label = 16; break;
    case 16: 
      var $126=$dim;
      var $cmp109=(($126)|(0)) < 3;
      if ($cmp109) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $127=$dim;
      var $add111=(($127)|0);
      var $128=$t_addr;
      var $arrayidx112=(($128+($add111<<3))|0);
      var $129=HEAPF64[(($arrayidx112)>>3)];
      var $130=$dim;
      var $131=$p_addr;
      var $arrayidx113=(($131+($130<<3))|0);
      var $132=HEAPF64[(($arrayidx113)>>3)];
      var $sub114=($129)-($132);
      var $133=$dim;
      var $arrayidx115=(($v1+($133<<3))|0);
      HEAPF64[(($arrayidx115)>>3)]=$sub114;
      label = 18; break;
    case 18: 
      var $134=$dim;
      var $inc117=((($134)+(1))|0);
      $dim=$inc117;
      label = 16; break;
    case 19: 
      $dim=0;
      label = 20; break;
    case 20: 
      var $135=$dim;
      var $cmp120=(($135)|(0)) < 3;
      if ($cmp120) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $136=$dim;
      var $add122=((($136)+(3))|0);
      var $137=$t_addr;
      var $arrayidx123=(($137+($add122<<3))|0);
      var $138=HEAPF64[(($arrayidx123)>>3)];
      var $139=$dim;
      var $140=$p_addr;
      var $arrayidx124=(($140+($139<<3))|0);
      var $141=HEAPF64[(($arrayidx124)>>3)];
      var $sub125=($138)-($141);
      var $142=$dim;
      var $arrayidx126=(($v2+($142<<3))|0);
      HEAPF64[(($arrayidx126)>>3)]=$sub125;
      label = 22; break;
    case 22: 
      var $143=$dim;
      var $inc128=((($143)+(1))|0);
      $dim=$inc128;
      label = 20; break;
    case 23: 
      $dim=0;
      label = 24; break;
    case 24: 
      var $144=$dim;
      var $cmp131=(($144)|(0)) < 3;
      if ($cmp131) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $145=$dim;
      var $add133=((($145)+(6))|0);
      var $146=$t_addr;
      var $arrayidx134=(($146+($add133<<3))|0);
      var $147=HEAPF64[(($arrayidx134)>>3)];
      var $148=$dim;
      var $149=$p_addr;
      var $arrayidx135=(($149+($148<<3))|0);
      var $150=HEAPF64[(($arrayidx135)>>3)];
      var $sub136=($147)-($150);
      var $151=$dim;
      var $arrayidx137=(($v3+($151<<3))|0);
      HEAPF64[(($arrayidx137)>>3)]=$sub136;
      label = 26; break;
    case 26: 
      var $152=$dim;
      var $inc139=((($152)+(1))|0);
      $dim=$inc139;
      label = 24; break;
    case 27: 
      var $arraydecay=(($v1)|0);
      var $call141=_r8vec_norm(3, $arraydecay);
      $norm=$call141;
      var $153=$norm;
      var $cmp142=$153 == 0;
      if ($cmp142) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $154=$inside_addr;
      HEAP32[(($154)>>2)]=1;
      label = 50; break;
    case 29: 
      $dim=0;
      label = 30; break;
    case 30: 
      var $155=$dim;
      var $cmp146=(($155)|(0)) < 3;
      if ($cmp146) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $156=$dim;
      var $arrayidx148=(($v1+($156<<3))|0);
      var $157=HEAPF64[(($arrayidx148)>>3)];
      var $158=$norm;
      var $div149=($157)/($158);
      var $159=$dim;
      var $arrayidx150=(($v1+($159<<3))|0);
      HEAPF64[(($arrayidx150)>>3)]=$div149;
      label = 32; break;
    case 32: 
      var $160=$dim;
      var $inc152=((($160)+(1))|0);
      $dim=$inc152;
      label = 30; break;
    case 33: 
      var $arraydecay154=(($v2)|0);
      var $call155=_r8vec_norm(3, $arraydecay154);
      $norm=$call155;
      var $161=$norm;
      var $cmp156=$161 == 0;
      if ($cmp156) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $162=$inside_addr;
      HEAP32[(($162)>>2)]=1;
      label = 50; break;
    case 35: 
      $dim=0;
      label = 36; break;
    case 36: 
      var $163=$dim;
      var $cmp160=(($163)|(0)) < 3;
      if ($cmp160) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $164=$dim;
      var $arrayidx162=(($v2+($164<<3))|0);
      var $165=HEAPF64[(($arrayidx162)>>3)];
      var $166=$norm;
      var $div163=($165)/($166);
      var $167=$dim;
      var $arrayidx164=(($v2+($167<<3))|0);
      HEAPF64[(($arrayidx164)>>3)]=$div163;
      label = 38; break;
    case 38: 
      var $168=$dim;
      var $inc166=((($168)+(1))|0);
      $dim=$inc166;
      label = 36; break;
    case 39: 
      var $arraydecay168=(($v3)|0);
      var $call169=_r8vec_norm(3, $arraydecay168);
      $norm=$call169;
      var $169=$norm;
      var $cmp170=$169 == 0;
      if ($cmp170) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $170=$inside_addr;
      HEAP32[(($170)>>2)]=1;
      label = 50; break;
    case 41: 
      $dim=0;
      label = 42; break;
    case 42: 
      var $171=$dim;
      var $cmp174=(($171)|(0)) < 3;
      if ($cmp174) { label = 43; break; } else { label = 45; break; }
    case 43: 
      var $172=$dim;
      var $arrayidx176=(($v3+($172<<3))|0);
      var $173=HEAPF64[(($arrayidx176)>>3)];
      var $174=$norm;
      var $div177=($173)/($174);
      var $175=$dim;
      var $arrayidx178=(($v3+($175<<3))|0);
      HEAPF64[(($arrayidx178)>>3)]=$div177;
      label = 44; break;
    case 44: 
      var $176=$dim;
      var $inc180=((($176)+(1))|0);
      $dim=$inc180;
      label = 42; break;
    case 45: 
      var $arraydecay182=(($v1)|0);
      var $arraydecay183=(($v2)|0);
      var $call184=_r8vec_dot_product(3, $arraydecay182, $arraydecay183);
      var $call185=_r8_acos($call184);
      var $arraydecay186=(($v2)|0);
      var $arraydecay187=(($v3)|0);
      var $call188=_r8vec_dot_product(3, $arraydecay186, $arraydecay187);
      var $call189=_r8_acos($call188);
      var $add190=($call185)+($call189);
      var $arraydecay191=(($v3)|0);
      var $arraydecay192=(($v1)|0);
      var $call193=_r8vec_dot_product(3, $arraydecay191, $arraydecay192);
      var $call194=_r8_acos($call193);
      var $add195=($add190)+($call194);
      $angle_sum=$add195;
      var $177=$angle_sum;
      var $178=$pi;
      var $div196=($177)/($178);
      var $call197=_r8_nint($div196);
      var $cmp198=(($call197)|(0))==2;
      if ($cmp198) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $179=$inside_addr;
      HEAP32[(($179)>>2)]=1;
      label = 48; break;
    case 47: 
      var $180=$inside_addr;
      HEAP32[(($180)>>2)]=0;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_contains_line_par_3d"] = _triangle_contains_line_par_3d;
function _triangle_gridpoints_2d($t, $sub_num, $grid_max, $grid_num, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $sub_num_addr;
      var $grid_max_addr;
      var $grid_num_addr;
      var $p_addr;
      var $i;
      var $j;
      $t_addr=$t;
      $sub_num_addr=$sub_num;
      $grid_max_addr=$grid_max;
      $grid_num_addr=$grid_num;
      $p_addr=$p;
      var $0=$grid_num_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$sub_num_addr;
      var $cmp=(($1)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $2=$grid_num_addr;
      var $3=HEAP32[(($2)>>2)];
      var $add=((($3)+(1))|0);
      var $4=$grid_max_addr;
      var $cmp1=(($add)|(0)) <= (($4)|(0));
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $5=$t_addr;
      var $arrayidx=(($5)|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+16)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $add4=($6)+($8);
      var $9=$t_addr;
      var $arrayidx5=(($9+32)|0);
      var $10=HEAPF64[(($arrayidx5)>>3)];
      var $add6=($add4)+($10);
      var $div=($add6)/(3);
      var $11=$grid_num_addr;
      var $12=HEAP32[(($11)>>2)];
      var $mul=($12<<1);
      var $add7=(($mul)|0);
      var $13=$p_addr;
      var $arrayidx8=(($13+($add7<<3))|0);
      HEAPF64[(($arrayidx8)>>3)]=$div;
      var $14=$t_addr;
      var $arrayidx9=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx9)>>3)];
      var $16=$t_addr;
      var $arrayidx10=(($16+24)|0);
      var $17=HEAPF64[(($arrayidx10)>>3)];
      var $add11=($15)+($17);
      var $18=$t_addr;
      var $arrayidx12=(($18+40)|0);
      var $19=HEAPF64[(($arrayidx12)>>3)];
      var $add13=($add11)+($19);
      var $div14=($add13)/(3);
      var $20=$grid_num_addr;
      var $21=HEAP32[(($20)>>2)];
      var $mul15=($21<<1);
      var $add16=((($mul15)+(1))|0);
      var $22=$p_addr;
      var $arrayidx17=(($22+($add16<<3))|0);
      HEAPF64[(($arrayidx17)>>3)]=$div14;
      var $23=$grid_num_addr;
      var $24=HEAP32[(($23)>>2)];
      var $add18=((($24)+(1))|0);
      var $25=$grid_num_addr;
      HEAP32[(($25)>>2)]=$add18;
      label = 5; break;
    case 5: 
      label = 17; break;
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $26=$i;
      var $27=$sub_num_addr;
      var $cmp20=(($26)|(0)) <= (($27)|(0));
      if ($cmp20) { label = 8; break; } else { label = 16; break; }
    case 8: 
      $j=0;
      label = 9; break;
    case 9: 
      var $28=$j;
      var $29=$sub_num_addr;
      var $30=$i;
      var $sub=((($29)-($30))|0);
      var $cmp22=(($28)|(0)) <= (($sub)|(0));
      if ($cmp22) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $31=$grid_max_addr;
      var $32=$grid_num_addr;
      var $33=HEAP32[(($32)>>2)];
      var $cmp24=(($31)|(0)) <= (($33)|(0));
      if ($cmp24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 17; break;
    case 12: 
      var $34=$i;
      var $conv=(($34)|(0));
      var $35=$t_addr;
      var $arrayidx27=(($35)|0);
      var $36=HEAPF64[(($arrayidx27)>>3)];
      var $mul28=($conv)*($36);
      var $37=$j;
      var $conv29=(($37)|(0));
      var $38=$t_addr;
      var $arrayidx30=(($38+16)|0);
      var $39=HEAPF64[(($arrayidx30)>>3)];
      var $mul31=($conv29)*($39);
      var $add32=($mul28)+($mul31);
      var $40=$sub_num_addr;
      var $41=$i;
      var $sub33=((($40)-($41))|0);
      var $42=$j;
      var $sub34=((($sub33)-($42))|0);
      var $conv35=(($sub34)|(0));
      var $43=$t_addr;
      var $arrayidx36=(($43+32)|0);
      var $44=HEAPF64[(($arrayidx36)>>3)];
      var $mul37=($conv35)*($44);
      var $add38=($add32)+($mul37);
      var $45=$sub_num_addr;
      var $conv39=(($45)|(0));
      var $div40=($add38)/($conv39);
      var $46=$grid_num_addr;
      var $47=HEAP32[(($46)>>2)];
      var $mul41=($47<<1);
      var $add42=(($mul41)|0);
      var $48=$p_addr;
      var $arrayidx43=(($48+($add42<<3))|0);
      HEAPF64[(($arrayidx43)>>3)]=$div40;
      var $49=$i;
      var $conv44=(($49)|(0));
      var $50=$t_addr;
      var $arrayidx45=(($50+8)|0);
      var $51=HEAPF64[(($arrayidx45)>>3)];
      var $mul46=($conv44)*($51);
      var $52=$j;
      var $conv47=(($52)|(0));
      var $53=$t_addr;
      var $arrayidx48=(($53+24)|0);
      var $54=HEAPF64[(($arrayidx48)>>3)];
      var $mul49=($conv47)*($54);
      var $add50=($mul46)+($mul49);
      var $55=$sub_num_addr;
      var $56=$i;
      var $sub51=((($55)-($56))|0);
      var $57=$j;
      var $sub52=((($sub51)-($57))|0);
      var $conv53=(($sub52)|(0));
      var $58=$t_addr;
      var $arrayidx54=(($58+40)|0);
      var $59=HEAPF64[(($arrayidx54)>>3)];
      var $mul55=($conv53)*($59);
      var $add56=($add50)+($mul55);
      var $60=$sub_num_addr;
      var $conv57=(($60)|(0));
      var $div58=($add56)/($conv57);
      var $61=$grid_num_addr;
      var $62=HEAP32[(($61)>>2)];
      var $mul59=($62<<1);
      var $add60=((($mul59)+(1))|0);
      var $63=$p_addr;
      var $arrayidx61=(($63+($add60<<3))|0);
      HEAPF64[(($arrayidx61)>>3)]=$div58;
      var $64=$grid_num_addr;
      var $65=HEAP32[(($64)>>2)];
      var $add62=((($65)+(1))|0);
      var $66=$grid_num_addr;
      HEAP32[(($66)>>2)]=$add62;
      label = 13; break;
    case 13: 
      var $67=$j;
      var $inc=((($67)+(1))|0);
      $j=$inc;
      label = 9; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $68=$i;
      var $inc64=((($68)+(1))|0);
      $i=$inc64;
      label = 7; break;
    case 16: 
      label = 17; break;
    case 17: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_gridpoints_2d"] = _triangle_gridpoints_2d;
function _triangle_edge_length_2d($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $edge_length;
      var $j1;
      var $j2;
      $t_addr=$t;
      var $call=_malloc(24);
      var $0=$call;
      $edge_length=$0;
      $j1=0;
      label = 3; break;
    case 3: 
      var $1=$j1;
      var $cmp=(($1)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$j1;
      var $add=((($2)+(1))|0);
      var $call1=_i4_wrap($add, 0, 2);
      $j2=$call1;
      var $3=$j2;
      var $mul=($3<<1);
      var $add2=(($mul)|0);
      var $4=$t_addr;
      var $arrayidx=(($4+($add2<<3))|0);
      var $5=HEAPF64[(($arrayidx)>>3)];
      var $6=$j1;
      var $mul3=($6<<1);
      var $add4=(($mul3)|0);
      var $7=$t_addr;
      var $arrayidx5=(($7+($add4<<3))|0);
      var $8=HEAPF64[(($arrayidx5)>>3)];
      var $sub=($5)-($8);
      var $9=Math.pow($sub, 2);
      var $10=$j2;
      var $mul6=($10<<1);
      var $add7=((($mul6)+(1))|0);
      var $11=$t_addr;
      var $arrayidx8=(($11+($add7<<3))|0);
      var $12=HEAPF64[(($arrayidx8)>>3)];
      var $13=$j1;
      var $mul9=($13<<1);
      var $add10=((($mul9)+(1))|0);
      var $14=$t_addr;
      var $arrayidx11=(($14+($add10<<3))|0);
      var $15=HEAPF64[(($arrayidx11)>>3)];
      var $sub12=($12)-($15);
      var $16=Math.pow($sub12, 2);
      var $add13=($9)+($16);
      var $call14=Math.sqrt($add13);
      var $17=$j1;
      var $18=$edge_length;
      var $arrayidx15=(($18+($17<<3))|0);
      HEAPF64[(($arrayidx15)>>3)]=$call14;
      label = 5; break;
    case 5: 
      var $19=$j1;
      var $inc=((($19)+(1))|0);
      $j1=$inc;
      label = 3; break;
    case 6: 
      var $20=$edge_length;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_edge_length_2d"] = _triangle_edge_length_2d;
function _triangle_incenter_2d($t, $pc) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $pc_addr;
      var $perim;
      var $s12;
      var $s23;
      var $s31;
      $t_addr=$t;
      $pc_addr=$pc;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      $s12=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      $s23=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      $s31=$call20;
      var $30=$s12;
      var $31=$s23;
      var $add21=($30)+($31);
      var $32=$s31;
      var $add22=($add21)+($32);
      $perim=$add22;
      var $33=$perim;
      var $cmp=$33 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $34=$t_addr;
      var $arrayidx23=(($34)|0);
      var $35=HEAPF64[(($arrayidx23)>>3)];
      var $36=$pc_addr;
      var $arrayidx24=(($36)|0);
      HEAPF64[(($arrayidx24)>>3)]=$35;
      var $37=$t_addr;
      var $arrayidx25=(($37+8)|0);
      var $38=HEAPF64[(($arrayidx25)>>3)];
      var $39=$pc_addr;
      var $arrayidx26=(($39+8)|0);
      HEAPF64[(($arrayidx26)>>3)]=$38;
      label = 5; break;
    case 4: 
      var $40=$s23;
      var $41=$t_addr;
      var $arrayidx27=(($41)|0);
      var $42=HEAPF64[(($arrayidx27)>>3)];
      var $mul=($40)*($42);
      var $43=$s31;
      var $44=$t_addr;
      var $arrayidx28=(($44+16)|0);
      var $45=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($43)*($45);
      var $add30=($mul)+($mul29);
      var $46=$s12;
      var $47=$t_addr;
      var $arrayidx31=(($47+32)|0);
      var $48=HEAPF64[(($arrayidx31)>>3)];
      var $mul32=($46)*($48);
      var $add33=($add30)+($mul32);
      var $49=$perim;
      var $div=($add33)/($49);
      var $50=$pc_addr;
      var $arrayidx34=(($50)|0);
      HEAPF64[(($arrayidx34)>>3)]=$div;
      var $51=$s23;
      var $52=$t_addr;
      var $arrayidx35=(($52+8)|0);
      var $53=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($51)*($53);
      var $54=$s31;
      var $55=$t_addr;
      var $arrayidx37=(($55+24)|0);
      var $56=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($54)*($56);
      var $add39=($mul36)+($mul38);
      var $57=$s12;
      var $58=$t_addr;
      var $arrayidx40=(($58+40)|0);
      var $59=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($57)*($59);
      var $add42=($add39)+($mul41);
      var $60=$perim;
      var $div43=($add42)/($60);
      var $61=$pc_addr;
      var $arrayidx44=(($61+8)|0);
      HEAPF64[(($arrayidx44)>>3)]=$div43;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_incenter_2d"] = _triangle_incenter_2d;
function _triangle_incircle_2d($t, $pc, $r) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $pc_addr;
      var $r_addr;
      var $perim;
      var $s12;
      var $s23;
      var $s31;
      $t_addr=$t;
      $pc_addr=$pc;
      $r_addr=$r;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      $s12=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      $s23=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      $s31=$call20;
      var $30=$s12;
      var $31=$s23;
      var $add21=($30)+($31);
      var $32=$s31;
      var $add22=($add21)+($32);
      $perim=$add22;
      var $33=$perim;
      var $cmp=$33 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $34=$r_addr;
      HEAPF64[(($34)>>3)]=0;
      var $35=$t_addr;
      var $arrayidx23=(($35)|0);
      var $36=HEAPF64[(($arrayidx23)>>3)];
      var $37=$pc_addr;
      var $arrayidx24=(($37)|0);
      HEAPF64[(($arrayidx24)>>3)]=$36;
      var $38=$t_addr;
      var $arrayidx25=(($38+8)|0);
      var $39=HEAPF64[(($arrayidx25)>>3)];
      var $40=$pc_addr;
      var $arrayidx26=(($40+8)|0);
      HEAPF64[(($arrayidx26)>>3)]=$39;
      label = 5; break;
    case 4: 
      var $41=$s23;
      var $42=$t_addr;
      var $arrayidx27=(($42)|0);
      var $43=HEAPF64[(($arrayidx27)>>3)];
      var $mul=($41)*($43);
      var $44=$s31;
      var $45=$t_addr;
      var $arrayidx28=(($45+16)|0);
      var $46=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($44)*($46);
      var $add30=($mul)+($mul29);
      var $47=$s12;
      var $48=$t_addr;
      var $arrayidx31=(($48+32)|0);
      var $49=HEAPF64[(($arrayidx31)>>3)];
      var $mul32=($47)*($49);
      var $add33=($add30)+($mul32);
      var $50=$perim;
      var $div=($add33)/($50);
      var $51=$pc_addr;
      var $arrayidx34=(($51)|0);
      HEAPF64[(($arrayidx34)>>3)]=$div;
      var $52=$s23;
      var $53=$t_addr;
      var $arrayidx35=(($53+8)|0);
      var $54=HEAPF64[(($arrayidx35)>>3)];
      var $mul36=($52)*($54);
      var $55=$s31;
      var $56=$t_addr;
      var $arrayidx37=(($56+24)|0);
      var $57=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($55)*($57);
      var $add39=($mul36)+($mul38);
      var $58=$s12;
      var $59=$t_addr;
      var $arrayidx40=(($59+40)|0);
      var $60=HEAPF64[(($arrayidx40)>>3)];
      var $mul41=($58)*($60);
      var $add42=($add39)+($mul41);
      var $61=$perim;
      var $div43=($add42)/($61);
      var $62=$pc_addr;
      var $arrayidx44=(($62+8)|0);
      HEAPF64[(($arrayidx44)>>3)]=$div43;
      var $63=$s12;
      var $sub45=(-$63);
      var $64=$s23;
      var $add46=($sub45)+($64);
      var $65=$s31;
      var $add47=($add46)+($65);
      var $66=$s12;
      var $67=$s23;
      var $sub48=($66)-($67);
      var $68=$s31;
      var $add49=($sub48)+($68);
      var $mul50=($add47)*($add49);
      var $69=$s12;
      var $70=$s23;
      var $add51=($69)+($70);
      var $71=$s31;
      var $sub52=($add51)-($71);
      var $mul53=($mul50)*($sub52);
      var $72=$perim;
      var $div54=($mul53)/($72);
      var $call55=Math.sqrt($div54);
      var $mul56=($call55)*(0.5);
      var $73=$r_addr;
      HEAPF64[(($73)>>3)]=$mul56;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_incircle_2d"] = _triangle_incircle_2d;
function _triangle_inradius_2d($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $perim;
      var $r;
      var $s12;
      var $s23;
      var $s31;
      $t_addr=$t;
      var $0=$t_addr;
      var $arrayidx=(($0+16)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$t_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $sub=($1)-($3);
      var $4=Math.pow($sub, 2);
      var $5=$t_addr;
      var $arrayidx2=(($5+24)|0);
      var $6=HEAPF64[(($arrayidx2)>>3)];
      var $7=$t_addr;
      var $arrayidx3=(($7+8)|0);
      var $8=HEAPF64[(($arrayidx3)>>3)];
      var $sub4=($6)-($8);
      var $9=Math.pow($sub4, 2);
      var $add=($4)+($9);
      var $call=Math.sqrt($add);
      $s12=$call;
      var $10=$t_addr;
      var $arrayidx5=(($10+32)|0);
      var $11=HEAPF64[(($arrayidx5)>>3)];
      var $12=$t_addr;
      var $arrayidx6=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx6)>>3)];
      var $sub7=($11)-($13);
      var $14=Math.pow($sub7, 2);
      var $15=$t_addr;
      var $arrayidx8=(($15+40)|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $17=$t_addr;
      var $arrayidx9=(($17+24)|0);
      var $18=HEAPF64[(($arrayidx9)>>3)];
      var $sub10=($16)-($18);
      var $19=Math.pow($sub10, 2);
      var $add11=($14)+($19);
      var $call12=Math.sqrt($add11);
      $s23=$call12;
      var $20=$t_addr;
      var $arrayidx13=(($20)|0);
      var $21=HEAPF64[(($arrayidx13)>>3)];
      var $22=$t_addr;
      var $arrayidx14=(($22+32)|0);
      var $23=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($21)-($23);
      var $24=Math.pow($sub15, 2);
      var $25=$t_addr;
      var $arrayidx16=(($25+8)|0);
      var $26=HEAPF64[(($arrayidx16)>>3)];
      var $27=$t_addr;
      var $arrayidx17=(($27+40)|0);
      var $28=HEAPF64[(($arrayidx17)>>3)];
      var $sub18=($26)-($28);
      var $29=Math.pow($sub18, 2);
      var $add19=($24)+($29);
      var $call20=Math.sqrt($add19);
      $s31=$call20;
      var $30=$s12;
      var $31=$s23;
      var $add21=($30)+($31);
      var $32=$s31;
      var $add22=($add21)+($32);
      $perim=$add22;
      var $33=$perim;
      var $cmp=$33 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $r=0;
      label = 5; break;
    case 4: 
      var $34=$s12;
      var $sub23=(-$34);
      var $35=$s23;
      var $add24=($sub23)+($35);
      var $36=$s31;
      var $add25=($add24)+($36);
      var $37=$s12;
      var $38=$s23;
      var $sub26=($37)-($38);
      var $39=$s31;
      var $add27=($sub26)+($39);
      var $mul=($add25)*($add27);
      var $40=$s12;
      var $41=$s23;
      var $add28=($40)+($41);
      var $42=$s31;
      var $sub29=($add28)-($42);
      var $mul30=($mul)*($sub29);
      var $43=$perim;
      var $div=($mul30)/($43);
      var $call31=Math.sqrt($div);
      var $mul32=($call31)*(0.5);
      $r=$mul32;
      label = 5; break;
    case 5: 
      var $44=$r;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_inradius_2d"] = _triangle_inradius_2d;
function _triangle_lattice_layer_point_next($c, $v, $more) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $c_addr;
      var $v_addr;
      var $more_addr;
      var $c1n;
      var $n;
      var $rhs1;
      var $rhs2;
      $c_addr=$c;
      $v_addr=$v;
      $more_addr=$more;
      $n=2;
      var $0=$n;
      var $1=$c_addr;
      var $arrayidx=(($1+($0<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $3=$more_addr;
      var $4=HEAP32[(($3)>>2)];
      var $tobool=(($4)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $5=$v_addr;
      var $arrayidx2=(($5)|0);
      HEAP32[(($arrayidx2)>>2)]=0;
      var $6=$v_addr;
      var $arrayidx3=(($6+4)|0);
      HEAP32[(($arrayidx3)>>2)]=0;
      var $7=$more_addr;
      HEAP32[(($7)>>2)]=1;
      label = 6; break;
    case 5: 
      var $8=$more_addr;
      HEAP32[(($8)>>2)]=0;
      label = 6; break;
    case 6: 
      label = 19; break;
    case 7: 
      var $9=$more_addr;
      var $10=HEAP32[(($9)>>2)];
      var $tobool5=(($10)|(0))!=0;
      if ($tobool5) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $11=$n;
      var $12=$c_addr;
      var $arrayidx7=(($12+($11<<2))|0);
      var $13=HEAP32[(($arrayidx7)>>2)];
      var $sub=((($13)-(1))|0);
      var $14=$c_addr;
      var $arrayidx8=(($14)|0);
      var $15=HEAP32[(($arrayidx8)>>2)];
      var $mul=(Math.imul($sub,$15)|0);
      var $add=((($mul)+(1))|0);
      var $16=$v_addr;
      var $arrayidx9=(($16)|0);
      HEAP32[(($arrayidx9)>>2)]=$add;
      var $17=$v_addr;
      var $arrayidx10=(($17+4)|0);
      HEAP32[(($arrayidx10)>>2)]=0;
      var $18=$more_addr;
      HEAP32[(($18)>>2)]=1;
      label = 18; break;
    case 9: 
      var $19=$n;
      var $20=$c_addr;
      var $call=_i4vec_lcm($19, $20);
      $c1n=$call;
      var $21=$c1n;
      var $22=$n;
      var $23=$c_addr;
      var $arrayidx12=(($23+($22<<2))|0);
      var $24=HEAP32[(($arrayidx12)>>2)];
      var $sub13=((($24)-(1))|0);
      var $mul14=(Math.imul($21,$sub13)|0);
      $rhs1=$mul14;
      var $25=$c1n;
      var $26=$n;
      var $27=$c_addr;
      var $arrayidx15=(($27+($26<<2))|0);
      var $28=HEAP32[(($arrayidx15)>>2)];
      var $mul16=(Math.imul($25,$28)|0);
      $rhs2=$mul16;
      var $29=$c_addr;
      var $arrayidx17=(($29+4)|0);
      var $30=HEAP32[(($arrayidx17)>>2)];
      var $31=$v_addr;
      var $arrayidx18=(($31)|0);
      var $32=HEAP32[(($arrayidx18)>>2)];
      var $add19=((($32)+(1))|0);
      var $mul20=(Math.imul($30,$add19)|0);
      var $33=$c_addr;
      var $arrayidx21=(($33)|0);
      var $34=HEAP32[(($arrayidx21)>>2)];
      var $35=$v_addr;
      var $arrayidx22=(($35+4)|0);
      var $36=HEAP32[(($arrayidx22)>>2)];
      var $mul23=(Math.imul($34,$36)|0);
      var $add24=((($mul20)+($mul23))|0);
      var $37=$rhs2;
      var $cmp25=(($add24)|(0)) <= (($37)|(0));
      if ($cmp25) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $38=$v_addr;
      var $arrayidx27=(($38)|0);
      var $39=HEAP32[(($arrayidx27)>>2)];
      var $add28=((($39)+(1))|0);
      var $40=$v_addr;
      var $arrayidx29=(($40)|0);
      HEAP32[(($arrayidx29)>>2)]=$add28;
      label = 17; break;
    case 11: 
      var $41=$rhs1;
      var $42=$c_addr;
      var $arrayidx31=(($42)|0);
      var $43=HEAP32[(($arrayidx31)>>2)];
      var $44=$v_addr;
      var $arrayidx32=(($44+4)|0);
      var $45=HEAP32[(($arrayidx32)>>2)];
      var $add33=((($45)+(1))|0);
      var $mul34=(Math.imul($43,$add33)|0);
      var $sub35=((($41)-($mul34))|0);
      var $46=$c_addr;
      var $arrayidx36=(($46+4)|0);
      var $47=HEAP32[(($arrayidx36)>>2)];
      var $div=((((($sub35)|(0)))/((($47)|(0))))&-1);
      var $48=$v_addr;
      var $arrayidx37=(($48)|0);
      HEAP32[(($arrayidx37)>>2)]=$div;
      var $49=$v_addr;
      var $arrayidx38=(($49)|0);
      var $50=HEAP32[(($arrayidx38)>>2)];
      var $call39=_i4_max($50, 0);
      var $51=$v_addr;
      var $arrayidx40=(($51)|0);
      HEAP32[(($arrayidx40)>>2)]=$call39;
      var $52=$v_addr;
      var $arrayidx41=(($52+4)|0);
      var $53=HEAP32[(($arrayidx41)>>2)];
      var $add42=((($53)+(1))|0);
      var $54=$v_addr;
      var $arrayidx43=(($54+4)|0);
      HEAP32[(($arrayidx43)>>2)]=$add42;
      var $55=$c_addr;
      var $arrayidx44=(($55+4)|0);
      var $56=HEAP32[(($arrayidx44)>>2)];
      var $57=$v_addr;
      var $arrayidx45=(($57)|0);
      var $58=HEAP32[(($arrayidx45)>>2)];
      var $mul46=(Math.imul($56,$58)|0);
      var $59=$c_addr;
      var $arrayidx47=(($59)|0);
      var $60=HEAP32[(($arrayidx47)>>2)];
      var $61=$v_addr;
      var $arrayidx48=(($61+4)|0);
      var $62=HEAP32[(($arrayidx48)>>2)];
      var $mul49=(Math.imul($60,$62)|0);
      var $add50=((($mul46)+($mul49))|0);
      var $63=$rhs1;
      var $cmp51=(($add50)|(0)) <= (($63)|(0));
      if ($cmp51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $64=$v_addr;
      var $arrayidx53=(($64)|0);
      var $65=HEAP32[(($arrayidx53)>>2)];
      var $add54=((($65)+(1))|0);
      var $66=$v_addr;
      var $arrayidx55=(($66)|0);
      HEAP32[(($arrayidx55)>>2)]=$add54;
      label = 13; break;
    case 13: 
      var $67=$c_addr;
      var $arrayidx57=(($67+4)|0);
      var $68=HEAP32[(($arrayidx57)>>2)];
      var $69=$v_addr;
      var $arrayidx58=(($69)|0);
      var $70=HEAP32[(($arrayidx58)>>2)];
      var $mul59=(Math.imul($68,$70)|0);
      var $71=$c_addr;
      var $arrayidx60=(($71)|0);
      var $72=HEAP32[(($arrayidx60)>>2)];
      var $73=$v_addr;
      var $arrayidx61=(($73+4)|0);
      var $74=HEAP32[(($arrayidx61)>>2)];
      var $mul62=(Math.imul($72,$74)|0);
      var $add63=((($mul59)+($mul62))|0);
      var $75=$rhs2;
      var $cmp64=(($add63)|(0)) <= (($75)|(0));
      if ($cmp64) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 16; break;
    case 15: 
      var $76=$v_addr;
      var $arrayidx67=(($76)|0);
      HEAP32[(($arrayidx67)>>2)]=0;
      var $77=$v_addr;
      var $arrayidx68=(($77+4)|0);
      HEAP32[(($arrayidx68)>>2)]=0;
      var $78=$more_addr;
      HEAP32[(($78)>>2)]=0;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_lattice_layer_point_next"] = _triangle_lattice_layer_point_next;
function _triangle_lattice_point_next($c, $v, $more) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $c_addr;
      var $v_addr;
      var $more_addr;
      var $c1n;
      var $n;
      var $rhs;
      $c_addr=$c;
      $v_addr=$v;
      $more_addr=$more;
      $n=2;
      var $0=$more_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|(0))!=0;
      if ($tobool) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $2=$v_addr;
      var $arrayidx=(($2)|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $3=$v_addr;
      var $arrayidx1=(($3+4)|0);
      HEAP32[(($arrayidx1)>>2)]=0;
      var $4=$more_addr;
      HEAP32[(($4)>>2)]=1;
      label = 11; break;
    case 4: 
      var $5=$n;
      var $6=$c_addr;
      var $call=_i4vec_lcm($5, $6);
      $c1n=$call;
      var $7=$c1n;
      var $8=$n;
      var $9=$c_addr;
      var $arrayidx2=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx2)>>2)];
      var $mul=(Math.imul($7,$10)|0);
      $rhs=$mul;
      var $11=$c_addr;
      var $arrayidx3=(($11+4)|0);
      var $12=HEAP32[(($arrayidx3)>>2)];
      var $13=$v_addr;
      var $arrayidx4=(($13)|0);
      var $14=HEAP32[(($arrayidx4)>>2)];
      var $add=((($14)+(1))|0);
      var $mul5=(Math.imul($12,$add)|0);
      var $15=$c_addr;
      var $arrayidx6=(($15)|0);
      var $16=HEAP32[(($arrayidx6)>>2)];
      var $17=$v_addr;
      var $arrayidx7=(($17+4)|0);
      var $18=HEAP32[(($arrayidx7)>>2)];
      var $mul8=(Math.imul($16,$18)|0);
      var $add9=((($mul5)+($mul8))|0);
      var $19=$rhs;
      var $cmp=(($add9)|(0)) <= (($19)|(0));
      if ($cmp) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$v_addr;
      var $arrayidx11=(($20)|0);
      var $21=HEAP32[(($arrayidx11)>>2)];
      var $add12=((($21)+(1))|0);
      var $22=$v_addr;
      var $arrayidx13=(($22)|0);
      HEAP32[(($arrayidx13)>>2)]=$add12;
      label = 10; break;
    case 6: 
      var $23=$v_addr;
      var $arrayidx15=(($23)|0);
      HEAP32[(($arrayidx15)>>2)]=0;
      var $24=$c_addr;
      var $arrayidx16=(($24+4)|0);
      var $25=HEAP32[(($arrayidx16)>>2)];
      var $26=$v_addr;
      var $arrayidx17=(($26)|0);
      var $27=HEAP32[(($arrayidx17)>>2)];
      var $mul18=(Math.imul($25,$27)|0);
      var $28=$c_addr;
      var $arrayidx19=(($28)|0);
      var $29=HEAP32[(($arrayidx19)>>2)];
      var $30=$v_addr;
      var $arrayidx20=(($30+4)|0);
      var $31=HEAP32[(($arrayidx20)>>2)];
      var $add21=((($31)+(1))|0);
      var $mul22=(Math.imul($29,$add21)|0);
      var $add23=((($mul18)+($mul22))|0);
      var $32=$rhs;
      var $cmp24=(($add23)|(0)) <= (($32)|(0));
      if ($cmp24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$v_addr;
      var $arrayidx26=(($33+4)|0);
      var $34=HEAP32[(($arrayidx26)>>2)];
      var $add27=((($34)+(1))|0);
      var $35=$v_addr;
      var $arrayidx28=(($35+4)|0);
      HEAP32[(($arrayidx28)>>2)]=$add27;
      label = 9; break;
    case 8: 
      var $36=$v_addr;
      var $arrayidx30=(($36+4)|0);
      HEAP32[(($arrayidx30)>>2)]=0;
      var $37=$more_addr;
      HEAP32[(($37)>>2)]=0;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_lattice_point_next"] = _triangle_lattice_point_next;
function _triangle_line_imp_int_2d($t, $a, $b, $c, $int_num, $pint) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $a_addr;
      var $b_addr;
      var $c_addr;
      var $int_num_addr;
      var $pint_addr;
      var $a1=__stackBase__;
      var $b1=(__stackBase__)+(8);
      var $c1=(__stackBase__)+(16);
      var $ival=(__stackBase__)+(24);
      var $n;
      var $p=(__stackBase__)+(32);
      var $r;
      var $s;
      var $test1;
      var $test2;
      $t_addr=$t;
      $a_addr=$a;
      $b_addr=$b;
      $c_addr=$c;
      $int_num_addr=$int_num;
      $pint_addr=$pint;
      $n=0;
      $r=0;
      label = 3; break;
    case 3: 
      var $0=$r;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $1=$r;
      var $add=((($1)+(1))|0);
      var $call=_i4_wrap($add, 0, 2);
      $s=$call;
      var $2=$t_addr;
      var $add_ptr=(($2)|0);
      var $3=$r;
      var $mul=($3<<1);
      var $add_ptr1=(($add_ptr+($mul<<3))|0);
      var $4=$t_addr;
      var $add_ptr2=(($4)|0);
      var $5=$s;
      var $mul3=($5<<1);
      var $add_ptr4=(($add_ptr2+($mul3<<3))|0);
      _line_exp2imp_2d($add_ptr1, $add_ptr4, $a1, $b1, $c1);
      var $6=$a_addr;
      var $7=$b_addr;
      var $8=$c_addr;
      var $9=HEAPF64[(($a1)>>3)];
      var $10=HEAPF64[(($b1)>>3)];
      var $11=HEAPF64[(($c1)>>3)];
      var $arraydecay=(($p)|0);
      _lines_imp_int_2d($6, $7, $8, $9, $10, $11, $ival, $arraydecay);
      var $12=HEAP32[(($ival)>>2)];
      var $cmp5=(($12)|(0))==1;
      if ($cmp5) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $arrayidx=(($p)|0);
      var $13=HEAPF64[(($arrayidx)>>3)];
      var $14=$r;
      var $mul6=($14<<1);
      var $add7=(($mul6)|0);
      var $15=$t_addr;
      var $arrayidx8=(($15+($add7<<3))|0);
      var $16=HEAPF64[(($arrayidx8)>>3)];
      var $sub=($13)-($16);
      var $17=$s;
      var $mul9=($17<<1);
      var $add10=(($mul9)|0);
      var $18=$t_addr;
      var $arrayidx11=(($18+($add10<<3))|0);
      var $19=HEAPF64[(($arrayidx11)>>3)];
      var $20=$r;
      var $mul12=($20<<1);
      var $add13=(($mul12)|0);
      var $21=$t_addr;
      var $arrayidx14=(($21+($add13<<3))|0);
      var $22=HEAPF64[(($arrayidx14)>>3)];
      var $sub15=($19)-($22);
      var $mul16=($sub)*($sub15);
      var $arrayidx17=(($p+8)|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $24=$r;
      var $mul18=($24<<1);
      var $add19=((($mul18)+(1))|0);
      var $25=$t_addr;
      var $arrayidx20=(($25+($add19<<3))|0);
      var $26=HEAPF64[(($arrayidx20)>>3)];
      var $sub21=($23)-($26);
      var $27=$s;
      var $mul22=($27<<1);
      var $add23=((($mul22)+(1))|0);
      var $28=$t_addr;
      var $arrayidx24=(($28+($add23<<3))|0);
      var $29=HEAPF64[(($arrayidx24)>>3)];
      var $30=$r;
      var $mul25=($30<<1);
      var $add26=((($mul25)+(1))|0);
      var $31=$t_addr;
      var $arrayidx27=(($31+($add26<<3))|0);
      var $32=HEAPF64[(($arrayidx27)>>3)];
      var $sub28=($29)-($32);
      var $mul29=($sub21)*($sub28);
      var $add30=($mul16)+($mul29);
      $test1=$add30;
      var $33=$s;
      var $mul31=($33<<1);
      var $add32=(($mul31)|0);
      var $34=$t_addr;
      var $arrayidx33=(($34+($add32<<3))|0);
      var $35=HEAPF64[(($arrayidx33)>>3)];
      var $36=$r;
      var $mul34=($36<<1);
      var $add35=(($mul34)|0);
      var $37=$t_addr;
      var $arrayidx36=(($37+($add35<<3))|0);
      var $38=HEAPF64[(($arrayidx36)>>3)];
      var $sub37=($35)-($38);
      var $39=$s;
      var $mul38=($39<<1);
      var $add39=(($mul38)|0);
      var $40=$t_addr;
      var $arrayidx40=(($40+($add39<<3))|0);
      var $41=HEAPF64[(($arrayidx40)>>3)];
      var $42=$r;
      var $mul41=($42<<1);
      var $add42=(($mul41)|0);
      var $43=$t_addr;
      var $arrayidx43=(($43+($add42<<3))|0);
      var $44=HEAPF64[(($arrayidx43)>>3)];
      var $sub44=($41)-($44);
      var $mul45=($sub37)*($sub44);
      var $45=$s;
      var $mul46=($45<<1);
      var $add47=((($mul46)+(1))|0);
      var $46=$t_addr;
      var $arrayidx48=(($46+($add47<<3))|0);
      var $47=HEAPF64[(($arrayidx48)>>3)];
      var $48=$r;
      var $mul49=($48<<1);
      var $add50=((($mul49)+(1))|0);
      var $49=$t_addr;
      var $arrayidx51=(($49+($add50<<3))|0);
      var $50=HEAPF64[(($arrayidx51)>>3)];
      var $sub52=($47)-($50);
      var $51=$s;
      var $mul53=($51<<1);
      var $add54=((($mul53)+(1))|0);
      var $52=$t_addr;
      var $arrayidx55=(($52+($add54<<3))|0);
      var $53=HEAPF64[(($arrayidx55)>>3)];
      var $54=$r;
      var $mul56=($54<<1);
      var $add57=((($mul56)+(1))|0);
      var $55=$t_addr;
      var $arrayidx58=(($55+($add57<<3))|0);
      var $56=HEAPF64[(($arrayidx58)>>3)];
      var $sub59=($53)-($56);
      var $mul60=($sub52)*($sub59);
      var $add61=($mul45)+($mul60);
      $test2=$add61;
      var $57=$test1;
      var $cmp62=0 <= $57;
      if ($cmp62) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $58=$test1;
      var $59=$test2;
      var $cmp63=$58 <= $59;
      if ($cmp63) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $arrayidx65=(($p)|0);
      var $60=HEAPF64[(($arrayidx65)>>3)];
      var $61=$n;
      var $mul66=($61<<1);
      var $add67=(($mul66)|0);
      var $62=$pint_addr;
      var $arrayidx68=(($62+($add67<<3))|0);
      HEAPF64[(($arrayidx68)>>3)]=$60;
      var $arrayidx69=(($p+8)|0);
      var $63=HEAPF64[(($arrayidx69)>>3)];
      var $64=$n;
      var $mul70=($64<<1);
      var $add71=((($mul70)+(1))|0);
      var $65=$pint_addr;
      var $arrayidx72=(($65+($add71<<3))|0);
      HEAPF64[(($arrayidx72)>>3)]=$63;
      var $66=$n;
      var $add73=((($66)+(1))|0);
      $n=$add73;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $67=$r;
      var $inc=((($67)+(1))|0);
      $r=$inc;
      label = 3; break;
    case 11: 
      var $68=$n;
      var $69=$int_num_addr;
      HEAP32[(($69)>>2)]=$68;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_line_imp_int_2d"] = _triangle_line_imp_int_2d;
function _triangle_orientation_2d($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $t_addr;
      var $det;
      var $value;
      $t_addr=$t;
      $value=0;
      var $0=$t_addr;
      var $add_ptr=(($0)|0);
      var $1=$t_addr;
      var $add_ptr1=(($1+16)|0);
      var $call=_r8vec_eq(2, $add_ptr, $add_ptr1);
      var $tobool=(($call)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $2=$t_addr;
      var $add_ptr2=(($2+16)|0);
      var $3=$t_addr;
      var $add_ptr3=(($3+32)|0);
      var $call4=_r8vec_eq(2, $add_ptr2, $add_ptr3);
      var $tobool5=(($call4)|(0))!=0;
      if ($tobool5) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$t_addr;
      var $add_ptr7=(($4+32)|0);
      var $5=$t_addr;
      var $add_ptr8=(($5)|0);
      var $call9=_r8vec_eq(2, $add_ptr7, $add_ptr8);
      var $tobool10=(($call9)|(0))!=0;
      if ($tobool10) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $value=3;
      var $6=$value;
      $retval=$6;
      label = 15; break;
    case 6: 
      var $7=$t_addr;
      var $arrayidx=(($7)|0);
      var $8=HEAPF64[(($arrayidx)>>3)];
      var $9=$t_addr;
      var $arrayidx11=(($9+32)|0);
      var $10=HEAPF64[(($arrayidx11)>>3)];
      var $sub=($8)-($10);
      var $11=$t_addr;
      var $arrayidx12=(($11+24)|0);
      var $12=HEAPF64[(($arrayidx12)>>3)];
      var $13=$t_addr;
      var $arrayidx13=(($13+40)|0);
      var $14=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($12)-($14);
      var $mul=($sub)*($sub14);
      var $15=$t_addr;
      var $arrayidx15=(($15+16)|0);
      var $16=HEAPF64[(($arrayidx15)>>3)];
      var $17=$t_addr;
      var $arrayidx16=(($17+32)|0);
      var $18=HEAPF64[(($arrayidx16)>>3)];
      var $sub17=($16)-($18);
      var $19=$t_addr;
      var $arrayidx18=(($19+8)|0);
      var $20=HEAPF64[(($arrayidx18)>>3)];
      var $21=$t_addr;
      var $arrayidx19=(($21+40)|0);
      var $22=HEAPF64[(($arrayidx19)>>3)];
      var $sub20=($20)-($22);
      var $mul21=($sub17)*($sub20);
      var $sub22=($mul)-($mul21);
      $det=$sub22;
      var $23=$det;
      var $cmp=$23 == 0;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $value=2;
      label = 14; break;
    case 8: 
      var $24=$det;
      var $cmp24=$24 < 0;
      if ($cmp24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $value=1;
      label = 13; break;
    case 10: 
      var $25=$det;
      var $cmp27=0 < $25;
      if ($cmp27) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $value=0;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $26=$value;
      $retval=$26;
      label = 15; break;
    case 15: 
      var $27=$retval;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_orientation_2d"] = _triangle_orientation_2d;
function _triangle_orthocenter_2d($t, $p, $flag) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p_addr;
      var $flag_addr;
      var $ival=__stackBase__;
      var $p23;
      var $p31;
      $t_addr=$t;
      $p_addr=$p;
      $flag_addr=$flag;
      var $0=$t_addr;
      var $add_ptr=(($0+16)|0);
      var $1=$t_addr;
      var $add_ptr1=(($1+32)|0);
      var $2=$t_addr;
      var $add_ptr2=(($2)|0);
      var $3=$flag_addr;
      var $call=_line_exp_perp_2d($add_ptr, $add_ptr1, $add_ptr2, $3);
      $p23=$call;
      var $4=$flag_addr;
      var $5=HEAP32[(($4)>>2)];
      var $tobool=(($5)|(0))!=0;
      if ($tobool) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $call3=_r8_huge();
      var $6=$p_addr;
      var $arrayidx=(($6)|0);
      HEAPF64[(($arrayidx)>>3)]=$call3;
      var $call4=_r8_huge();
      var $7=$p_addr;
      var $arrayidx5=(($7+8)|0);
      HEAPF64[(($arrayidx5)>>3)]=$call4;
      var $8=$p23;
      var $9=$8;
      _free($9);
      label = 4; break;
    case 4: 
      var $10=$t_addr;
      var $add_ptr6=(($10+32)|0);
      var $11=$t_addr;
      var $add_ptr7=(($11)|0);
      var $12=$t_addr;
      var $add_ptr8=(($12+16)|0);
      var $13=$flag_addr;
      var $call9=_line_exp_perp_2d($add_ptr6, $add_ptr7, $add_ptr8, $13);
      $p31=$call9;
      var $14=$flag_addr;
      var $15=HEAP32[(($14)>>2)];
      var $tobool10=(($15)|(0))!=0;
      if ($tobool10) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $call12=_r8_huge();
      var $16=$p_addr;
      var $arrayidx13=(($16)|0);
      HEAPF64[(($arrayidx13)>>3)]=$call12;
      var $call14=_r8_huge();
      var $17=$p_addr;
      var $arrayidx15=(($17+8)|0);
      HEAPF64[(($arrayidx15)>>3)]=$call14;
      var $18=$p23;
      var $19=$18;
      _free($19);
      var $20=$p31;
      var $21=$20;
      _free($21);
      label = 6; break;
    case 6: 
      var $22=$t_addr;
      var $add_ptr17=(($22)|0);
      var $23=$p23;
      var $24=$t_addr;
      var $add_ptr18=(($24+16)|0);
      var $25=$p31;
      var $26=$p_addr;
      _lines_exp_int_2d($add_ptr17, $23, $add_ptr18, $25, $ival, $26);
      var $27=HEAP32[(($ival)>>2)];
      var $cmp=(($27)|(0))!=1;
      if ($cmp) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $call20=_r8_huge();
      var $28=$p_addr;
      var $arrayidx21=(($28)|0);
      HEAPF64[(($arrayidx21)>>3)]=$call20;
      var $call22=_r8_huge();
      var $29=$p_addr;
      var $arrayidx23=(($29+8)|0);
      HEAPF64[(($arrayidx23)>>3)]=$call22;
      var $30=$flag_addr;
      HEAP32[(($30)>>2)]=1;
      var $31=$p23;
      var $32=$31;
      _free($32);
      var $33=$p31;
      var $34=$33;
      _free($34);
      label = 9; break;
    case 8: 
      var $35=$p23;
      var $36=$35;
      _free($36);
      var $37=$p31;
      var $38=$37;
      _free($38);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_orthocenter_2d"] = _triangle_orthocenter_2d;
function _triangle_point_dist_2d($t, $p) {
  var label = 0;
  var $t_addr;
  var $p_addr;
  var $value;
  $t_addr=$t;
  $p_addr=$p;
  var $0=$t_addr;
  var $add_ptr=(($0)|0);
  var $1=$t_addr;
  var $add_ptr1=(($1+16)|0);
  var $2=$p_addr;
  var $call=_segment_point_dist_2d($add_ptr, $add_ptr1, $2);
  $value=$call;
  var $3=$value;
  var $4=$t_addr;
  var $add_ptr2=(($4+16)|0);
  var $5=$t_addr;
  var $add_ptr3=(($5+32)|0);
  var $6=$p_addr;
  var $call4=_segment_point_dist_2d($add_ptr2, $add_ptr3, $6);
  var $call5=_r8_min($3, $call4);
  $value=$call5;
  var $7=$value;
  var $8=$t_addr;
  var $add_ptr6=(($8+32)|0);
  var $9=$t_addr;
  var $add_ptr7=(($9)|0);
  var $10=$p_addr;
  var $call8=_segment_point_dist_2d($add_ptr6, $add_ptr7, $10);
  var $call9=_r8_min($7, $call8);
  $value=$call9;
  var $11=$value;
  return $11;
}
Module["_triangle_point_dist_2d"] = _triangle_point_dist_2d;
function _triangle_point_dist_3d($t, $p) {
  var label = 0;
  var $t_addr;
  var $p_addr;
  var $value;
  $t_addr=$t;
  $p_addr=$p;
  var $0=$t_addr;
  var $add_ptr=(($0)|0);
  var $1=$t_addr;
  var $add_ptr1=(($1+24)|0);
  var $2=$p_addr;
  var $call=_segment_point_dist_3d($add_ptr, $add_ptr1, $2);
  $value=$call;
  var $3=$value;
  var $4=$t_addr;
  var $add_ptr2=(($4+24)|0);
  var $5=$t_addr;
  var $add_ptr3=(($5+48)|0);
  var $6=$p_addr;
  var $call4=_segment_point_dist_3d($add_ptr2, $add_ptr3, $6);
  var $call5=_r8_min($3, $call4);
  $value=$call5;
  var $7=$value;
  var $8=$t_addr;
  var $add_ptr6=(($8+48)|0);
  var $9=$t_addr;
  var $add_ptr7=(($9)|0);
  var $10=$p_addr;
  var $call8=_segment_point_dist_3d($add_ptr6, $add_ptr7, $10);
  var $call9=_r8_min($7, $call8);
  $value=$call9;
  var $11=$value;
  return $11;
}
Module["_triangle_point_dist_3d"] = _triangle_point_dist_3d;
function _triangle_point_dist_signed_2d($t, $p) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p_addr;
      var $dis12;
      var $dis23;
      var $dis31;
      var $value;
      $t_addr=$t;
      $p_addr=$p;
      var $0=$t_addr;
      var $add_ptr=(($0)|0);
      var $1=$t_addr;
      var $add_ptr1=(($1+16)|0);
      var $2=$p_addr;
      var $call=_line_exp_point_dist_signed_2d($add_ptr, $add_ptr1, $2);
      $dis12=$call;
      var $3=$t_addr;
      var $add_ptr2=(($3+16)|0);
      var $4=$t_addr;
      var $add_ptr3=(($4+32)|0);
      var $5=$p_addr;
      var $call4=_line_exp_point_dist_signed_2d($add_ptr2, $add_ptr3, $5);
      $dis23=$call4;
      var $6=$t_addr;
      var $add_ptr5=(($6+32)|0);
      var $7=$t_addr;
      var $add_ptr6=(($7)|0);
      var $8=$p_addr;
      var $call7=_line_exp_point_dist_signed_2d($add_ptr5, $add_ptr6, $8);
      $dis31=$call7;
      var $9=$dis12;
      var $cmp=$9 <= 0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $10=$dis23;
      var $cmp8=$10 <= 0;
      if ($cmp8) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $11=$dis31;
      var $cmp10=$11 <= 0;
      if ($cmp10) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $12=$dis12;
      $value=$12;
      var $13=$value;
      var $14=$dis23;
      var $call11=_r8_max($13, $14);
      $value=$call11;
      var $15=$value;
      var $16=$dis31;
      var $call12=_r8_max($15, $16);
      $value=$call12;
      label = 7; break;
    case 6: 
      var $17=$t_addr;
      var $add_ptr13=(($17)|0);
      var $18=$t_addr;
      var $add_ptr14=(($18+16)|0);
      var $19=$p_addr;
      var $call15=_segment_point_dist_2d($add_ptr13, $add_ptr14, $19);
      $value=$call15;
      var $20=$value;
      var $21=$t_addr;
      var $add_ptr16=(($21+16)|0);
      var $22=$t_addr;
      var $add_ptr17=(($22+32)|0);
      var $23=$p_addr;
      var $call18=_segment_point_dist_2d($add_ptr16, $add_ptr17, $23);
      var $call19=_r8_min($20, $call18);
      $value=$call19;
      var $24=$value;
      var $25=$t_addr;
      var $add_ptr20=(($25+32)|0);
      var $26=$t_addr;
      var $add_ptr21=(($26)|0);
      var $27=$p_addr;
      var $call22=_segment_point_dist_2d($add_ptr20, $add_ptr21, $27);
      var $call23=_r8_min($24, $call22);
      $value=$call23;
      label = 7; break;
    case 7: 
      var $28=$value;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_point_dist_signed_2d"] = _triangle_point_dist_signed_2d;
function _triangle_point_near_2d($t, $p, $pn, $dist) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $p_addr;
      var $pn_addr;
      var $dist_addr;
      var $dist12=__stackBase__;
      var $dist23=(__stackBase__)+(8);
      var $dist31=(__stackBase__)+(16);
      var $tval=(__stackBase__)+(24);
      var $pn12=(__stackBase__)+(32);
      var $pn23=(__stackBase__)+(48);
      var $pn31=(__stackBase__)+(64);
      $t_addr=$t;
      $p_addr=$p;
      $pn_addr=$pn;
      $dist_addr=$dist;
      var $0=$t_addr;
      var $add_ptr=(($0)|0);
      var $1=$t_addr;
      var $add_ptr1=(($1+16)|0);
      var $2=$p_addr;
      var $arraydecay=(($pn12)|0);
      _segment_point_near_2d($add_ptr, $add_ptr1, $2, $arraydecay, $dist12, $tval);
      var $3=$t_addr;
      var $add_ptr2=(($3+16)|0);
      var $4=$t_addr;
      var $add_ptr3=(($4+32)|0);
      var $5=$p_addr;
      var $arraydecay4=(($pn23)|0);
      _segment_point_near_2d($add_ptr2, $add_ptr3, $5, $arraydecay4, $dist23, $tval);
      var $6=$t_addr;
      var $add_ptr5=(($6+32)|0);
      var $7=$t_addr;
      var $add_ptr6=(($7)|0);
      var $8=$p_addr;
      var $arraydecay7=(($pn31)|0);
      _segment_point_near_2d($add_ptr5, $add_ptr6, $8, $arraydecay7, $dist31, $tval);
      var $9=HEAPF64[(($dist12)>>3)];
      var $10=HEAPF64[(($dist23)>>3)];
      var $cmp=$9 <= $10;
      if ($cmp) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=HEAPF64[(($dist12)>>3)];
      var $12=HEAPF64[(($dist31)>>3)];
      var $cmp8=$11 <= $12;
      if ($cmp8) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=HEAPF64[(($dist12)>>3)];
      var $14=$dist_addr;
      HEAPF64[(($14)>>3)]=$13;
      var $arraydecay9=(($pn12)|0);
      var $15=$pn_addr;
      _r8vec_copy(2, $arraydecay9, $15);
      label = 10; break;
    case 5: 
      var $16=HEAPF64[(($dist23)>>3)];
      var $17=HEAPF64[(($dist12)>>3)];
      var $cmp10=$16 <= $17;
      if ($cmp10) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $18=HEAPF64[(($dist23)>>3)];
      var $19=HEAPF64[(($dist31)>>3)];
      var $cmp12=$18 <= $19;
      if ($cmp12) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $20=HEAPF64[(($dist23)>>3)];
      var $21=$dist_addr;
      HEAPF64[(($21)>>3)]=$20;
      var $arraydecay14=(($pn23)|0);
      var $22=$pn_addr;
      _r8vec_copy(2, $arraydecay14, $22);
      label = 9; break;
    case 8: 
      var $23=HEAPF64[(($dist31)>>3)];
      var $24=$dist_addr;
      HEAPF64[(($24)>>3)]=$23;
      var $arraydecay16=(($pn31)|0);
      var $25=$pn_addr;
      _r8vec_copy(2, $arraydecay16, $25);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_point_near_2d"] = _triangle_point_near_2d;
function _triangle_quality_2d($t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $a;
      var $b;
      var $c;
      var $i;
      var $value;
      $t_addr=$t;
      $a=0;
      $b=0;
      $c=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)|(0)) < 2;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$a;
      var $2=$i;
      var $add=(($2)|0);
      var $3=$t_addr;
      var $arrayidx=(($3+($add<<3))|0);
      var $4=HEAPF64[(($arrayidx)>>3)];
      var $5=$i;
      var $add1=((($5)+(2))|0);
      var $6=$t_addr;
      var $arrayidx2=(($6+($add1<<3))|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $sub=($4)-($7);
      var $8=Math.pow($sub, 2);
      var $add3=($1)+($8);
      $a=$add3;
      var $9=$b;
      var $10=$i;
      var $add4=((($10)+(2))|0);
      var $11=$t_addr;
      var $arrayidx5=(($11+($add4<<3))|0);
      var $12=HEAPF64[(($arrayidx5)>>3)];
      var $13=$i;
      var $add6=((($13)+(4))|0);
      var $14=$t_addr;
      var $arrayidx7=(($14+($add6<<3))|0);
      var $15=HEAPF64[(($arrayidx7)>>3)];
      var $sub8=($12)-($15);
      var $16=Math.pow($sub8, 2);
      var $add9=($9)+($16);
      $b=$add9;
      var $17=$c;
      var $18=$i;
      var $add10=((($18)+(4))|0);
      var $19=$t_addr;
      var $arrayidx11=(($19+($add10<<3))|0);
      var $20=HEAPF64[(($arrayidx11)>>3)];
      var $21=$i;
      var $add12=(($21)|0);
      var $22=$t_addr;
      var $arrayidx13=(($22+($add12<<3))|0);
      var $23=HEAPF64[(($arrayidx13)>>3)];
      var $sub14=($20)-($23);
      var $24=Math.pow($sub14, 2);
      var $add15=($17)+($24);
      $c=$add15;
      label = 5; break;
    case 5: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $26=$a;
      var $call=Math.sqrt($26);
      $a=$call;
      var $27=$b;
      var $call16=Math.sqrt($27);
      $b=$call16;
      var $28=$c;
      var $call17=Math.sqrt($28);
      $c=$call17;
      var $29=$a;
      var $30=$b;
      var $mul=($29)*($30);
      var $31=$c;
      var $mul18=($mul)*($31);
      var $cmp19=$mul18 == 0;
      if ($cmp19) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $value=0;
      label = 9; break;
    case 8: 
      var $32=$a;
      var $sub20=(-$32);
      var $33=$b;
      var $add21=($sub20)+($33);
      var $34=$c;
      var $add22=($add21)+($34);
      var $35=$a;
      var $36=$b;
      var $sub23=($35)-($36);
      var $37=$c;
      var $add24=($sub23)+($37);
      var $mul25=($add22)*($add24);
      var $38=$a;
      var $39=$b;
      var $add26=($38)+($39);
      var $40=$c;
      var $sub27=($add26)-($40);
      var $mul28=($mul25)*($sub27);
      var $41=$a;
      var $42=$b;
      var $mul29=($41)*($42);
      var $43=$c;
      var $mul30=($mul29)*($43);
      var $div=($mul28)/($mul30);
      $value=$div;
      label = 9; break;
    case 9: 
      var $44=$value;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_quality_2d"] = _triangle_quality_2d;
function _triangle_right_lattice_point_num_2d($a, $b) {
  var label = 0;
  var $a_addr;
  var $b_addr;
  var $n;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$a_addr;
  var $add=((($0)+(1))|0);
  var $1=$b_addr;
  var $add1=((($1)+(1))|0);
  var $mul=(Math.imul($add,$add1)|0);
  var $2=$a_addr;
  var $3=$b_addr;
  var $call=_i4_gcd($2, $3);
  var $add2=((($mul)+($call))|0);
  var $add3=((($add2)+(1))|0);
  var $div=((((($add3)|(0)))/(2))&-1);
  $n=$div;
  var $4=$n;
  return $4;
}
Module["_triangle_right_lattice_point_num_2d"] = _triangle_right_lattice_point_num_2d;
function _truncated_octahedron_size_3d($point_num, $edge_num, $face_num, $face_order_max) {
  var label = 0;
  var $point_num_addr;
  var $edge_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  $point_num_addr=$point_num;
  $edge_num_addr=$edge_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  var $0=$point_num_addr;
  HEAP32[(($0)>>2)]=24;
  var $1=$edge_num_addr;
  HEAP32[(($1)>>2)]=36;
  var $2=$face_num_addr;
  HEAP32[(($2)>>2)]=14;
  var $3=$face_order_max_addr;
  HEAP32[(($3)>>2)]=6;
  return;
}
Module["_truncated_octahedron_size_3d"] = _truncated_octahedron_size_3d;
function _triangle_unit_lattice_point_num_2d($s) {
  var label = 0;
  var $s_addr;
  var $n;
  $s_addr=$s;
  var $0=$s_addr;
  var $add=((($0)+(2))|0);
  var $1=$s_addr;
  var $add1=((($1)+(1))|0);
  var $mul=(Math.imul($add,$add1)|0);
  var $div=((((($mul)|(0)))/(2))&-1);
  $n=$div;
  var $2=$n;
  return $2;
}
Module["_triangle_unit_lattice_point_num_2d"] = _triangle_unit_lattice_point_num_2d;
function _triangle_xsi_to_xy_2d($t, $xsi, $p) {
  var label = 0;
  var $t_addr;
  var $xsi_addr;
  var $p_addr;
  $t_addr=$t;
  $xsi_addr=$xsi;
  $p_addr=$p;
  var $0=$xsi_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$t_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $mul=($1)*($3);
  var $4=$xsi_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$t_addr;
  var $arrayidx3=(($6+16)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $mul4=($5)*($7);
  var $add=($mul)+($mul4);
  var $8=$xsi_addr;
  var $arrayidx5=(($8+16)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$t_addr;
  var $arrayidx6=(($10+32)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $mul7=($9)*($11);
  var $add8=($add)+($mul7);
  var $12=$p_addr;
  var $arrayidx9=(($12)|0);
  HEAPF64[(($arrayidx9)>>3)]=$add8;
  var $13=$xsi_addr;
  var $arrayidx10=(($13)|0);
  var $14=HEAPF64[(($arrayidx10)>>3)];
  var $15=$t_addr;
  var $arrayidx11=(($15+8)|0);
  var $16=HEAPF64[(($arrayidx11)>>3)];
  var $mul12=($14)*($16);
  var $17=$xsi_addr;
  var $arrayidx13=(($17+8)|0);
  var $18=HEAPF64[(($arrayidx13)>>3)];
  var $19=$t_addr;
  var $arrayidx14=(($19+24)|0);
  var $20=HEAPF64[(($arrayidx14)>>3)];
  var $mul15=($18)*($20);
  var $add16=($mul12)+($mul15);
  var $21=$xsi_addr;
  var $arrayidx17=(($21+16)|0);
  var $22=HEAPF64[(($arrayidx17)>>3)];
  var $23=$t_addr;
  var $arrayidx18=(($23+40)|0);
  var $24=HEAPF64[(($arrayidx18)>>3)];
  var $mul19=($22)*($24);
  var $add20=($add16)+($mul19);
  var $25=$p_addr;
  var $arrayidx21=(($25+8)|0);
  HEAPF64[(($arrayidx21)>>3)]=$add20;
  return;
}
Module["_triangle_xsi_to_xy_2d"] = _triangle_xsi_to_xy_2d;
function _triangle_xy_to_xsi_2d($t, $p, $xsi) {
  var label = 0;
  var $t_addr;
  var $p_addr;
  var $xsi_addr;
  var $det;
  $t_addr=$t;
  $p_addr=$p;
  $xsi_addr=$xsi;
  var $0=$t_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAPF64[(($arrayidx)>>3)];
  var $2=$t_addr;
  var $arrayidx1=(($2+32)|0);
  var $3=HEAPF64[(($arrayidx1)>>3)];
  var $sub=($1)-($3);
  var $4=$t_addr;
  var $arrayidx2=(($4+24)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $6=$t_addr;
  var $arrayidx3=(($6+40)|0);
  var $7=HEAPF64[(($arrayidx3)>>3)];
  var $sub4=($5)-($7);
  var $mul=($sub)*($sub4);
  var $8=$t_addr;
  var $arrayidx5=(($8+16)|0);
  var $9=HEAPF64[(($arrayidx5)>>3)];
  var $10=$t_addr;
  var $arrayidx6=(($10+32)|0);
  var $11=HEAPF64[(($arrayidx6)>>3)];
  var $sub7=($9)-($11);
  var $12=$t_addr;
  var $arrayidx8=(($12+8)|0);
  var $13=HEAPF64[(($arrayidx8)>>3)];
  var $14=$t_addr;
  var $arrayidx9=(($14+40)|0);
  var $15=HEAPF64[(($arrayidx9)>>3)];
  var $sub10=($13)-($15);
  var $mul11=($sub7)*($sub10);
  var $sub12=($mul)-($mul11);
  $det=$sub12;
  var $16=$t_addr;
  var $arrayidx13=(($16+24)|0);
  var $17=HEAPF64[(($arrayidx13)>>3)];
  var $18=$t_addr;
  var $arrayidx14=(($18+40)|0);
  var $19=HEAPF64[(($arrayidx14)>>3)];
  var $sub15=($17)-($19);
  var $20=$p_addr;
  var $arrayidx16=(($20)|0);
  var $21=HEAPF64[(($arrayidx16)>>3)];
  var $22=$t_addr;
  var $arrayidx17=(($22+32)|0);
  var $23=HEAPF64[(($arrayidx17)>>3)];
  var $sub18=($21)-($23);
  var $mul19=($sub15)*($sub18);
  var $24=$t_addr;
  var $arrayidx20=(($24+16)|0);
  var $25=HEAPF64[(($arrayidx20)>>3)];
  var $26=$t_addr;
  var $arrayidx21=(($26+32)|0);
  var $27=HEAPF64[(($arrayidx21)>>3)];
  var $sub22=($25)-($27);
  var $28=$p_addr;
  var $arrayidx23=(($28+8)|0);
  var $29=HEAPF64[(($arrayidx23)>>3)];
  var $30=$t_addr;
  var $arrayidx24=(($30+40)|0);
  var $31=HEAPF64[(($arrayidx24)>>3)];
  var $sub25=($29)-($31);
  var $mul26=($sub22)*($sub25);
  var $sub27=($mul19)-($mul26);
  var $32=$det;
  var $div=($sub27)/($32);
  var $33=$xsi_addr;
  var $arrayidx28=(($33)|0);
  HEAPF64[(($arrayidx28)>>3)]=$div;
  var $34=$t_addr;
  var $arrayidx29=(($34+8)|0);
  var $35=HEAPF64[(($arrayidx29)>>3)];
  var $36=$t_addr;
  var $arrayidx30=(($36+40)|0);
  var $37=HEAPF64[(($arrayidx30)>>3)];
  var $sub31=($35)-($37);
  var $sub32=(-$sub31);
  var $38=$p_addr;
  var $arrayidx33=(($38)|0);
  var $39=HEAPF64[(($arrayidx33)>>3)];
  var $40=$t_addr;
  var $arrayidx34=(($40+32)|0);
  var $41=HEAPF64[(($arrayidx34)>>3)];
  var $sub35=($39)-($41);
  var $mul36=($sub32)*($sub35);
  var $42=$t_addr;
  var $arrayidx37=(($42)|0);
  var $43=HEAPF64[(($arrayidx37)>>3)];
  var $44=$t_addr;
  var $arrayidx38=(($44+32)|0);
  var $45=HEAPF64[(($arrayidx38)>>3)];
  var $sub39=($43)-($45);
  var $46=$p_addr;
  var $arrayidx40=(($46+8)|0);
  var $47=HEAPF64[(($arrayidx40)>>3)];
  var $48=$t_addr;
  var $arrayidx41=(($48+40)|0);
  var $49=HEAPF64[(($arrayidx41)>>3)];
  var $sub42=($47)-($49);
  var $mul43=($sub39)*($sub42);
  var $add=($mul36)+($mul43);
  var $50=$det;
  var $div44=($add)/($50);
  var $51=$xsi_addr;
  var $arrayidx45=(($51+8)|0);
  HEAPF64[(($arrayidx45)>>3)]=$div44;
  var $52=$xsi_addr;
  var $arrayidx46=(($52)|0);
  var $53=HEAPF64[(($arrayidx46)>>3)];
  var $sub47=(1)-($53);
  var $54=$xsi_addr;
  var $arrayidx48=(($54+8)|0);
  var $55=HEAPF64[(($arrayidx48)>>3)];
  var $sub49=($sub47)-($55);
  var $56=$xsi_addr;
  var $arrayidx50=(($56+16)|0);
  HEAPF64[(($arrayidx50)>>3)]=$sub49;
  return;
}
Module["_triangle_xy_to_xsi_2d"] = _triangle_xy_to_xsi_2d;
function _triangle_sample($t, $n, $seed, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $t_addr;
      var $n_addr;
      var $seed_addr;
      var $p_addr;
      var $alpha;
      var $beta;
      var $j;
      var $r;
      var $p12=__stackBase__;
      var $p13=(__stackBase__)+(16);
      $t_addr=$t;
      $n_addr=$n;
      $seed_addr=$seed;
      $p_addr=$p;
      $j=0;
      label = 3; break;
    case 3: 
      var $0=$j;
      var $1=$n_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$seed_addr;
      var $call=_r8_uniform_01($2);
      $r=$call;
      var $3=$r;
      var $call1=Math.sqrt($3);
      $alpha=$call1;
      var $4=$alpha;
      var $sub=(1)-($4);
      var $5=$t_addr;
      var $arrayidx=(($5)|0);
      var $6=HEAPF64[(($arrayidx)>>3)];
      var $mul=($sub)*($6);
      var $7=$alpha;
      var $8=$t_addr;
      var $arrayidx2=(($8+16)|0);
      var $9=HEAPF64[(($arrayidx2)>>3)];
      var $mul3=($7)*($9);
      var $add=($mul)+($mul3);
      var $arrayidx4=(($p12)|0);
      HEAPF64[(($arrayidx4)>>3)]=$add;
      var $10=$alpha;
      var $sub5=(1)-($10);
      var $11=$t_addr;
      var $arrayidx6=(($11+8)|0);
      var $12=HEAPF64[(($arrayidx6)>>3)];
      var $mul7=($sub5)*($12);
      var $13=$alpha;
      var $14=$t_addr;
      var $arrayidx8=(($14+24)|0);
      var $15=HEAPF64[(($arrayidx8)>>3)];
      var $mul9=($13)*($15);
      var $add10=($mul7)+($mul9);
      var $arrayidx11=(($p12+8)|0);
      HEAPF64[(($arrayidx11)>>3)]=$add10;
      var $16=$alpha;
      var $sub12=(1)-($16);
      var $17=$t_addr;
      var $arrayidx13=(($17)|0);
      var $18=HEAPF64[(($arrayidx13)>>3)];
      var $mul14=($sub12)*($18);
      var $19=$alpha;
      var $20=$t_addr;
      var $arrayidx15=(($20+32)|0);
      var $21=HEAPF64[(($arrayidx15)>>3)];
      var $mul16=($19)*($21);
      var $add17=($mul14)+($mul16);
      var $arrayidx18=(($p13)|0);
      HEAPF64[(($arrayidx18)>>3)]=$add17;
      var $22=$alpha;
      var $sub19=(1)-($22);
      var $23=$t_addr;
      var $arrayidx20=(($23+8)|0);
      var $24=HEAPF64[(($arrayidx20)>>3)];
      var $mul21=($sub19)*($24);
      var $25=$alpha;
      var $26=$t_addr;
      var $arrayidx22=(($26+40)|0);
      var $27=HEAPF64[(($arrayidx22)>>3)];
      var $mul23=($25)*($27);
      var $add24=($mul21)+($mul23);
      var $arrayidx25=(($p13+8)|0);
      HEAPF64[(($arrayidx25)>>3)]=$add24;
      var $28=$seed_addr;
      var $call26=_r8_uniform_01($28);
      $beta=$call26;
      var $29=$beta;
      var $sub27=(1)-($29);
      var $arrayidx28=(($p12)|0);
      var $30=HEAPF64[(($arrayidx28)>>3)];
      var $mul29=($sub27)*($30);
      var $31=$beta;
      var $arrayidx30=(($p13)|0);
      var $32=HEAPF64[(($arrayidx30)>>3)];
      var $mul31=($31)*($32);
      var $add32=($mul29)+($mul31);
      var $33=$j;
      var $mul33=($33<<1);
      var $add34=(($mul33)|0);
      var $34=$p_addr;
      var $arrayidx35=(($34+($add34<<3))|0);
      HEAPF64[(($arrayidx35)>>3)]=$add32;
      var $35=$beta;
      var $sub36=(1)-($35);
      var $arrayidx37=(($p12+8)|0);
      var $36=HEAPF64[(($arrayidx37)>>3)];
      var $mul38=($sub36)*($36);
      var $37=$beta;
      var $arrayidx39=(($p13+8)|0);
      var $38=HEAPF64[(($arrayidx39)>>3)];
      var $mul40=($37)*($38);
      var $add41=($mul38)+($mul40);
      var $39=$j;
      var $mul42=($39<<1);
      var $add43=((($mul42)+(1))|0);
      var $40=$p_addr;
      var $arrayidx44=(($40+($add43<<3))|0);
      HEAPF64[(($arrayidx44)>>3)]=$add41;
      label = 5; break;
    case 5: 
      var $41=$j;
      var $inc=((($41)+(1))|0);
      $j=$inc;
      label = 3; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_triangle_sample"] = _triangle_sample;
function _truncated_octahedron_shape_3d($point_num, $face_num, $face_order_max, $point_coord, $face_order, $face_point) {
  var label = 0;
  var $point_num_addr;
  var $face_num_addr;
  var $face_order_max_addr;
  var $point_coord_addr;
  var $face_order_addr;
  var $face_point_addr;
  $point_num_addr=$point_num;
  $face_num_addr=$face_num;
  $face_order_max_addr=$face_order_max;
  $point_coord_addr=$point_coord;
  $face_order_addr=$face_order;
  $face_point_addr=$face_point;
  var $0=$face_num_addr;
  var $1=$face_order_addr;
  _i4vec_copy($0, ((920)|0), $1);
  var $2=$face_order_max_addr;
  var $3=$face_num_addr;
  var $mul=(Math.imul($2,$3)|0);
  var $4=$face_point_addr;
  _i4vec_copy($mul, ((584)|0), $4);
  var $5=$point_num_addr;
  var $mul1=((($5)*(3))&-1);
  var $6=$point_coord_addr;
  _r8vec_copy($mul1, ((8)|0), $6);
  return;
}
Module["_truncated_octahedron_shape_3d"] = _truncated_octahedron_shape_3d;
function _vector_directions_nd($dim_num, $v, $angle) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $v_addr;
      var $angle_addr;
      var $i;
      var $vnorm;
      $dim_num_addr=$dim_num;
      $v_addr=$v;
      $angle_addr=$angle;
      var $0=$dim_num_addr;
      var $1=$v_addr;
      var $call=_r8vec_norm($0, $1);
      $vnorm=$call;
      var $2=$vnorm;
      var $cmp=$2 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $3=$dim_num_addr;
      var $4=$angle_addr;
      _r8vec_zero($3, $4);
      label = 9; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $5=$i;
      var $6=$dim_num_addr;
      var $cmp1=(($5)|(0)) < (($6)|(0));
      if ($cmp1) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $7=$i;
      var $8=$v_addr;
      var $arrayidx=(($8+($7<<3))|0);
      var $9=HEAPF64[(($arrayidx)>>3)];
      var $10=$vnorm;
      var $div=($9)/($10);
      var $call2=Math.acos($div);
      var $11=$i;
      var $12=$angle_addr;
      var $arrayidx3=(($12+($11<<3))|0);
      HEAPF64[(($arrayidx3)>>3)]=$call2;
      label = 7; break;
    case 7: 
      var $13=$i;
      var $inc=((($13)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_vector_directions_nd"] = _vector_directions_nd;
function _tube_2d($dist, $n, $p, $p1, $p2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dist_addr;
      var $n_addr;
      var $p_addr;
      var $p1_addr;
      var $p2_addr;
      var $a;
      var $b;
      var $c;
      var $dis1;
      var $dis2;
      var $j;
      var $pi;
      var $pim1;
      var $pip1;
      var $p4=__stackBase__;
      var $p5=(__stackBase__)+(16);
      var $temp;
      $dist_addr=$dist;
      $n_addr=$n;
      $p_addr=$p;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) < 3;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($2, ((11648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($3, ((11624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$n_addr;
      var $call3=_fprintf($4, ((14928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $6=$j;
      var $7=$n_addr;
      var $sub=((($7)-(1))|0);
      var $cmp4=(($6)|(0)) < (($sub)|(0));
      if ($cmp4) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $8=$p_addr;
      var $9=$j;
      var $mul=($9<<1);
      var $add_ptr=(($8+($mul<<3))|0);
      var $10=$p_addr;
      var $11=$j;
      var $add=((($11)+(1))|0);
      var $mul5=($add<<1);
      var $add_ptr6=(($10+($mul5<<3))|0);
      var $call7=_r8vec_eq(2, $add_ptr, $add_ptr6);
      var $tobool=(($call7)|(0))!=0;
      if ($tobool) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $12=HEAP32[((_stderr)>>2)];
      var $call9=_fprintf($12, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $13=HEAP32[((_stderr)>>2)];
      var $call10=_fprintf($13, ((11648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $14=HEAP32[((_stderr)>>2)];
      var $15=$j;
      var $call11=_fprintf($14, ((11544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$15,tempInt));
      var $16=HEAP32[((_stderr)>>2)];
      var $17=$j;
      var $mul12=($17<<1);
      var $add13=(($mul12)|0);
      var $18=$p_addr;
      var $arrayidx=(($18+($add13<<3))|0);
      var $19=HEAPF64[(($arrayidx)>>3)];
      var $call14=_fprintf($16, ((11528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$19,tempInt));
      var $20=HEAP32[((_stderr)>>2)];
      var $21=$j;
      var $mul15=($21<<1);
      var $add16=((($mul15)+(1))|0);
      var $22=$p_addr;
      var $arrayidx17=(($22+($add16<<3))|0);
      var $23=HEAPF64[(($arrayidx17)>>3)];
      var $call18=_fprintf($20, ((11496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempInt)>>3)]=$23,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 8: 
      label = 9; break;
    case 9: 
      var $24=$j;
      var $inc=((($24)+(1))|0);
      $j=$inc;
      label = 5; break;
    case 10: 
      $j=1;
      label = 11; break;
    case 11: 
      var $25=$j;
      var $26=$n_addr;
      var $cmp21=(($25)|(0)) <= (($26)|(0));
      if ($cmp21) { label = 12; break; } else { label = 29; break; }
    case 12: 
      var $27=$j;
      var $cmp23=(($27)|(0))==1;
      if ($cmp23) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $28=$p_addr;
      var $29=$j;
      var $sub25=((($29)-(1))|0);
      var $mul26=($sub25<<1);
      var $add_ptr27=(($28+($mul26<<3))|0);
      $pim1=$add_ptr27;
      label = 15; break;
    case 14: 
      var $30=$p_addr;
      var $31=$j;
      var $sub28=((($31)-(2))|0);
      var $mul29=($sub28<<1);
      var $add_ptr30=(($30+($mul29<<3))|0);
      $pim1=$add_ptr30;
      label = 15; break;
    case 15: 
      var $32=$p_addr;
      var $33=$j;
      var $sub32=((($33)-(1))|0);
      var $mul33=($sub32<<1);
      var $add_ptr34=(($32+($mul33<<3))|0);
      $pi=$add_ptr34;
      var $34=$j;
      var $35=$n_addr;
      var $cmp35=(($34)|(0)) < (($35)|(0));
      if ($cmp35) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $36=$p_addr;
      var $37=$j;
      var $mul37=($37<<1);
      var $add_ptr38=(($36+($mul37<<3))|0);
      $pip1=$add_ptr38;
      label = 18; break;
    case 17: 
      var $38=$p_addr;
      var $39=$j;
      var $sub40=((($39)-(1))|0);
      var $mul41=($sub40<<1);
      var $add_ptr42=(($38+($mul41<<3))|0);
      $pip1=$add_ptr42;
      label = 18; break;
    case 18: 
      var $40=$dist_addr;
      var $41=$pim1;
      var $42=$pi;
      var $43=$pip1;
      var $arraydecay=(($p4)|0);
      var $arraydecay44=(($p5)|0);
      _angle_box_2d($40, $41, $42, $43, $arraydecay, $arraydecay44);
      var $arrayidx45=(($p4)|0);
      var $44=HEAPF64[(($arrayidx45)>>3)];
      var $45=$j;
      var $sub46=((($45)-(1))|0);
      var $mul47=($sub46<<1);
      var $add48=(($mul47)|0);
      var $46=$p1_addr;
      var $arrayidx49=(($46+($add48<<3))|0);
      HEAPF64[(($arrayidx49)>>3)]=$44;
      var $arrayidx50=(($p4+8)|0);
      var $47=HEAPF64[(($arrayidx50)>>3)];
      var $48=$j;
      var $sub51=((($48)-(1))|0);
      var $mul52=($sub51<<1);
      var $add53=((($mul52)+(1))|0);
      var $49=$p1_addr;
      var $arrayidx54=(($49+($add53<<3))|0);
      HEAPF64[(($arrayidx54)>>3)]=$47;
      var $arrayidx55=(($p5)|0);
      var $50=HEAPF64[(($arrayidx55)>>3)];
      var $51=$j;
      var $sub56=((($51)-(1))|0);
      var $mul57=($sub56<<1);
      var $add58=(($mul57)|0);
      var $52=$p2_addr;
      var $arrayidx59=(($52+($add58<<3))|0);
      HEAPF64[(($arrayidx59)>>3)]=$50;
      var $arrayidx60=(($p5+8)|0);
      var $53=HEAPF64[(($arrayidx60)>>3)];
      var $54=$j;
      var $sub61=((($54)-(1))|0);
      var $mul62=($sub61<<1);
      var $add63=((($mul62)+(1))|0);
      var $55=$p2_addr;
      var $arrayidx64=(($55+($add63<<3))|0);
      HEAPF64[(($arrayidx64)>>3)]=$53;
      var $56=$j;
      var $cmp65=(($56)|(0))==1;
      if ($cmp65) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $57=$p_addr;
      var $arrayidx67=(($57+16)|0);
      var $58=HEAPF64[(($arrayidx67)>>3)];
      var $59=$p_addr;
      var $arrayidx68=(($59)|0);
      var $60=HEAPF64[(($arrayidx68)>>3)];
      var $sub69=($58)-($60);
      var $61=Math.pow($sub69, 2);
      var $62=$p_addr;
      var $arrayidx70=(($62+24)|0);
      var $63=HEAPF64[(($arrayidx70)>>3)];
      var $64=$p_addr;
      var $arrayidx71=(($64+8)|0);
      var $65=HEAPF64[(($arrayidx71)>>3)];
      var $sub72=($63)-($65);
      var $66=Math.pow($sub72, 2);
      var $add73=($61)+($66);
      var $call74=Math.sqrt($add73);
      $temp=$call74;
      var $67=$p1_addr;
      var $arrayidx75=(($67)|0);
      var $68=HEAPF64[(($arrayidx75)>>3)];
      var $69=$dist_addr;
      var $70=$p_addr;
      var $arrayidx76=(($70+16)|0);
      var $71=HEAPF64[(($arrayidx76)>>3)];
      var $72=$p_addr;
      var $arrayidx77=(($72)|0);
      var $73=HEAPF64[(($arrayidx77)>>3)];
      var $sub78=($71)-($73);
      var $mul79=($69)*($sub78);
      var $74=$temp;
      var $div=($mul79)/($74);
      var $sub80=($68)-($div);
      var $75=$p1_addr;
      var $arrayidx81=(($75)|0);
      HEAPF64[(($arrayidx81)>>3)]=$sub80;
      var $76=$p1_addr;
      var $arrayidx82=(($76+8)|0);
      var $77=HEAPF64[(($arrayidx82)>>3)];
      var $78=$dist_addr;
      var $79=$p_addr;
      var $arrayidx83=(($79+24)|0);
      var $80=HEAPF64[(($arrayidx83)>>3)];
      var $81=$p_addr;
      var $arrayidx84=(($81+8)|0);
      var $82=HEAPF64[(($arrayidx84)>>3)];
      var $sub85=($80)-($82);
      var $mul86=($78)*($sub85);
      var $83=$temp;
      var $div87=($mul86)/($83);
      var $sub88=($77)-($div87);
      var $84=$p1_addr;
      var $arrayidx89=(($84+8)|0);
      HEAPF64[(($arrayidx89)>>3)]=$sub88;
      var $85=$p2_addr;
      var $arrayidx90=(($85)|0);
      var $86=HEAPF64[(($arrayidx90)>>3)];
      var $87=$dist_addr;
      var $88=$p_addr;
      var $arrayidx91=(($88+16)|0);
      var $89=HEAPF64[(($arrayidx91)>>3)];
      var $90=$p_addr;
      var $arrayidx92=(($90)|0);
      var $91=HEAPF64[(($arrayidx92)>>3)];
      var $sub93=($89)-($91);
      var $mul94=($87)*($sub93);
      var $92=$temp;
      var $div95=($mul94)/($92);
      var $sub96=($86)-($div95);
      var $93=$p2_addr;
      var $arrayidx97=(($93)|0);
      HEAPF64[(($arrayidx97)>>3)]=$sub96;
      var $94=$p2_addr;
      var $arrayidx98=(($94+8)|0);
      var $95=HEAPF64[(($arrayidx98)>>3)];
      var $96=$dist_addr;
      var $97=$p_addr;
      var $arrayidx99=(($97+24)|0);
      var $98=HEAPF64[(($arrayidx99)>>3)];
      var $99=$p_addr;
      var $arrayidx100=(($99+8)|0);
      var $100=HEAPF64[(($arrayidx100)>>3)];
      var $sub101=($98)-($100);
      var $mul102=($96)*($sub101);
      var $101=$temp;
      var $div103=($mul102)/($101);
      var $sub104=($95)-($div103);
      var $102=$p2_addr;
      var $arrayidx105=(($102+8)|0);
      HEAPF64[(($arrayidx105)>>3)]=$sub104;
      label = 23; break;
    case 20: 
      var $103=$j;
      var $104=$n_addr;
      var $cmp107=(($103)|(0))==(($104)|(0));
      if ($cmp107) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $105=$n_addr;
      var $sub109=((($105)-(1))|0);
      var $mul110=($sub109<<1);
      var $add111=(($mul110)|0);
      var $106=$p_addr;
      var $arrayidx112=(($106+($add111<<3))|0);
      var $107=HEAPF64[(($arrayidx112)>>3)];
      var $108=$n_addr;
      var $sub113=((($108)-(2))|0);
      var $mul114=($sub113<<1);
      var $add115=(($mul114)|0);
      var $109=$p_addr;
      var $arrayidx116=(($109+($add115<<3))|0);
      var $110=HEAPF64[(($arrayidx116)>>3)];
      var $sub117=($107)-($110);
      var $111=Math.pow($sub117, 2);
      var $112=$n_addr;
      var $sub118=((($112)-(1))|0);
      var $mul119=($sub118<<1);
      var $add120=((($mul119)+(1))|0);
      var $113=$p_addr;
      var $arrayidx121=(($113+($add120<<3))|0);
      var $114=HEAPF64[(($arrayidx121)>>3)];
      var $115=$n_addr;
      var $sub122=((($115)-(2))|0);
      var $mul123=($sub122<<1);
      var $add124=((($mul123)+(1))|0);
      var $116=$p_addr;
      var $arrayidx125=(($116+($add124<<3))|0);
      var $117=HEAPF64[(($arrayidx125)>>3)];
      var $sub126=($114)-($117);
      var $118=Math.pow($sub126, 2);
      var $add127=($111)+($118);
      var $call128=Math.sqrt($add127);
      $temp=$call128;
      var $119=$n_addr;
      var $sub129=((($119)-(1))|0);
      var $mul130=($sub129<<1);
      var $add131=(($mul130)|0);
      var $120=$p1_addr;
      var $arrayidx132=(($120+($add131<<3))|0);
      var $121=HEAPF64[(($arrayidx132)>>3)];
      var $122=$dist_addr;
      var $123=$n_addr;
      var $sub133=((($123)-(1))|0);
      var $mul134=($sub133<<1);
      var $add135=(($mul134)|0);
      var $124=$p_addr;
      var $arrayidx136=(($124+($add135<<3))|0);
      var $125=HEAPF64[(($arrayidx136)>>3)];
      var $126=$n_addr;
      var $sub137=((($126)-(2))|0);
      var $mul138=($sub137<<1);
      var $add139=(($mul138)|0);
      var $127=$p_addr;
      var $arrayidx140=(($127+($add139<<3))|0);
      var $128=HEAPF64[(($arrayidx140)>>3)];
      var $sub141=($125)-($128);
      var $mul142=($122)*($sub141);
      var $129=$temp;
      var $div143=($mul142)/($129);
      var $add144=($121)+($div143);
      var $130=$n_addr;
      var $sub145=((($130)-(1))|0);
      var $mul146=($sub145<<1);
      var $add147=(($mul146)|0);
      var $131=$p1_addr;
      var $arrayidx148=(($131+($add147<<3))|0);
      HEAPF64[(($arrayidx148)>>3)]=$add144;
      var $132=$n_addr;
      var $sub149=((($132)-(1))|0);
      var $mul150=($sub149<<1);
      var $add151=((($mul150)+(1))|0);
      var $133=$p1_addr;
      var $arrayidx152=(($133+($add151<<3))|0);
      var $134=HEAPF64[(($arrayidx152)>>3)];
      var $135=$dist_addr;
      var $136=$n_addr;
      var $sub153=((($136)-(1))|0);
      var $mul154=($sub153<<1);
      var $add155=((($mul154)+(1))|0);
      var $137=$p_addr;
      var $arrayidx156=(($137+($add155<<3))|0);
      var $138=HEAPF64[(($arrayidx156)>>3)];
      var $139=$n_addr;
      var $sub157=((($139)-(2))|0);
      var $mul158=($sub157<<1);
      var $add159=((($mul158)+(1))|0);
      var $140=$p_addr;
      var $arrayidx160=(($140+($add159<<3))|0);
      var $141=HEAPF64[(($arrayidx160)>>3)];
      var $sub161=($138)-($141);
      var $mul162=($135)*($sub161);
      var $142=$temp;
      var $div163=($mul162)/($142);
      var $add164=($134)+($div163);
      var $143=$n_addr;
      var $sub165=((($143)-(1))|0);
      var $mul166=($sub165<<1);
      var $add167=((($mul166)+(1))|0);
      var $144=$p1_addr;
      var $arrayidx168=(($144+($add167<<3))|0);
      HEAPF64[(($arrayidx168)>>3)]=$add164;
      var $145=$n_addr;
      var $sub169=((($145)-(1))|0);
      var $mul170=($sub169<<1);
      var $add171=(($mul170)|0);
      var $146=$p2_addr;
      var $arrayidx172=(($146+($add171<<3))|0);
      var $147=HEAPF64[(($arrayidx172)>>3)];
      var $148=$dist_addr;
      var $149=$n_addr;
      var $sub173=((($149)-(1))|0);
      var $mul174=($sub173<<1);
      var $add175=(($mul174)|0);
      var $150=$p_addr;
      var $arrayidx176=(($150+($add175<<3))|0);
      var $151=HEAPF64[(($arrayidx176)>>3)];
      var $152=$n_addr;
      var $sub177=((($152)-(2))|0);
      var $mul178=($sub177<<1);
      var $add179=(($mul178)|0);
      var $153=$p_addr;
      var $arrayidx180=(($153+($add179<<3))|0);
      var $154=HEAPF64[(($arrayidx180)>>3)];
      var $sub181=($151)-($154);
      var $mul182=($148)*($sub181);
      var $155=$temp;
      var $div183=($mul182)/($155);
      var $add184=($147)+($div183);
      var $156=$n_addr;
      var $sub185=((($156)-(1))|0);
      var $mul186=($sub185<<1);
      var $add187=(($mul186)|0);
      var $157=$p2_addr;
      var $arrayidx188=(($157+($add187<<3))|0);
      HEAPF64[(($arrayidx188)>>3)]=$add184;
      var $158=$n_addr;
      var $sub189=((($158)-(1))|0);
      var $mul190=($sub189<<1);
      var $add191=((($mul190)+(1))|0);
      var $159=$p2_addr;
      var $arrayidx192=(($159+($add191<<3))|0);
      var $160=HEAPF64[(($arrayidx192)>>3)];
      var $161=$dist_addr;
      var $162=$n_addr;
      var $sub193=((($162)-(1))|0);
      var $mul194=($sub193<<1);
      var $add195=((($mul194)+(1))|0);
      var $163=$p_addr;
      var $arrayidx196=(($163+($add195<<3))|0);
      var $164=HEAPF64[(($arrayidx196)>>3)];
      var $165=$n_addr;
      var $sub197=((($165)-(2))|0);
      var $mul198=($sub197<<1);
      var $add199=((($mul198)+(1))|0);
      var $166=$p_addr;
      var $arrayidx200=(($166+($add199<<3))|0);
      var $167=HEAPF64[(($arrayidx200)>>3)];
      var $sub201=($164)-($167);
      var $mul202=($161)*($sub201);
      var $168=$temp;
      var $div203=($mul202)/($168);
      var $add204=($160)+($div203);
      var $169=$n_addr;
      var $sub205=((($169)-(1))|0);
      var $mul206=($sub205<<1);
      var $add207=((($mul206)+(1))|0);
      var $170=$p2_addr;
      var $arrayidx208=(($170+($add207<<3))|0);
      HEAPF64[(($arrayidx208)>>3)]=$add204;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $171=$j;
      var $cmp211=1 < (($171)|(0));
      if ($cmp211) { label = 24; break; } else { label = 27; break; }
    case 24: 
      var $172=$j;
      var $sub213=((($172)-(2))|0);
      var $mul214=($sub213<<1);
      var $add215=((($mul214)+(1))|0);
      var $173=$p_addr;
      var $arrayidx216=(($173+($add215<<3))|0);
      var $174=HEAPF64[(($arrayidx216)>>3)];
      var $175=$j;
      var $sub217=((($175)-(1))|0);
      var $mul218=($sub217<<1);
      var $add219=((($mul218)+(1))|0);
      var $176=$p_addr;
      var $arrayidx220=(($176+($add219<<3))|0);
      var $177=HEAPF64[(($arrayidx220)>>3)];
      var $sub221=($174)-($177);
      $a=$sub221;
      var $178=$j;
      var $sub222=((($178)-(1))|0);
      var $mul223=($sub222<<1);
      var $add224=(($mul223)|0);
      var $179=$p_addr;
      var $arrayidx225=(($179+($add224<<3))|0);
      var $180=HEAPF64[(($arrayidx225)>>3)];
      var $181=$j;
      var $sub226=((($181)-(2))|0);
      var $mul227=($sub226<<1);
      var $add228=(($mul227)|0);
      var $182=$p_addr;
      var $arrayidx229=(($182+($add228<<3))|0);
      var $183=HEAPF64[(($arrayidx229)>>3)];
      var $sub230=($180)-($183);
      $b=$sub230;
      var $184=$j;
      var $sub231=((($184)-(2))|0);
      var $mul232=($sub231<<1);
      var $add233=(($mul232)|0);
      var $185=$p_addr;
      var $arrayidx234=(($185+($add233<<3))|0);
      var $186=HEAPF64[(($arrayidx234)>>3)];
      var $187=$j;
      var $sub235=((($187)-(1))|0);
      var $mul236=($sub235<<1);
      var $add237=((($mul236)+(1))|0);
      var $188=$p_addr;
      var $arrayidx238=(($188+($add237<<3))|0);
      var $189=HEAPF64[(($arrayidx238)>>3)];
      var $mul239=($186)*($189);
      var $190=$j;
      var $sub240=((($190)-(1))|0);
      var $mul241=($sub240<<1);
      var $add242=(($mul241)|0);
      var $191=$p_addr;
      var $arrayidx243=(($191+($add242<<3))|0);
      var $192=HEAPF64[(($arrayidx243)>>3)];
      var $193=$j;
      var $sub244=((($193)-(2))|0);
      var $mul245=($sub244<<1);
      var $add246=((($mul245)+(1))|0);
      var $194=$p_addr;
      var $arrayidx247=(($194+($add246<<3))|0);
      var $195=HEAPF64[(($arrayidx247)>>3)];
      var $mul248=($192)*($195);
      var $sub249=($mul239)-($mul248);
      $c=$sub249;
      var $196=$a;
      var $197=$j;
      var $sub250=((($197)-(2))|0);
      var $mul251=($sub250<<1);
      var $add252=(($mul251)|0);
      var $198=$p1_addr;
      var $arrayidx253=(($198+($add252<<3))|0);
      var $199=HEAPF64[(($arrayidx253)>>3)];
      var $mul254=($196)*($199);
      var $200=$b;
      var $201=$j;
      var $sub255=((($201)-(2))|0);
      var $mul256=($sub255<<1);
      var $add257=((($mul256)+(1))|0);
      var $202=$p1_addr;
      var $arrayidx258=(($202+($add257<<3))|0);
      var $203=HEAPF64[(($arrayidx258)>>3)];
      var $mul259=($200)*($203);
      var $add260=($mul254)+($mul259);
      var $204=$c;
      var $add261=($add260)+($204);
      var $205=$a;
      var $206=$a;
      var $mul262=($205)*($206);
      var $207=$b;
      var $208=$b;
      var $mul263=($207)*($208);
      var $add264=($mul262)+($mul263);
      var $call265=Math.sqrt($add264);
      var $div266=($add261)/($call265);
      $dis1=$div266;
      var $209=$a;
      var $210=$j;
      var $sub267=((($210)-(1))|0);
      var $mul268=($sub267<<1);
      var $add269=(($mul268)|0);
      var $211=$p1_addr;
      var $arrayidx270=(($211+($add269<<3))|0);
      var $212=HEAPF64[(($arrayidx270)>>3)];
      var $mul271=($209)*($212);
      var $213=$b;
      var $214=$j;
      var $sub272=((($214)-(1))|0);
      var $mul273=($sub272<<1);
      var $add274=((($mul273)+(1))|0);
      var $215=$p1_addr;
      var $arrayidx275=(($215+($add274<<3))|0);
      var $216=HEAPF64[(($arrayidx275)>>3)];
      var $mul276=($213)*($216);
      var $add277=($mul271)+($mul276);
      var $217=$c;
      var $add278=($add277)+($217);
      var $218=$a;
      var $219=$a;
      var $mul279=($218)*($219);
      var $220=$b;
      var $221=$b;
      var $mul280=($220)*($221);
      var $add281=($mul279)+($mul280);
      var $call282=Math.sqrt($add281);
      var $div283=($add278)/($call282);
      $dis2=$div283;
      var $222=$dis1;
      var $call284=_r8_sign($222);
      var $223=$dis2;
      var $call285=_r8_sign($223);
      var $cmp286=$call284 != $call285;
      if ($cmp286) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $224=$j;
      var $sub288=((($224)-(1))|0);
      var $mul289=($sub288<<1);
      var $add290=(($mul289)|0);
      var $225=$p1_addr;
      var $arrayidx291=(($225+($add290<<3))|0);
      var $226=HEAPF64[(($arrayidx291)>>3)];
      $temp=$226;
      var $227=$j;
      var $sub292=((($227)-(1))|0);
      var $mul293=($sub292<<1);
      var $add294=(($mul293)|0);
      var $228=$p2_addr;
      var $arrayidx295=(($228+($add294<<3))|0);
      var $229=HEAPF64[(($arrayidx295)>>3)];
      var $230=$j;
      var $sub296=((($230)-(1))|0);
      var $mul297=($sub296<<1);
      var $add298=(($mul297)|0);
      var $231=$p1_addr;
      var $arrayidx299=(($231+($add298<<3))|0);
      HEAPF64[(($arrayidx299)>>3)]=$229;
      var $232=$temp;
      var $233=$j;
      var $sub300=((($233)-(1))|0);
      var $mul301=($sub300<<1);
      var $add302=(($mul301)|0);
      var $234=$p2_addr;
      var $arrayidx303=(($234+($add302<<3))|0);
      HEAPF64[(($arrayidx303)>>3)]=$232;
      var $235=$j;
      var $sub304=((($235)-(1))|0);
      var $mul305=($sub304<<1);
      var $add306=((($mul305)+(1))|0);
      var $236=$p1_addr;
      var $arrayidx307=(($236+($add306<<3))|0);
      var $237=HEAPF64[(($arrayidx307)>>3)];
      $temp=$237;
      var $238=$j;
      var $sub308=((($238)-(1))|0);
      var $mul309=($sub308<<1);
      var $add310=((($mul309)+(1))|0);
      var $239=$p2_addr;
      var $arrayidx311=(($239+($add310<<3))|0);
      var $240=HEAPF64[(($arrayidx311)>>3)];
      var $241=$j;
      var $sub312=((($241)-(1))|0);
      var $mul313=($sub312<<1);
      var $add314=((($mul313)+(1))|0);
      var $242=$p1_addr;
      var $arrayidx315=(($242+($add314<<3))|0);
      HEAPF64[(($arrayidx315)>>3)]=$240;
      var $243=$temp;
      var $244=$j;
      var $sub316=((($244)-(1))|0);
      var $mul317=($sub316<<1);
      var $add318=((($mul317)+(1))|0);
      var $245=$p2_addr;
      var $arrayidx319=(($245+($add318<<3))|0);
      HEAPF64[(($arrayidx319)>>3)]=$243;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $246=$j;
      var $inc323=((($246)+(1))|0);
      $j=$inc323;
      label = 11; break;
    case 29: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tube_2d"] = _tube_2d;
function _tuple_next2($n, $xmin, $xmax, $x, $rank) {
  var label = 0;
  var __stackBase__  = STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $n_addr;
      var $xmin_addr;
      var $xmax_addr;
      var $x_addr;
      var $rank_addr;
      var $i;
      var $test;
      $n_addr=$n;
      $xmin_addr=$xmin;
      $xmax_addr=$xmax;
      $x_addr=$x;
      $rank_addr=$rank;
      var $0=$rank_addr;
      var $1=HEAP32[(($0)>>2)];
      var $cmp=(($1)|(0)) < 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $2=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($2, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $3=HEAP32[((_stderr)>>2)];
      var $call1=_fprintf($3, ((11464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $4=HEAP32[((_stderr)>>2)];
      var $5=$rank_addr;
      var $6=HEAP32[(($5)>>2)];
      var $call2=_fprintf($4, ((11432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 4: 
      $test=1;
      $i=0;
      label = 5; break;
    case 5: 
      var $7=$i;
      var $8=$n_addr;
      var $cmp3=(($7)|(0)) < (($8)|(0));
      if ($cmp3) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $9=$test;
      var $10=$i;
      var $11=$xmax_addr;
      var $arrayidx=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $13=$i;
      var $14=$xmin_addr;
      var $arrayidx4=(($14+($13<<2))|0);
      var $15=HEAP32[(($arrayidx4)>>2)];
      var $sub=((($12)-($15))|0);
      var $call5=Math.abs($sub);
      var $add=((($call5)+(1))|0);
      var $mul=(Math.imul($9,$add)|0);
      $test=$mul;
      label = 7; break;
    case 7: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 8: 
      var $17=$test;
      var $18=$rank_addr;
      var $19=HEAP32[(($18)>>2)];
      var $cmp6=(($17)|(0)) < (($19)|(0));
      if ($cmp6) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $20=HEAP32[((_stderr)>>2)];
      var $call8=_fprintf($20, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $21=HEAP32[((_stderr)>>2)];
      var $call9=_fprintf($21, ((11464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $22=HEAP32[((_stderr)>>2)];
      var $23=$rank_addr;
      var $24=HEAP32[(($23)>>2)];
      var $call10=_fprintf($22, ((11432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 10: 
      var $25=$rank_addr;
      var $26=HEAP32[(($25)>>2)];
      var $cmp12=(($26)|(0))==0;
      if ($cmp12) { label = 11; break; } else { label = 16; break; }
    case 11: 
      $i=0;
      label = 12; break;
    case 12: 
      var $27=$i;
      var $28=$n_addr;
      var $cmp15=(($27)|(0)) < (($28)|(0));
      if ($cmp15) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $29=$i;
      var $30=$xmin_addr;
      var $arrayidx17=(($30+($29<<2))|0);
      var $31=HEAP32[(($arrayidx17)>>2)];
      var $32=$i;
      var $33=$x_addr;
      var $arrayidx18=(($33+($32<<2))|0);
      HEAP32[(($arrayidx18)>>2)]=$31;
      label = 14; break;
    case 14: 
      var $34=$i;
      var $inc20=((($34)+(1))|0);
      $i=$inc20;
      label = 12; break;
    case 15: 
      var $35=$rank_addr;
      HEAP32[(($35)>>2)]=1;
      label = 26; break;
    case 16: 
      var $36=$rank_addr;
      var $37=HEAP32[(($36)>>2)];
      var $add23=((($37)+(1))|0);
      var $38=$rank_addr;
      HEAP32[(($38)>>2)]=$add23;
      var $39=$n_addr;
      var $sub24=((($39)-(1))|0);
      $i=$sub24;
      label = 17; break;
    case 17: 
      var $40=$i;
      var $41=$x_addr;
      var $arrayidx26=(($41+($40<<2))|0);
      var $42=HEAP32[(($arrayidx26)>>2)];
      var $43=$i;
      var $44=$xmax_addr;
      var $arrayidx27=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx27)>>2)];
      var $cmp28=(($42)|(0))!=(($45)|(0));
      if ($cmp28) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $46=$i;
      var $47=$xmin_addr;
      var $arrayidx30=(($47+($46<<2))|0);
      var $48=HEAP32[(($arrayidx30)>>2)];
      var $49=$i;
      var $50=$xmax_addr;
      var $arrayidx31=(($50+($49<<2))|0);
      var $51=HEAP32[(($arrayidx31)>>2)];
      var $cmp32=(($48)|(0)) < (($51)|(0));
      if ($cmp32) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $52=$i;
      var $53=$x_addr;
      var $arrayidx34=(($53+($52<<2))|0);
      var $54=HEAP32[(($arrayidx34)>>2)];
      var $add35=((($54)+(1))|0);
      var $55=$i;
      var $56=$x_addr;
      var $arrayidx36=(($56+($55<<2))|0);
      HEAP32[(($arrayidx36)>>2)]=$add35;
      label = 21; break;
    case 20: 
      var $57=$i;
      var $58=$x_addr;
      var $arrayidx37=(($58+($57<<2))|0);
      var $59=HEAP32[(($arrayidx37)>>2)];
      var $sub38=((($59)-(1))|0);
      var $60=$i;
      var $61=$x_addr;
      var $arrayidx39=(($61+($60<<2))|0);
      HEAP32[(($arrayidx39)>>2)]=$sub38;
      label = 21; break;
    case 21: 
      label = 25; break;
    case 22: 
      var $62=$i;
      var $63=$xmin_addr;
      var $arrayidx42=(($63+($62<<2))|0);
      var $64=HEAP32[(($arrayidx42)>>2)];
      var $65=$i;
      var $66=$x_addr;
      var $arrayidx43=(($66+($65<<2))|0);
      HEAP32[(($arrayidx43)>>2)]=$64;
      var $67=$i;
      var $cmp44=(($67)|(0))==0;
      if ($cmp44) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $68=$rank_addr;
      HEAP32[(($68)>>2)]=0;
      label = 25; break;
    case 24: 
      var $69=$i;
      var $sub47=((($69)-(1))|0);
      $i=$sub47;
      label = 17; break;
    case 25: 
      label = 26; break;
    case 26: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_tuple_next2"] = _tuple_next2;
function _vector_rotate_2d($v1, $angle, $v2) {
  var label = 0;
  var $v1_addr;
  var $angle_addr;
  var $v2_addr;
  $v1_addr=$v1;
  $angle_addr=$angle;
  $v2_addr=$v2;
  var $0=$angle_addr;
  var $call=Math.cos($0);
  var $1=$v1_addr;
  var $arrayidx=(($1)|0);
  var $2=HEAPF64[(($arrayidx)>>3)];
  var $mul=($call)*($2);
  var $3=$angle_addr;
  var $call1=Math.sin($3);
  var $4=$v1_addr;
  var $arrayidx2=(($4+8)|0);
  var $5=HEAPF64[(($arrayidx2)>>3)];
  var $mul3=($call1)*($5);
  var $sub=($mul)-($mul3);
  var $6=$v2_addr;
  var $arrayidx4=(($6)|0);
  HEAPF64[(($arrayidx4)>>3)]=$sub;
  var $7=$angle_addr;
  var $call5=Math.sin($7);
  var $8=$v1_addr;
  var $arrayidx6=(($8)|0);
  var $9=HEAPF64[(($arrayidx6)>>3)];
  var $mul7=($call5)*($9);
  var $10=$angle_addr;
  var $call8=Math.cos($10);
  var $11=$v1_addr;
  var $arrayidx9=(($11+8)|0);
  var $12=HEAPF64[(($arrayidx9)>>3)];
  var $mul10=($call8)*($12);
  var $add=($mul7)+($mul10);
  var $13=$v2_addr;
  var $arrayidx11=(($13+8)|0);
  HEAPF64[(($arrayidx11)>>3)]=$add;
  return;
}
Module["_vector_rotate_2d"] = _vector_rotate_2d;
function _vector_separation_2d($v1, $v2) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $cos_theta;
  var $v1_norm;
  var $v2_norm;
  var $value;
  $v1_addr=$v1;
  $v2_addr=$v2;
  var $0=$v1_addr;
  var $call=_r8vec_norm(2, $0);
  $v1_norm=$call;
  var $1=$v2_addr;
  var $call1=_r8vec_norm(2, $1);
  $v2_norm=$call1;
  var $2=$v1_addr;
  var $3=$v2_addr;
  var $call2=_r8vec_dot_product(2, $2, $3);
  var $4=$v1_norm;
  var $5=$v2_norm;
  var $mul=($4)*($5);
  var $div=($call2)/($mul);
  $cos_theta=$div;
  var $6=$cos_theta;
  var $call3=_r8_acos($6);
  $value=$call3;
  var $7=$value;
  return $7;
}
Module["_vector_separation_2d"] = _vector_separation_2d;
function _vector_separation_3d($v1, $v2) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $cos_theta;
  var $v1_norm;
  var $v2_norm;
  $v1_addr=$v1;
  $v2_addr=$v2;
  var $0=$v1_addr;
  var $call=_r8vec_norm(3, $0);
  $v1_norm=$call;
  var $1=$v2_addr;
  var $call1=_r8vec_norm(3, $1);
  $v2_norm=$call1;
  var $2=$v1_addr;
  var $3=$v2_addr;
  var $call2=_r8vec_dot_product(3, $2, $3);
  var $4=$v1_norm;
  var $5=$v2_norm;
  var $mul=($4)*($5);
  var $div=($call2)/($mul);
  $cos_theta=$div;
  var $6=$cos_theta;
  var $call3=_r8_acos($6);
  return $call3;
}
Module["_vector_separation_3d"] = _vector_separation_3d;
function _vector_separation_nd($dim_num, $v1, $v2) {
  var label = 0;
  var $dim_num_addr;
  var $v1_addr;
  var $v2_addr;
  var $cos_theta;
  var $v1_norm;
  var $v2_norm;
  $dim_num_addr=$dim_num;
  $v1_addr=$v1;
  $v2_addr=$v2;
  var $0=$dim_num_addr;
  var $1=$v1_addr;
  var $call=_r8vec_norm($0, $1);
  $v1_norm=$call;
  var $2=$dim_num_addr;
  var $3=$v2_addr;
  var $call1=_r8vec_norm($2, $3);
  $v2_norm=$call1;
  var $4=$dim_num_addr;
  var $5=$v1_addr;
  var $6=$v2_addr;
  var $call2=_r8vec_dot_product($4, $5, $6);
  var $7=$v1_norm;
  var $8=$v2_norm;
  var $mul=($7)*($8);
  var $div=($call2)/($mul);
  $cos_theta=$div;
  var $9=$cos_theta;
  var $call3=_r8_acos($9);
  return $call3;
}
Module["_vector_separation_nd"] = _vector_separation_nd;
function _voxels_dist_l1_3d($v1, $v2) {
  var label = 0;
  var $v1_addr;
  var $v2_addr;
  var $value;
  $v1_addr=$v1;
  $v2_addr=$v2;
  var $0=$v1_addr;
  var $arrayidx=(($0)|0);
  var $1=HEAP32[(($arrayidx)>>2)];
  var $2=$v2_addr;
  var $arrayidx1=(($2)|0);
  var $3=HEAP32[(($arrayidx1)>>2)];
  var $sub=((($1)-($3))|0);
  var $call=Math.abs($sub);
  var $4=$v1_addr;
  var $arrayidx2=(($4+4)|0);
  var $5=HEAP32[(($arrayidx2)>>2)];
  var $6=$v2_addr;
  var $arrayidx3=(($6+4)|0);
  var $7=HEAP32[(($arrayidx3)>>2)];
  var $sub4=((($5)-($7))|0);
  var $call5=Math.abs($sub4);
  var $add=((($call)+($call5))|0);
  var $8=$v1_addr;
  var $arrayidx6=(($8+8)|0);
  var $9=HEAP32[(($arrayidx6)>>2)];
  var $10=$v2_addr;
  var $arrayidx7=(($10+8)|0);
  var $11=HEAP32[(($arrayidx7)>>2)];
  var $sub8=((($9)-($11))|0);
  var $call9=Math.abs($sub8);
  var $add10=((($add)+($call9))|0);
  $value=$add10;
  var $12=$value;
  return $12;
}
Module["_voxels_dist_l1_3d"] = _voxels_dist_l1_3d;
function _voxels_dist_l1_nd($dim_num, $v1, $v2) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $dim_num_addr;
      var $v1_addr;
      var $v2_addr;
      var $i;
      var $value;
      $dim_num_addr=$dim_num;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $value=0;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $1=$dim_num_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $2=$value;
      var $3=$i;
      var $4=$v1_addr;
      var $arrayidx=(($4+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $6=$i;
      var $7=$v2_addr;
      var $arrayidx1=(($7+($6<<2))|0);
      var $8=HEAP32[(($arrayidx1)>>2)];
      var $sub=((($5)-($8))|0);
      var $call=Math.abs($sub);
      var $add=((($2)+($call))|0);
      $value=$add;
      label = 5; break;
    case 5: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      var $10=$value;
      return $10;
    default: assert(0, "bad label: " + label);
  }
}
Module["_voxels_dist_l1_nd"] = _voxels_dist_l1_nd;
function _voxels_line_3d($v1, $v2, $n, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v1_addr;
      var $v2_addr;
      var $n_addr;
      var $v_addr;
      var $a=__stackBase__;
      var $exy;
      var $exz;
      var $ezy;
      var $i;
      var $j;
      var $s=(__stackBase__)+(16);
      $v1_addr=$v1;
      $v2_addr=$v2;
      $n_addr=$n;
      $v_addr=$v;
      var $0=$n_addr;
      var $cmp=(($0)|(0)) <= 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 33; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $1=$i;
      var $cmp1=(($1)|(0)) < 3;
      if ($cmp1) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $2=$i;
      var $3=$v2_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      var $5=$i;
      var $6=$v1_addr;
      var $arrayidx2=(($6+($5<<2))|0);
      var $7=HEAP32[(($arrayidx2)>>2)];
      var $cmp3=(($4)|(0)) < (($7)|(0));
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $8=$i;
      var $arrayidx5=(($s+($8<<2))|0);
      HEAP32[(($arrayidx5)>>2)]=-1;
      label = 9; break;
    case 8: 
      var $9=$i;
      var $arrayidx6=(($s+($9<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=1;
      label = 9; break;
    case 9: 
      var $10=$i;
      var $11=$v2_addr;
      var $arrayidx8=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx8)>>2)];
      var $13=$i;
      var $14=$v1_addr;
      var $arrayidx9=(($14+($13<<2))|0);
      var $15=HEAP32[(($arrayidx9)>>2)];
      var $sub=((($12)-($15))|0);
      var $call=Math.abs($sub);
      var $16=$i;
      var $arrayidx10=(($a+($16<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$call;
      label = 10; break;
    case 10: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      label = 5; break;
    case 11: 
      var $arrayidx11=(($a+4)|0);
      var $18=HEAP32[(($arrayidx11)>>2)];
      var $arrayidx12=(($a)|0);
      var $19=HEAP32[(($arrayidx12)>>2)];
      var $sub13=((($18)-($19))|0);
      $exy=$sub13;
      var $arrayidx14=(($a+8)|0);
      var $20=HEAP32[(($arrayidx14)>>2)];
      var $arrayidx15=(($a)|0);
      var $21=HEAP32[(($arrayidx15)>>2)];
      var $sub16=((($20)-($21))|0);
      $exz=$sub16;
      var $arrayidx17=(($a+4)|0);
      var $22=HEAP32[(($arrayidx17)>>2)];
      var $arrayidx18=(($a+8)|0);
      var $23=HEAP32[(($arrayidx18)>>2)];
      var $sub19=((($22)-($23))|0);
      $ezy=$sub19;
      $i=0;
      label = 12; break;
    case 12: 
      var $24=$i;
      var $cmp21=(($24)|(0)) < 3;
      if ($cmp21) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $25=$i;
      var $26=$v1_addr;
      var $arrayidx23=(($26+($25<<2))|0);
      var $27=HEAP32[(($arrayidx23)>>2)];
      var $28=$i;
      var $add=(($28)|0);
      var $29=$v_addr;
      var $arrayidx24=(($29+($add<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$27;
      label = 14; break;
    case 14: 
      var $30=$i;
      var $inc26=((($30)+(1))|0);
      $i=$inc26;
      label = 12; break;
    case 15: 
      $j=1;
      label = 16; break;
    case 16: 
      var $31=$j;
      var $32=$n_addr;
      var $cmp29=(($31)|(0)) < (($32)|(0));
      if ($cmp29) { label = 17; break; } else { label = 32; break; }
    case 17: 
      $i=0;
      label = 18; break;
    case 18: 
      var $33=$i;
      var $cmp32=(($33)|(0)) < 3;
      if ($cmp32) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $34=$i;
      var $35=$j;
      var $sub34=((($35)-(1))|0);
      var $mul=((($sub34)*(3))&-1);
      var $add35=((($34)+($mul))|0);
      var $36=$v_addr;
      var $arrayidx36=(($36+($add35<<2))|0);
      var $37=HEAP32[(($arrayidx36)>>2)];
      var $38=$i;
      var $39=$j;
      var $mul37=((($39)*(3))&-1);
      var $add38=((($38)+($mul37))|0);
      var $40=$v_addr;
      var $arrayidx39=(($40+($add38<<2))|0);
      HEAP32[(($arrayidx39)>>2)]=$37;
      label = 20; break;
    case 20: 
      var $41=$i;
      var $inc41=((($41)+(1))|0);
      $i=$inc41;
      label = 18; break;
    case 21: 
      var $42=$exy;
      var $cmp43=(($42)|(0)) < 0;
      if ($cmp43) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $43=$exz;
      var $cmp45=(($43)|(0)) < 0;
      if ($cmp45) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $44=$j;
      var $mul47=((($44)*(3))&-1);
      var $add48=(($mul47)|0);
      var $45=$v_addr;
      var $arrayidx49=(($45+($add48<<2))|0);
      var $46=HEAP32[(($arrayidx49)>>2)];
      var $arrayidx50=(($s)|0);
      var $47=HEAP32[(($arrayidx50)>>2)];
      var $add51=((($46)+($47))|0);
      var $48=$j;
      var $mul52=((($48)*(3))&-1);
      var $add53=(($mul52)|0);
      var $49=$v_addr;
      var $arrayidx54=(($49+($add53<<2))|0);
      HEAP32[(($arrayidx54)>>2)]=$add51;
      var $50=$exy;
      var $arrayidx55=(($a+4)|0);
      var $51=HEAP32[(($arrayidx55)>>2)];
      var $mul56=($51<<1);
      var $add57=((($50)+($mul56))|0);
      $exy=$add57;
      var $52=$exz;
      var $arrayidx58=(($a+8)|0);
      var $53=HEAP32[(($arrayidx58)>>2)];
      var $mul59=($53<<1);
      var $add60=((($52)+($mul59))|0);
      $exz=$add60;
      label = 25; break;
    case 24: 
      var $54=$j;
      var $mul62=((($54)*(3))&-1);
      var $add63=((($mul62)+(2))|0);
      var $55=$v_addr;
      var $arrayidx64=(($55+($add63<<2))|0);
      var $56=HEAP32[(($arrayidx64)>>2)];
      var $arrayidx65=(($s+8)|0);
      var $57=HEAP32[(($arrayidx65)>>2)];
      var $add66=((($56)+($57))|0);
      var $58=$j;
      var $mul67=((($58)*(3))&-1);
      var $add68=((($mul67)+(2))|0);
      var $59=$v_addr;
      var $arrayidx69=(($59+($add68<<2))|0);
      HEAP32[(($arrayidx69)>>2)]=$add66;
      var $60=$exz;
      var $arrayidx70=(($a)|0);
      var $61=HEAP32[(($arrayidx70)>>2)];
      var $mul71=($61<<1);
      var $sub72=((($60)-($mul71))|0);
      $exz=$sub72;
      var $62=$ezy;
      var $arrayidx73=(($a+4)|0);
      var $63=HEAP32[(($arrayidx73)>>2)];
      var $mul74=($63<<1);
      var $add75=((($62)+($mul74))|0);
      $ezy=$add75;
      label = 25; break;
    case 25: 
      label = 30; break;
    case 26: 
      var $64=$ezy;
      var $cmp78=(($64)|(0)) < 0;
      if ($cmp78) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $65=$j;
      var $mul80=((($65)*(3))&-1);
      var $add81=((($mul80)+(2))|0);
      var $66=$v_addr;
      var $arrayidx82=(($66+($add81<<2))|0);
      var $67=HEAP32[(($arrayidx82)>>2)];
      var $arrayidx83=(($s+8)|0);
      var $68=HEAP32[(($arrayidx83)>>2)];
      var $add84=((($67)+($68))|0);
      var $69=$j;
      var $mul85=((($69)*(3))&-1);
      var $add86=((($mul85)+(2))|0);
      var $70=$v_addr;
      var $arrayidx87=(($70+($add86<<2))|0);
      HEAP32[(($arrayidx87)>>2)]=$add84;
      var $71=$exz;
      var $arrayidx88=(($a)|0);
      var $72=HEAP32[(($arrayidx88)>>2)];
      var $mul89=($72<<1);
      var $sub90=((($71)-($mul89))|0);
      $exz=$sub90;
      var $73=$ezy;
      var $arrayidx91=(($a+4)|0);
      var $74=HEAP32[(($arrayidx91)>>2)];
      var $mul92=($74<<1);
      var $add93=((($73)+($mul92))|0);
      $ezy=$add93;
      label = 29; break;
    case 28: 
      var $75=$j;
      var $mul95=((($75)*(3))&-1);
      var $add96=((($mul95)+(1))|0);
      var $76=$v_addr;
      var $arrayidx97=(($76+($add96<<2))|0);
      var $77=HEAP32[(($arrayidx97)>>2)];
      var $arrayidx98=(($s+4)|0);
      var $78=HEAP32[(($arrayidx98)>>2)];
      var $add99=((($77)+($78))|0);
      var $79=$j;
      var $mul100=((($79)*(3))&-1);
      var $add101=((($mul100)+(1))|0);
      var $80=$v_addr;
      var $arrayidx102=(($80+($add101<<2))|0);
      HEAP32[(($arrayidx102)>>2)]=$add99;
      var $81=$exy;
      var $arrayidx103=(($a)|0);
      var $82=HEAP32[(($arrayidx103)>>2)];
      var $mul104=($82<<1);
      var $sub105=((($81)-($mul104))|0);
      $exy=$sub105;
      var $83=$ezy;
      var $arrayidx106=(($a+8)|0);
      var $84=HEAP32[(($arrayidx106)>>2)];
      var $mul107=($84<<1);
      var $sub108=((($83)-($mul107))|0);
      $ezy=$sub108;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $85=$j;
      var $inc112=((($85)+(1))|0);
      $j=$inc112;
      label = 16; break;
    case 32: 
      label = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_voxels_line_3d"] = _voxels_line_3d;
function _voxels_region_3d($list_max, $nx, $ny, $nz, $ishow, $list_num, $list, $region_num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 400)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $list_max_addr;
      var $nx_addr;
      var $ny_addr;
      var $nz_addr;
      var $ishow_addr;
      var $list_num_addr;
      var $list_addr;
      var $region_num_addr;
      var $i;
      var $i2;
      var $ibase;
      var $ihi;
      var $ilo;
      var $j;
      var $j2;
      var $jbase;
      var $jhi;
      var $jlo;
      var $k;
      var $k2;
      var $kbase;
      var $khi;
      var $klo;
      var $nabes;
      var $ncan;
      var $nelements;
      var $nstack;
      var $stack=__stackBase__;
      $list_max_addr=$list_max;
      $nx_addr=$nx;
      $ny_addr=$ny;
      $nz_addr=$nz;
      $ishow_addr=$ishow;
      $list_num_addr=$list_num;
      $list_addr=$list;
      $region_num_addr=$region_num;
      $k=0;
      label = 3; break;
    case 3: 
      var $0=$k;
      var $1=$nz_addr;
      var $cmp=(($0)|(0)) < (($1)|(0));
      if ($cmp) { label = 4; break; } else { label = 16; break; }
    case 4: 
      $j=0;
      label = 5; break;
    case 5: 
      var $2=$j;
      var $3=$ny_addr;
      var $cmp2=(($2)|(0)) < (($3)|(0));
      if ($cmp2) { label = 6; break; } else { label = 14; break; }
    case 6: 
      $i=0;
      label = 7; break;
    case 7: 
      var $4=$i;
      var $5=$nx_addr;
      var $cmp5=(($4)|(0)) < (($5)|(0));
      if ($cmp5) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $6=$i;
      var $7=$nx_addr;
      var $8=$j;
      var $9=$ny_addr;
      var $10=$k;
      var $mul=(Math.imul($9,$10)|0);
      var $add=((($8)+($mul))|0);
      var $mul7=(Math.imul($7,$add)|0);
      var $add8=((($6)+($mul7))|0);
      var $11=$ishow_addr;
      var $arrayidx=(($11+($add8<<2))|0);
      var $12=HEAP32[(($arrayidx)>>2)];
      var $cmp9=(($12)|(0))!=0;
      if ($cmp9) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $13=$i;
      var $14=$nx_addr;
      var $15=$j;
      var $16=$ny_addr;
      var $17=$k;
      var $mul10=(Math.imul($16,$17)|0);
      var $add11=((($15)+($mul10))|0);
      var $mul12=(Math.imul($14,$add11)|0);
      var $add13=((($13)+($mul12))|0);
      var $18=$ishow_addr;
      var $arrayidx14=(($18+($add13<<2))|0);
      HEAP32[(($arrayidx14)>>2)]=-1;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      label = 7; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $20=$j;
      var $inc16=((($20)+(1))|0);
      $j=$inc16;
      label = 5; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $21=$k;
      var $inc19=((($21)+(1))|0);
      $k=$inc19;
      label = 3; break;
    case 16: 
      var $22=$list_num_addr;
      HEAP32[(($22)>>2)]=0;
      var $23=$region_num_addr;
      HEAP32[(($23)>>2)]=0;
      $nstack=0;
      $k=1;
      label = 17; break;
    case 17: 
      var $24=$k;
      var $25=$nz_addr;
      var $cmp22=(($24)|(0)) <= (($25)|(0));
      if ($cmp22) { label = 18; break; } else { label = 64; break; }
    case 18: 
      $j=1;
      label = 19; break;
    case 19: 
      var $26=$j;
      var $27=$ny_addr;
      var $cmp25=(($26)|(0)) <= (($27)|(0));
      if ($cmp25) { label = 20; break; } else { label = 62; break; }
    case 20: 
      $i=1;
      label = 21; break;
    case 21: 
      var $28=$i;
      var $29=$nx_addr;
      var $cmp28=(($28)|(0)) <= (($29)|(0));
      if ($cmp28) { label = 22; break; } else { label = 60; break; }
    case 22: 
      var $30=$i;
      var $sub=((($30)-(1))|0);
      var $31=$nx_addr;
      var $32=$j;
      var $sub30=((($32)-(1))|0);
      var $33=$ny_addr;
      var $34=$k;
      var $sub31=((($34)-(1))|0);
      var $mul32=(Math.imul($33,$sub31)|0);
      var $add33=((($sub30)+($mul32))|0);
      var $mul34=(Math.imul($31,$add33)|0);
      var $add35=((($sub)+($mul34))|0);
      var $35=$ishow_addr;
      var $arrayidx36=(($35+($add35<<2))|0);
      var $36=HEAP32[(($arrayidx36)>>2)];
      var $cmp37=(($36)|(0))==-1;
      if ($cmp37) { label = 23; break; } else { label = 58; break; }
    case 23: 
      var $37=$region_num_addr;
      var $38=HEAP32[(($37)>>2)];
      var $add39=((($38)+(1))|0);
      var $39=$region_num_addr;
      HEAP32[(($39)>>2)]=$add39;
      var $40=$region_num_addr;
      var $41=HEAP32[(($40)>>2)];
      var $42=$i;
      var $sub40=((($42)-(1))|0);
      var $43=$nx_addr;
      var $44=$j;
      var $sub41=((($44)-(1))|0);
      var $45=$ny_addr;
      var $46=$k;
      var $sub42=((($46)-(1))|0);
      var $mul43=(Math.imul($45,$sub42)|0);
      var $add44=((($sub41)+($mul43))|0);
      var $mul45=(Math.imul($43,$add44)|0);
      var $add46=((($sub40)+($mul45))|0);
      var $47=$ishow_addr;
      var $arrayidx47=(($47+($add46<<2))|0);
      HEAP32[(($arrayidx47)>>2)]=$41;
      var $48=$nstack;
      var $add48=((($48)+(4))|0);
      var $cmp49=100 < (($add48)|(0));
      if ($cmp49) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $49=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($49, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $50=HEAP32[((_stderr)>>2)];
      var $call51=_fprintf($50, ((11400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $51=HEAP32[((_stderr)>>2)];
      var $call52=_fprintf($51, ((11360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $52=HEAP32[((_stderr)>>2)];
      var $call53=_fprintf($52, ((11328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 25: 
      var $53=$i;
      var $54=$nstack;
      var $add55=((($54)+(1))|0);
      var $sub56=((($add55)-(1))|0);
      var $arrayidx57=(($stack+($sub56<<2))|0);
      HEAP32[(($arrayidx57)>>2)]=$53;
      var $55=$j;
      var $56=$nstack;
      var $add58=((($56)+(2))|0);
      var $sub59=((($add58)-(1))|0);
      var $arrayidx60=(($stack+($sub59<<2))|0);
      HEAP32[(($arrayidx60)>>2)]=$55;
      var $57=$k;
      var $58=$nstack;
      var $add61=((($58)+(3))|0);
      var $sub62=((($add61)-(1))|0);
      var $arrayidx63=(($stack+($sub62<<2))|0);
      HEAP32[(($arrayidx63)>>2)]=$57;
      var $59=$nstack;
      var $add64=((($59)+(4))|0);
      var $sub65=((($add64)-(1))|0);
      var $arrayidx66=(($stack+($sub65<<2))|0);
      HEAP32[(($arrayidx66)>>2)]=1;
      var $60=$nstack;
      var $add67=((($60)+(4))|0);
      $nstack=$add67;
      $nelements=1;
      var $61=$list_num_addr;
      var $62=HEAP32[(($61)>>2)];
      var $add68=((($62)+(3))|0);
      var $63=$list_max_addr;
      var $cmp69=(($add68)|(0)) <= (($63)|(0));
      if ($cmp69) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $64=$i;
      var $65=$list_num_addr;
      var $66=HEAP32[(($65)>>2)];
      var $add71=((($66)+(1))|0);
      var $sub72=((($add71)-(1))|0);
      var $67=$list_addr;
      var $arrayidx73=(($67+($sub72<<2))|0);
      HEAP32[(($arrayidx73)>>2)]=$64;
      var $68=$j;
      var $69=$list_num_addr;
      var $70=HEAP32[(($69)>>2)];
      var $add74=((($70)+(2))|0);
      var $sub75=((($add74)-(1))|0);
      var $71=$list_addr;
      var $arrayidx76=(($71+($sub75<<2))|0);
      HEAP32[(($arrayidx76)>>2)]=$68;
      var $72=$k;
      var $73=$list_num_addr;
      var $74=HEAP32[(($73)>>2)];
      var $add77=((($74)+(3))|0);
      var $sub78=((($add77)-(1))|0);
      var $75=$list_addr;
      var $arrayidx79=(($75+($sub78<<2))|0);
      HEAP32[(($arrayidx79)>>2)]=$72;
      label = 27; break;
    case 27: 
      var $76=$list_num_addr;
      var $77=HEAP32[(($76)>>2)];
      var $add81=((($77)+(3))|0);
      var $78=$list_num_addr;
      HEAP32[(($78)>>2)]=$add81;
      label = 28; break;
    case 28: 
      var $79=$nstack;
      var $sub83=((($79)-(3))|0);
      var $sub84=((($sub83)-(1))|0);
      var $arrayidx85=(($stack+($sub84<<2))|0);
      var $80=HEAP32[(($arrayidx85)>>2)];
      $ibase=$80;
      var $81=$nstack;
      var $sub86=((($81)-(2))|0);
      var $sub87=((($sub86)-(1))|0);
      var $arrayidx88=(($stack+($sub87<<2))|0);
      var $82=HEAP32[(($arrayidx88)>>2)];
      $jbase=$82;
      var $83=$nstack;
      var $sub89=((($83)-(1))|0);
      var $sub90=((($sub89)-(1))|0);
      var $arrayidx91=(($stack+($sub90<<2))|0);
      var $84=HEAP32[(($arrayidx91)>>2)];
      $kbase=$84;
      var $85=$ibase;
      var $sub92=((($85)-(1))|0);
      var $call93=_i4_max($sub92, 1);
      $ilo=$call93;
      var $86=$ibase;
      var $add94=((($86)+(1))|0);
      var $87=$nx_addr;
      var $call95=_i4_min($add94, $87);
      $ihi=$call95;
      var $88=$jbase;
      var $sub96=((($88)-(1))|0);
      var $call97=_i4_max($sub96, 1);
      $jlo=$call97;
      var $89=$jbase;
      var $add98=((($89)+(1))|0);
      var $90=$ny_addr;
      var $call99=_i4_min($add98, $90);
      $jhi=$call99;
      var $91=$kbase;
      var $sub100=((($91)-(1))|0);
      var $call101=_i4_max($sub100, 1);
      $klo=$call101;
      var $92=$kbase;
      var $add102=((($92)+(1))|0);
      var $93=$nz_addr;
      var $call103=_i4_min($add102, $93);
      $khi=$call103;
      $nabes=0;
      var $94=$klo;
      $k2=$94;
      label = 29; break;
    case 29: 
      var $95=$k2;
      var $96=$khi;
      var $cmp105=(($95)|(0)) <= (($96)|(0));
      if ($cmp105) { label = 30; break; } else { label = 46; break; }
    case 30: 
      var $97=$jlo;
      $j2=$97;
      label = 31; break;
    case 31: 
      var $98=$j2;
      var $99=$jhi;
      var $cmp108=(($98)|(0)) <= (($99)|(0));
      if ($cmp108) { label = 32; break; } else { label = 44; break; }
    case 32: 
      var $100=$ilo;
      $i2=$100;
      label = 33; break;
    case 33: 
      var $101=$i2;
      var $102=$ihi;
      var $cmp111=(($101)|(0)) <= (($102)|(0));
      if ($cmp111) { label = 34; break; } else { label = 42; break; }
    case 34: 
      var $103=$i2;
      var $sub113=((($103)-(1))|0);
      var $104=$nx_addr;
      var $105=$j2;
      var $sub114=((($105)-(1))|0);
      var $106=$ny_addr;
      var $107=$k2;
      var $sub115=((($107)-(1))|0);
      var $mul116=(Math.imul($106,$sub115)|0);
      var $add117=((($sub114)+($mul116))|0);
      var $mul118=(Math.imul($104,$add117)|0);
      var $add119=((($sub113)+($mul118))|0);
      var $108=$ishow_addr;
      var $arrayidx120=(($108+($add119<<2))|0);
      var $109=HEAP32[(($arrayidx120)>>2)];
      var $cmp121=(($109)|(0))==-1;
      if ($cmp121) { label = 35; break; } else { label = 40; break; }
    case 35: 
      var $110=$nabes;
      var $add123=((($110)+(1))|0);
      $nabes=$add123;
      var $111=$region_num_addr;
      var $112=HEAP32[(($111)>>2)];
      var $113=$i2;
      var $sub124=((($113)-(1))|0);
      var $114=$nx_addr;
      var $115=$j2;
      var $sub125=((($115)-(1))|0);
      var $116=$ny_addr;
      var $117=$k2;
      var $sub126=((($117)-(1))|0);
      var $mul127=(Math.imul($116,$sub126)|0);
      var $add128=((($sub125)+($mul127))|0);
      var $mul129=(Math.imul($114,$add128)|0);
      var $add130=((($sub124)+($mul129))|0);
      var $118=$ishow_addr;
      var $arrayidx131=(($118+($add130<<2))|0);
      HEAP32[(($arrayidx131)>>2)]=$112;
      var $119=$nstack;
      var $add132=((($119)+(3))|0);
      var $cmp133=100 < (($add132)|(0));
      if ($cmp133) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $120=HEAP32[((_stderr)>>2)];
      var $call135=_fprintf($120, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $121=HEAP32[((_stderr)>>2)];
      var $call136=_fprintf($121, ((11400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $122=HEAP32[((_stderr)>>2)];
      var $call137=_fprintf($122, ((11360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $123=HEAP32[((_stderr)>>2)];
      var $call138=_fprintf($123, ((11328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 37: 
      var $124=$i2;
      var $125=$nstack;
      var $add140=((($125)+(1))|0);
      var $sub141=((($add140)-(1))|0);
      var $arrayidx142=(($stack+($sub141<<2))|0);
      HEAP32[(($arrayidx142)>>2)]=$124;
      var $126=$j2;
      var $127=$nstack;
      var $add143=((($127)+(2))|0);
      var $sub144=((($add143)-(1))|0);
      var $arrayidx145=(($stack+($sub144<<2))|0);
      HEAP32[(($arrayidx145)>>2)]=$126;
      var $128=$k2;
      var $129=$nstack;
      var $add146=((($129)+(3))|0);
      var $sub147=((($add146)-(1))|0);
      var $arrayidx148=(($stack+($sub147<<2))|0);
      HEAP32[(($arrayidx148)>>2)]=$128;
      var $130=$nstack;
      var $add149=((($130)+(3))|0);
      $nstack=$add149;
      var $131=$nelements;
      var $add150=((($131)+(1))|0);
      $nelements=$add150;
      var $132=$list_num_addr;
      var $133=HEAP32[(($132)>>2)];
      var $add151=((($133)+(3))|0);
      var $134=$list_max_addr;
      var $cmp152=(($add151)|(0)) <= (($134)|(0));
      if ($cmp152) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $135=$i2;
      var $136=$list_num_addr;
      var $137=HEAP32[(($136)>>2)];
      var $add154=((($137)+(1))|0);
      var $sub155=((($add154)-(1))|0);
      var $138=$list_addr;
      var $arrayidx156=(($138+($sub155<<2))|0);
      HEAP32[(($arrayidx156)>>2)]=$135;
      var $139=$j2;
      var $140=$list_num_addr;
      var $141=HEAP32[(($140)>>2)];
      var $add157=((($141)+(2))|0);
      var $sub158=((($add157)-(1))|0);
      var $142=$list_addr;
      var $arrayidx159=(($142+($sub158<<2))|0);
      HEAP32[(($arrayidx159)>>2)]=$139;
      var $143=$k2;
      var $144=$list_num_addr;
      var $145=HEAP32[(($144)>>2)];
      var $add160=((($145)+(3))|0);
      var $sub161=((($add160)-(1))|0);
      var $146=$list_addr;
      var $arrayidx162=(($146+($sub161<<2))|0);
      HEAP32[(($arrayidx162)>>2)]=$143;
      label = 39; break;
    case 39: 
      var $147=$list_num_addr;
      var $148=HEAP32[(($147)>>2)];
      var $add164=((($148)+(3))|0);
      var $149=$list_num_addr;
      HEAP32[(($149)>>2)]=$add164;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $150=$i2;
      var $inc167=((($150)+(1))|0);
      $i2=$inc167;
      label = 33; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $151=$j2;
      var $inc170=((($151)+(1))|0);
      $j2=$inc170;
      label = 31; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $152=$k2;
      var $inc173=((($152)+(1))|0);
      $k2=$inc173;
      label = 29; break;
    case 46: 
      var $153=$nabes;
      var $cmp175=0 < (($153)|(0));
      if ($cmp175) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $154=$nstack;
      var $add177=((($154)+(1))|0);
      var $cmp178=100 < (($add177)|(0));
      if ($cmp178) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $155=HEAP32[((_stderr)>>2)];
      var $call180=_fprintf($155, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $156=HEAP32[((_stderr)>>2)];
      var $call181=_fprintf($156, ((11400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $157=HEAP32[((_stderr)>>2)];
      var $call182=_fprintf($157, ((11360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $158=HEAP32[((_stderr)>>2)];
      var $call183=_fprintf($158, ((11328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      _exit(1);
      throw "Reached an unreachable!";
    case 49: 
      var $159=$nabes;
      var $160=$nstack;
      var $add185=((($160)+(1))|0);
      var $sub186=((($add185)-(1))|0);
      var $arrayidx187=(($stack+($sub186<<2))|0);
      HEAP32[(($arrayidx187)>>2)]=$159;
      var $161=$nstack;
      var $add188=((($161)+(1))|0);
      $nstack=$add188;
      label = 28; break;
    case 50: 
      var $162=$nstack;
      var $sub190=((($162)-(1))|0);
      var $arrayidx191=(($stack+($sub190<<2))|0);
      var $163=HEAP32[(($arrayidx191)>>2)];
      var $sub192=((($163)-(1))|0);
      $ncan=$sub192;
      var $164=$nstack;
      var $sub193=((($164)-(3))|0);
      $nstack=$sub193;
      var $165=$ncan;
      var $166=$nstack;
      var $sub194=((($166)-(1))|0);
      var $arrayidx195=(($stack+($sub194<<2))|0);
      HEAP32[(($arrayidx195)>>2)]=$165;
      var $167=$nstack;
      var $sub196=((($167)-(1))|0);
      var $arrayidx197=(($stack+($sub196<<2))|0);
      var $168=HEAP32[(($arrayidx197)>>2)];
      var $cmp198=0 < (($168)|(0));
      if ($cmp198) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 28; break;
    case 52: 
      var $169=$nstack;
      var $sub201=((($169)-(1))|0);
      $nstack=$sub201;
      var $170=$nstack;
      var $cmp202=(($170)|(0)) <= 0;
      if ($cmp202) { label = 53; break; } else { label = 54; break; }
    case 53: 
      label = 55; break;
    case 54: 
      label = 28; break;
    case 55: 
      var $171=$list_num_addr;
      var $172=HEAP32[(($171)>>2)];
      var $add206=((($172)+(1))|0);
      var $173=$list_num_addr;
      HEAP32[(($173)>>2)]=$add206;
      var $174=$list_num_addr;
      var $175=HEAP32[(($174)>>2)];
      var $176=$list_max_addr;
      var $cmp207=(($175)|(0)) <= (($176)|(0));
      if ($cmp207) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $177=$nelements;
      var $178=$list_num_addr;
      var $179=HEAP32[(($178)>>2)];
      var $sub209=((($179)-(1))|0);
      var $180=$list_addr;
      var $arrayidx210=(($180+($sub209<<2))|0);
      HEAP32[(($arrayidx210)>>2)]=$177;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $181=$i;
      var $inc214=((($181)+(1))|0);
      $i=$inc214;
      label = 21; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $182=$j;
      var $inc217=((($182)+(1))|0);
      $j=$inc217;
      label = 19; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $183=$k;
      var $inc220=((($183)+(1))|0);
      $k=$inc220;
      label = 17; break;
    case 64: 
      var $184=$list_max_addr;
      var $185=$list_num_addr;
      var $186=HEAP32[(($185)>>2)];
      var $cmp222=(($184)|(0)) < (($186)|(0));
      if ($cmp222) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $187=HEAP32[((_stderr)>>2)];
      var $call224=_fprintf($187, ((16744)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $188=HEAP32[((_stderr)>>2)];
      var $call225=_fprintf($188, ((11296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $189=HEAP32[((_stderr)>>2)];
      var $call226=_fprintf($189, ((11248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $190=HEAP32[((_stderr)>>2)];
      var $call227=_fprintf($190, ((11152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $191=HEAP32[((_stderr)>>2)];
      var $call228=_fprintf($191, ((11112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+7)>>3)<<3),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 66; break;
    case 66: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_voxels_region_3d"] = _voxels_region_3d;
function _voxels_step_3d($v1, $v2, $inc, $jnc, $knc, $v3) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $v1_addr;
      var $v2_addr;
      var $inc_addr;
      var $jnc_addr;
      var $knc_addr;
      var $v3_addr;
      var $alpha;
      var $alphai;
      var $alphaj;
      var $alphak;
      $v1_addr=$v1;
      $v2_addr=$v2;
      $inc_addr=$inc;
      $jnc_addr=$jnc;
      $knc_addr=$knc;
      $v3_addr=$v3;
      $alpha=0;
      $alphai=0;
      $alphaj=0;
      $alphak=0;
      var $0=$v2_addr;
      var $1=$v3_addr;
      _i4vec_copy(3, $0, $1);
      var $2=$inc_addr;
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $3=$jnc_addr;
      var $cmp1=(($3)|(0))==0;
      if ($cmp1) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$knc_addr;
      var $cmp3=(($4)|(0))==0;
      if ($cmp3) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 39; break;
    case 6: 
      $alpha=0;
      var $5=$inc_addr;
      var $cmp4=0 < (($5)|(0));
      if ($cmp4) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $6=$v2_addr;
      var $arrayidx=(($6)|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      var $8=$v1_addr;
      var $arrayidx6=(($8)|0);
      var $9=HEAP32[(($arrayidx6)>>2)];
      var $sub=((($7)-($9))|0);
      var $conv=(($sub)|(0));
      var $add=($conv)+(0.5);
      var $10=$inc_addr;
      var $conv7=(($10)|(0));
      var $div=($add)/($conv7);
      $alphai=$div;
      label = 12; break;
    case 8: 
      var $11=$inc_addr;
      var $cmp8=(($11)|(0)) < 0;
      if ($cmp8) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $12=$v2_addr;
      var $arrayidx11=(($12)|0);
      var $13=HEAP32[(($arrayidx11)>>2)];
      var $14=$v1_addr;
      var $arrayidx12=(($14)|0);
      var $15=HEAP32[(($arrayidx12)>>2)];
      var $sub13=((($13)-($15))|0);
      var $conv14=(($sub13)|(0));
      var $sub15=($conv14)-(0.5);
      var $16=$inc_addr;
      var $conv16=(($16)|(0));
      var $div17=($sub15)/($conv16);
      $alphai=$div17;
      label = 11; break;
    case 10: 
      var $call=_r8_huge();
      $alphai=$call;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $17=$jnc_addr;
      var $cmp21=0 < (($17)|(0));
      if ($cmp21) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $18=$v2_addr;
      var $arrayidx24=(($18+4)|0);
      var $19=HEAP32[(($arrayidx24)>>2)];
      var $20=$v1_addr;
      var $arrayidx25=(($20+4)|0);
      var $21=HEAP32[(($arrayidx25)>>2)];
      var $sub26=((($19)-($21))|0);
      var $conv27=(($sub26)|(0));
      var $add28=($conv27)+(0.5);
      var $22=$jnc_addr;
      var $conv29=(($22)|(0));
      var $div30=($add28)/($conv29);
      $alphaj=$div30;
      label = 18; break;
    case 14: 
      var $23=$jnc_addr;
      var $cmp32=(($23)|(0)) < 0;
      if ($cmp32) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $24=$v2_addr;
      var $arrayidx35=(($24+4)|0);
      var $25=HEAP32[(($arrayidx35)>>2)];
      var $26=$v1_addr;
      var $arrayidx36=(($26+4)|0);
      var $27=HEAP32[(($arrayidx36)>>2)];
      var $sub37=((($25)-($27))|0);
      var $conv38=(($sub37)|(0));
      var $sub39=($conv38)-(0.5);
      var $28=$jnc_addr;
      var $conv40=(($28)|(0));
      var $div41=($sub39)/($conv40);
      $alphaj=$div41;
      label = 17; break;
    case 16: 
      var $call43=_r8_huge();
      $alphaj=$call43;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $29=$knc_addr;
      var $cmp46=0 < (($29)|(0));
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $30=$v2_addr;
      var $arrayidx49=(($30+8)|0);
      var $31=HEAP32[(($arrayidx49)>>2)];
      var $32=$v1_addr;
      var $arrayidx50=(($32+8)|0);
      var $33=HEAP32[(($arrayidx50)>>2)];
      var $sub51=((($31)-($33))|0);
      var $conv52=(($sub51)|(0));
      var $add53=($conv52)+(0.5);
      var $34=$knc_addr;
      var $conv54=(($34)|(0));
      var $div55=($add53)/($conv54);
      $alphak=$div55;
      label = 24; break;
    case 20: 
      var $35=$knc_addr;
      var $cmp57=(($35)|(0)) < 0;
      if ($cmp57) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $36=$v2_addr;
      var $arrayidx60=(($36+8)|0);
      var $37=HEAP32[(($arrayidx60)>>2)];
      var $38=$v1_addr;
      var $arrayidx61=(($38+8)|0);
      var $39=HEAP32[(($arrayidx61)>>2)];
      var $sub62=((($37)-($39))|0);
      var $conv63=(($sub62)|(0));
      var $sub64=($conv63)-(0.5);
      var $40=$knc_addr;
      var $conv65=(($40)|(0));
      var $div66=($sub64)/($conv65);
      $alphak=$div66;
      label = 23; break;
    case 22: 
      var $call68=_r8_huge();
      $alphaj=$call68;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $call71=_r8_huge();
      $alpha=$call71;
      var $41=$alphai;
      var $cmp72=0 < $41;
      if ($cmp72) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $42=$alpha;
      var $43=$alphai;
      var $call75=_r8_min($42, $43);
      $alpha=$call75;
      label = 26; break;
    case 26: 
      var $44=$alphaj;
      var $cmp77=0 < $44;
      if ($cmp77) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $45=$alpha;
      var $46=$alphaj;
      var $call80=_r8_min($45, $46);
      $alpha=$call80;
      label = 28; break;
    case 28: 
      var $47=$alphak;
      var $cmp82=0 < $47;
      if ($cmp82) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $48=$alpha;
      var $49=$alphak;
      var $call85=_r8_min($48, $49);
      $alpha=$call85;
      label = 30; break;
    case 30: 
      var $50=$alpha;
      var $51=$alphai;
      var $cmp87=$50 == $51;
      if ($cmp87) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $52=$v2_addr;
      var $arrayidx90=(($52)|0);
      var $53=HEAP32[(($arrayidx90)>>2)];
      var $54=$inc_addr;
      var $call91=_i4_sign($54);
      var $add92=((($53)+($call91))|0);
      var $55=$v3_addr;
      var $arrayidx93=(($55)|0);
      HEAP32[(($arrayidx93)>>2)]=$add92;
      var $56=$v1_addr;
      var $arrayidx94=(($56+4)|0);
      var $57=HEAP32[(($arrayidx94)>>2)];
      var $58=$alpha;
      var $59=$jnc_addr;
      var $conv95=(($59)|(0));
      var $mul=($58)*($conv95);
      var $call96=_r8_nint($mul);
      var $add97=((($57)+($call96))|0);
      var $60=$v3_addr;
      var $arrayidx98=(($60+4)|0);
      HEAP32[(($arrayidx98)>>2)]=$add97;
      var $61=$v1_addr;
      var $arrayidx99=(($61+8)|0);
      var $62=HEAP32[(($arrayidx99)>>2)];
      var $63=$alpha;
      var $64=$knc_addr;
      var $conv100=(($64)|(0));
      var $mul101=($63)*($conv100);
      var $call102=_r8_nint($mul101);
      var $add103=((($62)+($call102))|0);
      var $65=$v3_addr;
      var $arrayidx104=(($65+8)|0);
      HEAP32[(($arrayidx104)>>2)]=$add103;
      label = 38; break;
    case 32: 
      var $66=$alpha;
      var $67=$alphaj;
      var $cmp106=$66 == $67;
      if ($cmp106) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $68=$v1_addr;
      var $arrayidx109=(($68)|0);
      var $69=HEAP32[(($arrayidx109)>>2)];
      var $70=$alpha;
      var $71=$inc_addr;
      var $conv110=(($71)|(0));
      var $mul111=($70)*($conv110);
      var $call112=_r8_nint($mul111);
      var $add113=((($69)+($call112))|0);
      var $72=$v3_addr;
      var $arrayidx114=(($72)|0);
      HEAP32[(($arrayidx114)>>2)]=$add113;
      var $73=$v2_addr;
      var $arrayidx115=(($73+4)|0);
      var $74=HEAP32[(($arrayidx115)>>2)];
      var $75=$jnc_addr;
      var $call116=_i4_sign($75);
      var $add117=((($74)+($call116))|0);
      var $76=$v3_addr;
      var $arrayidx118=(($76+4)|0);
      HEAP32[(($arrayidx118)>>2)]=$add117;
      var $77=$v1_addr;
      var $arrayidx119=(($77+8)|0);
      var $78=HEAP32[(($arrayidx119)>>2)];
      var $79=$alpha;
      var $80=$knc_addr;
      var $conv120=(($80)|(0));
      var $mul121=($79)*($conv120);
      var $call122=_r8_nint($mul121);
      var $add123=((($78)+($call122))|0);
      var $81=$v3_addr;
      var $arrayidx124=(($81+8)|0);
      HEAP32[(($arrayidx124)>>2)]=$add123;
      label = 37; break;
    case 34: 
      var $82=$alpha;
      var $83=$alphak;
      var $cmp126=$82 == $83;
      if ($cmp126) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $84=$v1_addr;
      var $arrayidx129=(($84)|0);
      var $85=HEAP32[(($arrayidx129)>>2)];
      var $86=$alpha;
      var $87=$inc_addr;
      var $conv130=(($87)|(0));
      var $mul131=($86)*($conv130);
      var $call132=_r8_nint($mul131);
      var $add133=((($85)+($call132))|0);
      var $88=$v3_addr;
      var $arrayidx134=(($88)|0);
      HEAP32[(($arrayidx134)>>2)]=$add133;
      var $89=$v1_addr;
      var $arrayidx135=(($89+4)|0);
      var $90=HEAP32[(($arrayidx135)>>2)];
      var $91=$alpha;
      var $92=$jnc_addr;
      var $conv136=(($92)|(0));
      var $mul137=($91)*($conv136);
      var $call138=_r8_nint($mul137);
      var $add139=((($90)+($call138))|0);
      var $93=$v3_addr;
      var $arrayidx140=(($93+4)|0);
      HEAP32[(($arrayidx140)>>2)]=$add139;
      var $94=$v2_addr;
      var $arrayidx141=(($94+8)|0);
      var $95=HEAP32[(($arrayidx141)>>2)];
      var $96=$knc_addr;
      var $call142=_i4_sign($96);
      var $add143=((($95)+($call142))|0);
      var $97=$v3_addr;
      var $arrayidx144=(($97+8)|0);
      HEAP32[(($arrayidx144)>>2)]=$add143;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_voxels_step_3d"] = _voxels_step_3d;
function _xy_to_polar($xy, $r, $t) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xy_addr;
      var $r_addr;
      var $t_addr;
      $xy_addr=$xy;
      $r_addr=$r;
      $t_addr=$t;
      var $0=$xy_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=$xy_addr;
      var $arrayidx1=(($2)|0);
      var $3=HEAPF64[(($arrayidx1)>>3)];
      var $mul=($1)*($3);
      var $4=$xy_addr;
      var $arrayidx2=(($4+8)|0);
      var $5=HEAPF64[(($arrayidx2)>>3)];
      var $6=$xy_addr;
      var $arrayidx3=(($6+8)|0);
      var $7=HEAPF64[(($arrayidx3)>>3)];
      var $mul4=($5)*($7);
      var $add=($mul)+($mul4);
      var $call=Math.sqrt($add);
      var $8=$r_addr;
      HEAPF64[(($8)>>3)]=$call;
      var $9=$r_addr;
      var $10=HEAPF64[(($9)>>3)];
      var $cmp=$10 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$t_addr;
      HEAPF64[(($11)>>3)]=0;
      label = 5; break;
    case 4: 
      var $12=$xy_addr;
      var $arrayidx5=(($12)|0);
      var $13=HEAPF64[(($arrayidx5)>>3)];
      var $14=$xy_addr;
      var $arrayidx6=(($14+8)|0);
      var $15=HEAPF64[(($arrayidx6)>>3)];
      var $call7=Math.atan2($13, $15);
      var $16=$t_addr;
      HEAPF64[(($16)>>3)]=$call7;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_xy_to_polar"] = _xy_to_polar;
function _xyz_to_radec($p, $ra, $dec) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $p_addr;
      var $ra_addr;
      var $dec_addr;
      var $norm_v;
      var $phi;
      var $theta;
      $p_addr=$p;
      $ra_addr=$ra;
      $dec_addr=$dec;
      var $0=$p_addr;
      var $call=_r8vec_norm(3, $0);
      $norm_v=$call;
      var $1=$p_addr;
      var $arrayidx=(($1+16)|0);
      var $2=HEAPF64[(($arrayidx)>>3)];
      var $3=$norm_v;
      var $div=($2)/($3);
      var $call1=Math.asin($div);
      $phi=$call1;
      var $4=$phi;
      var $call2=Math.cos($4);
      var $cmp=$call2 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $theta=0;
      label = 5; break;
    case 4: 
      var $5=$p_addr;
      var $arrayidx3=(($5+8)|0);
      var $6=HEAPF64[(($arrayidx3)>>3)];
      var $7=$p_addr;
      var $arrayidx4=(($7)|0);
      var $8=HEAPF64[(($arrayidx4)>>3)];
      var $call5=_r8_atan($6, $8);
      $theta=$call5;
      label = 5; break;
    case 5: 
      var $9=$phi;
      var $call6=_radians_to_degrees($9);
      var $10=$dec_addr;
      HEAPF64[(($10)>>3)]=$call6;
      var $11=$theta;
      var $call7=_radians_to_degrees($11);
      var $div8=($call7)/(15);
      var $12=$ra_addr;
      HEAPF64[(($12)>>3)]=$div8;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_xyz_to_radec"] = _xyz_to_radec;
function _xyz_to_tp($xyz, $theta, $phi) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $xyz_addr;
      var $theta_addr;
      var $phi_addr;
      var $r;
      $xyz_addr=$xyz;
      $theta_addr=$theta;
      $phi_addr=$phi;
      var $0=$xyz_addr;
      var $arrayidx=(($0)|0);
      var $1=HEAPF64[(($arrayidx)>>3)];
      var $2=Math.pow($1, 2);
      var $3=$xyz_addr;
      var $arrayidx1=(($3+8)|0);
      var $4=HEAPF64[(($arrayidx1)>>3)];
      var $5=Math.pow($4, 2);
      var $add=($2)+($5);
      var $6=$xyz_addr;
      var $arrayidx2=(($6+16)|0);
      var $7=HEAPF64[(($arrayidx2)>>3)];
      var $8=Math.pow($7, 2);
      var $add3=($add)+($8);
      var $call=Math.sqrt($add3);
      $r=$call;
      var $9=$r;
      var $cmp=$9 == 0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$theta_addr;
      HEAPF64[(($10)>>3)]=0;
      var $11=$phi_addr;
      HEAPF64[(($11)>>3)]=0;
      label = 5; break;
    case 4: 
      var $12=$xyz_addr;
      var $arrayidx4=(($12+16)|0);
      var $13=HEAPF64[(($arrayidx4)>>3)];
      var $14=$r;
      var $div=($13)/($14);
      var $call5=_r8_acos($div);
      var $15=$phi_addr;
      HEAPF64[(($15)>>3)]=$call5;
      var $16=$xyz_addr;
      var $arrayidx6=(($16+8)|0);
      var $17=HEAPF64[(($arrayidx6)>>3)];
      var $18=$xyz_addr;
      var $arrayidx7=(($18)|0);
      var $19=HEAPF64[(($arrayidx7)>>3)];
      var $call8=_r8_atan($17, $19);
      var $20=$theta_addr;
      HEAPF64[(($20)>>3)]=$call8;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_xyz_to_tp"] = _xyz_to_tp;
function _malloc($bytes) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F104;
      var $rsize158;
      var $p160;
      var $r164;
      var $dvs;
      var $rsize186;
      var $p188;
      var $r189;
      $bytes_addr=$bytes;
      var $0=$bytes_addr;
      var $cmp=(($0)>>>(0)) <= 244;
      if ($cmp) { label = 3; break; } else { label = 42; break; }
    case 3: 
      var $1=$bytes_addr;
      var $cmp1=(($1)>>>(0)) < 11;
      if ($cmp1) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $cond = 16;label = 6; break;
    case 5: 
      var $2=$bytes_addr;
      var $add=((($2)+(4))|0);
      var $add2=((($add)+(7))|0);
      var $and=$add2 & -8;
      var $cond = $and;label = 6; break;
    case 6: 
      var $cond;
      $nb=$cond;
      var $3=$nb;
      var $shr=$3 >>> 3;
      $idx=$shr;
      var $4=HEAP32[((((17680)|0))>>2)];
      var $5=$idx;
      var $shr3=$4 >>> (($5)>>>(0));
      $smallbits=$shr3;
      var $6=$smallbits;
      var $and4=$6 & 3;
      var $cmp5=(($and4)|(0))!=0;
      if ($cmp5) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $7=$smallbits;
      var $neg=$7 ^ -1;
      var $and7=$neg & 1;
      var $8=$idx;
      var $add8=((($8)+($and7))|0);
      $idx=$add8;
      var $9=$idx;
      var $shl=$9 << 1;
      var $arrayidx=((((17720)|0)+($shl<<2))|0);
      var $10=$arrayidx;
      var $11=$10;
      $b=$11;
      var $12=$b;
      var $fd=(($12+8)|0);
      var $13=HEAP32[(($fd)>>2)];
      $p=$13;
      var $14=$p;
      var $fd9=(($14+8)|0);
      var $15=HEAP32[(($fd9)>>2)];
      $F=$15;
      var $16=$b;
      var $17=$F;
      var $cmp10=(($16)|(0))==(($17)|(0));
      if ($cmp10) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $18=$idx;
      var $shl12=1 << $18;
      var $neg13=$shl12 ^ -1;
      var $19=HEAP32[((((17680)|0))>>2)];
      var $and14=$19 & $neg13;
      HEAP32[((((17680)|0))>>2)]=$and14;
      label = 15; break;
    case 9: 
      var $20=$F;
      var $21=$20;
      var $22=HEAP32[((((17696)|0))>>2)];
      var $cmp15=(($21)>>>(0)) >= (($22)>>>(0));
      if ($cmp15) { label = 10; break; } else { var $26 = 0;label = 11; break; }
    case 10: 
      var $23=$F;
      var $bk=(($23+12)|0);
      var $24=HEAP32[(($bk)>>2)];
      var $25=$p;
      var $cmp16=(($24)|(0))==(($25)|(0));
      var $26 = $cmp16;label = 11; break;
    case 11: 
      var $26;
      var $land_ext=(($26)&(1));
      var $expval=($land_ext);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $27=$b;
      var $28=$F;
      var $bk18=(($28+12)|0);
      HEAP32[(($bk18)>>2)]=$27;
      var $29=$F;
      var $30=$b;
      var $fd19=(($30+8)|0);
      HEAP32[(($fd19)>>2)]=$29;
      label = 14; break;
    case 13: 
      _abort();
      throw "Reached an unreachable!";
    case 14: 
      label = 15; break;
    case 15: 
      var $31=$idx;
      var $shl22=$31 << 3;
      var $or=$shl22 | 1;
      var $or23=$or | 2;
      var $32=$p;
      var $head=(($32+4)|0);
      HEAP32[(($head)>>2)]=$or23;
      var $33=$p;
      var $34=$33;
      var $35=$idx;
      var $shl24=$35 << 3;
      var $add_ptr=(($34+$shl24)|0);
      var $36=$add_ptr;
      var $head25=(($36+4)|0);
      var $37=HEAP32[(($head25)>>2)];
      var $or26=$37 | 1;
      HEAP32[(($head25)>>2)]=$or26;
      var $38=$p;
      var $39=$38;
      var $add_ptr27=(($39+8)|0);
      $mem=$add_ptr27;
      label = 58; break;
    case 16: 
      var $40=$nb;
      var $41=HEAP32[((((17688)|0))>>2)];
      var $cmp29=(($40)>>>(0)) > (($41)>>>(0));
      if ($cmp29) { label = 17; break; } else { label = 40; break; }
    case 17: 
      var $42=$smallbits;
      var $cmp31=(($42)|(0))!=0;
      if ($cmp31) { label = 18; break; } else { label = 35; break; }
    case 18: 
      var $43=$smallbits;
      var $44=$idx;
      var $shl35=$43 << $44;
      var $45=$idx;
      var $shl36=1 << $45;
      var $shl37=$shl36 << 1;
      var $46=$idx;
      var $shl38=1 << $46;
      var $shl39=$shl38 << 1;
      var $sub=(((-$shl39))|0);
      var $or40=$shl37 | $sub;
      var $and41=$shl35 & $or40;
      $leftbits=$and41;
      var $47=$leftbits;
      var $48=$leftbits;
      var $sub42=(((-$48))|0);
      var $and43=$47 & $sub42;
      $leastbit=$and43;
      var $49=$leastbit;
      var $sub44=((($49)-(1))|0);
      $Y=$sub44;
      var $50=$Y;
      var $shr45=$50 >>> 12;
      var $and46=$shr45 & 16;
      $K=$and46;
      var $51=$K;
      $N=$51;
      var $52=$K;
      var $53=$Y;
      var $shr47=$53 >>> (($52)>>>(0));
      $Y=$shr47;
      var $54=$Y;
      var $shr48=$54 >>> 5;
      var $and49=$shr48 & 8;
      $K=$and49;
      var $55=$N;
      var $add50=((($55)+($and49))|0);
      $N=$add50;
      var $56=$K;
      var $57=$Y;
      var $shr51=$57 >>> (($56)>>>(0));
      $Y=$shr51;
      var $58=$Y;
      var $shr52=$58 >>> 2;
      var $and53=$shr52 & 4;
      $K=$and53;
      var $59=$N;
      var $add54=((($59)+($and53))|0);
      $N=$add54;
      var $60=$K;
      var $61=$Y;
      var $shr55=$61 >>> (($60)>>>(0));
      $Y=$shr55;
      var $62=$Y;
      var $shr56=$62 >>> 1;
      var $and57=$shr56 & 2;
      $K=$and57;
      var $63=$N;
      var $add58=((($63)+($and57))|0);
      $N=$add58;
      var $64=$K;
      var $65=$Y;
      var $shr59=$65 >>> (($64)>>>(0));
      $Y=$shr59;
      var $66=$Y;
      var $shr60=$66 >>> 1;
      var $and61=$shr60 & 1;
      $K=$and61;
      var $67=$N;
      var $add62=((($67)+($and61))|0);
      $N=$add62;
      var $68=$K;
      var $69=$Y;
      var $shr63=$69 >>> (($68)>>>(0));
      $Y=$shr63;
      var $70=$N;
      var $71=$Y;
      var $add64=((($70)+($71))|0);
      $i=$add64;
      var $72=$i;
      var $shl65=$72 << 1;
      var $arrayidx66=((((17720)|0)+($shl65<<2))|0);
      var $73=$arrayidx66;
      var $74=$73;
      $b33=$74;
      var $75=$b33;
      var $fd67=(($75+8)|0);
      var $76=HEAP32[(($fd67)>>2)];
      $p34=$76;
      var $77=$p34;
      var $fd69=(($77+8)|0);
      var $78=HEAP32[(($fd69)>>2)];
      $F68=$78;
      var $79=$b33;
      var $80=$F68;
      var $cmp70=(($79)|(0))==(($80)|(0));
      if ($cmp70) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $81=$i;
      var $shl72=1 << $81;
      var $neg73=$shl72 ^ -1;
      var $82=HEAP32[((((17680)|0))>>2)];
      var $and74=$82 & $neg73;
      HEAP32[((((17680)|0))>>2)]=$and74;
      label = 26; break;
    case 20: 
      var $83=$F68;
      var $84=$83;
      var $85=HEAP32[((((17696)|0))>>2)];
      var $cmp76=(($84)>>>(0)) >= (($85)>>>(0));
      if ($cmp76) { label = 21; break; } else { var $89 = 0;label = 22; break; }
    case 21: 
      var $86=$F68;
      var $bk78=(($86+12)|0);
      var $87=HEAP32[(($bk78)>>2)];
      var $88=$p34;
      var $cmp79=(($87)|(0))==(($88)|(0));
      var $89 = $cmp79;label = 22; break;
    case 22: 
      var $89;
      var $land_ext81=(($89)&(1));
      var $expval82=($land_ext81);
      var $tobool83=(($expval82)|(0))!=0;
      if ($tobool83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $90=$b33;
      var $91=$F68;
      var $bk85=(($91+12)|0);
      HEAP32[(($bk85)>>2)]=$90;
      var $92=$F68;
      var $93=$b33;
      var $fd86=(($93+8)|0);
      HEAP32[(($fd86)>>2)]=$92;
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!";
    case 25: 
      label = 26; break;
    case 26: 
      var $94=$i;
      var $shl90=$94 << 3;
      var $95=$nb;
      var $sub91=((($shl90)-($95))|0);
      $rsize=$sub91;
      var $96=$nb;
      var $or92=$96 | 1;
      var $or93=$or92 | 2;
      var $97=$p34;
      var $head94=(($97+4)|0);
      HEAP32[(($head94)>>2)]=$or93;
      var $98=$p34;
      var $99=$98;
      var $100=$nb;
      var $add_ptr95=(($99+$100)|0);
      var $101=$add_ptr95;
      $r=$101;
      var $102=$rsize;
      var $or96=$102 | 1;
      var $103=$r;
      var $head97=(($103+4)|0);
      HEAP32[(($head97)>>2)]=$or96;
      var $104=$rsize;
      var $105=$r;
      var $106=$105;
      var $107=$rsize;
      var $add_ptr98=(($106+$107)|0);
      var $108=$add_ptr98;
      var $prev_foot=(($108)|0);
      HEAP32[(($prev_foot)>>2)]=$104;
      var $109=HEAP32[((((17688)|0))>>2)];
      $DVS=$109;
      var $110=$DVS;
      var $cmp99=(($110)|(0))!=0;
      if ($cmp99) { label = 27; break; } else { label = 34; break; }
    case 27: 
      var $111=HEAP32[((((17700)|0))>>2)];
      $DV=$111;
      var $112=$DVS;
      var $shr101=$112 >>> 3;
      $I=$shr101;
      var $113=$I;
      var $shl102=$113 << 1;
      var $arrayidx103=((((17720)|0)+($shl102<<2))|0);
      var $114=$arrayidx103;
      var $115=$114;
      $B=$115;
      var $116=$B;
      $F104=$116;
      var $117=HEAP32[((((17680)|0))>>2)];
      var $118=$I;
      var $shl105=1 << $118;
      var $and106=$117 & $shl105;
      var $tobool107=(($and106)|(0))!=0;
      if ($tobool107) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $119=$I;
      var $shl109=1 << $119;
      var $120=HEAP32[((((17680)|0))>>2)];
      var $or110=$120 | $shl109;
      HEAP32[((((17680)|0))>>2)]=$or110;
      label = 33; break;
    case 29: 
      var $121=$B;
      var $fd112=(($121+8)|0);
      var $122=HEAP32[(($fd112)>>2)];
      var $123=$122;
      var $124=HEAP32[((((17696)|0))>>2)];
      var $cmp113=(($123)>>>(0)) >= (($124)>>>(0));
      var $conv=(($cmp113)&(1));
      var $expval114=($conv);
      var $tobool115=(($expval114)|(0))!=0;
      if ($tobool115) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $125=$B;
      var $fd117=(($125+8)|0);
      var $126=HEAP32[(($fd117)>>2)];
      $F104=$126;
      label = 32; break;
    case 31: 
      _abort();
      throw "Reached an unreachable!";
    case 32: 
      label = 33; break;
    case 33: 
      var $127=$DV;
      var $128=$B;
      var $fd121=(($128+8)|0);
      HEAP32[(($fd121)>>2)]=$127;
      var $129=$DV;
      var $130=$F104;
      var $bk122=(($130+12)|0);
      HEAP32[(($bk122)>>2)]=$129;
      var $131=$F104;
      var $132=$DV;
      var $fd123=(($132+8)|0);
      HEAP32[(($fd123)>>2)]=$131;
      var $133=$B;
      var $134=$DV;
      var $bk124=(($134+12)|0);
      HEAP32[(($bk124)>>2)]=$133;
      label = 34; break;
    case 34: 
      var $135=$rsize;
      HEAP32[((((17688)|0))>>2)]=$135;
      var $136=$r;
      HEAP32[((((17700)|0))>>2)]=$136;
      var $137=$p34;
      var $138=$137;
      var $add_ptr126=(($138+8)|0);
      $mem=$add_ptr126;
      label = 58; break;
    case 35: 
      var $139=HEAP32[((((17684)|0))>>2)];
      var $cmp128=(($139)|(0))!=0;
      if ($cmp128) { label = 36; break; } else { label = 38; break; }
    case 36: 
      var $140=$nb;
      var $call=_tmalloc_small(17680, $140);
      $mem=$call;
      var $cmp130=(($call)|(0))!=0;
      if ($cmp130) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 58; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 49; break;
    case 42: 
      var $141=$bytes_addr;
      var $cmp138=(($141)>>>(0)) >= 4294967232;
      if ($cmp138) { label = 43; break; } else { label = 44; break; }
    case 43: 
      $nb=-1;
      label = 48; break;
    case 44: 
      var $142=$bytes_addr;
      var $add142=((($142)+(4))|0);
      var $add143=((($add142)+(7))|0);
      var $and144=$add143 & -8;
      $nb=$and144;
      var $143=HEAP32[((((17684)|0))>>2)];
      var $cmp145=(($143)|(0))!=0;
      if ($cmp145) { label = 45; break; } else { label = 47; break; }
    case 45: 
      var $144=$nb;
      var $call148=_tmalloc_large(17680, $144);
      $mem=$call148;
      var $cmp149=(($call148)|(0))!=0;
      if ($cmp149) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 58; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $145=$nb;
      var $146=HEAP32[((((17688)|0))>>2)];
      var $cmp155=(($145)>>>(0)) <= (($146)>>>(0));
      if ($cmp155) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $147=HEAP32[((((17688)|0))>>2)];
      var $148=$nb;
      var $sub159=((($147)-($148))|0);
      $rsize158=$sub159;
      var $149=HEAP32[((((17700)|0))>>2)];
      $p160=$149;
      var $150=$rsize158;
      var $cmp161=(($150)>>>(0)) >= 16;
      if ($cmp161) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $151=$p160;
      var $152=$151;
      var $153=$nb;
      var $add_ptr165=(($152+$153)|0);
      var $154=$add_ptr165;
      HEAP32[((((17700)|0))>>2)]=$154;
      $r164=$154;
      var $155=$rsize158;
      HEAP32[((((17688)|0))>>2)]=$155;
      var $156=$rsize158;
      var $or166=$156 | 1;
      var $157=$r164;
      var $head167=(($157+4)|0);
      HEAP32[(($head167)>>2)]=$or166;
      var $158=$rsize158;
      var $159=$r164;
      var $160=$159;
      var $161=$rsize158;
      var $add_ptr168=(($160+$161)|0);
      var $162=$add_ptr168;
      var $prev_foot169=(($162)|0);
      HEAP32[(($prev_foot169)>>2)]=$158;
      var $163=$nb;
      var $or170=$163 | 1;
      var $or171=$or170 | 2;
      var $164=$p160;
      var $head172=(($164+4)|0);
      HEAP32[(($head172)>>2)]=$or171;
      label = 53; break;
    case 52: 
      var $165=HEAP32[((((17688)|0))>>2)];
      $dvs=$165;
      HEAP32[((((17688)|0))>>2)]=0;
      HEAP32[((((17700)|0))>>2)]=0;
      var $166=$dvs;
      var $or174=$166 | 1;
      var $or175=$or174 | 2;
      var $167=$p160;
      var $head176=(($167+4)|0);
      HEAP32[(($head176)>>2)]=$or175;
      var $168=$p160;
      var $169=$168;
      var $170=$dvs;
      var $add_ptr177=(($169+$170)|0);
      var $171=$add_ptr177;
      var $head178=(($171+4)|0);
      var $172=HEAP32[(($head178)>>2)];
      var $or179=$172 | 1;
      HEAP32[(($head178)>>2)]=$or179;
      label = 53; break;
    case 53: 
      var $173=$p160;
      var $174=$173;
      var $add_ptr181=(($174+8)|0);
      $mem=$add_ptr181;
      label = 58; break;
    case 54: 
      var $175=$nb;
      var $176=HEAP32[((((17692)|0))>>2)];
      var $cmp183=(($175)>>>(0)) < (($176)>>>(0));
      if ($cmp183) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $177=$nb;
      var $178=HEAP32[((((17692)|0))>>2)];
      var $sub187=((($178)-($177))|0);
      HEAP32[((((17692)|0))>>2)]=$sub187;
      $rsize186=$sub187;
      var $179=HEAP32[((((17704)|0))>>2)];
      $p188=$179;
      var $180=$p188;
      var $181=$180;
      var $182=$nb;
      var $add_ptr190=(($181+$182)|0);
      var $183=$add_ptr190;
      HEAP32[((((17704)|0))>>2)]=$183;
      $r189=$183;
      var $184=$rsize186;
      var $or191=$184 | 1;
      var $185=$r189;
      var $head192=(($185+4)|0);
      HEAP32[(($head192)>>2)]=$or191;
      var $186=$nb;
      var $or193=$186 | 1;
      var $or194=$or193 | 2;
      var $187=$p188;
      var $head195=(($187+4)|0);
      HEAP32[(($head195)>>2)]=$or194;
      var $188=$p188;
      var $189=$188;
      var $add_ptr196=(($189+8)|0);
      $mem=$add_ptr196;
      label = 58; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $190=$nb;
      var $call199=_sys_alloc(17680, $190);
      $mem=$call199;
      label = 58; break;
    case 58: 
      var $191=$mem;
      return $191;
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_small($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F197;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr;
      var $treemap=(($0+4)|0);
      var $1=HEAP32[(($treemap)>>2)];
      var $2=$m_addr;
      var $treemap1=(($2+4)|0);
      var $3=HEAP32[(($treemap1)>>2)];
      var $sub=(((-$3))|0);
      var $and=$1 & $sub;
      $leastbit=$and;
      var $4=$leastbit;
      var $sub2=((($4)-(1))|0);
      $Y=$sub2;
      var $5=$Y;
      var $shr=$5 >>> 12;
      var $and3=$shr & 16;
      $K=$and3;
      var $6=$K;
      $N=$6;
      var $7=$K;
      var $8=$Y;
      var $shr4=$8 >>> (($7)>>>(0));
      $Y=$shr4;
      var $9=$Y;
      var $shr5=$9 >>> 5;
      var $and6=$shr5 & 8;
      $K=$and6;
      var $10=$N;
      var $add=((($10)+($and6))|0);
      $N=$add;
      var $11=$K;
      var $12=$Y;
      var $shr7=$12 >>> (($11)>>>(0));
      $Y=$shr7;
      var $13=$Y;
      var $shr8=$13 >>> 2;
      var $and9=$shr8 & 4;
      $K=$and9;
      var $14=$N;
      var $add10=((($14)+($and9))|0);
      $N=$add10;
      var $15=$K;
      var $16=$Y;
      var $shr11=$16 >>> (($15)>>>(0));
      $Y=$shr11;
      var $17=$Y;
      var $shr12=$17 >>> 1;
      var $and13=$shr12 & 2;
      $K=$and13;
      var $18=$N;
      var $add14=((($18)+($and13))|0);
      $N=$add14;
      var $19=$K;
      var $20=$Y;
      var $shr15=$20 >>> (($19)>>>(0));
      $Y=$shr15;
      var $21=$Y;
      var $shr16=$21 >>> 1;
      var $and17=$shr16 & 1;
      $K=$and17;
      var $22=$N;
      var $add18=((($22)+($and17))|0);
      $N=$add18;
      var $23=$K;
      var $24=$Y;
      var $shr19=$24 >>> (($23)>>>(0));
      $Y=$shr19;
      var $25=$N;
      var $26=$Y;
      var $add20=((($25)+($26))|0);
      $i=$add20;
      var $27=$i;
      var $28=$m_addr;
      var $treebins=(($28+304)|0);
      var $arrayidx=(($treebins+($27<<2))|0);
      var $29=HEAP32[(($arrayidx)>>2)];
      $t=$29;
      $v=$29;
      var $30=$t;
      var $head=(($30+4)|0);
      var $31=HEAP32[(($head)>>2)];
      var $and21=$31 & -8;
      var $32=$nb_addr;
      var $sub22=((($and21)-($32))|0);
      $rsize=$sub22;
      label = 3; break;
    case 3: 
      var $33=$t;
      var $child=(($33+16)|0);
      var $arrayidx23=(($child)|0);
      var $34=HEAP32[(($arrayidx23)>>2)];
      var $cmp=(($34)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$t;
      var $child24=(($35+16)|0);
      var $arrayidx25=(($child24)|0);
      var $36=HEAP32[(($arrayidx25)>>2)];
      var $cond = $36;label = 6; break;
    case 5: 
      var $37=$t;
      var $child26=(($37+16)|0);
      var $arrayidx27=(($child26+4)|0);
      var $38=HEAP32[(($arrayidx27)>>2)];
      var $cond = $38;label = 6; break;
    case 6: 
      var $cond;
      $t=$cond;
      var $cmp28=(($cond)|(0))!=0;
      if ($cmp28) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $39=$t;
      var $head29=(($39+4)|0);
      var $40=HEAP32[(($head29)>>2)];
      var $and30=$40 & -8;
      var $41=$nb_addr;
      var $sub31=((($and30)-($41))|0);
      $trem=$sub31;
      var $42=$trem;
      var $43=$rsize;
      var $cmp32=(($42)>>>(0)) < (($43)>>>(0));
      if ($cmp32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$trem;
      $rsize=$44;
      var $45=$t;
      $v=$45;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $46=$v;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp33=(($47)>>>(0)) >= (($49)>>>(0));
      var $conv=(($cmp33)&(1));
      var $expval=($conv);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 11; break; } else { label = 73; break; }
    case 11: 
      var $50=$v;
      var $51=$50;
      var $52=$nb_addr;
      var $add_ptr=(($51+$52)|0);
      var $53=$add_ptr;
      $r=$53;
      var $54=$v;
      var $55=$54;
      var $56=$r;
      var $57=$56;
      var $cmp35=(($55)>>>(0)) < (($57)>>>(0));
      var $conv36=(($cmp35)&(1));
      var $expval37=($conv36);
      var $tobool38=(($expval37)|(0))!=0;
      if ($tobool38) { label = 12; break; } else { label = 72; break; }
    case 12: 
      var $58=$v;
      var $parent=(($58+24)|0);
      var $59=HEAP32[(($parent)>>2)];
      $XP=$59;
      var $60=$v;
      var $bk=(($60+12)|0);
      var $61=HEAP32[(($bk)>>2)];
      var $62=$v;
      var $cmp40=(($61)|(0))!=(($62)|(0));
      if ($cmp40) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $63=$v;
      var $fd=(($63+8)|0);
      var $64=HEAP32[(($fd)>>2)];
      $F=$64;
      var $65=$v;
      var $bk43=(($65+12)|0);
      var $66=HEAP32[(($bk43)>>2)];
      $R=$66;
      var $67=$F;
      var $68=$67;
      var $69=$m_addr;
      var $least_addr44=(($69+16)|0);
      var $70=HEAP32[(($least_addr44)>>2)];
      var $cmp45=(($68)>>>(0)) >= (($70)>>>(0));
      if ($cmp45) { label = 14; break; } else { var $77 = 0;label = 16; break; }
    case 14: 
      var $71=$F;
      var $bk47=(($71+12)|0);
      var $72=HEAP32[(($bk47)>>2)];
      var $73=$v;
      var $cmp48=(($72)|(0))==(($73)|(0));
      if ($cmp48) { label = 15; break; } else { var $77 = 0;label = 16; break; }
    case 15: 
      var $74=$R;
      var $fd50=(($74+8)|0);
      var $75=HEAP32[(($fd50)>>2)];
      var $76=$v;
      var $cmp51=(($75)|(0))==(($76)|(0));
      var $77 = $cmp51;label = 16; break;
    case 16: 
      var $77;
      var $land_ext=(($77)&(1));
      var $expval53=($land_ext);
      var $tobool54=(($expval53)|(0))!=0;
      if ($tobool54) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $78=$R;
      var $79=$F;
      var $bk56=(($79+12)|0);
      HEAP32[(($bk56)>>2)]=$78;
      var $80=$F;
      var $81=$R;
      var $fd57=(($81+8)|0);
      HEAP32[(($fd57)>>2)]=$80;
      label = 19; break;
    case 18: 
      _abort();
      throw "Reached an unreachable!";
    case 19: 
      label = 32; break;
    case 20: 
      var $82=$v;
      var $child60=(($82+16)|0);
      var $arrayidx61=(($child60+4)|0);
      $RP=$arrayidx61;
      var $83=HEAP32[(($arrayidx61)>>2)];
      $R=$83;
      var $cmp62=(($83)|(0))!=0;
      if ($cmp62) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $84=$v;
      var $child64=(($84+16)|0);
      var $arrayidx65=(($child64)|0);
      $RP=$arrayidx65;
      var $85=HEAP32[(($arrayidx65)>>2)];
      $R=$85;
      var $cmp66=(($85)|(0))!=0;
      if ($cmp66) { label = 22; break; } else { label = 31; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $86=$R;
      var $child70=(($86+16)|0);
      var $arrayidx71=(($child70+4)|0);
      $CP=$arrayidx71;
      var $87=HEAP32[(($arrayidx71)>>2)];
      var $cmp72=(($87)|(0))!=0;
      if ($cmp72) { var $90 = 1;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $88=$R;
      var $child74=(($88+16)|0);
      var $arrayidx75=(($child74)|0);
      $CP=$arrayidx75;
      var $89=HEAP32[(($arrayidx75)>>2)];
      var $cmp76=(($89)|(0))!=0;
      var $90 = $cmp76;label = 25; break;
    case 25: 
      var $90;
      if ($90) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $91=$CP;
      $RP=$91;
      var $92=HEAP32[(($91)>>2)];
      $R=$92;
      label = 23; break;
    case 27: 
      var $93=$RP;
      var $94=$93;
      var $95=$m_addr;
      var $least_addr80=(($95+16)|0);
      var $96=HEAP32[(($least_addr80)>>2)];
      var $cmp81=(($94)>>>(0)) >= (($96)>>>(0));
      var $conv82=(($cmp81)&(1));
      var $expval83=($conv82);
      var $tobool84=(($expval83)|(0))!=0;
      if ($tobool84) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $97=$RP;
      HEAP32[(($97)>>2)]=0;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!";
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $98=$XP;
      var $cmp90=(($98)|(0))!=0;
      if ($cmp90) { label = 33; break; } else { label = 60; break; }
    case 33: 
      var $99=$v;
      var $index=(($99+28)|0);
      var $100=HEAP32[(($index)>>2)];
      var $101=$m_addr;
      var $treebins93=(($101+304)|0);
      var $arrayidx94=(($treebins93+($100<<2))|0);
      $H=$arrayidx94;
      var $102=$v;
      var $103=$H;
      var $104=HEAP32[(($103)>>2)];
      var $cmp95=(($102)|(0))==(($104)|(0));
      if ($cmp95) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $105=$R;
      var $106=$H;
      HEAP32[(($106)>>2)]=$105;
      var $cmp98=(($105)|(0))==0;
      if ($cmp98) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $107=$v;
      var $index101=(($107+28)|0);
      var $108=HEAP32[(($index101)>>2)];
      var $shl=1 << $108;
      var $neg=$shl ^ -1;
      var $109=$m_addr;
      var $treemap102=(($109+4)|0);
      var $110=HEAP32[(($treemap102)>>2)];
      var $and103=$110 & $neg;
      HEAP32[(($treemap102)>>2)]=$and103;
      label = 36; break;
    case 36: 
      label = 44; break;
    case 37: 
      var $111=$XP;
      var $112=$111;
      var $113=$m_addr;
      var $least_addr106=(($113+16)|0);
      var $114=HEAP32[(($least_addr106)>>2)];
      var $cmp107=(($112)>>>(0)) >= (($114)>>>(0));
      var $conv108=(($cmp107)&(1));
      var $expval109=($conv108);
      var $tobool110=(($expval109)|(0))!=0;
      if ($tobool110) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $115=$XP;
      var $child112=(($115+16)|0);
      var $arrayidx113=(($child112)|0);
      var $116=HEAP32[(($arrayidx113)>>2)];
      var $117=$v;
      var $cmp114=(($116)|(0))==(($117)|(0));
      if ($cmp114) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $118=$R;
      var $119=$XP;
      var $child117=(($119+16)|0);
      var $arrayidx118=(($child117)|0);
      HEAP32[(($arrayidx118)>>2)]=$118;
      label = 41; break;
    case 40: 
      var $120=$R;
      var $121=$XP;
      var $child120=(($121+16)|0);
      var $arrayidx121=(($child120+4)|0);
      HEAP32[(($arrayidx121)>>2)]=$120;
      label = 41; break;
    case 41: 
      label = 43; break;
    case 42: 
      _abort();
      throw "Reached an unreachable!";
    case 43: 
      label = 44; break;
    case 44: 
      var $122=$R;
      var $cmp126=(($122)|(0))!=0;
      if ($cmp126) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $123=$R;
      var $124=$123;
      var $125=$m_addr;
      var $least_addr129=(($125+16)|0);
      var $126=HEAP32[(($least_addr129)>>2)];
      var $cmp130=(($124)>>>(0)) >= (($126)>>>(0));
      var $conv131=(($cmp130)&(1));
      var $expval132=($conv131);
      var $tobool133=(($expval132)|(0))!=0;
      if ($tobool133) { label = 46; break; } else { label = 57; break; }
    case 46: 
      var $127=$XP;
      var $128=$R;
      var $parent135=(($128+24)|0);
      HEAP32[(($parent135)>>2)]=$127;
      var $129=$v;
      var $child136=(($129+16)|0);
      var $arrayidx137=(($child136)|0);
      var $130=HEAP32[(($arrayidx137)>>2)];
      $C0=$130;
      var $cmp138=(($130)|(0))!=0;
      if ($cmp138) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $131=$C0;
      var $132=$131;
      var $133=$m_addr;
      var $least_addr141=(($133+16)|0);
      var $134=HEAP32[(($least_addr141)>>2)];
      var $cmp142=(($132)>>>(0)) >= (($134)>>>(0));
      var $conv143=(($cmp142)&(1));
      var $expval144=($conv143);
      var $tobool145=(($expval144)|(0))!=0;
      if ($tobool145) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $135=$C0;
      var $136=$R;
      var $child147=(($136+16)|0);
      var $arrayidx148=(($child147)|0);
      HEAP32[(($arrayidx148)>>2)]=$135;
      var $137=$R;
      var $138=$C0;
      var $parent149=(($138+24)|0);
      HEAP32[(($parent149)>>2)]=$137;
      label = 50; break;
    case 49: 
      _abort();
      throw "Reached an unreachable!";
    case 50: 
      label = 51; break;
    case 51: 
      var $139=$v;
      var $child153=(($139+16)|0);
      var $arrayidx154=(($child153+4)|0);
      var $140=HEAP32[(($arrayidx154)>>2)];
      $C1=$140;
      var $cmp155=(($140)|(0))!=0;
      if ($cmp155) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $141=$C1;
      var $142=$141;
      var $143=$m_addr;
      var $least_addr158=(($143+16)|0);
      var $144=HEAP32[(($least_addr158)>>2)];
      var $cmp159=(($142)>>>(0)) >= (($144)>>>(0));
      var $conv160=(($cmp159)&(1));
      var $expval161=($conv160);
      var $tobool162=(($expval161)|(0))!=0;
      if ($tobool162) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $145=$C1;
      var $146=$R;
      var $child164=(($146+16)|0);
      var $arrayidx165=(($child164+4)|0);
      HEAP32[(($arrayidx165)>>2)]=$145;
      var $147=$R;
      var $148=$C1;
      var $parent166=(($148+24)|0);
      HEAP32[(($parent166)>>2)]=$147;
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!";
    case 55: 
      label = 56; break;
    case 56: 
      label = 58; break;
    case 57: 
      _abort();
      throw "Reached an unreachable!";
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $149=$rsize;
      var $cmp174=(($149)>>>(0)) < 16;
      if ($cmp174) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $150=$rsize;
      var $151=$nb_addr;
      var $add177=((($150)+($151))|0);
      var $or=$add177 | 1;
      var $or178=$or | 2;
      var $152=$v;
      var $head179=(($152+4)|0);
      HEAP32[(($head179)>>2)]=$or178;
      var $153=$v;
      var $154=$153;
      var $155=$rsize;
      var $156=$nb_addr;
      var $add180=((($155)+($156))|0);
      var $add_ptr181=(($154+$add180)|0);
      var $157=$add_ptr181;
      var $head182=(($157+4)|0);
      var $158=HEAP32[(($head182)>>2)];
      var $or183=$158 | 1;
      HEAP32[(($head182)>>2)]=$or183;
      label = 71; break;
    case 62: 
      var $159=$nb_addr;
      var $or185=$159 | 1;
      var $or186=$or185 | 2;
      var $160=$v;
      var $head187=(($160+4)|0);
      HEAP32[(($head187)>>2)]=$or186;
      var $161=$rsize;
      var $or188=$161 | 1;
      var $162=$r;
      var $head189=(($162+4)|0);
      HEAP32[(($head189)>>2)]=$or188;
      var $163=$rsize;
      var $164=$r;
      var $165=$164;
      var $166=$rsize;
      var $add_ptr190=(($165+$166)|0);
      var $167=$add_ptr190;
      var $prev_foot=(($167)|0);
      HEAP32[(($prev_foot)>>2)]=$163;
      var $168=$m_addr;
      var $dvsize=(($168+8)|0);
      var $169=HEAP32[(($dvsize)>>2)];
      $DVS=$169;
      var $170=$DVS;
      var $cmp191=(($170)|(0))!=0;
      if ($cmp191) { label = 63; break; } else { label = 70; break; }
    case 63: 
      var $171=$m_addr;
      var $dv=(($171+20)|0);
      var $172=HEAP32[(($dv)>>2)];
      $DV=$172;
      var $173=$DVS;
      var $shr194=$173 >>> 3;
      $I=$shr194;
      var $174=$I;
      var $shl195=$174 << 1;
      var $175=$m_addr;
      var $smallbins=(($175+40)|0);
      var $arrayidx196=(($smallbins+($shl195<<2))|0);
      var $176=$arrayidx196;
      var $177=$176;
      $B=$177;
      var $178=$B;
      $F197=$178;
      var $179=$m_addr;
      var $smallmap=(($179)|0);
      var $180=HEAP32[(($smallmap)>>2)];
      var $181=$I;
      var $shl198=1 << $181;
      var $and199=$180 & $shl198;
      var $tobool200=(($and199)|(0))!=0;
      if ($tobool200) { label = 65; break; } else { label = 64; break; }
    case 64: 
      var $182=$I;
      var $shl202=1 << $182;
      var $183=$m_addr;
      var $smallmap203=(($183)|0);
      var $184=HEAP32[(($smallmap203)>>2)];
      var $or204=$184 | $shl202;
      HEAP32[(($smallmap203)>>2)]=$or204;
      label = 69; break;
    case 65: 
      var $185=$B;
      var $fd206=(($185+8)|0);
      var $186=HEAP32[(($fd206)>>2)];
      var $187=$186;
      var $188=$m_addr;
      var $least_addr207=(($188+16)|0);
      var $189=HEAP32[(($least_addr207)>>2)];
      var $cmp208=(($187)>>>(0)) >= (($189)>>>(0));
      var $conv209=(($cmp208)&(1));
      var $expval210=($conv209);
      var $tobool211=(($expval210)|(0))!=0;
      if ($tobool211) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $190=$B;
      var $fd213=(($190+8)|0);
      var $191=HEAP32[(($fd213)>>2)];
      $F197=$191;
      label = 68; break;
    case 67: 
      _abort();
      throw "Reached an unreachable!";
    case 68: 
      label = 69; break;
    case 69: 
      var $192=$DV;
      var $193=$B;
      var $fd217=(($193+8)|0);
      HEAP32[(($fd217)>>2)]=$192;
      var $194=$DV;
      var $195=$F197;
      var $bk218=(($195+12)|0);
      HEAP32[(($bk218)>>2)]=$194;
      var $196=$F197;
      var $197=$DV;
      var $fd219=(($197+8)|0);
      HEAP32[(($fd219)>>2)]=$196;
      var $198=$B;
      var $199=$DV;
      var $bk220=(($199+12)|0);
      HEAP32[(($bk220)>>2)]=$198;
      label = 70; break;
    case 70: 
      var $200=$rsize;
      var $201=$m_addr;
      var $dvsize222=(($201+8)|0);
      HEAP32[(($dvsize222)>>2)]=$200;
      var $202=$r;
      var $203=$m_addr;
      var $dv223=(($203+20)|0);
      HEAP32[(($dv223)>>2)]=$202;
      label = 71; break;
    case 71: 
      var $204=$v;
      var $205=$204;
      var $add_ptr225=(($205+8)|0);
      return $add_ptr225;
    case 72: 
      label = 73; break;
    case 73: 
      _abort();
      throw "Reached an unreachable!";
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_large($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F289;
      var $TP;
      var $H314;
      var $I315;
      var $X316;
      var $Y326;
      var $N327;
      var $K331;
      var $T;
      var $K372;
      var $C;
      var $F411;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0;
      var $0=$nb_addr;
      var $sub=(((-$0))|0);
      $rsize=$sub;
      var $1=$nb_addr;
      var $shr=$1 >>> 8;
      $X=$shr;
      var $2=$X;
      var $cmp=(($2)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $3=$X;
      var $cmp1=(($3)>>>(0)) > 65535;
      if ($cmp1) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $4=$X;
      $Y=$4;
      var $5=$Y;
      var $sub4=((($5)-(256))|0);
      var $shr5=$sub4 >>> 16;
      var $and=$shr5 & 8;
      $N=$and;
      var $6=$N;
      var $7=$Y;
      var $shl=$7 << $6;
      $Y=$shl;
      var $sub6=((($shl)-(4096))|0);
      var $shr7=$sub6 >>> 16;
      var $and8=$shr7 & 4;
      $K=$and8;
      var $8=$K;
      var $9=$N;
      var $add=((($9)+($8))|0);
      $N=$add;
      var $10=$K;
      var $11=$Y;
      var $shl9=$11 << $10;
      $Y=$shl9;
      var $sub10=((($shl9)-(16384))|0);
      var $shr11=$sub10 >>> 16;
      var $and12=$shr11 & 2;
      $K=$and12;
      var $12=$N;
      var $add13=((($12)+($and12))|0);
      $N=$add13;
      var $13=$N;
      var $sub14=(((14)-($13))|0);
      var $14=$K;
      var $15=$Y;
      var $shl15=$15 << $14;
      $Y=$shl15;
      var $shr16=$shl15 >>> 15;
      var $add17=((($sub14)+($shr16))|0);
      $K=$add17;
      var $16=$K;
      var $shl18=$16 << 1;
      var $17=$nb_addr;
      var $18=$K;
      var $add19=((($18)+(7))|0);
      var $shr20=$17 >>> (($add19)>>>(0));
      var $and21=$shr20 & 1;
      var $add22=((($shl18)+($and21))|0);
      $idx=$add22;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$idx;
      var $20=$m_addr;
      var $treebins=(($20+304)|0);
      var $arrayidx=(($treebins+($19<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      $t=$21;
      var $cmp24=(($21)|(0))!=0;
      if ($cmp24) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $22=$nb_addr;
      var $23=$idx;
      var $cmp26=(($23)|(0))==31;
      if ($cmp26) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $24=$idx;
      var $shr27=$24 >>> 1;
      var $add28=((($shr27)+(8))|0);
      var $sub29=((($add28)-(2))|0);
      var $sub30=(((31)-($sub29))|0);
      var $cond = $sub30;label = 12; break;
    case 12: 
      var $cond;
      var $shl31=$22 << $cond;
      $sizebits=$shl31;
      $rst=0;
      label = 13; break;
    case 13: 
      var $25=$t;
      var $head=(($25+4)|0);
      var $26=HEAP32[(($head)>>2)];
      var $and32=$26 & -8;
      var $27=$nb_addr;
      var $sub33=((($and32)-($27))|0);
      $trem=$sub33;
      var $28=$trem;
      var $29=$rsize;
      var $cmp34=(($28)>>>(0)) < (($29)>>>(0));
      if ($cmp34) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $30=$t;
      $v=$30;
      var $31=$trem;
      $rsize=$31;
      var $cmp36=(($31)|(0))==0;
      if ($cmp36) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $32=$t;
      var $child=(($32+16)|0);
      var $arrayidx40=(($child+4)|0);
      var $33=HEAP32[(($arrayidx40)>>2)];
      $rt=$33;
      var $34=$sizebits;
      var $shr41=$34 >>> 31;
      var $and42=$shr41 & 1;
      var $35=$t;
      var $child43=(($35+16)|0);
      var $arrayidx44=(($child43+($and42<<2))|0);
      var $36=HEAP32[(($arrayidx44)>>2)];
      $t=$36;
      var $37=$rt;
      var $cmp45=(($37)|(0))!=0;
      if ($cmp45) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $38=$rt;
      var $39=$t;
      var $cmp46=(($38)|(0))!=(($39)|(0));
      if ($cmp46) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $40=$rt;
      $rst=$40;
      label = 20; break;
    case 20: 
      var $41=$t;
      var $cmp49=(($41)|(0))==0;
      if ($cmp49) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $42=$rst;
      $t=$42;
      label = 23; break;
    case 22: 
      var $43=$sizebits;
      var $shl52=$43 << 1;
      $sizebits=$shl52;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $44=$t;
      var $cmp54=(($44)|(0))==0;
      if ($cmp54) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $45=$v;
      var $cmp56=(($45)|(0))==0;
      if ($cmp56) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $46=$idx;
      var $shl58=1 << $46;
      var $shl59=$shl58 << 1;
      var $47=$idx;
      var $shl60=1 << $47;
      var $shl61=$shl60 << 1;
      var $sub62=(((-$shl61))|0);
      var $or=$shl59 | $sub62;
      var $48=$m_addr;
      var $treemap=(($48+4)|0);
      var $49=HEAP32[(($treemap)>>2)];
      var $and63=$or & $49;
      $leftbits=$and63;
      var $50=$leftbits;
      var $cmp64=(($50)|(0))!=0;
      if ($cmp64) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $51=$leftbits;
      var $52=$leftbits;
      var $sub66=(((-$52))|0);
      var $and67=$51 & $sub66;
      $leastbit=$and67;
      var $53=$leastbit;
      var $sub69=((($53)-(1))|0);
      $Y68=$sub69;
      var $54=$Y68;
      var $shr71=$54 >>> 12;
      var $and72=$shr71 & 16;
      $K70=$and72;
      var $55=$K70;
      $N73=$55;
      var $56=$K70;
      var $57=$Y68;
      var $shr74=$57 >>> (($56)>>>(0));
      $Y68=$shr74;
      var $58=$Y68;
      var $shr75=$58 >>> 5;
      var $and76=$shr75 & 8;
      $K70=$and76;
      var $59=$N73;
      var $add77=((($59)+($and76))|0);
      $N73=$add77;
      var $60=$K70;
      var $61=$Y68;
      var $shr78=$61 >>> (($60)>>>(0));
      $Y68=$shr78;
      var $62=$Y68;
      var $shr79=$62 >>> 2;
      var $and80=$shr79 & 4;
      $K70=$and80;
      var $63=$N73;
      var $add81=((($63)+($and80))|0);
      $N73=$add81;
      var $64=$K70;
      var $65=$Y68;
      var $shr82=$65 >>> (($64)>>>(0));
      $Y68=$shr82;
      var $66=$Y68;
      var $shr83=$66 >>> 1;
      var $and84=$shr83 & 2;
      $K70=$and84;
      var $67=$N73;
      var $add85=((($67)+($and84))|0);
      $N73=$add85;
      var $68=$K70;
      var $69=$Y68;
      var $shr86=$69 >>> (($68)>>>(0));
      $Y68=$shr86;
      var $70=$Y68;
      var $shr87=$70 >>> 1;
      var $and88=$shr87 & 1;
      $K70=$and88;
      var $71=$N73;
      var $add89=((($71)+($and88))|0);
      $N73=$add89;
      var $72=$K70;
      var $73=$Y68;
      var $shr90=$73 >>> (($72)>>>(0));
      $Y68=$shr90;
      var $74=$N73;
      var $75=$Y68;
      var $add91=((($74)+($75))|0);
      $i=$add91;
      var $76=$i;
      var $77=$m_addr;
      var $treebins92=(($77+304)|0);
      var $arrayidx93=(($treebins92+($76<<2))|0);
      var $78=HEAP32[(($arrayidx93)>>2)];
      $t=$78;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $79=$t;
      var $cmp96=(($79)|(0))!=0;
      if ($cmp96) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $80=$t;
      var $head98=(($80+4)|0);
      var $81=HEAP32[(($head98)>>2)];
      var $and99=$81 & -8;
      var $82=$nb_addr;
      var $sub100=((($and99)-($82))|0);
      $trem97=$sub100;
      var $83=$trem97;
      var $84=$rsize;
      var $cmp101=(($83)>>>(0)) < (($84)>>>(0));
      if ($cmp101) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $85=$trem97;
      $rsize=$85;
      var $86=$t;
      $v=$86;
      label = 33; break;
    case 33: 
      var $87=$t;
      var $child104=(($87+16)|0);
      var $arrayidx105=(($child104)|0);
      var $88=HEAP32[(($arrayidx105)>>2)];
      var $cmp106=(($88)|(0))!=0;
      if ($cmp106) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $89=$t;
      var $child108=(($89+16)|0);
      var $arrayidx109=(($child108)|0);
      var $90=HEAP32[(($arrayidx109)>>2)];
      var $cond114 = $90;label = 36; break;
    case 35: 
      var $91=$t;
      var $child111=(($91+16)|0);
      var $arrayidx112=(($child111+4)|0);
      var $92=HEAP32[(($arrayidx112)>>2)];
      var $cond114 = $92;label = 36; break;
    case 36: 
      var $cond114;
      $t=$cond114;
      label = 30; break;
    case 37: 
      var $93=$v;
      var $cmp115=(($93)|(0))!=0;
      if ($cmp115) { label = 38; break; } else { label = 130; break; }
    case 38: 
      var $94=$rsize;
      var $95=$m_addr;
      var $dvsize=(($95+8)|0);
      var $96=HEAP32[(($dvsize)>>2)];
      var $97=$nb_addr;
      var $sub117=((($96)-($97))|0);
      var $cmp118=(($94)>>>(0)) < (($sub117)>>>(0));
      if ($cmp118) { label = 39; break; } else { label = 130; break; }
    case 39: 
      var $98=$v;
      var $99=$98;
      var $100=$m_addr;
      var $least_addr=(($100+16)|0);
      var $101=HEAP32[(($least_addr)>>2)];
      var $cmp120=(($99)>>>(0)) >= (($101)>>>(0));
      var $conv=(($cmp120)&(1));
      var $expval=($conv);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 40; break; } else { label = 129; break; }
    case 40: 
      var $102=$v;
      var $103=$102;
      var $104=$nb_addr;
      var $add_ptr=(($103+$104)|0);
      var $105=$add_ptr;
      $r=$105;
      var $106=$v;
      var $107=$106;
      var $108=$r;
      var $109=$108;
      var $cmp122=(($107)>>>(0)) < (($109)>>>(0));
      var $conv123=(($cmp122)&(1));
      var $expval124=($conv123);
      var $tobool125=(($expval124)|(0))!=0;
      if ($tobool125) { label = 41; break; } else { label = 128; break; }
    case 41: 
      var $110=$v;
      var $parent=(($110+24)|0);
      var $111=HEAP32[(($parent)>>2)];
      $XP=$111;
      var $112=$v;
      var $bk=(($112+12)|0);
      var $113=HEAP32[(($bk)>>2)];
      var $114=$v;
      var $cmp127=(($113)|(0))!=(($114)|(0));
      if ($cmp127) { label = 42; break; } else { label = 49; break; }
    case 42: 
      var $115=$v;
      var $fd=(($115+8)|0);
      var $116=HEAP32[(($fd)>>2)];
      $F=$116;
      var $117=$v;
      var $bk130=(($117+12)|0);
      var $118=HEAP32[(($bk130)>>2)];
      $R=$118;
      var $119=$F;
      var $120=$119;
      var $121=$m_addr;
      var $least_addr131=(($121+16)|0);
      var $122=HEAP32[(($least_addr131)>>2)];
      var $cmp132=(($120)>>>(0)) >= (($122)>>>(0));
      if ($cmp132) { label = 43; break; } else { var $129 = 0;label = 45; break; }
    case 43: 
      var $123=$F;
      var $bk135=(($123+12)|0);
      var $124=HEAP32[(($bk135)>>2)];
      var $125=$v;
      var $cmp136=(($124)|(0))==(($125)|(0));
      if ($cmp136) { label = 44; break; } else { var $129 = 0;label = 45; break; }
    case 44: 
      var $126=$R;
      var $fd138=(($126+8)|0);
      var $127=HEAP32[(($fd138)>>2)];
      var $128=$v;
      var $cmp139=(($127)|(0))==(($128)|(0));
      var $129 = $cmp139;label = 45; break;
    case 45: 
      var $129;
      var $land_ext=(($129)&(1));
      var $expval141=($land_ext);
      var $tobool142=(($expval141)|(0))!=0;
      if ($tobool142) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $130=$R;
      var $131=$F;
      var $bk144=(($131+12)|0);
      HEAP32[(($bk144)>>2)]=$130;
      var $132=$F;
      var $133=$R;
      var $fd145=(($133+8)|0);
      HEAP32[(($fd145)>>2)]=$132;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!";
    case 48: 
      label = 61; break;
    case 49: 
      var $134=$v;
      var $child149=(($134+16)|0);
      var $arrayidx150=(($child149+4)|0);
      $RP=$arrayidx150;
      var $135=HEAP32[(($arrayidx150)>>2)];
      $R=$135;
      var $cmp151=(($135)|(0))!=0;
      if ($cmp151) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $136=$v;
      var $child153=(($136+16)|0);
      var $arrayidx154=(($child153)|0);
      $RP=$arrayidx154;
      var $137=HEAP32[(($arrayidx154)>>2)];
      $R=$137;
      var $cmp155=(($137)|(0))!=0;
      if ($cmp155) { label = 51; break; } else { label = 60; break; }
    case 51: 
      label = 52; break;
    case 52: 
      var $138=$R;
      var $child159=(($138+16)|0);
      var $arrayidx160=(($child159+4)|0);
      $CP=$arrayidx160;
      var $139=HEAP32[(($arrayidx160)>>2)];
      var $cmp161=(($139)|(0))!=0;
      if ($cmp161) { var $142 = 1;label = 54; break; } else { label = 53; break; }
    case 53: 
      var $140=$R;
      var $child163=(($140+16)|0);
      var $arrayidx164=(($child163)|0);
      $CP=$arrayidx164;
      var $141=HEAP32[(($arrayidx164)>>2)];
      var $cmp165=(($141)|(0))!=0;
      var $142 = $cmp165;label = 54; break;
    case 54: 
      var $142;
      if ($142) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $143=$CP;
      $RP=$143;
      var $144=HEAP32[(($143)>>2)];
      $R=$144;
      label = 52; break;
    case 56: 
      var $145=$RP;
      var $146=$145;
      var $147=$m_addr;
      var $least_addr169=(($147+16)|0);
      var $148=HEAP32[(($least_addr169)>>2)];
      var $cmp170=(($146)>>>(0)) >= (($148)>>>(0));
      var $conv171=(($cmp170)&(1));
      var $expval172=($conv171);
      var $tobool173=(($expval172)|(0))!=0;
      if ($tobool173) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $149=$RP;
      HEAP32[(($149)>>2)]=0;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!";
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $150=$XP;
      var $cmp179=(($150)|(0))!=0;
      if ($cmp179) { label = 62; break; } else { label = 89; break; }
    case 62: 
      var $151=$v;
      var $index=(($151+28)|0);
      var $152=HEAP32[(($index)>>2)];
      var $153=$m_addr;
      var $treebins182=(($153+304)|0);
      var $arrayidx183=(($treebins182+($152<<2))|0);
      $H=$arrayidx183;
      var $154=$v;
      var $155=$H;
      var $156=HEAP32[(($155)>>2)];
      var $cmp184=(($154)|(0))==(($156)|(0));
      if ($cmp184) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $157=$R;
      var $158=$H;
      HEAP32[(($158)>>2)]=$157;
      var $cmp187=(($157)|(0))==0;
      if ($cmp187) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $159=$v;
      var $index190=(($159+28)|0);
      var $160=HEAP32[(($index190)>>2)];
      var $shl191=1 << $160;
      var $neg=$shl191 ^ -1;
      var $161=$m_addr;
      var $treemap192=(($161+4)|0);
      var $162=HEAP32[(($treemap192)>>2)];
      var $and193=$162 & $neg;
      HEAP32[(($treemap192)>>2)]=$and193;
      label = 65; break;
    case 65: 
      label = 73; break;
    case 66: 
      var $163=$XP;
      var $164=$163;
      var $165=$m_addr;
      var $least_addr196=(($165+16)|0);
      var $166=HEAP32[(($least_addr196)>>2)];
      var $cmp197=(($164)>>>(0)) >= (($166)>>>(0));
      var $conv198=(($cmp197)&(1));
      var $expval199=($conv198);
      var $tobool200=(($expval199)|(0))!=0;
      if ($tobool200) { label = 67; break; } else { label = 71; break; }
    case 67: 
      var $167=$XP;
      var $child202=(($167+16)|0);
      var $arrayidx203=(($child202)|0);
      var $168=HEAP32[(($arrayidx203)>>2)];
      var $169=$v;
      var $cmp204=(($168)|(0))==(($169)|(0));
      if ($cmp204) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $170=$R;
      var $171=$XP;
      var $child207=(($171+16)|0);
      var $arrayidx208=(($child207)|0);
      HEAP32[(($arrayidx208)>>2)]=$170;
      label = 70; break;
    case 69: 
      var $172=$R;
      var $173=$XP;
      var $child210=(($173+16)|0);
      var $arrayidx211=(($child210+4)|0);
      HEAP32[(($arrayidx211)>>2)]=$172;
      label = 70; break;
    case 70: 
      label = 72; break;
    case 71: 
      _abort();
      throw "Reached an unreachable!";
    case 72: 
      label = 73; break;
    case 73: 
      var $174=$R;
      var $cmp216=(($174)|(0))!=0;
      if ($cmp216) { label = 74; break; } else { label = 88; break; }
    case 74: 
      var $175=$R;
      var $176=$175;
      var $177=$m_addr;
      var $least_addr219=(($177+16)|0);
      var $178=HEAP32[(($least_addr219)>>2)];
      var $cmp220=(($176)>>>(0)) >= (($178)>>>(0));
      var $conv221=(($cmp220)&(1));
      var $expval222=($conv221);
      var $tobool223=(($expval222)|(0))!=0;
      if ($tobool223) { label = 75; break; } else { label = 86; break; }
    case 75: 
      var $179=$XP;
      var $180=$R;
      var $parent225=(($180+24)|0);
      HEAP32[(($parent225)>>2)]=$179;
      var $181=$v;
      var $child226=(($181+16)|0);
      var $arrayidx227=(($child226)|0);
      var $182=HEAP32[(($arrayidx227)>>2)];
      $C0=$182;
      var $cmp228=(($182)|(0))!=0;
      if ($cmp228) { label = 76; break; } else { label = 80; break; }
    case 76: 
      var $183=$C0;
      var $184=$183;
      var $185=$m_addr;
      var $least_addr231=(($185+16)|0);
      var $186=HEAP32[(($least_addr231)>>2)];
      var $cmp232=(($184)>>>(0)) >= (($186)>>>(0));
      var $conv233=(($cmp232)&(1));
      var $expval234=($conv233);
      var $tobool235=(($expval234)|(0))!=0;
      if ($tobool235) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $187=$C0;
      var $188=$R;
      var $child237=(($188+16)|0);
      var $arrayidx238=(($child237)|0);
      HEAP32[(($arrayidx238)>>2)]=$187;
      var $189=$R;
      var $190=$C0;
      var $parent239=(($190+24)|0);
      HEAP32[(($parent239)>>2)]=$189;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!";
    case 79: 
      label = 80; break;
    case 80: 
      var $191=$v;
      var $child243=(($191+16)|0);
      var $arrayidx244=(($child243+4)|0);
      var $192=HEAP32[(($arrayidx244)>>2)];
      $C1=$192;
      var $cmp245=(($192)|(0))!=0;
      if ($cmp245) { label = 81; break; } else { label = 85; break; }
    case 81: 
      var $193=$C1;
      var $194=$193;
      var $195=$m_addr;
      var $least_addr248=(($195+16)|0);
      var $196=HEAP32[(($least_addr248)>>2)];
      var $cmp249=(($194)>>>(0)) >= (($196)>>>(0));
      var $conv250=(($cmp249)&(1));
      var $expval251=($conv250);
      var $tobool252=(($expval251)|(0))!=0;
      if ($tobool252) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $197=$C1;
      var $198=$R;
      var $child254=(($198+16)|0);
      var $arrayidx255=(($child254+4)|0);
      HEAP32[(($arrayidx255)>>2)]=$197;
      var $199=$R;
      var $200=$C1;
      var $parent256=(($200+24)|0);
      HEAP32[(($parent256)>>2)]=$199;
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!";
    case 84: 
      label = 85; break;
    case 85: 
      label = 87; break;
    case 86: 
      _abort();
      throw "Reached an unreachable!";
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $201=$rsize;
      var $cmp264=(($201)>>>(0)) < 16;
      if ($cmp264) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $202=$rsize;
      var $203=$nb_addr;
      var $add267=((($202)+($203))|0);
      var $or268=$add267 | 1;
      var $or269=$or268 | 2;
      var $204=$v;
      var $head270=(($204+4)|0);
      HEAP32[(($head270)>>2)]=$or269;
      var $205=$v;
      var $206=$205;
      var $207=$rsize;
      var $208=$nb_addr;
      var $add271=((($207)+($208))|0);
      var $add_ptr272=(($206+$add271)|0);
      var $209=$add_ptr272;
      var $head273=(($209+4)|0);
      var $210=HEAP32[(($head273)>>2)];
      var $or274=$210 | 1;
      HEAP32[(($head273)>>2)]=$or274;
      label = 127; break;
    case 91: 
      var $211=$nb_addr;
      var $or276=$211 | 1;
      var $or277=$or276 | 2;
      var $212=$v;
      var $head278=(($212+4)|0);
      HEAP32[(($head278)>>2)]=$or277;
      var $213=$rsize;
      var $or279=$213 | 1;
      var $214=$r;
      var $head280=(($214+4)|0);
      HEAP32[(($head280)>>2)]=$or279;
      var $215=$rsize;
      var $216=$r;
      var $217=$216;
      var $218=$rsize;
      var $add_ptr281=(($217+$218)|0);
      var $219=$add_ptr281;
      var $prev_foot=(($219)|0);
      HEAP32[(($prev_foot)>>2)]=$215;
      var $220=$rsize;
      var $shr282=$220 >>> 3;
      var $cmp283=(($shr282)>>>(0)) < 32;
      if ($cmp283) { label = 92; break; } else { label = 99; break; }
    case 92: 
      var $221=$rsize;
      var $shr286=$221 >>> 3;
      $I=$shr286;
      var $222=$I;
      var $shl287=$222 << 1;
      var $223=$m_addr;
      var $smallbins=(($223+40)|0);
      var $arrayidx288=(($smallbins+($shl287<<2))|0);
      var $224=$arrayidx288;
      var $225=$224;
      $B=$225;
      var $226=$B;
      $F289=$226;
      var $227=$m_addr;
      var $smallmap=(($227)|0);
      var $228=HEAP32[(($smallmap)>>2)];
      var $229=$I;
      var $shl290=1 << $229;
      var $and291=$228 & $shl290;
      var $tobool292=(($and291)|(0))!=0;
      if ($tobool292) { label = 94; break; } else { label = 93; break; }
    case 93: 
      var $230=$I;
      var $shl294=1 << $230;
      var $231=$m_addr;
      var $smallmap295=(($231)|0);
      var $232=HEAP32[(($smallmap295)>>2)];
      var $or296=$232 | $shl294;
      HEAP32[(($smallmap295)>>2)]=$or296;
      label = 98; break;
    case 94: 
      var $233=$B;
      var $fd298=(($233+8)|0);
      var $234=HEAP32[(($fd298)>>2)];
      var $235=$234;
      var $236=$m_addr;
      var $least_addr299=(($236+16)|0);
      var $237=HEAP32[(($least_addr299)>>2)];
      var $cmp300=(($235)>>>(0)) >= (($237)>>>(0));
      var $conv301=(($cmp300)&(1));
      var $expval302=($conv301);
      var $tobool303=(($expval302)|(0))!=0;
      if ($tobool303) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $238=$B;
      var $fd305=(($238+8)|0);
      var $239=HEAP32[(($fd305)>>2)];
      $F289=$239;
      label = 97; break;
    case 96: 
      _abort();
      throw "Reached an unreachable!";
    case 97: 
      label = 98; break;
    case 98: 
      var $240=$r;
      var $241=$B;
      var $fd309=(($241+8)|0);
      HEAP32[(($fd309)>>2)]=$240;
      var $242=$r;
      var $243=$F289;
      var $bk310=(($243+12)|0);
      HEAP32[(($bk310)>>2)]=$242;
      var $244=$F289;
      var $245=$r;
      var $fd311=(($245+8)|0);
      HEAP32[(($fd311)>>2)]=$244;
      var $246=$B;
      var $247=$r;
      var $bk312=(($247+12)|0);
      HEAP32[(($bk312)>>2)]=$246;
      label = 126; break;
    case 99: 
      var $248=$r;
      var $249=$248;
      $TP=$249;
      var $250=$rsize;
      var $shr317=$250 >>> 8;
      $X316=$shr317;
      var $251=$X316;
      var $cmp318=(($251)|(0))==0;
      if ($cmp318) { label = 100; break; } else { label = 101; break; }
    case 100: 
      $I315=0;
      label = 105; break;
    case 101: 
      var $252=$X316;
      var $cmp322=(($252)>>>(0)) > 65535;
      if ($cmp322) { label = 102; break; } else { label = 103; break; }
    case 102: 
      $I315=31;
      label = 104; break;
    case 103: 
      var $253=$X316;
      $Y326=$253;
      var $254=$Y326;
      var $sub328=((($254)-(256))|0);
      var $shr329=$sub328 >>> 16;
      var $and330=$shr329 & 8;
      $N327=$and330;
      var $255=$N327;
      var $256=$Y326;
      var $shl332=$256 << $255;
      $Y326=$shl332;
      var $sub333=((($shl332)-(4096))|0);
      var $shr334=$sub333 >>> 16;
      var $and335=$shr334 & 4;
      $K331=$and335;
      var $257=$K331;
      var $258=$N327;
      var $add336=((($258)+($257))|0);
      $N327=$add336;
      var $259=$K331;
      var $260=$Y326;
      var $shl337=$260 << $259;
      $Y326=$shl337;
      var $sub338=((($shl337)-(16384))|0);
      var $shr339=$sub338 >>> 16;
      var $and340=$shr339 & 2;
      $K331=$and340;
      var $261=$N327;
      var $add341=((($261)+($and340))|0);
      $N327=$add341;
      var $262=$N327;
      var $sub342=(((14)-($262))|0);
      var $263=$K331;
      var $264=$Y326;
      var $shl343=$264 << $263;
      $Y326=$shl343;
      var $shr344=$shl343 >>> 15;
      var $add345=((($sub342)+($shr344))|0);
      $K331=$add345;
      var $265=$K331;
      var $shl346=$265 << 1;
      var $266=$rsize;
      var $267=$K331;
      var $add347=((($267)+(7))|0);
      var $shr348=$266 >>> (($add347)>>>(0));
      var $and349=$shr348 & 1;
      var $add350=((($shl346)+($and349))|0);
      $I315=$add350;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $268=$I315;
      var $269=$m_addr;
      var $treebins353=(($269+304)|0);
      var $arrayidx354=(($treebins353+($268<<2))|0);
      $H314=$arrayidx354;
      var $270=$I315;
      var $271=$TP;
      var $index355=(($271+28)|0);
      HEAP32[(($index355)>>2)]=$270;
      var $272=$TP;
      var $child356=(($272+16)|0);
      var $arrayidx357=(($child356+4)|0);
      HEAP32[(($arrayidx357)>>2)]=0;
      var $273=$TP;
      var $child358=(($273+16)|0);
      var $arrayidx359=(($child358)|0);
      HEAP32[(($arrayidx359)>>2)]=0;
      var $274=$m_addr;
      var $treemap360=(($274+4)|0);
      var $275=HEAP32[(($treemap360)>>2)];
      var $276=$I315;
      var $shl361=1 << $276;
      var $and362=$275 & $shl361;
      var $tobool363=(($and362)|(0))!=0;
      if ($tobool363) { label = 107; break; } else { label = 106; break; }
    case 106: 
      var $277=$I315;
      var $shl365=1 << $277;
      var $278=$m_addr;
      var $treemap366=(($278+4)|0);
      var $279=HEAP32[(($treemap366)>>2)];
      var $or367=$279 | $shl365;
      HEAP32[(($treemap366)>>2)]=$or367;
      var $280=$TP;
      var $281=$H314;
      HEAP32[(($281)>>2)]=$280;
      var $282=$H314;
      var $283=$282;
      var $284=$TP;
      var $parent368=(($284+24)|0);
      HEAP32[(($parent368)>>2)]=$283;
      var $285=$TP;
      var $286=$TP;
      var $bk369=(($286+12)|0);
      HEAP32[(($bk369)>>2)]=$285;
      var $287=$TP;
      var $fd370=(($287+8)|0);
      HEAP32[(($fd370)>>2)]=$285;
      label = 125; break;
    case 107: 
      var $288=$H314;
      var $289=HEAP32[(($288)>>2)];
      $T=$289;
      var $290=$rsize;
      var $291=$I315;
      var $cmp373=(($291)|(0))==31;
      if ($cmp373) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $cond382 = 0;label = 110; break;
    case 109: 
      var $292=$I315;
      var $shr377=$292 >>> 1;
      var $add378=((($shr377)+(8))|0);
      var $sub379=((($add378)-(2))|0);
      var $sub380=(((31)-($sub379))|0);
      var $cond382 = $sub380;label = 110; break;
    case 110: 
      var $cond382;
      var $shl383=$290 << $cond382;
      $K372=$shl383;
      label = 111; break;
    case 111: 
      var $293=$T;
      var $head385=(($293+4)|0);
      var $294=HEAP32[(($head385)>>2)];
      var $and386=$294 & -8;
      var $295=$rsize;
      var $cmp387=(($and386)|(0))!=(($295)|(0));
      if ($cmp387) { label = 112; break; } else { label = 118; break; }
    case 112: 
      var $296=$K372;
      var $shr390=$296 >>> 31;
      var $and391=$shr390 & 1;
      var $297=$T;
      var $child392=(($297+16)|0);
      var $arrayidx393=(($child392+($and391<<2))|0);
      $C=$arrayidx393;
      var $298=$K372;
      var $shl394=$298 << 1;
      $K372=$shl394;
      var $299=$C;
      var $300=HEAP32[(($299)>>2)];
      var $cmp395=(($300)|(0))!=0;
      if ($cmp395) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $301=$C;
      var $302=HEAP32[(($301)>>2)];
      $T=$302;
      label = 117; break;
    case 114: 
      var $303=$C;
      var $304=$303;
      var $305=$m_addr;
      var $least_addr399=(($305+16)|0);
      var $306=HEAP32[(($least_addr399)>>2)];
      var $cmp400=(($304)>>>(0)) >= (($306)>>>(0));
      var $conv401=(($cmp400)&(1));
      var $expval402=($conv401);
      var $tobool403=(($expval402)|(0))!=0;
      if ($tobool403) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $307=$TP;
      var $308=$C;
      HEAP32[(($308)>>2)]=$307;
      var $309=$T;
      var $310=$TP;
      var $parent405=(($310+24)|0);
      HEAP32[(($parent405)>>2)]=$309;
      var $311=$TP;
      var $312=$TP;
      var $bk406=(($312+12)|0);
      HEAP32[(($bk406)>>2)]=$311;
      var $313=$TP;
      var $fd407=(($313+8)|0);
      HEAP32[(($fd407)>>2)]=$311;
      label = 124; break;
    case 116: 
      _abort();
      throw "Reached an unreachable!";
    case 117: 
      label = 123; break;
    case 118: 
      var $314=$T;
      var $fd412=(($314+8)|0);
      var $315=HEAP32[(($fd412)>>2)];
      $F411=$315;
      var $316=$T;
      var $317=$316;
      var $318=$m_addr;
      var $least_addr413=(($318+16)|0);
      var $319=HEAP32[(($least_addr413)>>2)];
      var $cmp414=(($317)>>>(0)) >= (($319)>>>(0));
      if ($cmp414) { label = 119; break; } else { var $324 = 0;label = 120; break; }
    case 119: 
      var $320=$F411;
      var $321=$320;
      var $322=$m_addr;
      var $least_addr417=(($322+16)|0);
      var $323=HEAP32[(($least_addr417)>>2)];
      var $cmp418=(($321)>>>(0)) >= (($323)>>>(0));
      var $324 = $cmp418;label = 120; break;
    case 120: 
      var $324;
      var $land_ext421=(($324)&(1));
      var $expval422=($land_ext421);
      var $tobool423=(($expval422)|(0))!=0;
      if ($tobool423) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $325=$TP;
      var $326=$F411;
      var $bk425=(($326+12)|0);
      HEAP32[(($bk425)>>2)]=$325;
      var $327=$T;
      var $fd426=(($327+8)|0);
      HEAP32[(($fd426)>>2)]=$325;
      var $328=$F411;
      var $329=$TP;
      var $fd427=(($329+8)|0);
      HEAP32[(($fd427)>>2)]=$328;
      var $330=$T;
      var $331=$TP;
      var $bk428=(($331+12)|0);
      HEAP32[(($bk428)>>2)]=$330;
      var $332=$TP;
      var $parent429=(($332+24)|0);
      HEAP32[(($parent429)>>2)]=0;
      label = 124; break;
    case 122: 
      _abort();
      throw "Reached an unreachable!";
    case 123: 
      label = 111; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      var $333=$v;
      var $334=$333;
      var $add_ptr436=(($334+8)|0);
      $retval=$add_ptr436;
      label = 131; break;
    case 128: 
      label = 129; break;
    case 129: 
      _abort();
      throw "Reached an unreachable!";
    case 130: 
      $retval=0;
      label = 131; break;
    case 131: 
      var $335=$retval;
      return $335;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_alloc($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $asize;
      var $mem;
      var $fp;
      var $br;
      var $ssize;
      var $ss;
      var $base;
      var $fp37;
      var $esize;
      var $end;
      var $br126;
      var $end127;
      var $ssize136;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $0=HEAP32[((((5064)|0))>>2)];
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|(0))!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&(1));
      var $2=$m_addr;
      var $mflags=(($2+444)|0);
      var $3=HEAP32[(($mflags)>>2)];
      var $and=$3 & 0;
      var $tobool1=(($and)|(0))!=0;
      if ($tobool1) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $4=$nb_addr;
      var $5=HEAP32[((((5076)|0))>>2)];
      var $cmp2=(($4)>>>(0)) >= (($5)>>>(0));
      if ($cmp2) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $cmp4=(($7)|(0))!=0;
      if ($cmp4) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $8=$m_addr;
      var $9=$nb_addr;
      var $call5=_mmap_alloc($8, $9);
      $mem=$call5;
      var $10=$mem;
      var $cmp6=(($10)|(0))!=0;
      if ($cmp6) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $11=$mem;
      $retval=$11;
      label = 104; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $12=$nb_addr;
      var $add=((($12)+(48))|0);
      var $13=HEAP32[((((5072)|0))>>2)];
      var $sub=((($13)-(1))|0);
      var $add9=((($add)+($sub))|0);
      var $14=HEAP32[((((5072)|0))>>2)];
      var $sub10=((($14)-(1))|0);
      var $neg=$sub10 ^ -1;
      var $and11=$add9 & $neg;
      $asize=$and11;
      var $15=$asize;
      var $16=$nb_addr;
      var $cmp12=(($15)>>>(0)) <= (($16)>>>(0));
      if ($cmp12) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $retval=0;
      label = 104; break;
    case 12: 
      var $17=$m_addr;
      var $footprint_limit=(($17+440)|0);
      var $18=HEAP32[(($footprint_limit)>>2)];
      var $cmp15=(($18)|(0))!=0;
      if ($cmp15) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $19=$m_addr;
      var $footprint=(($19+432)|0);
      var $20=HEAP32[(($footprint)>>2)];
      var $21=$asize;
      var $add17=((($20)+($21))|0);
      $fp=$add17;
      var $22=$fp;
      var $23=$m_addr;
      var $footprint18=(($23+432)|0);
      var $24=HEAP32[(($footprint18)>>2)];
      var $cmp19=(($22)>>>(0)) <= (($24)>>>(0));
      if ($cmp19) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $25=$fp;
      var $26=$m_addr;
      var $footprint_limit20=(($26+440)|0);
      var $27=HEAP32[(($footprint_limit20)>>2)];
      var $cmp21=(($25)>>>(0)) > (($27)>>>(0));
      if ($cmp21) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $retval=0;
      label = 104; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $28=$m_addr;
      var $mflags25=(($28+444)|0);
      var $29=HEAP32[(($mflags25)>>2)];
      var $and26=$29 & 4;
      var $tobool27=(($and26)|(0))!=0;
      if ($tobool27) { label = 54; break; } else { label = 18; break; }
    case 18: 
      $br=-1;
      var $30=$asize;
      $ssize=$30;
      var $31=$m_addr;
      var $top=(($31+24)|0);
      var $32=HEAP32[(($top)>>2)];
      var $cmp29=(($32)|(0))==0;
      if ($cmp29) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $cond = 0;label = 21; break;
    case 20: 
      var $33=$m_addr;
      var $34=$m_addr;
      var $top30=(($34+24)|0);
      var $35=HEAP32[(($top30)>>2)];
      var $36=$35;
      var $call31=_segment_holding($33, $36);
      var $cond = $call31;label = 21; break;
    case 21: 
      var $cond;
      $ss=$cond;
      var $37=$ss;
      var $cmp32=(($37)|(0))==0;
      if ($cmp32) { label = 22; break; } else { label = 34; break; }
    case 22: 
      var $call34=_sbrk(0);
      $base=$call34;
      var $38=$base;
      var $cmp35=(($38)|(0))!=-1;
      if ($cmp35) { label = 23; break; } else { label = 33; break; }
    case 23: 
      var $39=$base;
      var $40=$39;
      var $41=HEAP32[((((5068)|0))>>2)];
      var $sub38=((($41)-(1))|0);
      var $and39=$40 & $sub38;
      var $cmp40=(($and39)|(0))==0;
      if ($cmp40) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $42=$base;
      var $43=$42;
      var $44=HEAP32[((((5068)|0))>>2)];
      var $sub42=((($44)-(1))|0);
      var $add43=((($43)+($sub42))|0);
      var $45=HEAP32[((((5068)|0))>>2)];
      var $sub44=((($45)-(1))|0);
      var $neg45=$sub44 ^ -1;
      var $and46=$add43 & $neg45;
      var $46=$base;
      var $47=$46;
      var $sub47=((($and46)-($47))|0);
      var $48=$ssize;
      var $add48=((($48)+($sub47))|0);
      $ssize=$add48;
      label = 25; break;
    case 25: 
      var $49=$m_addr;
      var $footprint50=(($49+432)|0);
      var $50=HEAP32[(($footprint50)>>2)];
      var $51=$ssize;
      var $add51=((($50)+($51))|0);
      $fp37=$add51;
      var $52=$ssize;
      var $53=$nb_addr;
      var $cmp52=(($52)>>>(0)) > (($53)>>>(0));
      if ($cmp52) { label = 26; break; } else { label = 32; break; }
    case 26: 
      var $54=$ssize;
      var $cmp54=(($54)>>>(0)) < 2147483647;
      if ($cmp54) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $55=$m_addr;
      var $footprint_limit56=(($55+440)|0);
      var $56=HEAP32[(($footprint_limit56)>>2)];
      var $cmp57=(($56)|(0))==0;
      if ($cmp57) { label = 30; break; } else { label = 28; break; }
    case 28: 
      var $57=$fp37;
      var $58=$m_addr;
      var $footprint59=(($58+432)|0);
      var $59=HEAP32[(($footprint59)>>2)];
      var $cmp60=(($57)>>>(0)) > (($59)>>>(0));
      if ($cmp60) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $60=$fp37;
      var $61=$m_addr;
      var $footprint_limit62=(($61+440)|0);
      var $62=HEAP32[(($footprint_limit62)>>2)];
      var $cmp63=(($60)>>>(0)) <= (($62)>>>(0));
      if ($cmp63) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $63=$ssize;
      var $call65=_sbrk($63);
      $br=$call65;
      var $64=$base;
      var $cmp66=(($call65)|(0))==(($64)|(0));
      if ($cmp66) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $65=$base;
      $tbase=$65;
      var $66=$ssize;
      $tsize=$66;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 38; break;
    case 34: 
      var $67=$nb_addr;
      var $68=$m_addr;
      var $topsize70=(($68+12)|0);
      var $69=HEAP32[(($topsize70)>>2)];
      var $sub71=((($67)-($69))|0);
      var $add72=((($sub71)+(48))|0);
      var $70=HEAP32[((((5072)|0))>>2)];
      var $sub73=((($70)-(1))|0);
      var $add74=((($add72)+($sub73))|0);
      var $71=HEAP32[((((5072)|0))>>2)];
      var $sub75=((($71)-(1))|0);
      var $neg76=$sub75 ^ -1;
      var $and77=$add74 & $neg76;
      $ssize=$and77;
      var $72=$ssize;
      var $cmp78=(($72)>>>(0)) < 2147483647;
      if ($cmp78) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $73=$ssize;
      var $call80=_sbrk($73);
      $br=$call80;
      var $74=$ss;
      var $base81=(($74)|0);
      var $75=HEAP32[(($base81)>>2)];
      var $76=$ss;
      var $size=(($76+4)|0);
      var $77=HEAP32[(($size)>>2)];
      var $add_ptr=(($75+$77)|0);
      var $cmp82=(($call80)|(0))==(($add_ptr)|(0));
      if ($cmp82) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $78=$br;
      $tbase=$78;
      var $79=$ssize;
      $tsize=$79;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $80=$tbase;
      var $cmp86=(($80)|(0))==-1;
      if ($cmp86) { label = 39; break; } else { label = 53; break; }
    case 39: 
      var $81=$br;
      var $cmp88=(($81)|(0))!=-1;
      if ($cmp88) { label = 40; break; } else { label = 49; break; }
    case 40: 
      var $82=$ssize;
      var $cmp90=(($82)>>>(0)) < 2147483647;
      if ($cmp90) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $83=$ssize;
      var $84=$nb_addr;
      var $add92=((($84)+(48))|0);
      var $cmp93=(($83)>>>(0)) < (($add92)>>>(0));
      if ($cmp93) { label = 42; break; } else { label = 48; break; }
    case 42: 
      var $85=$nb_addr;
      var $add95=((($85)+(48))|0);
      var $86=$ssize;
      var $sub96=((($add95)-($86))|0);
      var $87=HEAP32[((((5072)|0))>>2)];
      var $sub97=((($87)-(1))|0);
      var $add98=((($sub96)+($sub97))|0);
      var $88=HEAP32[((((5072)|0))>>2)];
      var $sub99=((($88)-(1))|0);
      var $neg100=$sub99 ^ -1;
      var $and101=$add98 & $neg100;
      $esize=$and101;
      var $89=$esize;
      var $cmp102=(($89)>>>(0)) < 2147483647;
      if ($cmp102) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $90=$esize;
      var $call104=_sbrk($90);
      $end=$call104;
      var $91=$end;
      var $cmp105=(($91)|(0))!=-1;
      if ($cmp105) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $92=$esize;
      var $93=$ssize;
      var $add107=((($93)+($92))|0);
      $ssize=$add107;
      label = 46; break;
    case 45: 
      var $94=$ssize;
      var $sub109=(((-$94))|0);
      var $call110=_sbrk($sub109);
      $br=-1;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $95=$br;
      var $cmp115=(($95)|(0))!=-1;
      if ($cmp115) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $96=$br;
      $tbase=$96;
      var $97=$ssize;
      $tsize=$97;
      label = 52; break;
    case 51: 
      var $98=$m_addr;
      var $mflags118=(($98+444)|0);
      var $99=HEAP32[(($mflags118)>>2)];
      var $or=$99 | 4;
      HEAP32[(($mflags118)>>2)]=$or;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $100=$tbase;
      var $cmp122=(($100)|(0))==-1;
      if ($cmp122) { label = 55; break; } else { label = 64; break; }
    case 55: 
      var $101=$asize;
      var $cmp124=(($101)>>>(0)) < 2147483647;
      if ($cmp124) { label = 56; break; } else { label = 63; break; }
    case 56: 
      $br126=-1;
      $end127=-1;
      var $102=$asize;
      var $call128=_sbrk($102);
      $br126=$call128;
      var $call129=_sbrk(0);
      $end127=$call129;
      var $103=$br126;
      var $cmp130=(($103)|(0))!=-1;
      if ($cmp130) { label = 57; break; } else { label = 62; break; }
    case 57: 
      var $104=$end127;
      var $cmp132=(($104)|(0))!=-1;
      if ($cmp132) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $105=$br126;
      var $106=$end127;
      var $cmp134=(($105)>>>(0)) < (($106)>>>(0));
      if ($cmp134) { label = 59; break; } else { label = 62; break; }
    case 59: 
      var $107=$end127;
      var $108=$br126;
      var $sub_ptr_lhs_cast=$107;
      var $sub_ptr_rhs_cast=$108;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $ssize136=$sub_ptr_sub;
      var $109=$ssize136;
      var $110=$nb_addr;
      var $add137=((($110)+(40))|0);
      var $cmp138=(($109)>>>(0)) > (($add137)>>>(0));
      if ($cmp138) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $111=$br126;
      $tbase=$111;
      var $112=$ssize136;
      $tsize=$112;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $113=$tbase;
      var $cmp144=(($113)|(0))!=-1;
      if ($cmp144) { label = 65; break; } else { label = 103; break; }
    case 65: 
      var $114=$tsize;
      var $115=$m_addr;
      var $footprint146=(($115+432)|0);
      var $116=HEAP32[(($footprint146)>>2)];
      var $add147=((($116)+($114))|0);
      HEAP32[(($footprint146)>>2)]=$add147;
      var $117=$m_addr;
      var $max_footprint=(($117+436)|0);
      var $118=HEAP32[(($max_footprint)>>2)];
      var $cmp148=(($add147)>>>(0)) > (($118)>>>(0));
      if ($cmp148) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $119=$m_addr;
      var $footprint150=(($119+432)|0);
      var $120=HEAP32[(($footprint150)>>2)];
      var $121=$m_addr;
      var $max_footprint151=(($121+436)|0);
      HEAP32[(($max_footprint151)>>2)]=$120;
      label = 67; break;
    case 67: 
      var $122=$m_addr;
      var $top153=(($122+24)|0);
      var $123=HEAP32[(($top153)>>2)];
      var $cmp154=(($123)|(0))!=0;
      if ($cmp154) { label = 75; break; } else { label = 68; break; }
    case 68: 
      var $124=$m_addr;
      var $least_addr=(($124+16)|0);
      var $125=HEAP32[(($least_addr)>>2)];
      var $cmp156=(($125)|(0))==0;
      if ($cmp156) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $126=$tbase;
      var $127=$m_addr;
      var $least_addr158=(($127+16)|0);
      var $128=HEAP32[(($least_addr158)>>2)];
      var $cmp159=(($126)>>>(0)) < (($128)>>>(0));
      if ($cmp159) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $129=$tbase;
      var $130=$m_addr;
      var $least_addr161=(($130+16)|0);
      HEAP32[(($least_addr161)>>2)]=$129;
      label = 71; break;
    case 71: 
      var $131=$tbase;
      var $132=$m_addr;
      var $seg=(($132+448)|0);
      var $base163=(($seg)|0);
      HEAP32[(($base163)>>2)]=$131;
      var $133=$tsize;
      var $134=$m_addr;
      var $seg164=(($134+448)|0);
      var $size165=(($seg164+4)|0);
      HEAP32[(($size165)>>2)]=$133;
      var $135=$mmap_flag;
      var $136=$m_addr;
      var $seg166=(($136+448)|0);
      var $sflags=(($seg166+12)|0);
      HEAP32[(($sflags)>>2)]=$135;
      var $137=HEAP32[((((5064)|0))>>2)];
      var $138=$m_addr;
      var $magic=(($138+36)|0);
      HEAP32[(($magic)>>2)]=$137;
      var $139=$m_addr;
      var $release_checks=(($139+32)|0);
      HEAP32[(($release_checks)>>2)]=-1;
      var $140=$m_addr;
      _init_bins($140);
      var $141=$m_addr;
      var $cmp167=(($141)|(0))==17680;
      if ($cmp167) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $142=$m_addr;
      var $143=$tbase;
      var $144=$143;
      var $145=$tsize;
      var $sub169=((($145)-(40))|0);
      _init_top($142, $144, $sub169);
      label = 74; break;
    case 73: 
      var $146=$m_addr;
      var $147=$146;
      var $add_ptr171=((($147)-(8))|0);
      var $148=$add_ptr171;
      var $149=$148;
      var $150=$m_addr;
      var $151=$150;
      var $add_ptr172=((($151)-(8))|0);
      var $152=$add_ptr172;
      var $head=(($152+4)|0);
      var $153=HEAP32[(($head)>>2)];
      var $and173=$153 & -8;
      var $add_ptr174=(($149+$and173)|0);
      var $154=$add_ptr174;
      $mn=$154;
      var $155=$m_addr;
      var $156=$mn;
      var $157=$tbase;
      var $158=$tsize;
      var $add_ptr175=(($157+$158)|0);
      var $159=$mn;
      var $160=$159;
      var $sub_ptr_lhs_cast176=$add_ptr175;
      var $sub_ptr_rhs_cast177=$160;
      var $sub_ptr_sub178=((($sub_ptr_lhs_cast176)-($sub_ptr_rhs_cast177))|0);
      var $sub179=((($sub_ptr_sub178)-(40))|0);
      _init_top($155, $156, $sub179);
      label = 74; break;
    case 74: 
      label = 100; break;
    case 75: 
      var $161=$m_addr;
      var $seg182=(($161+448)|0);
      $sp=$seg182;
      label = 76; break;
    case 76: 
      var $162=$sp;
      var $cmp183=(($162)|(0))!=0;
      if ($cmp183) { label = 77; break; } else { var $168 = 0;label = 78; break; }
    case 77: 
      var $163=$tbase;
      var $164=$sp;
      var $base184=(($164)|0);
      var $165=HEAP32[(($base184)>>2)];
      var $166=$sp;
      var $size185=(($166+4)|0);
      var $167=HEAP32[(($size185)>>2)];
      var $add_ptr186=(($165+$167)|0);
      var $cmp187=(($163)|(0))!=(($add_ptr186)|(0));
      var $168 = $cmp187;label = 78; break;
    case 78: 
      var $168;
      if ($168) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $169=$sp;
      var $next=(($169+8)|0);
      var $170=HEAP32[(($next)>>2)];
      $sp=$170;
      label = 76; break;
    case 80: 
      var $171=$sp;
      var $cmp188=(($171)|(0))!=0;
      if ($cmp188) { label = 81; break; } else { label = 86; break; }
    case 81: 
      var $172=$sp;
      var $sflags190=(($172+12)|0);
      var $173=HEAP32[(($sflags190)>>2)];
      var $and191=$173 & 8;
      var $tobool192=(($and191)|(0))!=0;
      if ($tobool192) { label = 86; break; } else { label = 82; break; }
    case 82: 
      var $174=$sp;
      var $sflags194=(($174+12)|0);
      var $175=HEAP32[(($sflags194)>>2)];
      var $and195=$175 & 0;
      var $176=$mmap_flag;
      var $cmp196=(($and195)|(0))==(($176)|(0));
      if ($cmp196) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $177=$m_addr;
      var $top198=(($177+24)|0);
      var $178=HEAP32[(($top198)>>2)];
      var $179=$178;
      var $180=$sp;
      var $base199=(($180)|0);
      var $181=HEAP32[(($base199)>>2)];
      var $cmp200=(($179)>>>(0)) >= (($181)>>>(0));
      if ($cmp200) { label = 84; break; } else { label = 86; break; }
    case 84: 
      var $182=$m_addr;
      var $top202=(($182+24)|0);
      var $183=HEAP32[(($top202)>>2)];
      var $184=$183;
      var $185=$sp;
      var $base203=(($185)|0);
      var $186=HEAP32[(($base203)>>2)];
      var $187=$sp;
      var $size204=(($187+4)|0);
      var $188=HEAP32[(($size204)>>2)];
      var $add_ptr205=(($186+$188)|0);
      var $cmp206=(($184)>>>(0)) < (($add_ptr205)>>>(0));
      if ($cmp206) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $189=$tsize;
      var $190=$sp;
      var $size208=(($190+4)|0);
      var $191=HEAP32[(($size208)>>2)];
      var $add209=((($191)+($189))|0);
      HEAP32[(($size208)>>2)]=$add209;
      var $192=$m_addr;
      var $193=$m_addr;
      var $top210=(($193+24)|0);
      var $194=HEAP32[(($top210)>>2)];
      var $195=$m_addr;
      var $topsize211=(($195+12)|0);
      var $196=HEAP32[(($topsize211)>>2)];
      var $197=$tsize;
      var $add212=((($196)+($197))|0);
      _init_top($192, $194, $add212);
      label = 99; break;
    case 86: 
      var $198=$tbase;
      var $199=$m_addr;
      var $least_addr214=(($199+16)|0);
      var $200=HEAP32[(($least_addr214)>>2)];
      var $cmp215=(($198)>>>(0)) < (($200)>>>(0));
      if ($cmp215) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $201=$tbase;
      var $202=$m_addr;
      var $least_addr217=(($202+16)|0);
      HEAP32[(($least_addr217)>>2)]=$201;
      label = 88; break;
    case 88: 
      var $203=$m_addr;
      var $seg219=(($203+448)|0);
      $sp=$seg219;
      label = 89; break;
    case 89: 
      var $204=$sp;
      var $cmp221=(($204)|(0))!=0;
      if ($cmp221) { label = 90; break; } else { var $209 = 0;label = 91; break; }
    case 90: 
      var $205=$sp;
      var $base223=(($205)|0);
      var $206=HEAP32[(($base223)>>2)];
      var $207=$tbase;
      var $208=$tsize;
      var $add_ptr224=(($207+$208)|0);
      var $cmp225=(($206)|(0))!=(($add_ptr224)|(0));
      var $209 = $cmp225;label = 91; break;
    case 91: 
      var $209;
      if ($209) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $210=$sp;
      var $next228=(($210+8)|0);
      var $211=HEAP32[(($next228)>>2)];
      $sp=$211;
      label = 89; break;
    case 93: 
      var $212=$sp;
      var $cmp230=(($212)|(0))!=0;
      if ($cmp230) { label = 94; break; } else { label = 97; break; }
    case 94: 
      var $213=$sp;
      var $sflags232=(($213+12)|0);
      var $214=HEAP32[(($sflags232)>>2)];
      var $and233=$214 & 8;
      var $tobool234=(($and233)|(0))!=0;
      if ($tobool234) { label = 97; break; } else { label = 95; break; }
    case 95: 
      var $215=$sp;
      var $sflags236=(($215+12)|0);
      var $216=HEAP32[(($sflags236)>>2)];
      var $and237=$216 & 0;
      var $217=$mmap_flag;
      var $cmp238=(($and237)|(0))==(($217)|(0));
      if ($cmp238) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $218=$sp;
      var $base240=(($218)|0);
      var $219=HEAP32[(($base240)>>2)];
      $oldbase=$219;
      var $220=$tbase;
      var $221=$sp;
      var $base241=(($221)|0);
      HEAP32[(($base241)>>2)]=$220;
      var $222=$tsize;
      var $223=$sp;
      var $size242=(($223+4)|0);
      var $224=HEAP32[(($size242)>>2)];
      var $add243=((($224)+($222))|0);
      HEAP32[(($size242)>>2)]=$add243;
      var $225=$m_addr;
      var $226=$tbase;
      var $227=$oldbase;
      var $228=$nb_addr;
      var $call244=_prepend_alloc($225, $226, $227, $228);
      $retval=$call244;
      label = 104; break;
    case 97: 
      var $229=$m_addr;
      var $230=$tbase;
      var $231=$tsize;
      var $232=$mmap_flag;
      _add_segment($229, $230, $231, $232);
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      var $233=$nb_addr;
      var $234=$m_addr;
      var $topsize249=(($234+12)|0);
      var $235=HEAP32[(($topsize249)>>2)];
      var $cmp250=(($233)>>>(0)) < (($235)>>>(0));
      if ($cmp250) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $236=$nb_addr;
      var $237=$m_addr;
      var $topsize252=(($237+12)|0);
      var $238=HEAP32[(($topsize252)>>2)];
      var $sub253=((($238)-($236))|0);
      HEAP32[(($topsize252)>>2)]=$sub253;
      $rsize=$sub253;
      var $239=$m_addr;
      var $top254=(($239+24)|0);
      var $240=HEAP32[(($top254)>>2)];
      $p=$240;
      var $241=$p;
      var $242=$241;
      var $243=$nb_addr;
      var $add_ptr255=(($242+$243)|0);
      var $244=$add_ptr255;
      var $245=$m_addr;
      var $top256=(($245+24)|0);
      HEAP32[(($top256)>>2)]=$244;
      $r=$244;
      var $246=$rsize;
      var $or257=$246 | 1;
      var $247=$r;
      var $head258=(($247+4)|0);
      HEAP32[(($head258)>>2)]=$or257;
      var $248=$nb_addr;
      var $or259=$248 | 1;
      var $or260=$or259 | 2;
      var $249=$p;
      var $head261=(($249+4)|0);
      HEAP32[(($head261)>>2)]=$or260;
      var $250=$p;
      var $251=$250;
      var $add_ptr262=(($251+8)|0);
      $retval=$add_ptr262;
      label = 104; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $call265=___errno_location();
      HEAP32[(($call265)>>2)]=12;
      $retval=0;
      label = 104; break;
    case 104: 
      var $252=$retval;
      return $252;
    default: assert(0, "bad label: " + label);
  }
}
function _free($mem) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F77;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F271;
      var $B273;
      var $I275;
      var $TP328;
      var $XP329;
      var $R331;
      var $F336;
      var $RP359;
      var $CP370;
      var $H397;
      var $C0439;
      var $C1440;
      var $I501;
      var $B503;
      var $F506;
      var $tp;
      var $H529;
      var $I530;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K579;
      var $C;
      var $F612;
      $mem_addr=$mem;
      var $0=$mem_addr;
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 215; break; }
    case 3: 
      var $1=$mem_addr;
      var $add_ptr=((($1)-(8))|0);
      var $2=$add_ptr;
      $p=$2;
      var $3=$p;
      var $4=$3;
      var $5=HEAP32[((((17696)|0))>>2)];
      var $cmp1=(($4)>>>(0)) >= (($5)>>>(0));
      if ($cmp1) { label = 4; break; } else { var $8 = 0;label = 5; break; }
    case 4: 
      var $6=$p;
      var $head=(($6+4)|0);
      var $7=HEAP32[(($head)>>2)];
      var $and=$7 & 3;
      var $cmp2=(($and)|(0))!=1;
      var $8 = $cmp2;label = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&(1));
      var $expval=($land_ext);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 6; break; } else { label = 212; break; }
    case 6: 
      var $9=$p;
      var $head4=(($9+4)|0);
      var $10=HEAP32[(($head4)>>2)];
      var $and5=$10 & -8;
      $psize=$and5;
      var $11=$p;
      var $12=$11;
      var $13=$psize;
      var $add_ptr6=(($12+$13)|0);
      var $14=$add_ptr6;
      $next=$14;
      var $15=$p;
      var $head7=(($15+4)|0);
      var $16=HEAP32[(($head7)>>2)];
      var $and8=$16 & 1;
      var $tobool9=(($and8)|(0))!=0;
      if ($tobool9) { label = 87; break; } else { label = 7; break; }
    case 7: 
      var $17=$p;
      var $prev_foot=(($17)|0);
      var $18=HEAP32[(($prev_foot)>>2)];
      $prevsize=$18;
      var $19=$p;
      var $head11=(($19+4)|0);
      var $20=HEAP32[(($head11)>>2)];
      var $and12=$20 & 3;
      var $cmp13=(($and12)|(0))==0;
      if ($cmp13) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $21=$prevsize;
      var $add=((($21)+(16))|0);
      var $22=$psize;
      var $add15=((($22)+($add))|0);
      $psize=$add15;
      label = 214; break;
    case 9: 
      var $23=$p;
      var $24=$23;
      var $25=$prevsize;
      var $idx_neg=(((-$25))|0);
      var $add_ptr16=(($24+$idx_neg)|0);
      var $26=$add_ptr16;
      $prev=$26;
      var $27=$prevsize;
      var $28=$psize;
      var $add17=((($28)+($27))|0);
      $psize=$add17;
      var $29=$prev;
      $p=$29;
      var $30=$prev;
      var $31=$30;
      var $32=HEAP32[((((17696)|0))>>2)];
      var $cmp18=(($31)>>>(0)) >= (($32)>>>(0));
      var $conv=(($cmp18)&(1));
      var $expval19=($conv);
      var $tobool20=(($expval19)|(0))!=0;
      if ($tobool20) { label = 10; break; } else { label = 84; break; }
    case 10: 
      var $33=$p;
      var $34=HEAP32[((((17700)|0))>>2)];
      var $cmp22=(($33)|(0))!=(($34)|(0));
      if ($cmp22) { label = 11; break; } else { label = 80; break; }
    case 11: 
      var $35=$prevsize;
      var $shr=$35 >>> 3;
      var $cmp25=(($shr)>>>(0)) < 32;
      if ($cmp25) { label = 12; break; } else { label = 30; break; }
    case 12: 
      var $36=$p;
      var $fd=(($36+8)|0);
      var $37=HEAP32[(($fd)>>2)];
      $F=$37;
      var $38=$p;
      var $bk=(($38+12)|0);
      var $39=HEAP32[(($bk)>>2)];
      $B=$39;
      var $40=$prevsize;
      var $shr28=$40 >>> 3;
      $I=$shr28;
      var $41=$F;
      var $42=$I;
      var $shl=$42 << 1;
      var $arrayidx=((((17720)|0)+($shl<<2))|0);
      var $43=$arrayidx;
      var $44=$43;
      var $cmp29=(($41)|(0))==(($44)|(0));
      if ($cmp29) { var $52 = 1;label = 16; break; } else { label = 13; break; }
    case 13: 
      var $45=$F;
      var $46=$45;
      var $47=HEAP32[((((17696)|0))>>2)];
      var $cmp31=(($46)>>>(0)) >= (($47)>>>(0));
      if ($cmp31) { label = 14; break; } else { var $51 = 0;label = 15; break; }
    case 14: 
      var $48=$F;
      var $bk34=(($48+12)|0);
      var $49=HEAP32[(($bk34)>>2)];
      var $50=$p;
      var $cmp35=(($49)|(0))==(($50)|(0));
      var $51 = $cmp35;label = 15; break;
    case 15: 
      var $51;
      var $52 = $51;label = 16; break;
    case 16: 
      var $52;
      var $lor_ext=(($52)&(1));
      var $expval39=($lor_ext);
      var $tobool40=(($expval39)|(0))!=0;
      if ($tobool40) { label = 17; break; } else { label = 28; break; }
    case 17: 
      var $53=$B;
      var $54=$F;
      var $cmp42=(($53)|(0))==(($54)|(0));
      if ($cmp42) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $55=$I;
      var $shl45=1 << $55;
      var $neg=$shl45 ^ -1;
      var $56=HEAP32[((((17680)|0))>>2)];
      var $and46=$56 & $neg;
      HEAP32[((((17680)|0))>>2)]=$and46;
      label = 27; break;
    case 19: 
      var $57=$B;
      var $58=$I;
      var $shl48=$58 << 1;
      var $arrayidx49=((((17720)|0)+($shl48<<2))|0);
      var $59=$arrayidx49;
      var $60=$59;
      var $cmp50=(($57)|(0))==(($60)|(0));
      if ($cmp50) { var $68 = 1;label = 23; break; } else { label = 20; break; }
    case 20: 
      var $61=$B;
      var $62=$61;
      var $63=HEAP32[((((17696)|0))>>2)];
      var $cmp53=(($62)>>>(0)) >= (($63)>>>(0));
      if ($cmp53) { label = 21; break; } else { var $67 = 0;label = 22; break; }
    case 21: 
      var $64=$B;
      var $fd56=(($64+8)|0);
      var $65=HEAP32[(($fd56)>>2)];
      var $66=$p;
      var $cmp57=(($65)|(0))==(($66)|(0));
      var $67 = $cmp57;label = 22; break;
    case 22: 
      var $67;
      var $68 = $67;label = 23; break;
    case 23: 
      var $68;
      var $lor_ext62=(($68)&(1));
      var $expval63=($lor_ext62);
      var $tobool64=(($expval63)|(0))!=0;
      if ($tobool64) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $69=$B;
      var $70=$F;
      var $bk66=(($70+12)|0);
      HEAP32[(($bk66)>>2)]=$69;
      var $71=$F;
      var $72=$B;
      var $fd67=(($72+8)|0);
      HEAP32[(($fd67)>>2)]=$71;
      label = 26; break;
    case 25: 
      _abort();
      throw "Reached an unreachable!";
    case 26: 
      label = 27; break;
    case 27: 
      label = 29; break;
    case 28: 
      _abort();
      throw "Reached an unreachable!";
    case 29: 
      label = 79; break;
    case 30: 
      var $73=$p;
      var $74=$73;
      $TP=$74;
      var $75=$TP;
      var $parent=(($75+24)|0);
      var $76=HEAP32[(($parent)>>2)];
      $XP=$76;
      var $77=$TP;
      var $bk73=(($77+12)|0);
      var $78=HEAP32[(($bk73)>>2)];
      var $79=$TP;
      var $cmp74=(($78)|(0))!=(($79)|(0));
      if ($cmp74) { label = 31; break; } else { label = 38; break; }
    case 31: 
      var $80=$TP;
      var $fd78=(($80+8)|0);
      var $81=HEAP32[(($fd78)>>2)];
      $F77=$81;
      var $82=$TP;
      var $bk79=(($82+12)|0);
      var $83=HEAP32[(($bk79)>>2)];
      $R=$83;
      var $84=$F77;
      var $85=$84;
      var $86=HEAP32[((((17696)|0))>>2)];
      var $cmp80=(($85)>>>(0)) >= (($86)>>>(0));
      if ($cmp80) { label = 32; break; } else { var $93 = 0;label = 34; break; }
    case 32: 
      var $87=$F77;
      var $bk82=(($87+12)|0);
      var $88=HEAP32[(($bk82)>>2)];
      var $89=$TP;
      var $cmp83=(($88)|(0))==(($89)|(0));
      if ($cmp83) { label = 33; break; } else { var $93 = 0;label = 34; break; }
    case 33: 
      var $90=$R;
      var $fd86=(($90+8)|0);
      var $91=HEAP32[(($fd86)>>2)];
      var $92=$TP;
      var $cmp87=(($91)|(0))==(($92)|(0));
      var $93 = $cmp87;label = 34; break;
    case 34: 
      var $93;
      var $land_ext90=(($93)&(1));
      var $expval91=($land_ext90);
      var $tobool92=(($expval91)|(0))!=0;
      if ($tobool92) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $94=$R;
      var $95=$F77;
      var $bk94=(($95+12)|0);
      HEAP32[(($bk94)>>2)]=$94;
      var $96=$F77;
      var $97=$R;
      var $fd95=(($97+8)|0);
      HEAP32[(($fd95)>>2)]=$96;
      label = 37; break;
    case 36: 
      _abort();
      throw "Reached an unreachable!";
    case 37: 
      label = 50; break;
    case 38: 
      var $98=$TP;
      var $child=(($98+16)|0);
      var $arrayidx99=(($child+4)|0);
      $RP=$arrayidx99;
      var $99=HEAP32[(($arrayidx99)>>2)];
      $R=$99;
      var $cmp100=(($99)|(0))!=0;
      if ($cmp100) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $100=$TP;
      var $child102=(($100+16)|0);
      var $arrayidx103=(($child102)|0);
      $RP=$arrayidx103;
      var $101=HEAP32[(($arrayidx103)>>2)];
      $R=$101;
      var $cmp104=(($101)|(0))!=0;
      if ($cmp104) { label = 40; break; } else { label = 49; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $102=$R;
      var $child107=(($102+16)|0);
      var $arrayidx108=(($child107+4)|0);
      $CP=$arrayidx108;
      var $103=HEAP32[(($arrayidx108)>>2)];
      var $cmp109=(($103)|(0))!=0;
      if ($cmp109) { var $106 = 1;label = 43; break; } else { label = 42; break; }
    case 42: 
      var $104=$R;
      var $child112=(($104+16)|0);
      var $arrayidx113=(($child112)|0);
      $CP=$arrayidx113;
      var $105=HEAP32[(($arrayidx113)>>2)];
      var $cmp114=(($105)|(0))!=0;
      var $106 = $cmp114;label = 43; break;
    case 43: 
      var $106;
      if ($106) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $107=$CP;
      $RP=$107;
      var $108=HEAP32[(($107)>>2)];
      $R=$108;
      label = 41; break;
    case 45: 
      var $109=$RP;
      var $110=$109;
      var $111=HEAP32[((((17696)|0))>>2)];
      var $cmp118=(($110)>>>(0)) >= (($111)>>>(0));
      var $conv119=(($cmp118)&(1));
      var $expval120=($conv119);
      var $tobool121=(($expval120)|(0))!=0;
      if ($tobool121) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $112=$RP;
      HEAP32[(($112)>>2)]=0;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!";
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $113=$XP;
      var $cmp127=(($113)|(0))!=0;
      if ($cmp127) { label = 51; break; } else { label = 78; break; }
    case 51: 
      var $114=$TP;
      var $index=(($114+28)|0);
      var $115=HEAP32[(($index)>>2)];
      var $arrayidx130=((((17984)|0)+($115<<2))|0);
      $H=$arrayidx130;
      var $116=$TP;
      var $117=$H;
      var $118=HEAP32[(($117)>>2)];
      var $cmp131=(($116)|(0))==(($118)|(0));
      if ($cmp131) { label = 52; break; } else { label = 55; break; }
    case 52: 
      var $119=$R;
      var $120=$H;
      HEAP32[(($120)>>2)]=$119;
      var $cmp134=(($119)|(0))==0;
      if ($cmp134) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $121=$TP;
      var $index137=(($121+28)|0);
      var $122=HEAP32[(($index137)>>2)];
      var $shl138=1 << $122;
      var $neg139=$shl138 ^ -1;
      var $123=HEAP32[((((17684)|0))>>2)];
      var $and140=$123 & $neg139;
      HEAP32[((((17684)|0))>>2)]=$and140;
      label = 54; break;
    case 54: 
      label = 62; break;
    case 55: 
      var $124=$XP;
      var $125=$124;
      var $126=HEAP32[((((17696)|0))>>2)];
      var $cmp143=(($125)>>>(0)) >= (($126)>>>(0));
      var $conv144=(($cmp143)&(1));
      var $expval145=($conv144);
      var $tobool146=(($expval145)|(0))!=0;
      if ($tobool146) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $127=$XP;
      var $child148=(($127+16)|0);
      var $arrayidx149=(($child148)|0);
      var $128=HEAP32[(($arrayidx149)>>2)];
      var $129=$TP;
      var $cmp150=(($128)|(0))==(($129)|(0));
      if ($cmp150) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $130=$R;
      var $131=$XP;
      var $child153=(($131+16)|0);
      var $arrayidx154=(($child153)|0);
      HEAP32[(($arrayidx154)>>2)]=$130;
      label = 59; break;
    case 58: 
      var $132=$R;
      var $133=$XP;
      var $child156=(($133+16)|0);
      var $arrayidx157=(($child156+4)|0);
      HEAP32[(($arrayidx157)>>2)]=$132;
      label = 59; break;
    case 59: 
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!";
    case 61: 
      label = 62; break;
    case 62: 
      var $134=$R;
      var $cmp162=(($134)|(0))!=0;
      if ($cmp162) { label = 63; break; } else { label = 77; break; }
    case 63: 
      var $135=$R;
      var $136=$135;
      var $137=HEAP32[((((17696)|0))>>2)];
      var $cmp165=(($136)>>>(0)) >= (($137)>>>(0));
      var $conv166=(($cmp165)&(1));
      var $expval167=($conv166);
      var $tobool168=(($expval167)|(0))!=0;
      if ($tobool168) { label = 64; break; } else { label = 75; break; }
    case 64: 
      var $138=$XP;
      var $139=$R;
      var $parent170=(($139+24)|0);
      HEAP32[(($parent170)>>2)]=$138;
      var $140=$TP;
      var $child171=(($140+16)|0);
      var $arrayidx172=(($child171)|0);
      var $141=HEAP32[(($arrayidx172)>>2)];
      $C0=$141;
      var $cmp173=(($141)|(0))!=0;
      if ($cmp173) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $142=$C0;
      var $143=$142;
      var $144=HEAP32[((((17696)|0))>>2)];
      var $cmp176=(($143)>>>(0)) >= (($144)>>>(0));
      var $conv177=(($cmp176)&(1));
      var $expval178=($conv177);
      var $tobool179=(($expval178)|(0))!=0;
      if ($tobool179) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $145=$C0;
      var $146=$R;
      var $child181=(($146+16)|0);
      var $arrayidx182=(($child181)|0);
      HEAP32[(($arrayidx182)>>2)]=$145;
      var $147=$R;
      var $148=$C0;
      var $parent183=(($148+24)|0);
      HEAP32[(($parent183)>>2)]=$147;
      label = 68; break;
    case 67: 
      _abort();
      throw "Reached an unreachable!";
    case 68: 
      label = 69; break;
    case 69: 
      var $149=$TP;
      var $child187=(($149+16)|0);
      var $arrayidx188=(($child187+4)|0);
      var $150=HEAP32[(($arrayidx188)>>2)];
      $C1=$150;
      var $cmp189=(($150)|(0))!=0;
      if ($cmp189) { label = 70; break; } else { label = 74; break; }
    case 70: 
      var $151=$C1;
      var $152=$151;
      var $153=HEAP32[((((17696)|0))>>2)];
      var $cmp192=(($152)>>>(0)) >= (($153)>>>(0));
      var $conv193=(($cmp192)&(1));
      var $expval194=($conv193);
      var $tobool195=(($expval194)|(0))!=0;
      if ($tobool195) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $154=$C1;
      var $155=$R;
      var $child197=(($155+16)|0);
      var $arrayidx198=(($child197+4)|0);
      HEAP32[(($arrayidx198)>>2)]=$154;
      var $156=$R;
      var $157=$C1;
      var $parent199=(($157+24)|0);
      HEAP32[(($parent199)>>2)]=$156;
      label = 73; break;
    case 72: 
      _abort();
      throw "Reached an unreachable!";
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!";
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 83; break;
    case 80: 
      var $158=$next;
      var $head209=(($158+4)|0);
      var $159=HEAP32[(($head209)>>2)];
      var $and210=$159 & 3;
      var $cmp211=(($and210)|(0))==3;
      if ($cmp211) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $160=$psize;
      HEAP32[((((17688)|0))>>2)]=$160;
      var $161=$next;
      var $head214=(($161+4)|0);
      var $162=HEAP32[(($head214)>>2)];
      var $and215=$162 & -2;
      HEAP32[(($head214)>>2)]=$and215;
      var $163=$psize;
      var $or=$163 | 1;
      var $164=$p;
      var $head216=(($164+4)|0);
      HEAP32[(($head216)>>2)]=$or;
      var $165=$psize;
      var $166=$p;
      var $167=$166;
      var $168=$psize;
      var $add_ptr217=(($167+$168)|0);
      var $169=$add_ptr217;
      var $prev_foot218=(($169)|0);
      HEAP32[(($prev_foot218)>>2)]=$165;
      label = 214; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 85; break;
    case 84: 
      label = 213; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $170=$p;
      var $171=$170;
      var $172=$next;
      var $173=$172;
      var $cmp225=(($171)>>>(0)) < (($173)>>>(0));
      if ($cmp225) { label = 88; break; } else { var $176 = 0;label = 89; break; }
    case 88: 
      var $174=$next;
      var $head228=(($174+4)|0);
      var $175=HEAP32[(($head228)>>2)];
      var $and229=$175 & 1;
      var $tobool230=(($and229)|(0))!=0;
      var $176 = $tobool230;label = 89; break;
    case 89: 
      var $176;
      var $land_ext232=(($176)&(1));
      var $expval233=($land_ext232);
      var $tobool234=(($expval233)|(0))!=0;
      if ($tobool234) { label = 90; break; } else { label = 211; break; }
    case 90: 
      var $177=$next;
      var $head236=(($177+4)|0);
      var $178=HEAP32[(($head236)>>2)];
      var $and237=$178 & 2;
      var $tobool238=(($and237)|(0))!=0;
      if ($tobool238) { label = 172; break; } else { label = 91; break; }
    case 91: 
      var $179=$next;
      var $180=HEAP32[((((17704)|0))>>2)];
      var $cmp240=(($179)|(0))==(($180)|(0));
      if ($cmp240) { label = 92; break; } else { label = 97; break; }
    case 92: 
      var $181=$psize;
      var $182=HEAP32[((((17692)|0))>>2)];
      var $add243=((($182)+($181))|0);
      HEAP32[((((17692)|0))>>2)]=$add243;
      $tsize=$add243;
      var $183=$p;
      HEAP32[((((17704)|0))>>2)]=$183;
      var $184=$tsize;
      var $or244=$184 | 1;
      var $185=$p;
      var $head245=(($185+4)|0);
      HEAP32[(($head245)>>2)]=$or244;
      var $186=$p;
      var $187=HEAP32[((((17700)|0))>>2)];
      var $cmp246=(($186)|(0))==(($187)|(0));
      if ($cmp246) { label = 93; break; } else { label = 94; break; }
    case 93: 
      HEAP32[((((17700)|0))>>2)]=0;
      HEAP32[((((17688)|0))>>2)]=0;
      label = 94; break;
    case 94: 
      var $188=$tsize;
      var $189=HEAP32[((((17708)|0))>>2)];
      var $cmp250=(($188)>>>(0)) > (($189)>>>(0));
      if ($cmp250) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $call=_sys_trim(17680, 0);
      label = 96; break;
    case 96: 
      label = 214; break;
    case 97: 
      var $190=$next;
      var $191=HEAP32[((((17700)|0))>>2)];
      var $cmp255=(($190)|(0))==(($191)|(0));
      if ($cmp255) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $192=$psize;
      var $193=HEAP32[((((17688)|0))>>2)];
      var $add258=((($193)+($192))|0);
      HEAP32[((((17688)|0))>>2)]=$add258;
      $dsize=$add258;
      var $194=$p;
      HEAP32[((((17700)|0))>>2)]=$194;
      var $195=$dsize;
      var $or259=$195 | 1;
      var $196=$p;
      var $head260=(($196+4)|0);
      HEAP32[(($head260)>>2)]=$or259;
      var $197=$dsize;
      var $198=$p;
      var $199=$198;
      var $200=$dsize;
      var $add_ptr261=(($199+$200)|0);
      var $201=$add_ptr261;
      var $prev_foot262=(($201)|0);
      HEAP32[(($prev_foot262)>>2)]=$197;
      label = 214; break;
    case 99: 
      var $202=$next;
      var $head264=(($202+4)|0);
      var $203=HEAP32[(($head264)>>2)];
      var $and265=$203 & -8;
      $nsize=$and265;
      var $204=$nsize;
      var $205=$psize;
      var $add266=((($205)+($204))|0);
      $psize=$add266;
      var $206=$nsize;
      var $shr267=$206 >>> 3;
      var $cmp268=(($shr267)>>>(0)) < 32;
      if ($cmp268) { label = 100; break; } else { label = 118; break; }
    case 100: 
      var $207=$next;
      var $fd272=(($207+8)|0);
      var $208=HEAP32[(($fd272)>>2)];
      $F271=$208;
      var $209=$next;
      var $bk274=(($209+12)|0);
      var $210=HEAP32[(($bk274)>>2)];
      $B273=$210;
      var $211=$nsize;
      var $shr276=$211 >>> 3;
      $I275=$shr276;
      var $212=$F271;
      var $213=$I275;
      var $shl277=$213 << 1;
      var $arrayidx278=((((17720)|0)+($shl277<<2))|0);
      var $214=$arrayidx278;
      var $215=$214;
      var $cmp279=(($212)|(0))==(($215)|(0));
      if ($cmp279) { var $223 = 1;label = 104; break; } else { label = 101; break; }
    case 101: 
      var $216=$F271;
      var $217=$216;
      var $218=HEAP32[((((17696)|0))>>2)];
      var $cmp282=(($217)>>>(0)) >= (($218)>>>(0));
      if ($cmp282) { label = 102; break; } else { var $222 = 0;label = 103; break; }
    case 102: 
      var $219=$F271;
      var $bk285=(($219+12)|0);
      var $220=HEAP32[(($bk285)>>2)];
      var $221=$next;
      var $cmp286=(($220)|(0))==(($221)|(0));
      var $222 = $cmp286;label = 103; break;
    case 103: 
      var $222;
      var $223 = $222;label = 104; break;
    case 104: 
      var $223;
      var $lor_ext291=(($223)&(1));
      var $expval292=($lor_ext291);
      var $tobool293=(($expval292)|(0))!=0;
      if ($tobool293) { label = 105; break; } else { label = 116; break; }
    case 105: 
      var $224=$B273;
      var $225=$F271;
      var $cmp295=(($224)|(0))==(($225)|(0));
      if ($cmp295) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $226=$I275;
      var $shl298=1 << $226;
      var $neg299=$shl298 ^ -1;
      var $227=HEAP32[((((17680)|0))>>2)];
      var $and300=$227 & $neg299;
      HEAP32[((((17680)|0))>>2)]=$and300;
      label = 115; break;
    case 107: 
      var $228=$B273;
      var $229=$I275;
      var $shl302=$229 << 1;
      var $arrayidx303=((((17720)|0)+($shl302<<2))|0);
      var $230=$arrayidx303;
      var $231=$230;
      var $cmp304=(($228)|(0))==(($231)|(0));
      if ($cmp304) { var $239 = 1;label = 111; break; } else { label = 108; break; }
    case 108: 
      var $232=$B273;
      var $233=$232;
      var $234=HEAP32[((((17696)|0))>>2)];
      var $cmp307=(($233)>>>(0)) >= (($234)>>>(0));
      if ($cmp307) { label = 109; break; } else { var $238 = 0;label = 110; break; }
    case 109: 
      var $235=$B273;
      var $fd310=(($235+8)|0);
      var $236=HEAP32[(($fd310)>>2)];
      var $237=$next;
      var $cmp311=(($236)|(0))==(($237)|(0));
      var $238 = $cmp311;label = 110; break;
    case 110: 
      var $238;
      var $239 = $238;label = 111; break;
    case 111: 
      var $239;
      var $lor_ext316=(($239)&(1));
      var $expval317=($lor_ext316);
      var $tobool318=(($expval317)|(0))!=0;
      if ($tobool318) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $240=$B273;
      var $241=$F271;
      var $bk320=(($241+12)|0);
      HEAP32[(($bk320)>>2)]=$240;
      var $242=$F271;
      var $243=$B273;
      var $fd321=(($243+8)|0);
      HEAP32[(($fd321)>>2)]=$242;
      label = 114; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!";
    case 114: 
      label = 115; break;
    case 115: 
      label = 117; break;
    case 116: 
      _abort();
      throw "Reached an unreachable!";
    case 117: 
      label = 167; break;
    case 118: 
      var $244=$next;
      var $245=$244;
      $TP328=$245;
      var $246=$TP328;
      var $parent330=(($246+24)|0);
      var $247=HEAP32[(($parent330)>>2)];
      $XP329=$247;
      var $248=$TP328;
      var $bk332=(($248+12)|0);
      var $249=HEAP32[(($bk332)>>2)];
      var $250=$TP328;
      var $cmp333=(($249)|(0))!=(($250)|(0));
      if ($cmp333) { label = 119; break; } else { label = 126; break; }
    case 119: 
      var $251=$TP328;
      var $fd337=(($251+8)|0);
      var $252=HEAP32[(($fd337)>>2)];
      $F336=$252;
      var $253=$TP328;
      var $bk338=(($253+12)|0);
      var $254=HEAP32[(($bk338)>>2)];
      $R331=$254;
      var $255=$F336;
      var $256=$255;
      var $257=HEAP32[((((17696)|0))>>2)];
      var $cmp339=(($256)>>>(0)) >= (($257)>>>(0));
      if ($cmp339) { label = 120; break; } else { var $264 = 0;label = 122; break; }
    case 120: 
      var $258=$F336;
      var $bk342=(($258+12)|0);
      var $259=HEAP32[(($bk342)>>2)];
      var $260=$TP328;
      var $cmp343=(($259)|(0))==(($260)|(0));
      if ($cmp343) { label = 121; break; } else { var $264 = 0;label = 122; break; }
    case 121: 
      var $261=$R331;
      var $fd346=(($261+8)|0);
      var $262=HEAP32[(($fd346)>>2)];
      var $263=$TP328;
      var $cmp347=(($262)|(0))==(($263)|(0));
      var $264 = $cmp347;label = 122; break;
    case 122: 
      var $264;
      var $land_ext350=(($264)&(1));
      var $expval351=($land_ext350);
      var $tobool352=(($expval351)|(0))!=0;
      if ($tobool352) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $265=$R331;
      var $266=$F336;
      var $bk354=(($266+12)|0);
      HEAP32[(($bk354)>>2)]=$265;
      var $267=$F336;
      var $268=$R331;
      var $fd355=(($268+8)|0);
      HEAP32[(($fd355)>>2)]=$267;
      label = 125; break;
    case 124: 
      _abort();
      throw "Reached an unreachable!";
    case 125: 
      label = 138; break;
    case 126: 
      var $269=$TP328;
      var $child360=(($269+16)|0);
      var $arrayidx361=(($child360+4)|0);
      $RP359=$arrayidx361;
      var $270=HEAP32[(($arrayidx361)>>2)];
      $R331=$270;
      var $cmp362=(($270)|(0))!=0;
      if ($cmp362) { label = 128; break; } else { label = 127; break; }
    case 127: 
      var $271=$TP328;
      var $child365=(($271+16)|0);
      var $arrayidx366=(($child365)|0);
      $RP359=$arrayidx366;
      var $272=HEAP32[(($arrayidx366)>>2)];
      $R331=$272;
      var $cmp367=(($272)|(0))!=0;
      if ($cmp367) { label = 128; break; } else { label = 137; break; }
    case 128: 
      label = 129; break;
    case 129: 
      var $273=$R331;
      var $child372=(($273+16)|0);
      var $arrayidx373=(($child372+4)|0);
      $CP370=$arrayidx373;
      var $274=HEAP32[(($arrayidx373)>>2)];
      var $cmp374=(($274)|(0))!=0;
      if ($cmp374) { var $277 = 1;label = 131; break; } else { label = 130; break; }
    case 130: 
      var $275=$R331;
      var $child377=(($275+16)|0);
      var $arrayidx378=(($child377)|0);
      $CP370=$arrayidx378;
      var $276=HEAP32[(($arrayidx378)>>2)];
      var $cmp379=(($276)|(0))!=0;
      var $277 = $cmp379;label = 131; break;
    case 131: 
      var $277;
      if ($277) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $278=$CP370;
      $RP359=$278;
      var $279=HEAP32[(($278)>>2)];
      $R331=$279;
      label = 129; break;
    case 133: 
      var $280=$RP359;
      var $281=$280;
      var $282=HEAP32[((((17696)|0))>>2)];
      var $cmp385=(($281)>>>(0)) >= (($282)>>>(0));
      var $conv386=(($cmp385)&(1));
      var $expval387=($conv386);
      var $tobool388=(($expval387)|(0))!=0;
      if ($tobool388) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $283=$RP359;
      HEAP32[(($283)>>2)]=0;
      label = 136; break;
    case 135: 
      _abort();
      throw "Reached an unreachable!";
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      var $284=$XP329;
      var $cmp394=(($284)|(0))!=0;
      if ($cmp394) { label = 139; break; } else { label = 166; break; }
    case 139: 
      var $285=$TP328;
      var $index398=(($285+28)|0);
      var $286=HEAP32[(($index398)>>2)];
      var $arrayidx399=((((17984)|0)+($286<<2))|0);
      $H397=$arrayidx399;
      var $287=$TP328;
      var $288=$H397;
      var $289=HEAP32[(($288)>>2)];
      var $cmp400=(($287)|(0))==(($289)|(0));
      if ($cmp400) { label = 140; break; } else { label = 143; break; }
    case 140: 
      var $290=$R331;
      var $291=$H397;
      HEAP32[(($291)>>2)]=$290;
      var $cmp403=(($290)|(0))==0;
      if ($cmp403) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $292=$TP328;
      var $index406=(($292+28)|0);
      var $293=HEAP32[(($index406)>>2)];
      var $shl407=1 << $293;
      var $neg408=$shl407 ^ -1;
      var $294=HEAP32[((((17684)|0))>>2)];
      var $and409=$294 & $neg408;
      HEAP32[((((17684)|0))>>2)]=$and409;
      label = 142; break;
    case 142: 
      label = 150; break;
    case 143: 
      var $295=$XP329;
      var $296=$295;
      var $297=HEAP32[((((17696)|0))>>2)];
      var $cmp412=(($296)>>>(0)) >= (($297)>>>(0));
      var $conv413=(($cmp412)&(1));
      var $expval414=($conv413);
      var $tobool415=(($expval414)|(0))!=0;
      if ($tobool415) { label = 144; break; } else { label = 148; break; }
    case 144: 
      var $298=$XP329;
      var $child417=(($298+16)|0);
      var $arrayidx418=(($child417)|0);
      var $299=HEAP32[(($arrayidx418)>>2)];
      var $300=$TP328;
      var $cmp419=(($299)|(0))==(($300)|(0));
      if ($cmp419) { label = 145; break; } else { label = 146; break; }
    case 145: 
      var $301=$R331;
      var $302=$XP329;
      var $child422=(($302+16)|0);
      var $arrayidx423=(($child422)|0);
      HEAP32[(($arrayidx423)>>2)]=$301;
      label = 147; break;
    case 146: 
      var $303=$R331;
      var $304=$XP329;
      var $child425=(($304+16)|0);
      var $arrayidx426=(($child425+4)|0);
      HEAP32[(($arrayidx426)>>2)]=$303;
      label = 147; break;
    case 147: 
      label = 149; break;
    case 148: 
      _abort();
      throw "Reached an unreachable!";
    case 149: 
      label = 150; break;
    case 150: 
      var $305=$R331;
      var $cmp431=(($305)|(0))!=0;
      if ($cmp431) { label = 151; break; } else { label = 165; break; }
    case 151: 
      var $306=$R331;
      var $307=$306;
      var $308=HEAP32[((((17696)|0))>>2)];
      var $cmp434=(($307)>>>(0)) >= (($308)>>>(0));
      var $conv435=(($cmp434)&(1));
      var $expval436=($conv435);
      var $tobool437=(($expval436)|(0))!=0;
      if ($tobool437) { label = 152; break; } else { label = 163; break; }
    case 152: 
      var $309=$XP329;
      var $310=$R331;
      var $parent441=(($310+24)|0);
      HEAP32[(($parent441)>>2)]=$309;
      var $311=$TP328;
      var $child442=(($311+16)|0);
      var $arrayidx443=(($child442)|0);
      var $312=HEAP32[(($arrayidx443)>>2)];
      $C0439=$312;
      var $cmp444=(($312)|(0))!=0;
      if ($cmp444) { label = 153; break; } else { label = 157; break; }
    case 153: 
      var $313=$C0439;
      var $314=$313;
      var $315=HEAP32[((((17696)|0))>>2)];
      var $cmp447=(($314)>>>(0)) >= (($315)>>>(0));
      var $conv448=(($cmp447)&(1));
      var $expval449=($conv448);
      var $tobool450=(($expval449)|(0))!=0;
      if ($tobool450) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $316=$C0439;
      var $317=$R331;
      var $child452=(($317+16)|0);
      var $arrayidx453=(($child452)|0);
      HEAP32[(($arrayidx453)>>2)]=$316;
      var $318=$R331;
      var $319=$C0439;
      var $parent454=(($319+24)|0);
      HEAP32[(($parent454)>>2)]=$318;
      label = 156; break;
    case 155: 
      _abort();
      throw "Reached an unreachable!";
    case 156: 
      label = 157; break;
    case 157: 
      var $320=$TP328;
      var $child458=(($320+16)|0);
      var $arrayidx459=(($child458+4)|0);
      var $321=HEAP32[(($arrayidx459)>>2)];
      $C1440=$321;
      var $cmp460=(($321)|(0))!=0;
      if ($cmp460) { label = 158; break; } else { label = 162; break; }
    case 158: 
      var $322=$C1440;
      var $323=$322;
      var $324=HEAP32[((((17696)|0))>>2)];
      var $cmp463=(($323)>>>(0)) >= (($324)>>>(0));
      var $conv464=(($cmp463)&(1));
      var $expval465=($conv464);
      var $tobool466=(($expval465)|(0))!=0;
      if ($tobool466) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $325=$C1440;
      var $326=$R331;
      var $child468=(($326+16)|0);
      var $arrayidx469=(($child468+4)|0);
      HEAP32[(($arrayidx469)>>2)]=$325;
      var $327=$R331;
      var $328=$C1440;
      var $parent470=(($328+24)|0);
      HEAP32[(($parent470)>>2)]=$327;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!";
    case 161: 
      label = 162; break;
    case 162: 
      label = 164; break;
    case 163: 
      _abort();
      throw "Reached an unreachable!";
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $329=$psize;
      var $or479=$329 | 1;
      var $330=$p;
      var $head480=(($330+4)|0);
      HEAP32[(($head480)>>2)]=$or479;
      var $331=$psize;
      var $332=$p;
      var $333=$332;
      var $334=$psize;
      var $add_ptr481=(($333+$334)|0);
      var $335=$add_ptr481;
      var $prev_foot482=(($335)|0);
      HEAP32[(($prev_foot482)>>2)]=$331;
      var $336=$p;
      var $337=HEAP32[((((17700)|0))>>2)];
      var $cmp483=(($336)|(0))==(($337)|(0));
      if ($cmp483) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $338=$psize;
      HEAP32[((((17688)|0))>>2)]=$338;
      label = 214; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      label = 173; break;
    case 172: 
      var $339=$next;
      var $head490=(($339+4)|0);
      var $340=HEAP32[(($head490)>>2)];
      var $and491=$340 & -2;
      HEAP32[(($head490)>>2)]=$and491;
      var $341=$psize;
      var $or492=$341 | 1;
      var $342=$p;
      var $head493=(($342+4)|0);
      HEAP32[(($head493)>>2)]=$or492;
      var $343=$psize;
      var $344=$p;
      var $345=$344;
      var $346=$psize;
      var $add_ptr494=(($345+$346)|0);
      var $347=$add_ptr494;
      var $prev_foot495=(($347)|0);
      HEAP32[(($prev_foot495)>>2)]=$343;
      label = 173; break;
    case 173: 
      var $348=$psize;
      var $shr497=$348 >>> 3;
      var $cmp498=(($shr497)>>>(0)) < 32;
      if ($cmp498) { label = 174; break; } else { label = 181; break; }
    case 174: 
      var $349=$psize;
      var $shr502=$349 >>> 3;
      $I501=$shr502;
      var $350=$I501;
      var $shl504=$350 << 1;
      var $arrayidx505=((((17720)|0)+($shl504<<2))|0);
      var $351=$arrayidx505;
      var $352=$351;
      $B503=$352;
      var $353=$B503;
      $F506=$353;
      var $354=HEAP32[((((17680)|0))>>2)];
      var $355=$I501;
      var $shl507=1 << $355;
      var $and508=$354 & $shl507;
      var $tobool509=(($and508)|(0))!=0;
      if ($tobool509) { label = 176; break; } else { label = 175; break; }
    case 175: 
      var $356=$I501;
      var $shl511=1 << $356;
      var $357=HEAP32[((((17680)|0))>>2)];
      var $or512=$357 | $shl511;
      HEAP32[((((17680)|0))>>2)]=$or512;
      label = 180; break;
    case 176: 
      var $358=$B503;
      var $fd514=(($358+8)|0);
      var $359=HEAP32[(($fd514)>>2)];
      var $360=$359;
      var $361=HEAP32[((((17696)|0))>>2)];
      var $cmp515=(($360)>>>(0)) >= (($361)>>>(0));
      var $conv516=(($cmp515)&(1));
      var $expval517=($conv516);
      var $tobool518=(($expval517)|(0))!=0;
      if ($tobool518) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $362=$B503;
      var $fd520=(($362+8)|0);
      var $363=HEAP32[(($fd520)>>2)];
      $F506=$363;
      label = 179; break;
    case 178: 
      _abort();
      throw "Reached an unreachable!";
    case 179: 
      label = 180; break;
    case 180: 
      var $364=$p;
      var $365=$B503;
      var $fd524=(($365+8)|0);
      HEAP32[(($fd524)>>2)]=$364;
      var $366=$p;
      var $367=$F506;
      var $bk525=(($367+12)|0);
      HEAP32[(($bk525)>>2)]=$366;
      var $368=$F506;
      var $369=$p;
      var $fd526=(($369+8)|0);
      HEAP32[(($fd526)>>2)]=$368;
      var $370=$B503;
      var $371=$p;
      var $bk527=(($371+12)|0);
      HEAP32[(($bk527)>>2)]=$370;
      label = 210; break;
    case 181: 
      var $372=$p;
      var $373=$372;
      $tp=$373;
      var $374=$psize;
      var $shr531=$374 >>> 8;
      $X=$shr531;
      var $375=$X;
      var $cmp532=(($375)|(0))==0;
      if ($cmp532) { label = 182; break; } else { label = 183; break; }
    case 182: 
      $I530=0;
      label = 187; break;
    case 183: 
      var $376=$X;
      var $cmp536=(($376)>>>(0)) > 65535;
      if ($cmp536) { label = 184; break; } else { label = 185; break; }
    case 184: 
      $I530=31;
      label = 186; break;
    case 185: 
      var $377=$X;
      $Y=$377;
      var $378=$Y;
      var $sub=((($378)-(256))|0);
      var $shr540=$sub >>> 16;
      var $and541=$shr540 & 8;
      $N=$and541;
      var $379=$N;
      var $380=$Y;
      var $shl542=$380 << $379;
      $Y=$shl542;
      var $sub543=((($shl542)-(4096))|0);
      var $shr544=$sub543 >>> 16;
      var $and545=$shr544 & 4;
      $K=$and545;
      var $381=$K;
      var $382=$N;
      var $add546=((($382)+($381))|0);
      $N=$add546;
      var $383=$K;
      var $384=$Y;
      var $shl547=$384 << $383;
      $Y=$shl547;
      var $sub548=((($shl547)-(16384))|0);
      var $shr549=$sub548 >>> 16;
      var $and550=$shr549 & 2;
      $K=$and550;
      var $385=$N;
      var $add551=((($385)+($and550))|0);
      $N=$add551;
      var $386=$N;
      var $sub552=(((14)-($386))|0);
      var $387=$K;
      var $388=$Y;
      var $shl553=$388 << $387;
      $Y=$shl553;
      var $shr554=$shl553 >>> 15;
      var $add555=((($sub552)+($shr554))|0);
      $K=$add555;
      var $389=$K;
      var $shl556=$389 << 1;
      var $390=$psize;
      var $391=$K;
      var $add557=((($391)+(7))|0);
      var $shr558=$390 >>> (($add557)>>>(0));
      var $and559=$shr558 & 1;
      var $add560=((($shl556)+($and559))|0);
      $I530=$add560;
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      var $392=$I530;
      var $arrayidx563=((((17984)|0)+($392<<2))|0);
      $H529=$arrayidx563;
      var $393=$I530;
      var $394=$tp;
      var $index564=(($394+28)|0);
      HEAP32[(($index564)>>2)]=$393;
      var $395=$tp;
      var $child565=(($395+16)|0);
      var $arrayidx566=(($child565+4)|0);
      HEAP32[(($arrayidx566)>>2)]=0;
      var $396=$tp;
      var $child567=(($396+16)|0);
      var $arrayidx568=(($child567)|0);
      HEAP32[(($arrayidx568)>>2)]=0;
      var $397=HEAP32[((((17684)|0))>>2)];
      var $398=$I530;
      var $shl569=1 << $398;
      var $and570=$397 & $shl569;
      var $tobool571=(($and570)|(0))!=0;
      if ($tobool571) { label = 189; break; } else { label = 188; break; }
    case 188: 
      var $399=$I530;
      var $shl573=1 << $399;
      var $400=HEAP32[((((17684)|0))>>2)];
      var $or574=$400 | $shl573;
      HEAP32[((((17684)|0))>>2)]=$or574;
      var $401=$tp;
      var $402=$H529;
      HEAP32[(($402)>>2)]=$401;
      var $403=$H529;
      var $404=$403;
      var $405=$tp;
      var $parent575=(($405+24)|0);
      HEAP32[(($parent575)>>2)]=$404;
      var $406=$tp;
      var $407=$tp;
      var $bk576=(($407+12)|0);
      HEAP32[(($bk576)>>2)]=$406;
      var $408=$tp;
      var $fd577=(($408+8)|0);
      HEAP32[(($fd577)>>2)]=$406;
      label = 207; break;
    case 189: 
      var $409=$H529;
      var $410=HEAP32[(($409)>>2)];
      $T=$410;
      var $411=$psize;
      var $412=$I530;
      var $cmp580=(($412)|(0))==31;
      if ($cmp580) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $cond = 0;label = 192; break;
    case 191: 
      var $413=$I530;
      var $shr582=$413 >>> 1;
      var $add583=((($shr582)+(8))|0);
      var $sub584=((($add583)-(2))|0);
      var $sub585=(((31)-($sub584))|0);
      var $cond = $sub585;label = 192; break;
    case 192: 
      var $cond;
      var $shl586=$411 << $cond;
      $K579=$shl586;
      label = 193; break;
    case 193: 
      var $414=$T;
      var $head587=(($414+4)|0);
      var $415=HEAP32[(($head587)>>2)];
      var $and588=$415 & -8;
      var $416=$psize;
      var $cmp589=(($and588)|(0))!=(($416)|(0));
      if ($cmp589) { label = 194; break; } else { label = 200; break; }
    case 194: 
      var $417=$K579;
      var $shr592=$417 >>> 31;
      var $and593=$shr592 & 1;
      var $418=$T;
      var $child594=(($418+16)|0);
      var $arrayidx595=(($child594+($and593<<2))|0);
      $C=$arrayidx595;
      var $419=$K579;
      var $shl596=$419 << 1;
      $K579=$shl596;
      var $420=$C;
      var $421=HEAP32[(($420)>>2)];
      var $cmp597=(($421)|(0))!=0;
      if ($cmp597) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $422=$C;
      var $423=HEAP32[(($422)>>2)];
      $T=$423;
      label = 199; break;
    case 196: 
      var $424=$C;
      var $425=$424;
      var $426=HEAP32[((((17696)|0))>>2)];
      var $cmp601=(($425)>>>(0)) >= (($426)>>>(0));
      var $conv602=(($cmp601)&(1));
      var $expval603=($conv602);
      var $tobool604=(($expval603)|(0))!=0;
      if ($tobool604) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $427=$tp;
      var $428=$C;
      HEAP32[(($428)>>2)]=$427;
      var $429=$T;
      var $430=$tp;
      var $parent606=(($430+24)|0);
      HEAP32[(($parent606)>>2)]=$429;
      var $431=$tp;
      var $432=$tp;
      var $bk607=(($432+12)|0);
      HEAP32[(($bk607)>>2)]=$431;
      var $433=$tp;
      var $fd608=(($433+8)|0);
      HEAP32[(($fd608)>>2)]=$431;
      label = 206; break;
    case 198: 
      _abort();
      throw "Reached an unreachable!";
    case 199: 
      label = 205; break;
    case 200: 
      var $434=$T;
      var $fd613=(($434+8)|0);
      var $435=HEAP32[(($fd613)>>2)];
      $F612=$435;
      var $436=$T;
      var $437=$436;
      var $438=HEAP32[((((17696)|0))>>2)];
      var $cmp614=(($437)>>>(0)) >= (($438)>>>(0));
      if ($cmp614) { label = 201; break; } else { var $442 = 0;label = 202; break; }
    case 201: 
      var $439=$F612;
      var $440=$439;
      var $441=HEAP32[((((17696)|0))>>2)];
      var $cmp617=(($440)>>>(0)) >= (($441)>>>(0));
      var $442 = $cmp617;label = 202; break;
    case 202: 
      var $442;
      var $land_ext620=(($442)&(1));
      var $expval621=($land_ext620);
      var $tobool622=(($expval621)|(0))!=0;
      if ($tobool622) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $443=$tp;
      var $444=$F612;
      var $bk624=(($444+12)|0);
      HEAP32[(($bk624)>>2)]=$443;
      var $445=$T;
      var $fd625=(($445+8)|0);
      HEAP32[(($fd625)>>2)]=$443;
      var $446=$F612;
      var $447=$tp;
      var $fd626=(($447+8)|0);
      HEAP32[(($fd626)>>2)]=$446;
      var $448=$T;
      var $449=$tp;
      var $bk627=(($449+12)|0);
      HEAP32[(($bk627)>>2)]=$448;
      var $450=$tp;
      var $parent628=(($450+24)|0);
      HEAP32[(($parent628)>>2)]=0;
      label = 206; break;
    case 204: 
      _abort();
      throw "Reached an unreachable!";
    case 205: 
      label = 193; break;
    case 206: 
      label = 207; break;
    case 207: 
      var $451=HEAP32[((((17712)|0))>>2)];
      var $dec=((($451)-(1))|0);
      HEAP32[((((17712)|0))>>2)]=$dec;
      var $cmp632=(($dec)|(0))==0;
      if ($cmp632) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $call635=_release_unused_segments(17680);
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 214; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      _abort();
      throw "Reached an unreachable!";
    case 214: 
      label = 215; break;
    case 215: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_trim($m, $pad) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0;
      var $0=HEAP32[((((5064)|0))>>2)];
      var $cmp=(($0)|(0))!=0;
      if ($cmp) { var $1 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $call=_init_mparams();
      var $tobool=(($call)|(0))!=0;
      var $1 = $tobool;label = 4; break;
    case 4: 
      var $1;
      var $lor_ext=(($1)&(1));
      var $2=$pad_addr;
      var $cmp1=(($2)>>>(0)) < 4294967232;
      if ($cmp1) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $3=$m_addr;
      var $top=(($3+24)|0);
      var $4=HEAP32[(($top)>>2)];
      var $cmp2=(($4)|(0))!=0;
      if ($cmp2) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $5=$pad_addr;
      var $add=((($5)+(40))|0);
      $pad_addr=$add;
      var $6=$m_addr;
      var $topsize=(($6+12)|0);
      var $7=HEAP32[(($topsize)>>2)];
      var $8=$pad_addr;
      var $cmp3=(($7)>>>(0)) > (($8)>>>(0));
      if ($cmp3) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $9=HEAP32[((((5072)|0))>>2)];
      $unit=$9;
      var $10=$m_addr;
      var $topsize5=(($10+12)|0);
      var $11=HEAP32[(($topsize5)>>2)];
      var $12=$pad_addr;
      var $sub=((($11)-($12))|0);
      var $13=$unit;
      var $sub6=((($13)-(1))|0);
      var $add7=((($sub)+($sub6))|0);
      var $14=$unit;
      var $div=Math.floor(((($add7)>>>(0)))/((($14)>>>(0))));
      var $sub8=((($div)-(1))|0);
      var $15=$unit;
      var $mul=(Math.imul($sub8,$15)|0);
      $extra=$mul;
      var $16=$m_addr;
      var $17=$m_addr;
      var $top9=(($17+24)|0);
      var $18=HEAP32[(($top9)>>2)];
      var $19=$18;
      var $call10=_segment_holding($16, $19);
      $sp=$call10;
      var $20=$sp;
      var $sflags=(($20+12)|0);
      var $21=HEAP32[(($sflags)>>2)];
      var $and=$21 & 8;
      var $tobool11=(($and)|(0))!=0;
      if ($tobool11) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $22=$sp;
      var $sflags13=(($22+12)|0);
      var $23=HEAP32[(($sflags13)>>2)];
      var $and14=$23 & 0;
      var $tobool15=(($and14)|(0))!=0;
      if ($tobool15) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $24=$extra;
      var $cmp17=(($24)>>>(0)) >= 2147483647;
      if ($cmp17) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $25=$unit;
      var $sub19=(((-2147483648)-($25))|0);
      $extra=$sub19;
      label = 12; break;
    case 12: 
      var $call20=_sbrk(0);
      $old_br=$call20;
      var $26=$old_br;
      var $27=$sp;
      var $base=(($27)|0);
      var $28=HEAP32[(($base)>>2)];
      var $29=$sp;
      var $size=(($29+4)|0);
      var $30=HEAP32[(($size)>>2)];
      var $add_ptr=(($28+$30)|0);
      var $cmp21=(($26)|(0))==(($add_ptr)|(0));
      if ($cmp21) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $31=$extra;
      var $sub23=(((-$31))|0);
      var $call24=_sbrk($sub23);
      $rel_br=$call24;
      var $call25=_sbrk(0);
      $new_br=$call25;
      var $32=$rel_br;
      var $cmp26=(($32)|(0))!=-1;
      if ($cmp26) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $33=$new_br;
      var $34=$old_br;
      var $cmp28=(($33)>>>(0)) < (($34)>>>(0));
      if ($cmp28) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $35=$old_br;
      var $36=$new_br;
      var $sub_ptr_lhs_cast=$35;
      var $sub_ptr_rhs_cast=$36;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $released=$sub_ptr_sub;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $37=$released;
      var $cmp34=(($37)|(0))!=0;
      if ($cmp34) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $38=$released;
      var $39=$sp;
      var $size36=(($39+4)|0);
      var $40=HEAP32[(($size36)>>2)];
      var $sub37=((($40)-($38))|0);
      HEAP32[(($size36)>>2)]=$sub37;
      var $41=$released;
      var $42=$m_addr;
      var $footprint=(($42+432)|0);
      var $43=HEAP32[(($footprint)>>2)];
      var $sub38=((($43)-($41))|0);
      HEAP32[(($footprint)>>2)]=$sub38;
      var $44=$m_addr;
      var $45=$m_addr;
      var $top39=(($45+24)|0);
      var $46=HEAP32[(($top39)>>2)];
      var $47=$m_addr;
      var $topsize40=(($47+12)|0);
      var $48=HEAP32[(($topsize40)>>2)];
      var $49=$released;
      var $sub41=((($48)-($49))|0);
      _init_top($44, $46, $sub41);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $50=$released;
      var $cmp44=(($50)|(0))==0;
      if ($cmp44) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $51=$m_addr;
      var $topsize46=(($51+12)|0);
      var $52=HEAP32[(($topsize46)>>2)];
      var $53=$m_addr;
      var $trim_check=(($53+28)|0);
      var $54=HEAP32[(($trim_check)>>2)];
      var $cmp47=(($52)>>>(0)) > (($54)>>>(0));
      if ($cmp47) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $55=$m_addr;
      var $trim_check49=(($55+28)|0);
      HEAP32[(($trim_check49)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $56=$released;
      var $cmp52=(($56)|(0))!=0;
      var $cond=$cmp52 ? 1 : 0;
      return $cond;
    default: assert(0, "bad label: " + label);
  }
}
function _segment_holding($m, $addr) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr;
      var $seg=(($0+448)|0);
      $sp=$seg;
      label = 3; break;
    case 3: 
      var $1=$addr_addr;
      var $2=$sp;
      var $base=(($2)|0);
      var $3=HEAP32[(($base)>>2)];
      var $cmp=(($1)>>>(0)) >= (($3)>>>(0));
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $4=$addr_addr;
      var $5=$sp;
      var $base1=(($5)|0);
      var $6=HEAP32[(($base1)>>2)];
      var $7=$sp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      var $cmp2=(($4)>>>(0)) < (($add_ptr)>>>(0));
      if ($cmp2) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $9=$sp;
      $retval=$9;
      label = 9; break;
    case 6: 
      var $10=$sp;
      var $next=(($10+8)|0);
      var $11=HEAP32[(($next)>>2)];
      $sp=$11;
      var $cmp3=(($11)|(0))==0;
      if ($cmp3) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $retval=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $12=$retval;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
function _release_unused_segments($m) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0;
      $nsegs=0;
      var $0=$m_addr;
      var $seg=(($0+448)|0);
      $pred=$seg;
      var $1=$pred;
      var $next=(($1+8)|0);
      var $2=HEAP32[(($next)>>2)];
      $sp=$2;
      label = 3; break;
    case 3: 
      var $3=$sp;
      var $cmp=(($3)|(0))!=0;
      if ($cmp) { label = 4; break; } else { label = 91; break; }
    case 4: 
      var $4=$sp;
      var $base1=(($4)|0);
      var $5=HEAP32[(($base1)>>2)];
      $base=$5;
      var $6=$sp;
      var $size2=(($6+4)|0);
      var $7=HEAP32[(($size2)>>2)];
      $size=$7;
      var $8=$sp;
      var $next4=(($8+8)|0);
      var $9=HEAP32[(($next4)>>2)];
      $next3=$9;
      var $10=$nsegs;
      var $inc=((($10)+(1))|0);
      $nsegs=$inc;
      var $11=$sp;
      var $sflags=(($11+12)|0);
      var $12=HEAP32[(($sflags)>>2)];
      var $and=$12 & 0;
      var $tobool=(($and)|(0))!=0;
      if ($tobool) { label = 5; break; } else { label = 90; break; }
    case 5: 
      var $13=$sp;
      var $sflags5=(($13+12)|0);
      var $14=HEAP32[(($sflags5)>>2)];
      var $and6=$14 & 8;
      var $tobool7=(($and6)|(0))!=0;
      if ($tobool7) { label = 90; break; } else { label = 6; break; }
    case 6: 
      var $15=$base;
      var $16=$base;
      var $add_ptr=(($16+8)|0);
      var $17=$add_ptr;
      var $and8=$17 & 7;
      var $cmp9=(($and8)|(0))==0;
      if ($cmp9) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $cond = 0;label = 9; break;
    case 8: 
      var $18=$base;
      var $add_ptr10=(($18+8)|0);
      var $19=$add_ptr10;
      var $and11=$19 & 7;
      var $sub=(((8)-($and11))|0);
      var $and12=$sub & 7;
      var $cond = $and12;label = 9; break;
    case 9: 
      var $cond;
      var $add_ptr13=(($15+$cond)|0);
      var $20=$add_ptr13;
      $p=$20;
      var $21=$p;
      var $head=(($21+4)|0);
      var $22=HEAP32[(($head)>>2)];
      var $and14=$22 & -8;
      $psize=$and14;
      var $23=$p;
      var $head15=(($23+4)|0);
      var $24=HEAP32[(($head15)>>2)];
      var $and16=$24 & 3;
      var $cmp17=(($and16)|(0))!=1;
      if ($cmp17) { label = 89; break; } else { label = 10; break; }
    case 10: 
      var $25=$p;
      var $26=$25;
      var $27=$psize;
      var $add_ptr19=(($26+$27)|0);
      var $28=$base;
      var $29=$size;
      var $add_ptr20=(($28+$29)|0);
      var $add_ptr21=((($add_ptr20)-(40))|0);
      var $cmp22=(($add_ptr19)>>>(0)) >= (($add_ptr21)>>>(0));
      if ($cmp22) { label = 11; break; } else { label = 89; break; }
    case 11: 
      var $30=$p;
      var $31=$30;
      $tp=$31;
      var $32=$p;
      var $33=$m_addr;
      var $dv=(($33+20)|0);
      var $34=HEAP32[(($dv)>>2)];
      var $cmp24=(($32)|(0))==(($34)|(0));
      if ($cmp24) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $35=$m_addr;
      var $dv26=(($35+20)|0);
      HEAP32[(($dv26)>>2)]=0;
      var $36=$m_addr;
      var $dvsize=(($36+8)|0);
      HEAP32[(($dvsize)>>2)]=0;
      label = 62; break;
    case 13: 
      var $37=$tp;
      var $parent=(($37+24)|0);
      var $38=HEAP32[(($parent)>>2)];
      $XP=$38;
      var $39=$tp;
      var $bk=(($39+12)|0);
      var $40=HEAP32[(($bk)>>2)];
      var $41=$tp;
      var $cmp27=(($40)|(0))!=(($41)|(0));
      if ($cmp27) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $42=$tp;
      var $fd=(($42+8)|0);
      var $43=HEAP32[(($fd)>>2)];
      $F=$43;
      var $44=$tp;
      var $bk29=(($44+12)|0);
      var $45=HEAP32[(($bk29)>>2)];
      $R=$45;
      var $46=$F;
      var $47=$46;
      var $48=$m_addr;
      var $least_addr=(($48+16)|0);
      var $49=HEAP32[(($least_addr)>>2)];
      var $cmp30=(($47)>>>(0)) >= (($49)>>>(0));
      if ($cmp30) { label = 15; break; } else { var $56 = 0;label = 17; break; }
    case 15: 
      var $50=$F;
      var $bk32=(($50+12)|0);
      var $51=HEAP32[(($bk32)>>2)];
      var $52=$tp;
      var $cmp33=(($51)|(0))==(($52)|(0));
      if ($cmp33) { label = 16; break; } else { var $56 = 0;label = 17; break; }
    case 16: 
      var $53=$R;
      var $fd34=(($53+8)|0);
      var $54=HEAP32[(($fd34)>>2)];
      var $55=$tp;
      var $cmp35=(($54)|(0))==(($55)|(0));
      var $56 = $cmp35;label = 17; break;
    case 17: 
      var $56;
      var $land_ext=(($56)&(1));
      var $expval=($land_ext);
      var $tobool36=(($expval)|(0))!=0;
      if ($tobool36) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $57=$R;
      var $58=$F;
      var $bk38=(($58+12)|0);
      HEAP32[(($bk38)>>2)]=$57;
      var $59=$F;
      var $60=$R;
      var $fd39=(($60+8)|0);
      HEAP32[(($fd39)>>2)]=$59;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!";
    case 20: 
      label = 33; break;
    case 21: 
      var $61=$tp;
      var $child=(($61+16)|0);
      var $arrayidx=(($child+4)|0);
      $RP=$arrayidx;
      var $62=HEAP32[(($arrayidx)>>2)];
      $R=$62;
      var $cmp42=(($62)|(0))!=0;
      if ($cmp42) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $63=$tp;
      var $child43=(($63+16)|0);
      var $arrayidx44=(($child43)|0);
      $RP=$arrayidx44;
      var $64=HEAP32[(($arrayidx44)>>2)];
      $R=$64;
      var $cmp45=(($64)|(0))!=0;
      if ($cmp45) { label = 23; break; } else { label = 32; break; }
    case 23: 
      label = 24; break;
    case 24: 
      var $65=$R;
      var $child48=(($65+16)|0);
      var $arrayidx49=(($child48+4)|0);
      $CP=$arrayidx49;
      var $66=HEAP32[(($arrayidx49)>>2)];
      var $cmp50=(($66)|(0))!=0;
      if ($cmp50) { var $69 = 1;label = 26; break; } else { label = 25; break; }
    case 25: 
      var $67=$R;
      var $child51=(($67+16)|0);
      var $arrayidx52=(($child51)|0);
      $CP=$arrayidx52;
      var $68=HEAP32[(($arrayidx52)>>2)];
      var $cmp53=(($68)|(0))!=0;
      var $69 = $cmp53;label = 26; break;
    case 26: 
      var $69;
      if ($69) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $70=$CP;
      $RP=$70;
      var $71=HEAP32[(($70)>>2)];
      $R=$71;
      label = 24; break;
    case 28: 
      var $72=$RP;
      var $73=$72;
      var $74=$m_addr;
      var $least_addr55=(($74+16)|0);
      var $75=HEAP32[(($least_addr55)>>2)];
      var $cmp56=(($73)>>>(0)) >= (($75)>>>(0));
      var $conv=(($cmp56)&(1));
      var $expval57=($conv);
      var $tobool58=(($expval57)|(0))!=0;
      if ($tobool58) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $76=$RP;
      HEAP32[(($76)>>2)]=0;
      label = 31; break;
    case 30: 
      _abort();
      throw "Reached an unreachable!";
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $77=$XP;
      var $cmp64=(($77)|(0))!=0;
      if ($cmp64) { label = 34; break; } else { label = 61; break; }
    case 34: 
      var $78=$tp;
      var $index=(($78+28)|0);
      var $79=HEAP32[(($index)>>2)];
      var $80=$m_addr;
      var $treebins=(($80+304)|0);
      var $arrayidx67=(($treebins+($79<<2))|0);
      $H=$arrayidx67;
      var $81=$tp;
      var $82=$H;
      var $83=HEAP32[(($82)>>2)];
      var $cmp68=(($81)|(0))==(($83)|(0));
      if ($cmp68) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $84=$R;
      var $85=$H;
      HEAP32[(($85)>>2)]=$84;
      var $cmp71=(($84)|(0))==0;
      if ($cmp71) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $86=$tp;
      var $index74=(($86+28)|0);
      var $87=HEAP32[(($index74)>>2)];
      var $shl=1 << $87;
      var $neg=$shl ^ -1;
      var $88=$m_addr;
      var $treemap=(($88+4)|0);
      var $89=HEAP32[(($treemap)>>2)];
      var $and75=$89 & $neg;
      HEAP32[(($treemap)>>2)]=$and75;
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $90=$XP;
      var $91=$90;
      var $92=$m_addr;
      var $least_addr78=(($92+16)|0);
      var $93=HEAP32[(($least_addr78)>>2)];
      var $cmp79=(($91)>>>(0)) >= (($93)>>>(0));
      var $conv80=(($cmp79)&(1));
      var $expval81=($conv80);
      var $tobool82=(($expval81)|(0))!=0;
      if ($tobool82) { label = 39; break; } else { label = 43; break; }
    case 39: 
      var $94=$XP;
      var $child84=(($94+16)|0);
      var $arrayidx85=(($child84)|0);
      var $95=HEAP32[(($arrayidx85)>>2)];
      var $96=$tp;
      var $cmp86=(($95)|(0))==(($96)|(0));
      if ($cmp86) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $97=$R;
      var $98=$XP;
      var $child89=(($98+16)|0);
      var $arrayidx90=(($child89)|0);
      HEAP32[(($arrayidx90)>>2)]=$97;
      label = 42; break;
    case 41: 
      var $99=$R;
      var $100=$XP;
      var $child92=(($100+16)|0);
      var $arrayidx93=(($child92+4)|0);
      HEAP32[(($arrayidx93)>>2)]=$99;
      label = 42; break;
    case 42: 
      label = 44; break;
    case 43: 
      _abort();
      throw "Reached an unreachable!";
    case 44: 
      label = 45; break;
    case 45: 
      var $101=$R;
      var $cmp98=(($101)|(0))!=0;
      if ($cmp98) { label = 46; break; } else { label = 60; break; }
    case 46: 
      var $102=$R;
      var $103=$102;
      var $104=$m_addr;
      var $least_addr101=(($104+16)|0);
      var $105=HEAP32[(($least_addr101)>>2)];
      var $cmp102=(($103)>>>(0)) >= (($105)>>>(0));
      var $conv103=(($cmp102)&(1));
      var $expval104=($conv103);
      var $tobool105=(($expval104)|(0))!=0;
      if ($tobool105) { label = 47; break; } else { label = 58; break; }
    case 47: 
      var $106=$XP;
      var $107=$R;
      var $parent107=(($107+24)|0);
      HEAP32[(($parent107)>>2)]=$106;
      var $108=$tp;
      var $child108=(($108+16)|0);
      var $arrayidx109=(($child108)|0);
      var $109=HEAP32[(($arrayidx109)>>2)];
      $C0=$109;
      var $cmp110=(($109)|(0))!=0;
      if ($cmp110) { label = 48; break; } else { label = 52; break; }
    case 48: 
      var $110=$C0;
      var $111=$110;
      var $112=$m_addr;
      var $least_addr113=(($112+16)|0);
      var $113=HEAP32[(($least_addr113)>>2)];
      var $cmp114=(($111)>>>(0)) >= (($113)>>>(0));
      var $conv115=(($cmp114)&(1));
      var $expval116=($conv115);
      var $tobool117=(($expval116)|(0))!=0;
      if ($tobool117) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $114=$C0;
      var $115=$R;
      var $child119=(($115+16)|0);
      var $arrayidx120=(($child119)|0);
      HEAP32[(($arrayidx120)>>2)]=$114;
      var $116=$R;
      var $117=$C0;
      var $parent121=(($117+24)|0);
      HEAP32[(($parent121)>>2)]=$116;
      label = 51; break;
    case 50: 
      _abort();
      throw "Reached an unreachable!";
    case 51: 
      label = 52; break;
    case 52: 
      var $118=$tp;
      var $child125=(($118+16)|0);
      var $arrayidx126=(($child125+4)|0);
      var $119=HEAP32[(($arrayidx126)>>2)];
      $C1=$119;
      var $cmp127=(($119)|(0))!=0;
      if ($cmp127) { label = 53; break; } else { label = 57; break; }
    case 53: 
      var $120=$C1;
      var $121=$120;
      var $122=$m_addr;
      var $least_addr130=(($122+16)|0);
      var $123=HEAP32[(($least_addr130)>>2)];
      var $cmp131=(($121)>>>(0)) >= (($123)>>>(0));
      var $conv132=(($cmp131)&(1));
      var $expval133=($conv132);
      var $tobool134=(($expval133)|(0))!=0;
      if ($tobool134) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $124=$C1;
      var $125=$R;
      var $child136=(($125+16)|0);
      var $arrayidx137=(($child136+4)|0);
      HEAP32[(($arrayidx137)>>2)]=$124;
      var $126=$R;
      var $127=$C1;
      var $parent138=(($127+24)|0);
      HEAP32[(($parent138)>>2)]=$126;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!";
    case 56: 
      label = 57; break;
    case 57: 
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!";
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $128=$psize;
      var $shr=$128 >>> 8;
      $X=$shr;
      var $129=$X;
      var $cmp148=(($129)|(0))==0;
      if ($cmp148) { label = 63; break; } else { label = 64; break; }
    case 63: 
      $I=0;
      label = 68; break;
    case 64: 
      var $130=$X;
      var $cmp152=(($130)>>>(0)) > 65535;
      if ($cmp152) { label = 65; break; } else { label = 66; break; }
    case 65: 
      $I=31;
      label = 67; break;
    case 66: 
      var $131=$X;
      $Y=$131;
      var $132=$Y;
      var $sub156=((($132)-(256))|0);
      var $shr157=$sub156 >>> 16;
      var $and158=$shr157 & 8;
      $N=$and158;
      var $133=$N;
      var $134=$Y;
      var $shl159=$134 << $133;
      $Y=$shl159;
      var $sub160=((($shl159)-(4096))|0);
      var $shr161=$sub160 >>> 16;
      var $and162=$shr161 & 4;
      $K=$and162;
      var $135=$K;
      var $136=$N;
      var $add=((($136)+($135))|0);
      $N=$add;
      var $137=$K;
      var $138=$Y;
      var $shl163=$138 << $137;
      $Y=$shl163;
      var $sub164=((($shl163)-(16384))|0);
      var $shr165=$sub164 >>> 16;
      var $and166=$shr165 & 2;
      $K=$and166;
      var $139=$N;
      var $add167=((($139)+($and166))|0);
      $N=$add167;
      var $140=$N;
      var $sub168=(((14)-($140))|0);
      var $141=$K;
      var $142=$Y;
      var $shl169=$142 << $141;
      $Y=$shl169;
      var $shr170=$shl169 >>> 15;
      var $add171=((($sub168)+($shr170))|0);
      $K=$add171;
      var $143=$K;
      var $shl172=$143 << 1;
      var $144=$psize;
      var $145=$K;
      var $add173=((($145)+(7))|0);
      var $shr174=$144 >>> (($add173)>>>(0));
      var $and175=$shr174 & 1;
      var $add176=((($shl172)+($and175))|0);
      $I=$add176;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $146=$I;
      var $147=$m_addr;
      var $treebins179=(($147+304)|0);
      var $arrayidx180=(($treebins179+($146<<2))|0);
      $H147=$arrayidx180;
      var $148=$I;
      var $149=$tp;
      var $index181=(($149+28)|0);
      HEAP32[(($index181)>>2)]=$148;
      var $150=$tp;
      var $child182=(($150+16)|0);
      var $arrayidx183=(($child182+4)|0);
      HEAP32[(($arrayidx183)>>2)]=0;
      var $151=$tp;
      var $child184=(($151+16)|0);
      var $arrayidx185=(($child184)|0);
      HEAP32[(($arrayidx185)>>2)]=0;
      var $152=$m_addr;
      var $treemap186=(($152+4)|0);
      var $153=HEAP32[(($treemap186)>>2)];
      var $154=$I;
      var $shl187=1 << $154;
      var $and188=$153 & $shl187;
      var $tobool189=(($and188)|(0))!=0;
      if ($tobool189) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $155=$I;
      var $shl191=1 << $155;
      var $156=$m_addr;
      var $treemap192=(($156+4)|0);
      var $157=HEAP32[(($treemap192)>>2)];
      var $or=$157 | $shl191;
      HEAP32[(($treemap192)>>2)]=$or;
      var $158=$tp;
      var $159=$H147;
      HEAP32[(($159)>>2)]=$158;
      var $160=$H147;
      var $161=$160;
      var $162=$tp;
      var $parent193=(($162+24)|0);
      HEAP32[(($parent193)>>2)]=$161;
      var $163=$tp;
      var $164=$tp;
      var $bk194=(($164+12)|0);
      HEAP32[(($bk194)>>2)]=$163;
      var $165=$tp;
      var $fd195=(($165+8)|0);
      HEAP32[(($fd195)>>2)]=$163;
      label = 88; break;
    case 70: 
      var $166=$H147;
      var $167=HEAP32[(($166)>>2)];
      $T=$167;
      var $168=$psize;
      var $169=$I;
      var $cmp198=(($169)|(0))==31;
      if ($cmp198) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $cond207 = 0;label = 73; break;
    case 72: 
      var $170=$I;
      var $shr202=$170 >>> 1;
      var $add203=((($shr202)+(8))|0);
      var $sub204=((($add203)-(2))|0);
      var $sub205=(((31)-($sub204))|0);
      var $cond207 = $sub205;label = 73; break;
    case 73: 
      var $cond207;
      var $shl208=$168 << $cond207;
      $K197=$shl208;
      label = 74; break;
    case 74: 
      var $171=$T;
      var $head209=(($171+4)|0);
      var $172=HEAP32[(($head209)>>2)];
      var $and210=$172 & -8;
      var $173=$psize;
      var $cmp211=(($and210)|(0))!=(($173)|(0));
      if ($cmp211) { label = 75; break; } else { label = 81; break; }
    case 75: 
      var $174=$K197;
      var $shr214=$174 >>> 31;
      var $and215=$shr214 & 1;
      var $175=$T;
      var $child216=(($175+16)|0);
      var $arrayidx217=(($child216+($and215<<2))|0);
      $C=$arrayidx217;
      var $176=$K197;
      var $shl218=$176 << 1;
      $K197=$shl218;
      var $177=$C;
      var $178=HEAP32[(($177)>>2)];
      var $cmp219=(($178)|(0))!=0;
      if ($cmp219) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $179=$C;
      var $180=HEAP32[(($179)>>2)];
      $T=$180;
      label = 80; break;
    case 77: 
      var $181=$C;
      var $182=$181;
      var $183=$m_addr;
      var $least_addr223=(($183+16)|0);
      var $184=HEAP32[(($least_addr223)>>2)];
      var $cmp224=(($182)>>>(0)) >= (($184)>>>(0));
      var $conv225=(($cmp224)&(1));
      var $expval226=($conv225);
      var $tobool227=(($expval226)|(0))!=0;
      if ($tobool227) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $185=$tp;
      var $186=$C;
      HEAP32[(($186)>>2)]=$185;
      var $187=$T;
      var $188=$tp;
      var $parent229=(($188+24)|0);
      HEAP32[(($parent229)>>2)]=$187;
      var $189=$tp;
      var $190=$tp;
      var $bk230=(($190+12)|0);
      HEAP32[(($bk230)>>2)]=$189;
      var $191=$tp;
      var $fd231=(($191+8)|0);
      HEAP32[(($fd231)>>2)]=$189;
      label = 87; break;
    case 79: 
      _abort();
      throw "Reached an unreachable!";
    case 80: 
      label = 86; break;
    case 81: 
      var $192=$T;
      var $fd236=(($192+8)|0);
      var $193=HEAP32[(($fd236)>>2)];
      $F235=$193;
      var $194=$T;
      var $195=$194;
      var $196=$m_addr;
      var $least_addr237=(($196+16)|0);
      var $197=HEAP32[(($least_addr237)>>2)];
      var $cmp238=(($195)>>>(0)) >= (($197)>>>(0));
      if ($cmp238) { label = 82; break; } else { var $202 = 0;label = 83; break; }
    case 82: 
      var $198=$F235;
      var $199=$198;
      var $200=$m_addr;
      var $least_addr241=(($200+16)|0);
      var $201=HEAP32[(($least_addr241)>>2)];
      var $cmp242=(($199)>>>(0)) >= (($201)>>>(0));
      var $202 = $cmp242;label = 83; break;
    case 83: 
      var $202;
      var $land_ext245=(($202)&(1));
      var $expval246=($land_ext245);
      var $tobool247=(($expval246)|(0))!=0;
      if ($tobool247) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $203=$tp;
      var $204=$F235;
      var $bk249=(($204+12)|0);
      HEAP32[(($bk249)>>2)]=$203;
      var $205=$T;
      var $fd250=(($205+8)|0);
      HEAP32[(($fd250)>>2)]=$203;
      var $206=$F235;
      var $207=$tp;
      var $fd251=(($207+8)|0);
      HEAP32[(($fd251)>>2)]=$206;
      var $208=$T;
      var $209=$tp;
      var $bk252=(($209+12)|0);
      HEAP32[(($bk252)>>2)]=$208;
      var $210=$tp;
      var $parent253=(($210+24)|0);
      HEAP32[(($parent253)>>2)]=0;
      label = 87; break;
    case 85: 
      _abort();
      throw "Reached an unreachable!";
    case 86: 
      label = 74; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $211=$sp;
      $pred=$211;
      var $212=$next3;
      $sp=$212;
      label = 3; break;
    case 91: 
      var $213=$nsegs;
      var $cmp260=(($213)>>>(0)) > 4294967295;
      if ($cmp260) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $214=$nsegs;
      var $cond265 = $214;label = 94; break;
    case 93: 
      var $cond265 = -1;label = 94; break;
    case 94: 
      var $cond265;
      var $215=$m_addr;
      var $release_checks=(($215+32)|0);
      HEAP32[(($release_checks)>>2)]=$cond265;
      var $216=$released;
      return $216;
    default: assert(0, "bad label: " + label);
  }
}
function _init_mparams() {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((5064)|0))>>2)];
      var $cmp=(($0)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $call=_sysconf(8);
      $psize=$call;
      var $1=$psize;
      $gsize=$1;
      var $2=$gsize;
      var $3=$gsize;
      var $sub=((($3)-(1))|0);
      var $and=$2 & $sub;
      var $cmp1=(($and)|(0))!=0;
      if ($cmp1) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $4=$psize;
      var $5=$psize;
      var $sub2=((($5)-(1))|0);
      var $and3=$4 & $sub2;
      var $cmp4=(($and3)|(0))!=0;
      if ($cmp4) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!";
    case 6: 
      var $6=$gsize;
      HEAP32[((((5072)|0))>>2)]=$6;
      var $7=$psize;
      HEAP32[((((5068)|0))>>2)]=$7;
      HEAP32[((((5076)|0))>>2)]=-1;
      HEAP32[((((5080)|0))>>2)]=2097152;
      HEAP32[((((5084)|0))>>2)]=0;
      var $8=HEAP32[((((5084)|0))>>2)];
      HEAP32[((((18124)|0))>>2)]=$8;
      var $call6=_time(0);
      var $xor=$call6 ^ 1431655765;
      $magic=$xor;
      var $9=$magic;
      var $or=$9 | 8;
      $magic=$or;
      var $10=$magic;
      var $and7=$10 & -8;
      $magic=$and7;
      var $11=$magic;
      HEAP32[((((5064)|0))>>2)]=$11;
      label = 7; break;
    case 7: 
      return 1;
    default: assert(0, "bad label: " + label);
  }
}
function _init_top($m, $p, $psize) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr;
      var $1=$0;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$p_addr;
      var $4=$3;
      var $add_ptr1=(($4+8)|0);
      var $5=$add_ptr1;
      var $and2=$5 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $6=$p_addr;
      var $7=$6;
      var $8=$offset;
      var $add_ptr4=(($7+$8)|0);
      var $9=$add_ptr4;
      $p_addr=$9;
      var $10=$offset;
      var $11=$psize_addr;
      var $sub5=((($11)-($10))|0);
      $psize_addr=$sub5;
      var $12=$p_addr;
      var $13=$m_addr;
      var $top=(($13+24)|0);
      HEAP32[(($top)>>2)]=$12;
      var $14=$psize_addr;
      var $15=$m_addr;
      var $topsize=(($15+12)|0);
      HEAP32[(($topsize)>>2)]=$14;
      var $16=$psize_addr;
      var $or=$16 | 1;
      var $17=$p_addr;
      var $head=(($17+4)|0);
      HEAP32[(($head)>>2)]=$or;
      var $18=$p_addr;
      var $19=$18;
      var $20=$psize_addr;
      var $add_ptr6=(($19+$20)|0);
      var $21=$add_ptr6;
      var $head7=(($21+4)|0);
      HEAP32[(($head7)>>2)]=40;
      var $22=HEAP32[((((5080)|0))>>2)];
      var $23=$m_addr;
      var $trim_check=(($23+28)|0);
      HEAP32[(($trim_check)>>2)]=$22;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mmap_alloc($m, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $fp;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr;
      var $add=((($0)+(24))|0);
      var $add1=((($add)+(7))|0);
      var $1=HEAP32[((((5068)|0))>>2)];
      var $sub=((($1)-(1))|0);
      var $add2=((($add1)+($sub))|0);
      var $2=HEAP32[((((5068)|0))>>2)];
      var $sub3=((($2)-(1))|0);
      var $neg=$sub3 ^ -1;
      var $and=$add2 & $neg;
      $mmsize=$and;
      var $3=$m_addr;
      var $footprint_limit=(($3+440)|0);
      var $4=HEAP32[(($footprint_limit)>>2)];
      var $cmp=(($4)|(0))!=0;
      if ($cmp) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $5=$m_addr;
      var $footprint=(($5+432)|0);
      var $6=HEAP32[(($footprint)>>2)];
      var $7=$mmsize;
      var $add4=((($6)+($7))|0);
      $fp=$add4;
      var $8=$fp;
      var $9=$m_addr;
      var $footprint5=(($9+432)|0);
      var $10=HEAP32[(($footprint5)>>2)];
      var $cmp6=(($8)>>>(0)) <= (($10)>>>(0));
      if ($cmp6) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $11=$fp;
      var $12=$m_addr;
      var $footprint_limit7=(($12+440)|0);
      var $13=HEAP32[(($footprint_limit7)>>2)];
      var $cmp8=(($11)>>>(0)) > (($13)>>>(0));
      if ($cmp8) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $retval=0;
      label = 20; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $14=$mmsize;
      var $15=$nb_addr;
      var $cmp11=(($14)>>>(0)) > (($15)>>>(0));
      if ($cmp11) { label = 8; break; } else { label = 19; break; }
    case 8: 
      $mm=-1;
      var $16=$mm;
      var $cmp13=(($16)|(0))!=-1;
      if ($cmp13) { label = 9; break; } else { label = 18; break; }
    case 9: 
      var $17=$mm;
      var $add_ptr=(($17+8)|0);
      var $18=$add_ptr;
      var $and15=$18 & 7;
      var $cmp16=(($and15)|(0))==0;
      if ($cmp16) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $cond = 0;label = 12; break;
    case 11: 
      var $19=$mm;
      var $add_ptr17=(($19+8)|0);
      var $20=$add_ptr17;
      var $and18=$20 & 7;
      var $sub19=(((8)-($and18))|0);
      var $and20=$sub19 & 7;
      var $cond = $and20;label = 12; break;
    case 12: 
      var $cond;
      $offset=$cond;
      var $21=$mmsize;
      var $22=$offset;
      var $sub21=((($21)-($22))|0);
      var $sub22=((($sub21)-(16))|0);
      $psize=$sub22;
      var $23=$mm;
      var $24=$offset;
      var $add_ptr23=(($23+$24)|0);
      var $25=$add_ptr23;
      $p=$25;
      var $26=$offset;
      var $27=$p;
      var $prev_foot=(($27)|0);
      HEAP32[(($prev_foot)>>2)]=$26;
      var $28=$psize;
      var $29=$p;
      var $head=(($29+4)|0);
      HEAP32[(($head)>>2)]=$28;
      var $30=$p;
      var $31=$30;
      var $32=$psize;
      var $add_ptr24=(($31+$32)|0);
      var $33=$add_ptr24;
      var $head25=(($33+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $34=$p;
      var $35=$34;
      var $36=$psize;
      var $add26=((($36)+(4))|0);
      var $add_ptr27=(($35+$add26)|0);
      var $37=$add_ptr27;
      var $head28=(($37+4)|0);
      HEAP32[(($head28)>>2)]=0;
      var $38=$m_addr;
      var $least_addr=(($38+16)|0);
      var $39=HEAP32[(($least_addr)>>2)];
      var $cmp29=(($39)|(0))==0;
      if ($cmp29) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $40=$mm;
      var $41=$m_addr;
      var $least_addr31=(($41+16)|0);
      var $42=HEAP32[(($least_addr31)>>2)];
      var $cmp32=(($40)>>>(0)) < (($42)>>>(0));
      if ($cmp32) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $43=$mm;
      var $44=$m_addr;
      var $least_addr34=(($44+16)|0);
      HEAP32[(($least_addr34)>>2)]=$43;
      label = 15; break;
    case 15: 
      var $45=$mmsize;
      var $46=$m_addr;
      var $footprint36=(($46+432)|0);
      var $47=HEAP32[(($footprint36)>>2)];
      var $add37=((($47)+($45))|0);
      HEAP32[(($footprint36)>>2)]=$add37;
      var $48=$m_addr;
      var $max_footprint=(($48+436)|0);
      var $49=HEAP32[(($max_footprint)>>2)];
      var $cmp38=(($add37)>>>(0)) > (($49)>>>(0));
      if ($cmp38) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $50=$m_addr;
      var $footprint40=(($50+432)|0);
      var $51=HEAP32[(($footprint40)>>2)];
      var $52=$m_addr;
      var $max_footprint41=(($52+436)|0);
      HEAP32[(($max_footprint41)>>2)]=$51;
      label = 17; break;
    case 17: 
      var $53=$p;
      var $54=$53;
      var $add_ptr43=(($54+8)|0);
      $retval=$add_ptr43;
      label = 20; break;
    case 18: 
      label = 19; break;
    case 19: 
      $retval=0;
      label = 20; break;
    case 20: 
      var $55=$retval;
      return $55;
    default: assert(0, "bad label: " + label);
  }
}
function _init_bins($m) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $0=$i;
      var $cmp=(($0)>>>(0)) < 32;
      if ($cmp) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $1=$i;
      var $shl=$1 << 1;
      var $2=$m_addr;
      var $smallbins=(($2+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $3=$arrayidx;
      var $4=$3;
      $bin=$4;
      var $5=$bin;
      var $6=$bin;
      var $bk=(($6+12)|0);
      HEAP32[(($bk)>>2)]=$5;
      var $7=$bin;
      var $fd=(($7+8)|0);
      HEAP32[(($fd)>>2)]=$5;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      label = 3; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F77;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I218;
      var $B220;
      var $F224;
      var $TP250;
      var $H251;
      var $I252;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K305;
      var $C;
      var $F343;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr;
      var $1=$newbase_addr;
      var $add_ptr=(($1+8)|0);
      var $2=$add_ptr;
      var $and=$2 & 7;
      var $cmp=(($and)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $3=$newbase_addr;
      var $add_ptr1=(($3+8)|0);
      var $4=$add_ptr1;
      var $and2=$4 & 7;
      var $sub=(((8)-($and2))|0);
      var $and3=$sub & 7;
      var $cond = $and3;label = 5; break;
    case 5: 
      var $cond;
      var $add_ptr4=(($0+$cond)|0);
      var $5=$add_ptr4;
      $p=$5;
      var $6=$oldbase_addr;
      var $7=$oldbase_addr;
      var $add_ptr5=(($7+8)|0);
      var $8=$add_ptr5;
      var $and6=$8 & 7;
      var $cmp7=(($and6)|(0))==0;
      if ($cmp7) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $cond15 = 0;label = 8; break;
    case 7: 
      var $9=$oldbase_addr;
      var $add_ptr10=(($9+8)|0);
      var $10=$add_ptr10;
      var $and11=$10 & 7;
      var $sub12=(((8)-($and11))|0);
      var $and13=$sub12 & 7;
      var $cond15 = $and13;label = 8; break;
    case 8: 
      var $cond15;
      var $add_ptr16=(($6+$cond15)|0);
      var $11=$add_ptr16;
      $oldfirst=$11;
      var $12=$oldfirst;
      var $13=$12;
      var $14=$p;
      var $15=$14;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$15;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $16=$p;
      var $17=$16;
      var $18=$nb_addr;
      var $add_ptr17=(($17+$18)|0);
      var $19=$add_ptr17;
      $q=$19;
      var $20=$psize;
      var $21=$nb_addr;
      var $sub18=((($20)-($21))|0);
      $qsize=$sub18;
      var $22=$nb_addr;
      var $or=$22 | 1;
      var $or19=$or | 2;
      var $23=$p;
      var $head=(($23+4)|0);
      HEAP32[(($head)>>2)]=$or19;
      var $24=$oldfirst;
      var $25=$m_addr;
      var $top=(($25+24)|0);
      var $26=HEAP32[(($top)>>2)];
      var $cmp20=(($24)|(0))==(($26)|(0));
      if ($cmp20) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $27=$qsize;
      var $28=$m_addr;
      var $topsize=(($28+12)|0);
      var $29=HEAP32[(($topsize)>>2)];
      var $add=((($29)+($27))|0);
      HEAP32[(($topsize)>>2)]=$add;
      $tsize=$add;
      var $30=$q;
      var $31=$m_addr;
      var $top21=(($31+24)|0);
      HEAP32[(($top21)>>2)]=$30;
      var $32=$tsize;
      var $or22=$32 | 1;
      var $33=$q;
      var $head23=(($33+4)|0);
      HEAP32[(($head23)>>2)]=$or22;
      label = 119; break;
    case 10: 
      var $34=$oldfirst;
      var $35=$m_addr;
      var $dv=(($35+20)|0);
      var $36=HEAP32[(($dv)>>2)];
      var $cmp24=(($34)|(0))==(($36)|(0));
      if ($cmp24) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $37=$qsize;
      var $38=$m_addr;
      var $dvsize=(($38+8)|0);
      var $39=HEAP32[(($dvsize)>>2)];
      var $add26=((($39)+($37))|0);
      HEAP32[(($dvsize)>>2)]=$add26;
      $dsize=$add26;
      var $40=$q;
      var $41=$m_addr;
      var $dv27=(($41+20)|0);
      HEAP32[(($dv27)>>2)]=$40;
      var $42=$dsize;
      var $or28=$42 | 1;
      var $43=$q;
      var $head29=(($43+4)|0);
      HEAP32[(($head29)>>2)]=$or28;
      var $44=$dsize;
      var $45=$q;
      var $46=$45;
      var $47=$dsize;
      var $add_ptr30=(($46+$47)|0);
      var $48=$add_ptr30;
      var $prev_foot=(($48)|0);
      HEAP32[(($prev_foot)>>2)]=$44;
      label = 118; break;
    case 12: 
      var $49=$oldfirst;
      var $head32=(($49+4)|0);
      var $50=HEAP32[(($head32)>>2)];
      var $and33=$50 & 3;
      var $cmp34=(($and33)|(0))!=1;
      if ($cmp34) { label = 82; break; } else { label = 13; break; }
    case 13: 
      var $51=$oldfirst;
      var $head36=(($51+4)|0);
      var $52=HEAP32[(($head36)>>2)];
      var $and37=$52 & -8;
      $nsize=$and37;
      var $53=$nsize;
      var $shr=$53 >>> 3;
      var $cmp38=(($shr)>>>(0)) < 32;
      if ($cmp38) { label = 14; break; } else { label = 32; break; }
    case 14: 
      var $54=$oldfirst;
      var $fd=(($54+8)|0);
      var $55=HEAP32[(($fd)>>2)];
      $F=$55;
      var $56=$oldfirst;
      var $bk=(($56+12)|0);
      var $57=HEAP32[(($bk)>>2)];
      $B=$57;
      var $58=$nsize;
      var $shr40=$58 >>> 3;
      $I=$shr40;
      var $59=$F;
      var $60=$I;
      var $shl=$60 << 1;
      var $61=$m_addr;
      var $smallbins=(($61+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $62=$arrayidx;
      var $63=$62;
      var $cmp41=(($59)|(0))==(($63)|(0));
      if ($cmp41) { var $72 = 1;label = 18; break; } else { label = 15; break; }
    case 15: 
      var $64=$F;
      var $65=$64;
      var $66=$m_addr;
      var $least_addr=(($66+16)|0);
      var $67=HEAP32[(($least_addr)>>2)];
      var $cmp42=(($65)>>>(0)) >= (($67)>>>(0));
      if ($cmp42) { label = 16; break; } else { var $71 = 0;label = 17; break; }
    case 16: 
      var $68=$F;
      var $bk43=(($68+12)|0);
      var $69=HEAP32[(($bk43)>>2)];
      var $70=$oldfirst;
      var $cmp44=(($69)|(0))==(($70)|(0));
      var $71 = $cmp44;label = 17; break;
    case 17: 
      var $71;
      var $72 = $71;label = 18; break;
    case 18: 
      var $72;
      var $lor_ext=(($72)&(1));
      var $expval=($lor_ext);
      var $tobool=(($expval)|(0))!=0;
      if ($tobool) { label = 19; break; } else { label = 30; break; }
    case 19: 
      var $73=$B;
      var $74=$F;
      var $cmp46=(($73)|(0))==(($74)|(0));
      if ($cmp46) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $75=$I;
      var $shl48=1 << $75;
      var $neg=$shl48 ^ -1;
      var $76=$m_addr;
      var $smallmap=(($76)|0);
      var $77=HEAP32[(($smallmap)>>2)];
      var $and49=$77 & $neg;
      HEAP32[(($smallmap)>>2)]=$and49;
      label = 29; break;
    case 21: 
      var $78=$B;
      var $79=$I;
      var $shl51=$79 << 1;
      var $80=$m_addr;
      var $smallbins52=(($80+40)|0);
      var $arrayidx53=(($smallbins52+($shl51<<2))|0);
      var $81=$arrayidx53;
      var $82=$81;
      var $cmp54=(($78)|(0))==(($82)|(0));
      if ($cmp54) { var $91 = 1;label = 25; break; } else { label = 22; break; }
    case 22: 
      var $83=$B;
      var $84=$83;
      var $85=$m_addr;
      var $least_addr56=(($85+16)|0);
      var $86=HEAP32[(($least_addr56)>>2)];
      var $cmp57=(($84)>>>(0)) >= (($86)>>>(0));
      if ($cmp57) { label = 23; break; } else { var $90 = 0;label = 24; break; }
    case 23: 
      var $87=$B;
      var $fd59=(($87+8)|0);
      var $88=HEAP32[(($fd59)>>2)];
      var $89=$oldfirst;
      var $cmp60=(($88)|(0))==(($89)|(0));
      var $90 = $cmp60;label = 24; break;
    case 24: 
      var $90;
      var $91 = $90;label = 25; break;
    case 25: 
      var $91;
      var $lor_ext63=(($91)&(1));
      var $expval64=($lor_ext63);
      var $tobool65=(($expval64)|(0))!=0;
      if ($tobool65) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $92=$B;
      var $93=$F;
      var $bk67=(($93+12)|0);
      HEAP32[(($bk67)>>2)]=$92;
      var $94=$F;
      var $95=$B;
      var $fd68=(($95+8)|0);
      HEAP32[(($fd68)>>2)]=$94;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!";
    case 28: 
      label = 29; break;
    case 29: 
      label = 31; break;
    case 30: 
      _abort();
      throw "Reached an unreachable!";
    case 31: 
      label = 81; break;
    case 32: 
      var $96=$oldfirst;
      var $97=$96;
      $TP=$97;
      var $98=$TP;
      var $parent=(($98+24)|0);
      var $99=HEAP32[(($parent)>>2)];
      $XP=$99;
      var $100=$TP;
      var $bk74=(($100+12)|0);
      var $101=HEAP32[(($bk74)>>2)];
      var $102=$TP;
      var $cmp75=(($101)|(0))!=(($102)|(0));
      if ($cmp75) { label = 33; break; } else { label = 40; break; }
    case 33: 
      var $103=$TP;
      var $fd78=(($103+8)|0);
      var $104=HEAP32[(($fd78)>>2)];
      $F77=$104;
      var $105=$TP;
      var $bk79=(($105+12)|0);
      var $106=HEAP32[(($bk79)>>2)];
      $R=$106;
      var $107=$F77;
      var $108=$107;
      var $109=$m_addr;
      var $least_addr80=(($109+16)|0);
      var $110=HEAP32[(($least_addr80)>>2)];
      var $cmp81=(($108)>>>(0)) >= (($110)>>>(0));
      if ($cmp81) { label = 34; break; } else { var $117 = 0;label = 36; break; }
    case 34: 
      var $111=$F77;
      var $bk82=(($111+12)|0);
      var $112=HEAP32[(($bk82)>>2)];
      var $113=$TP;
      var $cmp83=(($112)|(0))==(($113)|(0));
      if ($cmp83) { label = 35; break; } else { var $117 = 0;label = 36; break; }
    case 35: 
      var $114=$R;
      var $fd85=(($114+8)|0);
      var $115=HEAP32[(($fd85)>>2)];
      var $116=$TP;
      var $cmp86=(($115)|(0))==(($116)|(0));
      var $117 = $cmp86;label = 36; break;
    case 36: 
      var $117;
      var $land_ext=(($117)&(1));
      var $expval88=($land_ext);
      var $tobool89=(($expval88)|(0))!=0;
      if ($tobool89) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $118=$R;
      var $119=$F77;
      var $bk91=(($119+12)|0);
      HEAP32[(($bk91)>>2)]=$118;
      var $120=$F77;
      var $121=$R;
      var $fd92=(($121+8)|0);
      HEAP32[(($fd92)>>2)]=$120;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!";
    case 39: 
      label = 52; break;
    case 40: 
      var $122=$TP;
      var $child=(($122+16)|0);
      var $arrayidx96=(($child+4)|0);
      $RP=$arrayidx96;
      var $123=HEAP32[(($arrayidx96)>>2)];
      $R=$123;
      var $cmp97=(($123)|(0))!=0;
      if ($cmp97) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $124=$TP;
      var $child98=(($124+16)|0);
      var $arrayidx99=(($child98)|0);
      $RP=$arrayidx99;
      var $125=HEAP32[(($arrayidx99)>>2)];
      $R=$125;
      var $cmp100=(($125)|(0))!=0;
      if ($cmp100) { label = 42; break; } else { label = 51; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $126=$R;
      var $child102=(($126+16)|0);
      var $arrayidx103=(($child102+4)|0);
      $CP=$arrayidx103;
      var $127=HEAP32[(($arrayidx103)>>2)];
      var $cmp104=(($127)|(0))!=0;
      if ($cmp104) { var $130 = 1;label = 45; break; } else { label = 44; break; }
    case 44: 
      var $128=$R;
      var $child106=(($128+16)|0);
      var $arrayidx107=(($child106)|0);
      $CP=$arrayidx107;
      var $129=HEAP32[(($arrayidx107)>>2)];
      var $cmp108=(($129)|(0))!=0;
      var $130 = $cmp108;label = 45; break;
    case 45: 
      var $130;
      if ($130) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $131=$CP;
      $RP=$131;
      var $132=HEAP32[(($131)>>2)];
      $R=$132;
      label = 43; break;
    case 47: 
      var $133=$RP;
      var $134=$133;
      var $135=$m_addr;
      var $least_addr111=(($135+16)|0);
      var $136=HEAP32[(($least_addr111)>>2)];
      var $cmp112=(($134)>>>(0)) >= (($136)>>>(0));
      var $conv=(($cmp112)&(1));
      var $expval113=($conv);
      var $tobool114=(($expval113)|(0))!=0;
      if ($tobool114) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $137=$RP;
      HEAP32[(($137)>>2)]=0;
      label = 50; break;
    case 49: 
      _abort();
      throw "Reached an unreachable!";
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $138=$XP;
      var $cmp120=(($138)|(0))!=0;
      if ($cmp120) { label = 53; break; } else { label = 80; break; }
    case 53: 
      var $139=$TP;
      var $index=(($139+28)|0);
      var $140=HEAP32[(($index)>>2)];
      var $141=$m_addr;
      var $treebins=(($141+304)|0);
      var $arrayidx123=(($treebins+($140<<2))|0);
      $H=$arrayidx123;
      var $142=$TP;
      var $143=$H;
      var $144=HEAP32[(($143)>>2)];
      var $cmp124=(($142)|(0))==(($144)|(0));
      if ($cmp124) { label = 54; break; } else { label = 57; break; }
    case 54: 
      var $145=$R;
      var $146=$H;
      HEAP32[(($146)>>2)]=$145;
      var $cmp127=(($145)|(0))==0;
      if ($cmp127) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $147=$TP;
      var $index130=(($147+28)|0);
      var $148=HEAP32[(($index130)>>2)];
      var $shl131=1 << $148;
      var $neg132=$shl131 ^ -1;
      var $149=$m_addr;
      var $treemap=(($149+4)|0);
      var $150=HEAP32[(($treemap)>>2)];
      var $and133=$150 & $neg132;
      HEAP32[(($treemap)>>2)]=$and133;
      label = 56; break;
    case 56: 
      label = 64; break;
    case 57: 
      var $151=$XP;
      var $152=$151;
      var $153=$m_addr;
      var $least_addr136=(($153+16)|0);
      var $154=HEAP32[(($least_addr136)>>2)];
      var $cmp137=(($152)>>>(0)) >= (($154)>>>(0));
      var $conv138=(($cmp137)&(1));
      var $expval139=($conv138);
      var $tobool140=(($expval139)|(0))!=0;
      if ($tobool140) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $155=$XP;
      var $child142=(($155+16)|0);
      var $arrayidx143=(($child142)|0);
      var $156=HEAP32[(($arrayidx143)>>2)];
      var $157=$TP;
      var $cmp144=(($156)|(0))==(($157)|(0));
      if ($cmp144) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $158=$R;
      var $159=$XP;
      var $child147=(($159+16)|0);
      var $arrayidx148=(($child147)|0);
      HEAP32[(($arrayidx148)>>2)]=$158;
      label = 61; break;
    case 60: 
      var $160=$R;
      var $161=$XP;
      var $child150=(($161+16)|0);
      var $arrayidx151=(($child150+4)|0);
      HEAP32[(($arrayidx151)>>2)]=$160;
      label = 61; break;
    case 61: 
      label = 63; break;
    case 62: 
      _abort();
      throw "Reached an unreachable!";
    case 63: 
      label = 64; break;
    case 64: 
      var $162=$R;
      var $cmp156=(($162)|(0))!=0;
      if ($cmp156) { label = 65; break; } else { label = 79; break; }
    case 65: 
      var $163=$R;
      var $164=$163;
      var $165=$m_addr;
      var $least_addr159=(($165+16)|0);
      var $166=HEAP32[(($least_addr159)>>2)];
      var $cmp160=(($164)>>>(0)) >= (($166)>>>(0));
      var $conv161=(($cmp160)&(1));
      var $expval162=($conv161);
      var $tobool163=(($expval162)|(0))!=0;
      if ($tobool163) { label = 66; break; } else { label = 77; break; }
    case 66: 
      var $167=$XP;
      var $168=$R;
      var $parent165=(($168+24)|0);
      HEAP32[(($parent165)>>2)]=$167;
      var $169=$TP;
      var $child166=(($169+16)|0);
      var $arrayidx167=(($child166)|0);
      var $170=HEAP32[(($arrayidx167)>>2)];
      $C0=$170;
      var $cmp168=(($170)|(0))!=0;
      if ($cmp168) { label = 67; break; } else { label = 71; break; }
    case 67: 
      var $171=$C0;
      var $172=$171;
      var $173=$m_addr;
      var $least_addr171=(($173+16)|0);
      var $174=HEAP32[(($least_addr171)>>2)];
      var $cmp172=(($172)>>>(0)) >= (($174)>>>(0));
      var $conv173=(($cmp172)&(1));
      var $expval174=($conv173);
      var $tobool175=(($expval174)|(0))!=0;
      if ($tobool175) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $175=$C0;
      var $176=$R;
      var $child177=(($176+16)|0);
      var $arrayidx178=(($child177)|0);
      HEAP32[(($arrayidx178)>>2)]=$175;
      var $177=$R;
      var $178=$C0;
      var $parent179=(($178+24)|0);
      HEAP32[(($parent179)>>2)]=$177;
      label = 70; break;
    case 69: 
      _abort();
      throw "Reached an unreachable!";
    case 70: 
      label = 71; break;
    case 71: 
      var $179=$TP;
      var $child183=(($179+16)|0);
      var $arrayidx184=(($child183+4)|0);
      var $180=HEAP32[(($arrayidx184)>>2)];
      $C1=$180;
      var $cmp185=(($180)|(0))!=0;
      if ($cmp185) { label = 72; break; } else { label = 76; break; }
    case 72: 
      var $181=$C1;
      var $182=$181;
      var $183=$m_addr;
      var $least_addr188=(($183+16)|0);
      var $184=HEAP32[(($least_addr188)>>2)];
      var $cmp189=(($182)>>>(0)) >= (($184)>>>(0));
      var $conv190=(($cmp189)&(1));
      var $expval191=($conv190);
      var $tobool192=(($expval191)|(0))!=0;
      if ($tobool192) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $185=$C1;
      var $186=$R;
      var $child194=(($186+16)|0);
      var $arrayidx195=(($child194+4)|0);
      HEAP32[(($arrayidx195)>>2)]=$185;
      var $187=$R;
      var $188=$C1;
      var $parent196=(($188+24)|0);
      HEAP32[(($parent196)>>2)]=$187;
      label = 75; break;
    case 74: 
      _abort();
      throw "Reached an unreachable!";
    case 75: 
      label = 76; break;
    case 76: 
      label = 78; break;
    case 77: 
      _abort();
      throw "Reached an unreachable!";
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $189=$oldfirst;
      var $190=$189;
      var $191=$nsize;
      var $add_ptr205=(($190+$191)|0);
      var $192=$add_ptr205;
      $oldfirst=$192;
      var $193=$nsize;
      var $194=$qsize;
      var $add206=((($194)+($193))|0);
      $qsize=$add206;
      label = 82; break;
    case 82: 
      var $195=$oldfirst;
      var $head208=(($195+4)|0);
      var $196=HEAP32[(($head208)>>2)];
      var $and209=$196 & -2;
      HEAP32[(($head208)>>2)]=$and209;
      var $197=$qsize;
      var $or210=$197 | 1;
      var $198=$q;
      var $head211=(($198+4)|0);
      HEAP32[(($head211)>>2)]=$or210;
      var $199=$qsize;
      var $200=$q;
      var $201=$200;
      var $202=$qsize;
      var $add_ptr212=(($201+$202)|0);
      var $203=$add_ptr212;
      var $prev_foot213=(($203)|0);
      HEAP32[(($prev_foot213)>>2)]=$199;
      var $204=$qsize;
      var $shr214=$204 >>> 3;
      var $cmp215=(($shr214)>>>(0)) < 32;
      if ($cmp215) { label = 83; break; } else { label = 90; break; }
    case 83: 
      var $205=$qsize;
      var $shr219=$205 >>> 3;
      $I218=$shr219;
      var $206=$I218;
      var $shl221=$206 << 1;
      var $207=$m_addr;
      var $smallbins222=(($207+40)|0);
      var $arrayidx223=(($smallbins222+($shl221<<2))|0);
      var $208=$arrayidx223;
      var $209=$208;
      $B220=$209;
      var $210=$B220;
      $F224=$210;
      var $211=$m_addr;
      var $smallmap225=(($211)|0);
      var $212=HEAP32[(($smallmap225)>>2)];
      var $213=$I218;
      var $shl226=1 << $213;
      var $and227=$212 & $shl226;
      var $tobool228=(($and227)|(0))!=0;
      if ($tobool228) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $214=$I218;
      var $shl230=1 << $214;
      var $215=$m_addr;
      var $smallmap231=(($215)|0);
      var $216=HEAP32[(($smallmap231)>>2)];
      var $or232=$216 | $shl230;
      HEAP32[(($smallmap231)>>2)]=$or232;
      label = 89; break;
    case 85: 
      var $217=$B220;
      var $fd234=(($217+8)|0);
      var $218=HEAP32[(($fd234)>>2)];
      var $219=$218;
      var $220=$m_addr;
      var $least_addr235=(($220+16)|0);
      var $221=HEAP32[(($least_addr235)>>2)];
      var $cmp236=(($219)>>>(0)) >= (($221)>>>(0));
      var $conv237=(($cmp236)&(1));
      var $expval238=($conv237);
      var $tobool239=(($expval238)|(0))!=0;
      if ($tobool239) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $222=$B220;
      var $fd241=(($222+8)|0);
      var $223=HEAP32[(($fd241)>>2)];
      $F224=$223;
      label = 88; break;
    case 87: 
      _abort();
      throw "Reached an unreachable!";
    case 88: 
      label = 89; break;
    case 89: 
      var $224=$q;
      var $225=$B220;
      var $fd245=(($225+8)|0);
      HEAP32[(($fd245)>>2)]=$224;
      var $226=$q;
      var $227=$F224;
      var $bk246=(($227+12)|0);
      HEAP32[(($bk246)>>2)]=$226;
      var $228=$F224;
      var $229=$q;
      var $fd247=(($229+8)|0);
      HEAP32[(($fd247)>>2)]=$228;
      var $230=$B220;
      var $231=$q;
      var $bk248=(($231+12)|0);
      HEAP32[(($bk248)>>2)]=$230;
      label = 117; break;
    case 90: 
      var $232=$q;
      var $233=$232;
      $TP250=$233;
      var $234=$qsize;
      var $shr253=$234 >>> 8;
      $X=$shr253;
      var $235=$X;
      var $cmp254=(($235)|(0))==0;
      if ($cmp254) { label = 91; break; } else { label = 92; break; }
    case 91: 
      $I252=0;
      label = 96; break;
    case 92: 
      var $236=$X;
      var $cmp258=(($236)>>>(0)) > 65535;
      if ($cmp258) { label = 93; break; } else { label = 94; break; }
    case 93: 
      $I252=31;
      label = 95; break;
    case 94: 
      var $237=$X;
      $Y=$237;
      var $238=$Y;
      var $sub262=((($238)-(256))|0);
      var $shr263=$sub262 >>> 16;
      var $and264=$shr263 & 8;
      $N=$and264;
      var $239=$N;
      var $240=$Y;
      var $shl265=$240 << $239;
      $Y=$shl265;
      var $sub266=((($shl265)-(4096))|0);
      var $shr267=$sub266 >>> 16;
      var $and268=$shr267 & 4;
      $K=$and268;
      var $241=$K;
      var $242=$N;
      var $add269=((($242)+($241))|0);
      $N=$add269;
      var $243=$K;
      var $244=$Y;
      var $shl270=$244 << $243;
      $Y=$shl270;
      var $sub271=((($shl270)-(16384))|0);
      var $shr272=$sub271 >>> 16;
      var $and273=$shr272 & 2;
      $K=$and273;
      var $245=$N;
      var $add274=((($245)+($and273))|0);
      $N=$add274;
      var $246=$N;
      var $sub275=(((14)-($246))|0);
      var $247=$K;
      var $248=$Y;
      var $shl276=$248 << $247;
      $Y=$shl276;
      var $shr277=$shl276 >>> 15;
      var $add278=((($sub275)+($shr277))|0);
      $K=$add278;
      var $249=$K;
      var $shl279=$249 << 1;
      var $250=$qsize;
      var $251=$K;
      var $add280=((($251)+(7))|0);
      var $shr281=$250 >>> (($add280)>>>(0));
      var $and282=$shr281 & 1;
      var $add283=((($shl279)+($and282))|0);
      $I252=$add283;
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $252=$I252;
      var $253=$m_addr;
      var $treebins286=(($253+304)|0);
      var $arrayidx287=(($treebins286+($252<<2))|0);
      $H251=$arrayidx287;
      var $254=$I252;
      var $255=$TP250;
      var $index288=(($255+28)|0);
      HEAP32[(($index288)>>2)]=$254;
      var $256=$TP250;
      var $child289=(($256+16)|0);
      var $arrayidx290=(($child289+4)|0);
      HEAP32[(($arrayidx290)>>2)]=0;
      var $257=$TP250;
      var $child291=(($257+16)|0);
      var $arrayidx292=(($child291)|0);
      HEAP32[(($arrayidx292)>>2)]=0;
      var $258=$m_addr;
      var $treemap293=(($258+4)|0);
      var $259=HEAP32[(($treemap293)>>2)];
      var $260=$I252;
      var $shl294=1 << $260;
      var $and295=$259 & $shl294;
      var $tobool296=(($and295)|(0))!=0;
      if ($tobool296) { label = 98; break; } else { label = 97; break; }
    case 97: 
      var $261=$I252;
      var $shl298=1 << $261;
      var $262=$m_addr;
      var $treemap299=(($262+4)|0);
      var $263=HEAP32[(($treemap299)>>2)];
      var $or300=$263 | $shl298;
      HEAP32[(($treemap299)>>2)]=$or300;
      var $264=$TP250;
      var $265=$H251;
      HEAP32[(($265)>>2)]=$264;
      var $266=$H251;
      var $267=$266;
      var $268=$TP250;
      var $parent301=(($268+24)|0);
      HEAP32[(($parent301)>>2)]=$267;
      var $269=$TP250;
      var $270=$TP250;
      var $bk302=(($270+12)|0);
      HEAP32[(($bk302)>>2)]=$269;
      var $271=$TP250;
      var $fd303=(($271+8)|0);
      HEAP32[(($fd303)>>2)]=$269;
      label = 116; break;
    case 98: 
      var $272=$H251;
      var $273=HEAP32[(($272)>>2)];
      $T=$273;
      var $274=$qsize;
      var $275=$I252;
      var $cmp306=(($275)|(0))==31;
      if ($cmp306) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $cond315 = 0;label = 101; break;
    case 100: 
      var $276=$I252;
      var $shr310=$276 >>> 1;
      var $add311=((($shr310)+(8))|0);
      var $sub312=((($add311)-(2))|0);
      var $sub313=(((31)-($sub312))|0);
      var $cond315 = $sub313;label = 101; break;
    case 101: 
      var $cond315;
      var $shl316=$274 << $cond315;
      $K305=$shl316;
      label = 102; break;
    case 102: 
      var $277=$T;
      var $head317=(($277+4)|0);
      var $278=HEAP32[(($head317)>>2)];
      var $and318=$278 & -8;
      var $279=$qsize;
      var $cmp319=(($and318)|(0))!=(($279)|(0));
      if ($cmp319) { label = 103; break; } else { label = 109; break; }
    case 103: 
      var $280=$K305;
      var $shr322=$280 >>> 31;
      var $and323=$shr322 & 1;
      var $281=$T;
      var $child324=(($281+16)|0);
      var $arrayidx325=(($child324+($and323<<2))|0);
      $C=$arrayidx325;
      var $282=$K305;
      var $shl326=$282 << 1;
      $K305=$shl326;
      var $283=$C;
      var $284=HEAP32[(($283)>>2)];
      var $cmp327=(($284)|(0))!=0;
      if ($cmp327) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $285=$C;
      var $286=HEAP32[(($285)>>2)];
      $T=$286;
      label = 108; break;
    case 105: 
      var $287=$C;
      var $288=$287;
      var $289=$m_addr;
      var $least_addr331=(($289+16)|0);
      var $290=HEAP32[(($least_addr331)>>2)];
      var $cmp332=(($288)>>>(0)) >= (($290)>>>(0));
      var $conv333=(($cmp332)&(1));
      var $expval334=($conv333);
      var $tobool335=(($expval334)|(0))!=0;
      if ($tobool335) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $291=$TP250;
      var $292=$C;
      HEAP32[(($292)>>2)]=$291;
      var $293=$T;
      var $294=$TP250;
      var $parent337=(($294+24)|0);
      HEAP32[(($parent337)>>2)]=$293;
      var $295=$TP250;
      var $296=$TP250;
      var $bk338=(($296+12)|0);
      HEAP32[(($bk338)>>2)]=$295;
      var $297=$TP250;
      var $fd339=(($297+8)|0);
      HEAP32[(($fd339)>>2)]=$295;
      label = 115; break;
    case 107: 
      _abort();
      throw "Reached an unreachable!";
    case 108: 
      label = 114; break;
    case 109: 
      var $298=$T;
      var $fd344=(($298+8)|0);
      var $299=HEAP32[(($fd344)>>2)];
      $F343=$299;
      var $300=$T;
      var $301=$300;
      var $302=$m_addr;
      var $least_addr345=(($302+16)|0);
      var $303=HEAP32[(($least_addr345)>>2)];
      var $cmp346=(($301)>>>(0)) >= (($303)>>>(0));
      if ($cmp346) { label = 110; break; } else { var $308 = 0;label = 111; break; }
    case 110: 
      var $304=$F343;
      var $305=$304;
      var $306=$m_addr;
      var $least_addr349=(($306+16)|0);
      var $307=HEAP32[(($least_addr349)>>2)];
      var $cmp350=(($305)>>>(0)) >= (($307)>>>(0));
      var $308 = $cmp350;label = 111; break;
    case 111: 
      var $308;
      var $land_ext353=(($308)&(1));
      var $expval354=($land_ext353);
      var $tobool355=(($expval354)|(0))!=0;
      if ($tobool355) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $309=$TP250;
      var $310=$F343;
      var $bk357=(($310+12)|0);
      HEAP32[(($bk357)>>2)]=$309;
      var $311=$T;
      var $fd358=(($311+8)|0);
      HEAP32[(($fd358)>>2)]=$309;
      var $312=$F343;
      var $313=$TP250;
      var $fd359=(($313+8)|0);
      HEAP32[(($fd359)>>2)]=$312;
      var $314=$T;
      var $315=$TP250;
      var $bk360=(($315+12)|0);
      HEAP32[(($bk360)>>2)]=$314;
      var $316=$TP250;
      var $parent361=(($316+24)|0);
      HEAP32[(($parent361)>>2)]=0;
      label = 115; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!";
    case 114: 
      label = 102; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      var $317=$p;
      var $318=$317;
      var $add_ptr368=(($318+8)|0);
      return $add_ptr368;
    default: assert(0, "bad label: " + label);
  }
}
function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr;
      var $top=(($0+24)|0);
      var $1=HEAP32[(($top)>>2)];
      var $2=$1;
      $old_top=$2;
      var $3=$m_addr;
      var $4=$old_top;
      var $call=_segment_holding($3, $4);
      $oldsp=$call;
      var $5=$oldsp;
      var $base=(($5)|0);
      var $6=HEAP32[(($base)>>2)];
      var $7=$oldsp;
      var $size=(($7+4)|0);
      var $8=HEAP32[(($size)>>2)];
      var $add_ptr=(($6+$8)|0);
      $old_end=$add_ptr;
      $ssize=24;
      var $9=$old_end;
      var $10=$ssize;
      var $add=((($10)+(16))|0);
      var $add1=((($add)+(7))|0);
      var $idx_neg=(((-$add1))|0);
      var $add_ptr2=(($9+$idx_neg)|0);
      $rawsp=$add_ptr2;
      var $11=$rawsp;
      var $add_ptr3=(($11+8)|0);
      var $12=$add_ptr3;
      var $and=$12 & 7;
      var $cmp=(($and)|(0))==0;
      if ($cmp) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $cond = 0;label = 5; break;
    case 4: 
      var $13=$rawsp;
      var $add_ptr4=(($13+8)|0);
      var $14=$add_ptr4;
      var $and5=$14 & 7;
      var $sub=(((8)-($and5))|0);
      var $and6=$sub & 7;
      var $cond = $and6;label = 5; break;
    case 5: 
      var $cond;
      $offset=$cond;
      var $15=$rawsp;
      var $16=$offset;
      var $add_ptr7=(($15+$16)|0);
      $asp=$add_ptr7;
      var $17=$asp;
      var $18=$old_top;
      var $add_ptr8=(($18+16)|0);
      var $cmp9=(($17)>>>(0)) < (($add_ptr8)>>>(0));
      if ($cmp9) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $19=$old_top;
      var $cond13 = $19;label = 8; break;
    case 7: 
      var $20=$asp;
      var $cond13 = $20;label = 8; break;
    case 8: 
      var $cond13;
      $csp=$cond13;
      var $21=$csp;
      var $22=$21;
      $sp=$22;
      var $23=$sp;
      var $24=$23;
      var $add_ptr14=(($24+8)|0);
      var $25=$add_ptr14;
      $ss=$25;
      var $26=$sp;
      var $27=$26;
      var $28=$ssize;
      var $add_ptr15=(($27+$28)|0);
      var $29=$add_ptr15;
      $tnext=$29;
      var $30=$tnext;
      $p=$30;
      $nfences=0;
      var $31=$m_addr;
      var $32=$tbase_addr;
      var $33=$32;
      var $34=$tsize_addr;
      var $sub16=((($34)-(40))|0);
      _init_top($31, $33, $sub16);
      var $35=$ssize;
      var $or=$35 | 1;
      var $or17=$or | 2;
      var $36=$sp;
      var $head=(($36+4)|0);
      HEAP32[(($head)>>2)]=$or17;
      var $37=$ss;
      var $38=$m_addr;
      var $seg=(($38+448)|0);
      var $39=$37;
      var $40=$seg;
      assert(16 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)];
      var $41=$tbase_addr;
      var $42=$m_addr;
      var $seg18=(($42+448)|0);
      var $base19=(($seg18)|0);
      HEAP32[(($base19)>>2)]=$41;
      var $43=$tsize_addr;
      var $44=$m_addr;
      var $seg20=(($44+448)|0);
      var $size21=(($seg20+4)|0);
      HEAP32[(($size21)>>2)]=$43;
      var $45=$mmapped_addr;
      var $46=$m_addr;
      var $seg22=(($46+448)|0);
      var $sflags=(($seg22+12)|0);
      HEAP32[(($sflags)>>2)]=$45;
      var $47=$ss;
      var $48=$m_addr;
      var $seg23=(($48+448)|0);
      var $next=(($seg23+8)|0);
      HEAP32[(($next)>>2)]=$47;
      label = 9; break;
    case 9: 
      var $49=$p;
      var $50=$49;
      var $add_ptr24=(($50+4)|0);
      var $51=$add_ptr24;
      $nextp=$51;
      var $52=$p;
      var $head25=(($52+4)|0);
      HEAP32[(($head25)>>2)]=7;
      var $53=$nfences;
      var $inc=((($53)+(1))|0);
      $nfences=$inc;
      var $54=$nextp;
      var $head26=(($54+4)|0);
      var $55=$head26;
      var $56=$old_end;
      var $cmp27=(($55)>>>(0)) < (($56)>>>(0));
      if ($cmp27) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $57=$nextp;
      $p=$57;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $58=$csp;
      var $59=$old_top;
      var $cmp28=(($58)|(0))!=(($59)|(0));
      if ($cmp28) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $60=$old_top;
      var $61=$60;
      $q=$61;
      var $62=$csp;
      var $63=$old_top;
      var $sub_ptr_lhs_cast=$62;
      var $sub_ptr_rhs_cast=$63;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $psize=$sub_ptr_sub;
      var $64=$q;
      var $65=$64;
      var $66=$psize;
      var $add_ptr30=(($65+$66)|0);
      var $67=$add_ptr30;
      $tn=$67;
      var $68=$tn;
      var $head31=(($68+4)|0);
      var $69=HEAP32[(($head31)>>2)];
      var $and32=$69 & -2;
      HEAP32[(($head31)>>2)]=$and32;
      var $70=$psize;
      var $or33=$70 | 1;
      var $71=$q;
      var $head34=(($71+4)|0);
      HEAP32[(($head34)>>2)]=$or33;
      var $72=$psize;
      var $73=$q;
      var $74=$73;
      var $75=$psize;
      var $add_ptr35=(($74+$75)|0);
      var $76=$add_ptr35;
      var $prev_foot=(($76)|0);
      HEAP32[(($prev_foot)>>2)]=$72;
      var $77=$psize;
      var $shr=$77 >>> 3;
      var $cmp36=(($shr)>>>(0)) < 32;
      if ($cmp36) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $78=$psize;
      var $shr38=$78 >>> 3;
      $I=$shr38;
      var $79=$I;
      var $shl=$79 << 1;
      var $80=$m_addr;
      var $smallbins=(($80+40)|0);
      var $arrayidx=(($smallbins+($shl<<2))|0);
      var $81=$arrayidx;
      var $82=$81;
      $B=$82;
      var $83=$B;
      $F=$83;
      var $84=$m_addr;
      var $smallmap=(($84)|0);
      var $85=HEAP32[(($smallmap)>>2)];
      var $86=$I;
      var $shl39=1 << $86;
      var $and40=$85 & $shl39;
      var $tobool=(($and40)|(0))!=0;
      if ($tobool) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $87=$I;
      var $shl42=1 << $87;
      var $88=$m_addr;
      var $smallmap43=(($88)|0);
      var $89=HEAP32[(($smallmap43)>>2)];
      var $or44=$89 | $shl42;
      HEAP32[(($smallmap43)>>2)]=$or44;
      label = 21; break;
    case 17: 
      var $90=$B;
      var $fd=(($90+8)|0);
      var $91=HEAP32[(($fd)>>2)];
      var $92=$91;
      var $93=$m_addr;
      var $least_addr=(($93+16)|0);
      var $94=HEAP32[(($least_addr)>>2)];
      var $cmp46=(($92)>>>(0)) >= (($94)>>>(0));
      var $conv=(($cmp46)&(1));
      var $expval=($conv);
      var $tobool47=(($expval)|(0))!=0;
      if ($tobool47) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$B;
      var $fd49=(($95+8)|0);
      var $96=HEAP32[(($fd49)>>2)];
      $F=$96;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!";
    case 20: 
      label = 21; break;
    case 21: 
      var $97=$q;
      var $98=$B;
      var $fd53=(($98+8)|0);
      HEAP32[(($fd53)>>2)]=$97;
      var $99=$q;
      var $100=$F;
      var $bk=(($100+12)|0);
      HEAP32[(($bk)>>2)]=$99;
      var $101=$F;
      var $102=$q;
      var $fd54=(($102+8)|0);
      HEAP32[(($fd54)>>2)]=$101;
      var $103=$B;
      var $104=$q;
      var $bk55=(($104+12)|0);
      HEAP32[(($bk55)>>2)]=$103;
      label = 49; break;
    case 22: 
      var $105=$q;
      var $106=$105;
      $TP=$106;
      var $107=$psize;
      var $shr58=$107 >>> 8;
      $X=$shr58;
      var $108=$X;
      var $cmp59=(($108)|(0))==0;
      if ($cmp59) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I57=0;
      label = 28; break;
    case 24: 
      var $109=$X;
      var $cmp63=(($109)>>>(0)) > 65535;
      if ($cmp63) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I57=31;
      label = 27; break;
    case 26: 
      var $110=$X;
      $Y=$110;
      var $111=$Y;
      var $sub67=((($111)-(256))|0);
      var $shr68=$sub67 >>> 16;
      var $and69=$shr68 & 8;
      $N=$and69;
      var $112=$N;
      var $113=$Y;
      var $shl70=$113 << $112;
      $Y=$shl70;
      var $sub71=((($shl70)-(4096))|0);
      var $shr72=$sub71 >>> 16;
      var $and73=$shr72 & 4;
      $K=$and73;
      var $114=$K;
      var $115=$N;
      var $add74=((($115)+($114))|0);
      $N=$add74;
      var $116=$K;
      var $117=$Y;
      var $shl75=$117 << $116;
      $Y=$shl75;
      var $sub76=((($shl75)-(16384))|0);
      var $shr77=$sub76 >>> 16;
      var $and78=$shr77 & 2;
      $K=$and78;
      var $118=$N;
      var $add79=((($118)+($and78))|0);
      $N=$add79;
      var $119=$N;
      var $sub80=(((14)-($119))|0);
      var $120=$K;
      var $121=$Y;
      var $shl81=$121 << $120;
      $Y=$shl81;
      var $shr82=$shl81 >>> 15;
      var $add83=((($sub80)+($shr82))|0);
      $K=$add83;
      var $122=$K;
      var $shl84=$122 << 1;
      var $123=$psize;
      var $124=$K;
      var $add85=((($124)+(7))|0);
      var $shr86=$123 >>> (($add85)>>>(0));
      var $and87=$shr86 & 1;
      var $add88=((($shl84)+($and87))|0);
      $I57=$add88;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $125=$I57;
      var $126=$m_addr;
      var $treebins=(($126+304)|0);
      var $arrayidx91=(($treebins+($125<<2))|0);
      $H=$arrayidx91;
      var $127=$I57;
      var $128=$TP;
      var $index=(($128+28)|0);
      HEAP32[(($index)>>2)]=$127;
      var $129=$TP;
      var $child=(($129+16)|0);
      var $arrayidx92=(($child+4)|0);
      HEAP32[(($arrayidx92)>>2)]=0;
      var $130=$TP;
      var $child93=(($130+16)|0);
      var $arrayidx94=(($child93)|0);
      HEAP32[(($arrayidx94)>>2)]=0;
      var $131=$m_addr;
      var $treemap=(($131+4)|0);
      var $132=HEAP32[(($treemap)>>2)];
      var $133=$I57;
      var $shl95=1 << $133;
      var $and96=$132 & $shl95;
      var $tobool97=(($and96)|(0))!=0;
      if ($tobool97) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $134=$I57;
      var $shl99=1 << $134;
      var $135=$m_addr;
      var $treemap100=(($135+4)|0);
      var $136=HEAP32[(($treemap100)>>2)];
      var $or101=$136 | $shl99;
      HEAP32[(($treemap100)>>2)]=$or101;
      var $137=$TP;
      var $138=$H;
      HEAP32[(($138)>>2)]=$137;
      var $139=$H;
      var $140=$139;
      var $141=$TP;
      var $parent=(($141+24)|0);
      HEAP32[(($parent)>>2)]=$140;
      var $142=$TP;
      var $143=$TP;
      var $bk102=(($143+12)|0);
      HEAP32[(($bk102)>>2)]=$142;
      var $144=$TP;
      var $fd103=(($144+8)|0);
      HEAP32[(($fd103)>>2)]=$142;
      label = 48; break;
    case 30: 
      var $145=$H;
      var $146=HEAP32[(($145)>>2)];
      $T=$146;
      var $147=$psize;
      var $148=$I57;
      var $cmp106=(($148)|(0))==31;
      if ($cmp106) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $cond115 = 0;label = 33; break;
    case 32: 
      var $149=$I57;
      var $shr110=$149 >>> 1;
      var $add111=((($shr110)+(8))|0);
      var $sub112=((($add111)-(2))|0);
      var $sub113=(((31)-($sub112))|0);
      var $cond115 = $sub113;label = 33; break;
    case 33: 
      var $cond115;
      var $shl116=$147 << $cond115;
      $K105=$shl116;
      label = 34; break;
    case 34: 
      var $150=$T;
      var $head118=(($150+4)|0);
      var $151=HEAP32[(($head118)>>2)];
      var $and119=$151 & -8;
      var $152=$psize;
      var $cmp120=(($and119)|(0))!=(($152)|(0));
      if ($cmp120) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $153=$K105;
      var $shr123=$153 >>> 31;
      var $and124=$shr123 & 1;
      var $154=$T;
      var $child125=(($154+16)|0);
      var $arrayidx126=(($child125+($and124<<2))|0);
      $C=$arrayidx126;
      var $155=$K105;
      var $shl127=$155 << 1;
      $K105=$shl127;
      var $156=$C;
      var $157=HEAP32[(($156)>>2)];
      var $cmp128=(($157)|(0))!=0;
      if ($cmp128) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $158=$C;
      var $159=HEAP32[(($158)>>2)];
      $T=$159;
      label = 40; break;
    case 37: 
      var $160=$C;
      var $161=$160;
      var $162=$m_addr;
      var $least_addr132=(($162+16)|0);
      var $163=HEAP32[(($least_addr132)>>2)];
      var $cmp133=(($161)>>>(0)) >= (($163)>>>(0));
      var $conv134=(($cmp133)&(1));
      var $expval135=($conv134);
      var $tobool136=(($expval135)|(0))!=0;
      if ($tobool136) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $164=$TP;
      var $165=$C;
      HEAP32[(($165)>>2)]=$164;
      var $166=$T;
      var $167=$TP;
      var $parent138=(($167+24)|0);
      HEAP32[(($parent138)>>2)]=$166;
      var $168=$TP;
      var $169=$TP;
      var $bk139=(($169+12)|0);
      HEAP32[(($bk139)>>2)]=$168;
      var $170=$TP;
      var $fd140=(($170+8)|0);
      HEAP32[(($fd140)>>2)]=$168;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!";
    case 40: 
      label = 46; break;
    case 41: 
      var $171=$T;
      var $fd145=(($171+8)|0);
      var $172=HEAP32[(($fd145)>>2)];
      $F144=$172;
      var $173=$T;
      var $174=$173;
      var $175=$m_addr;
      var $least_addr146=(($175+16)|0);
      var $176=HEAP32[(($least_addr146)>>2)];
      var $cmp147=(($174)>>>(0)) >= (($176)>>>(0));
      if ($cmp147) { label = 42; break; } else { var $181 = 0;label = 43; break; }
    case 42: 
      var $177=$F144;
      var $178=$177;
      var $179=$m_addr;
      var $least_addr149=(($179+16)|0);
      var $180=HEAP32[(($least_addr149)>>2)];
      var $cmp150=(($178)>>>(0)) >= (($180)>>>(0));
      var $181 = $cmp150;label = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&(1));
      var $expval152=($land_ext);
      var $tobool153=(($expval152)|(0))!=0;
      if ($tobool153) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $182=$TP;
      var $183=$F144;
      var $bk155=(($183+12)|0);
      HEAP32[(($bk155)>>2)]=$182;
      var $184=$T;
      var $fd156=(($184+8)|0);
      HEAP32[(($fd156)>>2)]=$182;
      var $185=$F144;
      var $186=$TP;
      var $fd157=(($186+8)|0);
      HEAP32[(($fd157)>>2)]=$185;
      var $187=$T;
      var $188=$TP;
      var $bk158=(($188+12)|0);
      HEAP32[(($bk158)>>2)]=$187;
      var $189=$TP;
      var $parent159=(($189+24)|0);
      HEAP32[(($parent159)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!";
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module['callMain'](args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
